<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xamarin.UITest</name>
    </assembly>
    <members>
        <member name="T:Xamarin.UITest.Android.AndroidApp">
             <summary>
             Represents a running Android application.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.#ctor(Xamarin.UITest.Configuration.IAndroidAppConfiguration)">
             <summary>
             Main entry point for creating Android applications. Should not be called directly
             but instead be invoked through the use of <see cref="T:Xamarin.UITest.ConfigureApp" />.
             </summary>
             <param name="appConfiguration">
             The app configuration. Should be generated from <see cref="T:Xamarin.UITest.ConfigureApp" />.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Queries web view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Query``1(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppTypedSelector{``0}})">
             <summary>
             Queries view objects values using the fluent API.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view 
             objects.
             </param>
             <returns>An array containing the values of the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.InvokeJSAppQuery})">
             <summary>
             Invokes Javascript on view objects using the fluent API.
             </summary>
             <param name="query">Entry point for the fluent API to specify the elements.</param>
             <returns>An array of strings representing the results.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Flash(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Highlights the results of the query by making them flash. Specify view elements using the fluent API. 
             Defaults to all view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the elements. If left as <c>null</c> flashes all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.EnterText(System.String)">
             <summary>
             Enters text into the currently focused element.
             </summary>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.EnterText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.EnterText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ClearText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ClearText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ClearText">
             <summary>
             Clears text from the currently focused element. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Tap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one 
             will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Tap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one 
             will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.TapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a tap / touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to tap.</param>
             <param name="y">The y coordinate to tap.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.TouchAndHold(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a continuous touch gesture on the matched element. If multiple elements are matched, the first 
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.TouchAndHoldCoordinates(System.Single,System.Single)">
             <summary>
             Performs a continuous touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DragAndDrop(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>&gt;
             Performs a long touch on an item, followed by dragging the item to a second item and dropping it
             </summary>
             <param name="from">The query of the item to be dragged</param>"&gt; 
             <param name="to">The query of the location for the item to be dropped</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DragAndDrop(System.String,System.String)">
             <summary>&gt;
             Performs a long touch on an item, followed by dragging the item to a second item and dropping it
             </summary>
             <param name="from">Marked selector of the from element.</param>
             <param name="to">Marked selector of the to element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DragAndDrop(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.Android.DropLocation,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Int32,System.Action)">
             <summary>&gt;
             Performs a long touch on an item, followed by dragging the item to a second item and dropping it
             </summary>
             <param name="from">The query of the item to be dragged</param>"&gt; 
             <param name="to">The query of the location for the item to be dropped</param>
             <param name="placement">
             The placement of the drop (on top, above, below, left, right) relative to the to query
             </param>
             <param name="holdTime">Time to hold on the from query</param>
             <param name="hangTime">Time to hold above the to query</param>
             <param name="steps">The number of steps desired to drag the item, higher for a slower drag</param>
             <param name="afterStepAction">Action to perform after each step</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DoubleTap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DoubleTap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the 
             first one will be used.
             This version is specifically for queries on web views
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DoubleTapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a quick double tap / touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PinchToZoomIn(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view in. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PinchToZoomInCoordinates(System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures to zoom the view in on the given coordinates.
             </summary>
             <param name="x">The x coordinate of the center of the pinch.</param>
             <param name="y">The y coordinate of the center of the pinch.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PinchToZoomOut(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view out. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PinchToZoomOutCoordinates(System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures to zoom the view in on the given coordinates.
             </summary>
             <param name="x">The x coordinate of the center of the pinch.</param>
             <param name="y">The y coordinate of the center of the pinch.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DragCoordinates(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs a continuous drag gesture between 2 points.
             </summary>
             <param name="fromX">The x coordinate to start dragging from.</param>
             <param name="fromY">The y coordinate to start dragging from.</param>
             <param name="toX">The x coordinate to drag to.</param>
             <param name="toY">The y coordinate to drag to.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRight">
             <summary>
             Performs a left to right swipe gesture.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRight(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeftToRight(System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture.
             </summary>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeftToRight(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeftToRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeftToRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeft">
             <summary>
             Performs a right to left swipe gesture.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeft(System.String)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRightToLeft(System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture.
             </summary>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRightToLeft(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRightToLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SwipeRightToLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollUp(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls up on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollDown(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls down on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls left on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls right on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollLeftTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll left until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollLeftTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll left until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollRightTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll right until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollRightTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll right until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToVerticalEnd(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its bottom child element is visible. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="withinQuery">Entry point for the fluent API to specify the elements.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToVerticalStart(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its top child element is visible. If multiple elements are matched, 
             the first one will be used.
             <param name="withinQuery">Entry point for the fluent API to specify the elements.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToHorizontalEnd(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its rightmost child element is visible. If multiple elements are 
             matched, the first one will be used.
             </summary>
             <param name="withinQuery">Entry point for the fluent API to specify the elements.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToHorizontalStart(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its leftmost child element is visible. If multiple elements are 
             matched, the first one will be used.
             <param name="withinQuery">Entry point for the fluent API to specify the elements.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the screen to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Back">
             <summary>
             Presses the back button of the device. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PressVolumeUp">
             <summary>
             Presses the volume up button on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PressVolumeDown">
             <summary>
             Presses the volume down button on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PressMenu">
             <summary>
             Presses the menu button of the device. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PressEnter">
             <summary>
             Presses the enter key in the app. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PressUserAction(System.Nullable{Xamarin.UITest.Android.UserAction})">
             <summary>
             Presses the user action in the app.
             </summary>
             <param name="action">
             Use Action <c>action</c>, if null then the default action for the focused element is used.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DismissKeyboard">
             <summary>
             Hides keyboard if present
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SetOrientationPortrait">
             <summary>
             Changes the current activity orientation to portrait mode.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SetOrientationLandscape">
             <summary>
             Changes the current activity orientation to landscape mode.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitFor(System.Func{System.Boolean},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Generic wait function that will repeatly call the <c>predicate</c> function until it returns <c>true</c>. 
             Throws a <see cref="T:System.TimeoutException" /> if the predicate is not fullfilled within the time limit.
             </summary>
             <param name="predicate">Predicate function that should return <c>true</c> when waiting is complete.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each call to the predicate.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the predicate returns <c>true</c>.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitForElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitForNoElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitForElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitForNoElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Screenshot(System.String)">
             <summary>
             Takes a screenshot of the app in it's current state. This is used to denote test steps in the Xamarin 
             Test Cloud.
             </summary>
             <param name="title">The title of screenshot, used as step name.</param>
             <returns>The screenshot file.</returns>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidApp.Print">
             <summary>
             Contains helper methods for outputting the result of queries instead of resorting to 
             <see cref="T:System.Console" />.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Repl">
             <summary>
             Starts an interactive REPL (Read-Eval-Print-Loop) for app exploration and pauses test execution until 
             it is closed.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Invoke(System.String,System.Object)">
             <summary>
             Invokes a method on the app's main activity. For Xamarin apps, methods must be exposed using attributes 
             as shown below.
             
             Android example in activity:
             
             <code>
             [Export]
             public string MyInvokeMethod(string arg)
             {
                 return "uitest";
             }
             </code>
             </summary>
             <param name="methodName">The name of the method to invoke.</param>
             <param name="argument">The argument to pass to the method.</param>
             <returns>The result of the invocation.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Invoke(System.String,System.Object[])">
             <summary>
             Invokes a method on the app's main activity. For Xamarin apps, methods must be exposed using attributes 
             as shown below.
             
             Android example in activity:
             
             <code>
             [Export]
             public string MyInvokeMethod(string arg, string arg2)
             {
                 return "uitest";
             }
             </code>
             </summary>
             <param name="methodName">The name of the method to invoke.</param>
             <param name="arguments">An array of arguments to pass to the method.</param>
             <returns>The result of the invocation.</returns>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidApp.Config">
             <summary>
             Contains runtime information about the currently running device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidApp.Xamarin#UITest#IApp#Device">
             <summary>
             Runtime information and control of the currently running device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidApp.Device">
             <summary>
             Runtime information and control of the currently running device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidApp.TestServer">
             <summary>
             Allows HTTP access to the test server running on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Query(System.String)">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Flash(System.String)">
             <summary>
             Highlights the results of the query by making them flash. Specify view elements using marked string. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.EnterText(System.String,System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ClearText(System.String)">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.Tap(System.String)">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one 
             will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.TouchAndHold(System.String)">
             <summary>
             Performs a continuous touch gesture on the matched element. If multiple elements are matched, the first 
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DoubleTap(System.String)">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PinchToZoomIn(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view in. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.PinchToZoomOut(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view out. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitForNoElement(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.WaitForElement(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.DragAndDrop(System.String,System.String,Xamarin.UITest.Android.DropLocation,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Int32,System.Action)">
             <summary>
             Performs a long touch on an item, followed by dragging the item to a second item and dropping it
             </summary>
             <param name="fromMarked">
             Marked selector for the item to be dragged. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="toMarked">
             Marked selector for the location for the item to be dropped. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="placement">
             The placement of the drop (on top, above, below, left, right) relative to the to query
             </param>
             <param name="holdTime">Time to hold on the from query</param>
             <param name="hangTime">Time to hold above the to query</param>
             <param name="steps">The number of steps desired to drag the item, higher for a slower drag</param>
             <param name="afterStepAction">Action to perform after each step</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollUp(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls up on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollDown(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls down on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollLeft(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls left on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollRight(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls right on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollUpTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollDownTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollLeftTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll left until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollLeftTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll left until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollRightTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll right until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollRightTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll right until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToVerticalEnd(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its bottom child element is visible. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToVerticalStart(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its top child element is visible. If multiple elements are matched, 
             the first one will be used.
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToHorizontalEnd(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its rightmost child element is visible. If multiple elements are 
             matched, the first one will be used.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollToHorizontalStart(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll the matching element so that its leftmost child element is visible. If multiple elements are 
             matched, the first one will be used.
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.ScrollTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SetSliderValue(System.String,System.Double)">
             <summary>
             Sets the value of a slider element that matches <c>marked</c>.
             </summary>
             <param name="marked">Marked selector of the slider element to update.</param>
             <param name="value">The value to set the slider to.</param>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidApp.SetSliderValue(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double)">
             <summary>
             Sets the value of a slider element that matches <c>query</c>.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="value">The value to set the slider to.</param>
            </member>
        <member name="T:Xamarin.UITest.Android.AndroidConfig">
             <summary>
             Represents runtime information about the currently running device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidConfig.#ctor(System.Uri,System.IO.FileInfo)">
             <summary>
             Creates a new instance.
             </summary>
             <param name="deviceUri">The uri of the device.</param>
             <param name="apkFile">The running apk file.</param>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidConfig.DeviceUri">
             <summary>
             The uri of the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidConfig.ApkFile">
             <summary>
             The currently running apk file.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Android.AndroidDevice">
             <summary>
             Runtime information and control of device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidDevice.DeviceUri">
             <summary>
             The uri of the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Android.AndroidDevice.DeviceIdentifier">
             <summary>
             The identifier of the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Android.AndroidDevice.SetLocation(System.Double,System.Double)">
             <summary>
             Change GPS location of the device. 
             </summary>
             <param name="latitude"></param>
             <param name="longitude"></param>
            </member>
        <member name="T:Xamarin.UITest.Configuration.IGenericAppConfiguration">
             <summary>
             Shared configuration for apps. Not to be used directly, should be created by using the fluent <see cref="T:Xamarin.UITest.ConfigureApp" /> API.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.Debug">
             <summary>
             Enable debug logging.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.DeviceIp">
             <summary>
             The ip adress of the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.DevicePort">
             <summary>
             The port to use for communication with the test server.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.EnableScreenshots">
             <summary>
             Enable screenshots. Local screenshots are disabled by default to speed up tests.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.LogDirectory">
             <summary>
             Specify the location of the log directory for local test runs.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.IdeIntegrationMode">
             <summary>
             The IDE integration mode. Decides what settings to use in case of both explicit configuration and active IDE integration.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IGenericAppConfiguration.DisableSpecFlowIntegration">
             <summary>
             Whether to disables automatic screenshot generation after each SpecFlow step.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Configuration.StartAction">
             <summary>
             The desired state of the app after test initialization. Either the test framework can start the app or connect to an already running app in more advanced scenarios.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.StartAction.LaunchApp">
             <summary>
             Start the app after successful configuration.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.StartAction.ConnectToApp">
             <summary>
             Use the given configuration to connect to an already running app.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.ConfigureApp">
             <summary>
             Main entry point for <c>Xamarin.UITest</c>. This is a fluent API that allows you to 
             configure your app for either Android or iOS and start it.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.ConfigureApp.DeviceIp(System.String)">
             <summary>
             Configures the ip address of the device. Generally best left unset unless you are 
             running an iOS application on a physical device.
             </summary>
             <param name="ipAddress">The ip address of the device.</param>
            </member>
        <member name="M:Xamarin.UITest.ConfigureApp.DevicePort(System.Int32)">
             <summary>
             Configures the port of the device. Generally best left unset.
             </summary>
             <param name="port">The port of the Calabash HTTP server on the device.</param>
            </member>
        <member name="P:Xamarin.UITest.ConfigureApp.iOS">
             <summary>
             Specifies that the app is an iOS app.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.ConfigureApp.Android">
             <summary>
             Specifies that the app is an Android app.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.ConfigureApp.Debug">
             <summary>
             Enables debug logging from the test runner.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Events.AfterAppStartedAttribute">
             <summary>
             Can be used on static methods to register for notifications immediately after an app instance has been started.
             
             Valid parameters:
             
             - Zero arguments
             - One argument of type <see cref="T:Xamarin.UITest.IApp" />.
             - One argument of type <see cref="T:Xamarin.UITest.Android.AndroidApp" />.
             - One argument of type <see cref="T:Xamarin.UITest.iOS.iOSApp" />.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.IDevice">
             <summary>
             Runtime information and control of device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.IDevice.DeviceUri">
             <summary>
             The uri of the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.IDevice.DeviceIdentifier">
             <summary>
             The identifier of the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IDevice.SetLocation(System.Double,System.Double)">
             <summary>
             Change GPS location of the device. 
             </summary>
             <param name="latitude"></param>
             <param name="longitude"></param>
            </member>
        <member name="M:Xamarin.UITest.iOS.Instruments.EnsureXcodeSimQueriesAreSafe">
             <summary>
             Having switched Xcode versions, the first few calls to `simctl` or `instruments` will fail.
             To work around this, we call `simctl help` until no message containing `CoreSimulator` is 
             written to stderr.  The issue may be a problem with the Xcode 8 betas and this code may
             become redundant with a later Xcode release.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.iOS.iOSConfig">
             <summary>
             Represents runtime information about the currently running app / device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSConfig.DeviceUri">
             <summary>
             The uri of the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSConfig.IsPhone">
             <summary>
             Whether the current test is running on a phone.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSConfig.IsTablet">
             <summary>
             Whether the current test is running on a tablet.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.iOS.iOSDevice">
             <summary>
             Runtime information and control of device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSDevice.DeviceUri">
             <summary>
             The uri of the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSDevice.DeviceIdentifier">
             <summary>
             The identifier of the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSDevice.SetLocation(System.Double,System.Double)">
             <summary>
             Change GPS location of the device. 
             </summary>
             <param name="latitude"></param>
             <param name="longitude"></param>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSDevice.IsPhone">
             <summary>
             Whether the current test is running on a phone.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSDevice.IsTablet">
             <summary>
             Whether the current test is running on a tablet.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSDevice.IsSimulator">
             <summary>
             Whether the current test is running on a simulator.
             </summary>
             <value><c>true</c> if is simulator; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSDevice.OSVersion">
             <summary>
             What iOS version is running on the device/simulator
             </summary>
            </member>
        <member name="T:Xamarin.UITest.ITestServer">
             <summary>
             Provides access to the test server running on the device for advanced scenarios.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.ITestServer.Post(System.String,System.Object)">
             <summary>
             Performs an HTTP POST request to the test server.
             </summary>
             <param name="endpoint">The path of the request, which will be appended on the uri of the test server.</param>
             <param name="arguments">An object that will be serialized as json and posted to the test server.</param>
             <returns>The body of the the reponse.</returns>
            </member>
        <member name="M:Xamarin.UITest.ITestServer.Put(System.String,System.Byte[])">
             <summary>
             Performs an HTTP PUT request to the test server.
             </summary>
             <param name="endpoint">The path of the request, which will be appended on the uri of the test server.</param>
             <param name="data">The byte[] data to put.</param>
             <returns>The body of the the reponse.</returns>
            </member>
        <member name="M:Xamarin.UITest.ITestServer.Get(System.String)">
             <summary>
             Performs an HTTP GET request to the test server.
             </summary>
             <param name="endpoint">The path of the request, which will be appended on the uri of the test server.</param>
             <returns>The body of the the reponse.</returns>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppPrintHelper">
             <summary>
             A fluent API for making test output easier. Mirrored query methods from the app classes that print directly to <see cref="T:System.Console" />.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppPrintHelper.Visible">
             <summary>
             Prints all the visible view elements to <see cref="T:System.Console" />.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppPrintHelper.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Prints the view elements matched by <c>query</c> to <see cref="T:System.Console" />.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view objects.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppPrintHelper.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Prints the view elements matched by <c>query</c> to <see cref="T:System.Console" />.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view objects.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppPrintHelper.Query``1(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppTypedSelector{``0}})">
             <summary>
             Prints the properties matched by <c>query</c> to <see cref="T:System.Console" />.
             </summary>
             <param name="typedSelector">Entry point for the fluent API to specify the property.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppPrintHelper.Tree(System.Nullable{System.Boolean})">
             <summary>
             Prints a tree of the visible view elements.
             </summary>
             <param name="console">Output to console in color instead of default logger.</param>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppResult">
             <summary>
             Representation of a view element in the app.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppResult.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Xamarin.UITest.Queries.AppResult" /> class.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Id">
             <summary>
             The identifier of the view element.
             For Android: The id of the element.
             For iOS: The accessibilityIdentifier of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Description">
             <summary>
             A platform specific text representation of the view element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Rect">
             <summary>
             The <see cref="T:Xamarin.UITest.Queries.AppRect" /> rectangle representing the elements position and size. 
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Label">
             <summary>
             The label of the view element.
             For Android: The contentDescription of the element.
             For iOS: The accessibilityLabel of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Text">
             <summary>
             The text of the view element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Class">
             <summary>
             The class of the view element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppResult.Enabled">
             <summary>
             Whether the element is enabled or not.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppRect">
             <summary>
             Representation of a view elements position and size.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppRect.Width">
             <summary>
             The width of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppRect.Height">
             <summary>
             The height of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppRect.X">
             <summary>
             The X coordinate of the top left corner of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppRect.Y">
             <summary>
             The Y coordinate of the top left corner of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppRect.CenterX">
             <summary>
             The X coordinate of the center of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppRect.CenterY">
             <summary>
             The Y coordinate of the center of the element.
             </summary>
             <value>The center y.</value>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppRect.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Xamarin.UITest.Queries.AppRect" />.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppWebQuery">
             <summary>
             Fluent query API for specifying view elements predicates for web elements.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppWebQuery.#ctor(System.Collections.Generic.IEnumerable{Xamarin.UITest.Queries.Tokens.IQueryToken},Xamarin.UITest.Queries.QueryPlatform,System.Object[])">
             <summary>
             Initial constructor for web element queries. Should not be called directly, but used as part of the fluent API in the app classes.
             </summary>
             <param name="initialTokens">The tokens of the existing <see cref="T:Xamarin.UITest.Queries.AppQuery" />.</param>
             <param name="queryPlatform">The query target platform.</param>
             <param name="tokens">The additional tokens to add.</param>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebQuery.Xamarin#UITest#Queries#ITokenContainer#Tokens">
             <summary>
             The tokens of the current query.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppWebQuery.Index(System.Int32)">
             <summary>
             Matches the nth element of the currently matched elements.
             </summary>
             <param name="index">The zero-based index of the element to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppWebQuery.ToString">
             <summary>
             Converts the string into it's Calabash query equivalent.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppWebRect">
             <summary>
             Representation of a web elements position and size.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppWebRect.Equals(Xamarin.UITest.Queries.AppWebRect)">
             <summary>
             Determines whether the specified <see cref="T:Xamarin.UITest.Queries.AppWebRect" /> is equal to the current 
             <see cref="T:Xamarin.UITest.Queries.AppWebRect" />.
             </summary>
             <param name="other">
             The <see cref="T:Xamarin.UITest.Queries.AppWebRect" /> to compare with the current 
             <see cref="T:Xamarin.UITest.Queries.AppWebRect" />.
             </param>
             <returns>
             <c>true</c> if the specified <see cref="T:Xamarin.UITest.Queries.AppWebRect" /> is equal to the current
             <see cref="T:Xamarin.UITest.Queries.AppWebRect" />; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppWebRect.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
             <see cref="T:Xamarin.UITest.Queries.AppWebRect" />.
             </summary>
             <param name="obj">
             The <see cref="T:System.Object" /> to compare with the current <see cref="T:Xamarin.UITest.Queries.AppWebRect" />.
             </param>
             <returns>
             <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
             <see cref="T:Xamarin.UITest.Queries.AppWebRect" />; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppWebRect.GetHashCode">
             <summary>
             Serves as a hash function for a <see cref="T:Xamarin.UITest.Queries.AppWebRect" /> object.
             </summary>
             <returns>
             A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
             hash table.
             </returns>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Width">
             <summary>
             The width of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Height">
             <summary>
              The height of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.CenterX">
             <summary>
              The X coordinate of the center of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.CenterY">
             <summary>
             The Y coordinate of the center of the element."
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Top">
             <summary>
             The top property of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Bottom">
             <summary>
             The bottom property of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Left">
             <summary>
             The left property of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Right">
             <summary>
             The right property of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.X">
             <summary>
             The X property of the element, unit is screen coordinates
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebRect.Y">
             <summary>
             The Y property of the element, unit is screen coordinates
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppWebResult">
             <summary>
             Representation of a web element in the app.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.Id">
             <summary>
             The HTML id of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.NodeType">
             <summary>
             The node type of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.NodeName">
             <summary>
             The tag name of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.Class">
             <summary>
             The CSS class of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.Html">
             <summary>
             The raw HTML of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.Value">
             <summary>
             The form value of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.WebView">
             <summary>
             A platform specific text representation of the containing web view.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.TextContent">
             <summary>
             The text content of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppWebResult.Rect">
             <summary>
             The <see cref="T:Xamarin.UITest.Queries.AppWebRect" /> rectangle representing the elements position and size. 
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.IInvokeJSAppQuery">
             <summary>
             Helper interface for exposing property from the fluent query API without cluttering the fluent API itself (when using explicit interface implementation). 
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.IAppTypedSelector">
             <summary>
             Helper interface for exposing property from the fluent query API without cluttering the fluent API itself (when using explicit interface implementation). 
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IAppTypedSelector.QueryParams">
             <summary>
             The query parameters.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IAppTypedSelector.AppQuery">
             <summary>
             The app query.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IAppTypedSelector.ExplicitlyRequestedValue">
             <summary>
             The value of the query was explicitly requested.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.InvokeJSAppQuery">
             <summary>
             Fluent query API for invoking javascipt on Webviews.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.InvokeJSAppQuery.#ctor(Xamarin.UITest.Queries.AppQuery,System.String)">
             <summary>
             Initial constructor. Should not be called directly, but used as part of the fluent API in the app classes.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.InvokeJSAppQuery.Xamarin#UITest#Queries#ITokenContainer#Tokens">
             <summary>
             The tokens of the current query.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.IRect">
             <summary>
             Representation of a view elements position and size.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IRect.Width">
             <summary>
             The width of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IRect.Height">
             <summary>
             The height of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IRect.X">
             <summary>
             The X coordinate of the top left corner of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IRect.Y">
             <summary>
             The Y coordinate of the top left corner of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IRect.CenterX">
             <summary>
             The X coordinate of the center of the element.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.IRect.CenterY">
             <summary>
             The Y coordinate of the center of the element.
             </summary>
             <value>The center y.</value>
            </member>
        <member name="T:Xamarin.UITest.Queries.PropertyAppQuery">
             <summary>
             Fluent query API for specifying view elements predicates for properties.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.#ctor(Xamarin.UITest.Queries.QueryPlatform,Xamarin.UITest.Queries.AppQuery,System.String)">
             <summary>
             Initial constructor for property queries. Should not be called directly, but used as part of the fluent API in the app classes.
             </summary>
             <param name="queryPlatform">The query target platform.</param>
             <param name="appQuery">The existing <see cref="T:Xamarin.UITest.Queries.AppQuery" /> to build on.</param>
             <param name="propertyName">The name of the property to filter on.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.StartsWith(System.String)">
             <summary>
             Matches properties starting with the given text.
             </summary>
             <param name="text">The text to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.EndsWith(System.String)">
             <summary>
             Matches properties ending with the given text.
             </summary>
             <param name="text">The text to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.Contains(System.String)">
             <summary>
             Matches properties containing with the given text.
             </summary>
             <param name="text">The text to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.Like(System.String)">
             <summary>
             Matches properties like the given text. Supports * wildcards.
             </summary>
             <param name="text">The text to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.Predicate(System.String,System.String)">
             <summary>
             Matches properties matching the given predicate and text. Allows using unexposed Calabash predicates.
             </summary>
             <param name="predicate">The Calabash predicate to use.</param>
             <param name="text">The text to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.PropertyAppQuery.Value``1">
             <summary>
             Extracts the value of the property.
             </summary>
             <typeparam name="T">The expected result type of the property.</typeparam>
            </member>
        <member name="P:Xamarin.UITest.Queries.PropertyAppQuery.QueryPlatform">
             <summary>
             The target platform of the query. Useful when writing extensions methods for queries for platform differences.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.iOS.iOSApp">
             <summary>
             Represents a running iOS application.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.#ctor(Xamarin.UITest.Configuration.IiOSAppConfiguration)">
             <summary>
             Main entry point for creating iOS applications. Should not be called directly
             but instead be invoked through the use of <see cref="T:Xamarin.UITest.ConfigureApp" />.
             </summary>
             <param name="appConfiguration">
             The app configuration. Should be generated from <see cref="T:Xamarin.UITest.ConfigureApp" />.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Queries web view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Query``1(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppTypedSelector{``0}})">
             <summary>
             Queries properties on view objects using the fluent API. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the type of the property.</param>
             <typeparam name="T">The type of the property.</typeparam>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.InvokeJSAppQuery})">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Flash(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Highlights the results of the query by making them flash. Specify view elements using the fluent API. 
             Defaults to all view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the elements. If left as <c>null</c> flashes all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.EnterText(System.String)">
             <summary>
             Enters text into the currently focused element. Will fail if no keyboard is visible.
             </summary>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.EnterText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.EnterText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ClearText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ClearText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ClearText">
             <summary>
             Clears text from the currently focused element. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PressEnter">
             <summary>
             Presses the enter key in the app. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SetOrientationPortrait">
             <summary>
             Changes the device orientation to portrait mode.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SetOrientationLandscape">
             <summary>
             Changes the device orientation to landscape mode.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Tap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one will
             be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Tap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one will
             be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a tap / touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to tap.</param>
             <param name="y">The y coordinate to tap.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRight">
             <summary>
             Performs a left to right swipe gesture.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRight(System.String,System.Double,System.Int32)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeftToRight(System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture.
             </summary>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeftToRight(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeftToRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeftToRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeft">
             <summary>
             Performs a right to left swipe gesture.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeft(System.String)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRightToLeft(System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture.
             </summary>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRightToLeft(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the first 
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the first 
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRightToLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the first
              one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SwipeRightToLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the first
              one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more
              information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TouchAndHold(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a continuous touch gesture on the matched element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TouchAndHoldCoordinates(System.Single,System.Single)">
             <summary>
             Performs a continuous touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DoubleTap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DoubleTapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a quick double tap / touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TwoFingerTap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a tap / touch gestures with 2 fingers on the matched element. If multiple elements are matched,
              the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TwoFingerTapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a tap / touch gesture with 2 fingers on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.FlickCoordinates(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs a quick continuous flick gesture between 2 points.
             </summary>
             <param name="fromX">The x coordinate to start from.</param>
             <param name="fromY">The y coordinate to start from.</param>
             <param name="toX">The x coordinate to end at.</param>
             <param name="toY">The y coordinate to end at.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DragCoordinates(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs a continuous drag gesture between 2 points.
             </summary>
             <param name="fromX">The x coordinate to start from.</param>
             <param name="fromY">The y coordinate to start from.</param>
             <param name="toX">The x coordinate to end at.</param>
             <param name="toY">The y coordinate to end at.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DragCoordinates(System.Single,System.Single,System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a continuous drag gesture between 2 points.
             </summary>
             <param name="fromX">The x coordinate to start from.</param>
             <param name="fromY">The y coordinate to start from.</param>
             <param name="toX">The x coordinate to end at.</param>
             <param name="toY">The y coordinate to end at.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pan gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PinchToZoomIn(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view in. If multiple elements are matched,
             the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PinchToZoomInCoordinates(System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures to zoom the view in on the given coordinates.
             </summary>
             <param name="x">The x coordinate of the center of the pinch.</param>
             <param name="y">The y coordinate of the center of the pinch.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PinchToZoomOut(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view out. If multiple elements are matched,
             the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PinchToZoomOutCoordinates(System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures to zoom the view in on the given coordinates.
             </summary>
             <param name="x">The x coordinate of the center of the pinch.</param>
             <param name="y">The y coordinate of the center of the pinch.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DismissKeyboard">
             <summary>
             Dismisses the keyboard if present
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PressVolumeUp">
             <summary>
             Presses the volume up button on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PressVolumeDown">
             <summary>
             Presses the volume down button on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SendAppToBackground(System.TimeSpan)">
             <summary>
             Sends the app to background for the specified time span.
             </summary>
             <param name="time">The time for the app to be in the background.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitFor(System.Func{System.Boolean},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Generic wait function that will repeatly call the <c>predicate</c> function until it returns <c>true</c>.
             Throws a <see cref="T:System.TimeoutException" /> if the predicate is not fullfilled within the time limit.
             </summary>
             <param name="predicate">Predicate function that should return <c>true</c> when waiting is complete.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each call to the predicate.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the predicate returns <c>true</c>.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitForElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitForNoElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitForElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitForNoElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Screenshot(System.String)">
             <summary>
             Takes a screenshot of the app in it's current state. This is used to denote test steps in the Xamarin 
             Test Cloud.
             </summary>
             <param name="title">The title of screenshot, used as step name.</param>
             <returns>The screenshot file.</returns>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSApp.Print">
             <summary>
             Contains helper methods for outputting the result of queries instead of resorting to 
             <see cref="T:System.Console" />.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Repl">
             <summary>
             Starts an interactive REPL (Read-Eval-Print-Loop) for app exploration and pauses test execution until
             it is closed.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Invoke(System.String,System.Object)">
             <summary>
             Invokes a method on the app's app delegate. For Xamarin apps, methods must be exposed using attributes 
             as shown below.
             
             iOS example in app delegate:
             
             <code>
             [Export("myInvokeMethod:")]
             public NSString MyInvokeMethod(NSString arg)
             {
                 return new NSString("uitest");
             }
             </code>
             
             </summary>
             <param name="methodName">The name of the method to invoke.</param>
             <param name="argument">The argument to pass to the method.</param>
             <returns>The result of the invocation.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Invoke(System.String,System.Object[])">
             <summary>
             Invokes a method on the app's app delegate. For Xamarin apps, methods must be exposed using attributes 
             as shown below.
             
             iOS example in app delegate:
             
             <code>
             [Export("myInvokeMethod:")]
             public NSString MyInvokeMethod(NSString arg, NSString arg2)
             {
                 return new NSString("uitest");
             }
             </code>
             
             </summary>
             <param name="methodName">The name of the method to invoke.</param>
             <param name="arguments">An array of arguments to pass to the method.</param>
             <returns>The result of the invocation.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.InvokeUia(System.String)">
             <summary>
             Invokes raw UIA javascript.
             </summary>
             <param name="script">The automation script.</param>
             <returns>The result of the script.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.InvokeDeviceAgentQuery(System.Object)">
             <summary>
             Invokes the Device Agent query.
             </summary>
             <returns>The results of the query.</returns>
             <param name="parameters">The parameters of the query.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.InvokeDeviceAgentGueture(System.String,System.Object,System.Object)">
             <summary>
             Invokes the Device Agent gesture.
             </summary>
             <param name="gesture">The gesture to perform.</param>
             <param name="options">The gesture options.</param>
             <param name="specifiers">The gesture specifiers.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DismissSpringboardAlerts">
             <summary>
             Uses Device Agent to dismiss springboard alerts.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSApp.Config">
             <summary>
             Obsolete, use Device instead.
             Contains runtime information about the currently running device.
             
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSApp.Xamarin#UITest#IApp#Device">
             <summary>
             Runtime information and control of the currently running device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Back">
             <summary>
             Navigate back on the device. 
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSApp.TestServer">
             <summary>
             Allows HTTP access to the test server running on the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.iOS.iOSApp.Device">
             <summary>
             Runtime information and control of the currently running device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Query(System.String)">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Flash(System.String)">
             <summary>
             Highlights the results of the query by making them flash. Specify view elements using marked string. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.EnterText(System.String,System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ClearText(System.String)">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.Tap(System.String)">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one
             will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TouchAndHold(System.String)">
             <summary>
             Performs a continuous touch gesture on the matched element. If multiple elements are matched, the first
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DoubleTap(System.String)">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PinchToZoomIn(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view in. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.PinchToZoomOut(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view out. If multiple elements are matched,
             the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitForNoElement(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.WaitForElement(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollUp(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls up on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollUp(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls up on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollDown(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls down on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollDown(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls down on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollUpTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.ScrollDownTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia.  Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.TwoFingerTap(System.String)">
             <summary>
             Performs a tap / touch gestures with 2 fingers on the matched element. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SetSliderValue(System.String,System.Double)">
             <summary>
             Sets the value of a slider element that matches <c>marked</c>.
             </summary>
             <param name="marked">Marked selector of the slider element to update.</param>
             <param name="value">The value to set the slider to.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.SetSliderValue(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double)">
             <summary>
             Sets the value of a slider element that matches <c>query</c>.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="value">The value to set the slider to.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DragAndDrop(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Drags the from element to the to element.
             </summary>
             <param name="from">Entry point for the fluent API to specify the from element.</param>
             <param name="to">Entry point for the fluent API to specify the to element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DragAndDrop(System.String,System.String)">
             <summary>
             Drags the from element to the to element.
             </summary>
             <param name="from">Marked selector of the from element.</param>
             <param name="to">Marked selector of the to element.</param>
            </member>
        <member name="M:Xamarin.UITest.iOS.iOSApp.DragAndDrop(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Drags the from element to the to element.
             </summary>
             <param name="from">Entry point for the fluent API to specify the from element.</param>
             <param name="to">Entry point for the fluent API to specify the to element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the drag and drop gesture.</param>
            </member>
        <member name="T:Xamarin.UITest.Configuration.iOSAppConfigurator">
             <summary>
             Represents the iOS specific part of the <see cref="T:Xamarin.UITest.ConfigureApp" /> fluent API. Should not be used directly.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.#ctor(Xamarin.UITest.Configuration.GenericAppConfigurator)">
             <summary>
             Part of the <see cref="T:Xamarin.UITest.ConfigureApp" /> fluent API. Should not be used directly.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.ApiKey(System.String)">
             <summary>
             Deprecated (1.1): Will be removed.
             Sets the Xamarin Test Cloud api key to use for activation. 
             
             </summary>
             <param name="apiKey">The Xamarin Test Cloud api key.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.Debug">
             <summary>
             Enables debug logging from the test runner.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.EnableLocalScreenshots">
             <summary>
             Enables local screenshot saving. Always enabled in the cloud.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.PreferIdeSettings">
             <summary>
             Always uses settings from IDE if they're present, overriding other configured values. 
             If not set, explicit configuration will disable IDE integration.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.DeviceIp(System.String)">
             <summary>
             Configures the ip address of the device. Generally best left unset unless you are 
             running an iOS application on a physical device.
             </summary>
             <param name="ipAddress">The ip address of the device.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.DevicePort(System.Int32)">
             <summary>
             Configures the port of the device. Generally best left unset.
             </summary>
             <param name="port">The port of the Calabash HTTP server on the device.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.LogDirectory(System.String)">
             <summary>
             Sets the directory to store local log files in
             </summary>
             <param name="directory">The full path of the directory to store local log files in</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.DisableSpecFlowIntegration">
             <summary>
             Disables automatic screenshot generation after each SpecFlow step.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.AppBundle(System.String)">
             <summary>
             Configures the app bundle to use. Will force a run on simulator.
             </summary>
             <param name="path">Path to the directory containing the app bundle.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.AppBundleZip(System.String)">
             <summary>
             Configures the zipped app bundle to use. Will force a run on simulator.
             </summary>
             <param name="path">Path to the directory containing the zipped app bundle.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.InstalledApp(System.String)">
             <summary>
             Configures the installed app to use. Will force a run on physical device. 
             </summary>
             <param name="bundleId">The bundle id of the installed application.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.DeviceIdentifier(System.String)">
             <summary>
             Configures the device to use with the device identifier (UUID).
             </summary>
             <param name="deviceIdentifier">The device identifier (UUID) found in the XCode Organizer.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.WaitTimes(Xamarin.UITest.Utils.IWaitTimes)">
             <summary>
             Configures the default wait times for the framework.
             </summary>
             <param name="waitTimes">An implementation providing defaults.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.CodesignIdentity(System.String)">
             <summary>
             Specify the identity used to codesign application resorces.  Applies only when using
             DeviceAgent and testing with physical devices.  If not supplied, the identity used to
             sign the <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.AppBundle(System.String)" /> or <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.AppBundleZip(System.String)" /> app will be used.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)">
             <summary>
             Builds the configuration and launches the app on the selected device or simulator.
             </summary>
             <param name="appDataMode">The app data mode. Whether to clear app data or not before app launch. Currently only supported in Xamarin Test Cloud.</param>
             <returns>The <see cref="T:Xamarin.UITest.iOS.iOSApp" /> to use in the tests.</returns>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.ConnectToApp">
             <summary>
             Builds the configuration and connects to an already running app. 
             Used for advanced scenarios. Regular users should use <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)" />
             instead.
             </summary>
             <returns>The <see cref="T:Xamarin.UITest.iOS.iOSApp" /> to use in the tests.</returns>
            </member>
        <member name="M:Xamarin.UITest.Configuration.iOSAppConfigurator.GetConfiguration(Xamarin.UITest.Configuration.StartAction,Xamarin.UITest.Configuration.AppDataMode)">
             <summary>
             Builds the iOS app configuration which can be used for input for <see cref="T:Xamarin.UITest.iOS.iOSApp" />.
             The <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)" /> and <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.ConnectToApp" /> methods should be used instead unless
             you have specific needs for the configuration.
             </summary>
             <param name="startAction">The start action for the configuration. See <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)" /> and <see cref="M:Xamarin.UITest.Configuration.iOSAppConfigurator.ConnectToApp" /> methods.</param>
             <param name="appDataMode">The app data mode. Whether to clear app data or not before app launch. Currently only supported in Xamarin Test Cloud.</param>
             <returns>An <see cref="T:Xamarin.UITest.Configuration.IiOSAppConfiguration" /> which can used for input for <see cref="T:Xamarin.UITest.iOS.iOSApp" />.</returns>
            </member>
        <member name="T:Xamarin.UITest.Configuration.AndroidAppConfigurator">
             <summary>
             Represents the Android specific part of the <see cref="T:Xamarin.UITest.ConfigureApp" /> fluent API. Should not be used directly.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.ApiKey(System.String)">
             <summary>
             Deprecated (1.1): Will be removed.
             Sets the Xamarin Test Cloud api key to use for activation. 
             
             </summary>
             <param name="apiKey">The Xamarin Test Cloud api key.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.#ctor(Xamarin.UITest.Configuration.GenericAppConfigurator)">
             <summary>
             Part of the <see cref="T:Xamarin.UITest.ConfigureApp" /> fluent API. Should not be used directly.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.Debug">
             <summary>
             Enables debug logging from the test runner.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.EnableLocalScreenshots">
             <summary>
             Enables local screenshot saving. Always enabled in the cloud.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.PreferIdeSettings">
             <summary>
             Always uses settings from IDE if they're present, overriding other configured values. 
             If not set, explicit configuration will disable IDE integration.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.DisableSpecFlowIntegration">
             <summary>
             Disables automatic screenshot generation after each SpecFlow step.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.DeviceIp(System.String)">
             <summary>
             Configures the ip address of the device. Generally best left unset unless you are 
             running an iOS application on a physical device.
             </summary>
             <param name="ipAddress">The ip address of the device.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.DevicePort(System.Int32)">
             <summary>
             Configures the port of the device. Generally best left unset.
             </summary>
             <param name="port">The port of the Calabash HTTP server on the device.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.LogDirectory(System.String)">
             <summary>
             Sets the directory to store local log files in
             </summary>
             <param name="directory">The full path of the directory to store local log files in</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.DeviceSerial(System.String)">
             <summary>
             Configures the adb serial  of the device. Generally best left unset unless you want to run a specific device.
             </summary>
             <param name="deviceSerial">The device serial from adb devices.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.KeyStore(System.String,System.String,System.String,System.String)">
             <summary>
             Configures the keystore that the provided apk file is signed with. 
             A keystore is not required, but will ensure that the apk file is pristine and unchanged. 
             If a keystore is provided, it will be used to sign the auxiliary apks installed along with the app on the device. 
             If a keystore is not provided, Xamarin.UITest will generate a keystore and resign the apk.
             </summary>
             <param name="path">Path to the keystore file.</param>
             <param name="storePassword">Password to the keystore. Corresponds to the <c>-storepass</c> argument in jarsigner.</param>
             <param name="keyPassword">Password to the matching private key in the keystore. Corresponds to the <c>-keypass</c> argument in jarsigner.</param>
             <param name="keyAlias">Alias to the key in the keystore. Corresponds to the <c>alias</c> argument in jarsigner.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.SigningInfoFile(System.String)">
             <summary>
             Configures the signing info file that the test server will be "signed" with.
             A signing info file is not required, but can be used instead of a keystore for signing the test server. The signing info file can be freely shared 
             without the risk of leaking keying material.
             The signing info file can be generated using the console tool.  
             </summary>
             <param name="path">Path to the signing info file.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.ApkFile(System.String)">
             <summary>
             Configures the apk file to use.
             </summary>
             <param name="path">Path to the apk file.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.InstalledApp(System.String)">
             <summary>
             Configures the already installed app to use.
             </summary>
             <param name="packageName">Package name of the installed app.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.WaitTimes(Xamarin.UITest.Utils.IWaitTimes)">
             <summary>
             Configures the default wait times for the framework.
             </summary>
             <param name="waitTimes">An implementation providing defaults.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.LaunchableActivity(System.String)">
             <summary>
             Configures the activity to launch.
             </summary>
             <param name="activity">The activity to launch.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)">
             <summary>
             Builds the configuration and launches the app on the selected device.
             </summary>
             <param name="appDataMode">The app data mode. Whether to clear app data or not before app launch.</param>
             <returns>The <see cref="T:Xamarin.UITest.Android.AndroidApp" /> to use in the tests.</returns>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.ConnectToApp">
             <summary>
             Builds the configuration and connects to an already running app. 
             Used for advanced scenarios. Regular users should use <see cref="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)" />
             instead.
             </summary>
             <returns>The <see cref="T:Xamarin.UITest.Android.AndroidApp" /> to use in the tests.</returns>
            </member>
        <member name="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.GetConfiguration(Xamarin.UITest.Configuration.StartAction,Xamarin.UITest.Configuration.AppDataMode)">
             <summary>
             Builds the Android app configuration which can be used for input for <see cref="T:Xamarin.UITest.Android.AndroidApp" />.
             The <see cref="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)" /> and <see cref="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.ConnectToApp" /> methods should be used instead unless
             you have specific needs for the configuration.
             </summary>
             <param name="startAction">The start action for the configuration. See <see cref="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.StartApp(Xamarin.UITest.Configuration.AppDataMode)" /> and <see cref="M:Xamarin.UITest.Configuration.AndroidAppConfigurator.ConnectToApp" /> methods.</param>
             <param name="appDataMode">The app data mode. Whether to clear app data or not before app launch.</param>
             <returns>An <see cref="T:Xamarin.UITest.Configuration.IAndroidAppConfiguration" /> which can used for input for <see cref="T:Xamarin.UITest.Android.AndroidApp" />.</returns>
            </member>
        <member name="T:Xamarin.UITest.Configuration.GenericAppConfigurator">
             <summary>
             Represents the generic specific part of the <see cref="T:Xamarin.UITest.ConfigureApp" /> fluent API. Should not be used directly.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.Debug">
             <summary>
             Enables debug logging from the test runner.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.EnableLocalScreenshots">
             <summary>
             Enables local screenshot saving. Always enabled in the cloud.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.PreferIdeSettings">
             <summary>
             Always uses settings from IDE if they're present, overriding other configured values. 
             If not set, explicit configuration will disable IDE integration.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.GenericAppConfigurator.iOS">
             <summary>
             Specifies that the app is an iOS app.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.GenericAppConfigurator.Android">
             <summary>
             Specifies that the app is an Android app.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.DeviceIp(System.String)">
             <summary>
             Configures the ip address of the device. Generally best left unset unless you are 
             running an iOS application on a physical device.
             </summary>
             <param name="ipAddress">The ip address of the device.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.DevicePort(System.Int32)">
             <summary>
             Configures the port of the device. Generally best left unset.
             </summary>
             <param name="port">The port of the Calabash HTTP server on the device.</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.LogDirectory(System.String)">
             <summary>
             Sets the directory to store local log files in
             </summary>
             <param name="directory">The full path of the directory to store local log files in</param>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.DisableSpecFlowIntegration">
             <summary>
             Disables automatic screenshot generation after each SpecFlow step.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.GenericAppConfigurator.GetConfiguration">
             <summary>
             Builds the generic app configuration which contains the shared configuration
             across platforms.
             The <see cref="N:Xamarin.UITest.Android" /> or <see cref="N:Xamarin.UITest.iOS" /> properties should be used
             instead as part of the fluent API unless the configuration is needed.
             </summary>
             <returns>An <see cref="T:Xamarin.UITest.Configuration.IGenericAppConfiguration" /> to be consumed by the 
             platform specific configurations.</returns>
            </member>
        <member name="T:Xamarin.UITest.Configuration.IAndroidAppConfiguration">
             <summary>
             Configuration for Android apps. Not to be used directly, should be created by using the fluent <see cref="T:Xamarin.UITest.ConfigureApp" /> API.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.KeyStore">
             <summary>
             The location of the keystore that was used to sign the tested app. If left empty a new keystore will be built.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.KeyStorePassword">
             <summary>
             The store password of the given keystore. Corresponds to the <c>-storepass</c> argument in jarsigner.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.KeyStoreKeyPassword">
             <summary>
             The private key password of the given keystore key. Corresponds to the <c>-keypass</c> argument in jarsigner.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.KeyStoreKeyAlias">
             <summary>
             The key alias to use for given keystore. Corresponds to the alias argument in jarsigner.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.SIFile">
             <summary>
             The location of the SI file used for generating the signed test server.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.ApkFile">
             <summary>
             The location of the apk file to test.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.InstalledAppPackageName">
             <summary>
             The package name of the installed app.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.Debug">
             <summary>
             Enable debug logging.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.StartAction">
             <summary>
             The desired state of the app after test initialization. Either the test framework can start the app or connect to an already running app in more advanced scenarios.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.AppDataMode">
             <summary>
             Whether to clear app data or not.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.DeviceUri">
             <summary>
             The uri of the device test server.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.ConfiguredDeviceIp">
             <summary>
             The configured ip address. Use <c>DeviceUri</c> for the active configuration.
             </summary>
             <value>The configured ip address.</value>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.ConfiguredDevicePort">
             <summary>
             The configured port. Use <c>DeviceUri</c> for the active configuration.
             </summary>
             <value>The configured ip address.</value>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.DeviceSerial">
             <summary>
             The serial of the device. Can be found using adb.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.EnableScreenshots">
             <summary>
             Enable screenshots. Local screenshots are disabled by default to speed up tests.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.LaunchableActivity">
             <summary>
             Specify the specific launchable activity to use
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.LogDirectory">
             <summary>
             Specify the location of the log directory for local test runs.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.IAndroidAppConfiguration.Verify">
             <summary>
             Verifies the configuration.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.WaitTimes">
             <summary>
             Default wait times.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.IdeIntegrationMode">
             <summary>
             The IDE integration mode. Decides what settings to use in case of both explicit configuration and active IDE integration.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IAndroidAppConfiguration.DisableSpecFlowIntegration">
             <summary>
             Whether to disables automatic screenshot generation after each SpecFlow step.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppQuery">
             <summary>
             Fluent query API for specifying view elements to match for queries and gestures.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.#ctor(Xamarin.UITest.Queries.QueryPlatform)">
             <summary>
             Initial constructor for queries. Should not be called directly, but used as part of the fluent API in the app classes.
             </summary>
             <param name="queryPlatform">The query target platform.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.#ctor(Xamarin.UITest.Queries.AppQuery,System.Object[])">
             <summary>
             Constructor for adding more tokens to an existing query in an immutable fashion. Takes the tokens from the old query plus the additional tokens.
             </summary>
             <param name="appQuery">The existing query.</param>
             <param name="tokens">The new query tokens.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Button(System.String)">
             <summary>
             Matches a button. 
             For Android: An element that has class (or inherits from) <c>android.widget.Button</c>. 
             For iOS: An element with class <c>UIButton</c>.
             </summary>
             <param name="marked">Optional argument for matching using marked classification. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.TextField(System.String)">
             <summary>
             Matches a TextField. 
             For Android: An element that has class (or inherits from) <c>android.widget.EditText</c>. 
             For iOS: An element with class <c>UITextField</c>.
             </summary>
             <param name="marked">Optional argument for matching using marked classification. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Switch(System.String)">
             <summary>
             Matches a Switch. 
             For Android: An element that inherits from <c>android.widget.CompoundButton</c>. 
             For iOS: An element with class <c>UISwitch</c>.
             </summary>
             <param name="marked">Optional argument for matching using marked classification. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Class(System.String)">
             <summary>
             Matches element class.
             For Android (no '.' in className): An element that has a class name of the given value (case insensitive).
             For Android ('.'s in className): An element which has a class (or super class) fully qualified name that matches the value.
             For iOS (first char lowercase): An element that has the class (or super class) name of the given value prepended with "UI". Example: <c>button</c> becomes <c>UIButton</c>.
             For iOS (first char uppercase): An element that has the class (or super class) name of the given value.
             </summary>
             <param name="className">The class name to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.ClassFull(System.String)">
             <summary>
             Matches element class.
             For Android (no '.' in className): An element that has a class name of the given value (case insensitive).
             For Android ('.'s in className): An element which has a class (or super class) fully qualified name that matches the value.
             For iOS: An element that has the class (or super class) name of the given value.
             </summary>
             <param name="className">The class name to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)">
             <summary>
             Matches common values. 
             For Android: An element with the given value as either <c>id</c>, <c>contentDescription</c> or <c>text</c>.
             For iOS: An element with the given value as either <c>accessibilityLabel</c> or <c>accessibilityIdentifier</c>.
             </summary>
             <param name="text">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Id(System.String)">
             <summary>
             Matches element id. 
             For Android: An element with the given value as <c>id</c>.
             For iOS: An element with the given value as <c>accessibilityIdentifier</c>.
             </summary>
             <param name="id">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Id(System.Int32)">
             <summary>
             Matches element id. 
             For Android: An element with the given value as <c>id</c>.  Allows properties of 
             an Android App project's `Resource.Id` to be used in `Id()` queries.
             For iOS: An element with the string version of the given value as
             <c>accessibilityIdentifier</c>.
             </summary>
             <param name="id">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Sibling(System.String)">
             <summary>
             Changes the query to return sibling elements of the currently matched ones.
             </summary>
             <param name="className">Optional class name of elements to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Sibling(System.Int32)">
             <summary>
             Changes the query to return the n'th sibling element of the currently matched ones.
             </summary>
             <param name="index">The zero-based index of the sibling to return.</param>
             <returns></returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Descendant(System.String)">
             <summary>
             Changes the query to return descendant elements of the currently matched ones.
             </summary>
             <param name="className">Optional class name of elements to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Descendant(System.Int32)">
             <summary>
             Changes the query to return the n'th descendant element of the currently matched ones.
             </summary>
             <param name="index">The zero-based index of the descendant to return.</param>
             <returns></returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Parent(System.String)">
             <summary>
             Changes the query to return parent elements of the currently matched ones.
             </summary>
             <param name="className">Optional class name of elements to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Parent(System.Int32)">
             <summary>
             Changes the query to return the n'th parent element of the currently matched ones.
             </summary>
             <param name="index">The zero-based index of the parent to return.</param>
             <returns></returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Child(System.String)">
             <summary>
             Changes the query to return child elements of the currently matched ones.
             </summary>
             <param name="className">Optional class name of elements to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Child(System.Int32)">
             <summary>
             Changes the query to return the n'th child element of the currently matched ones.
             </summary>
             <param name="index">The zero-based index of the child to return.</param>
             <returns></returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.All(System.String)">
             <summary>
             Changes the query to return all elements instead of just the visible ones.
             </summary>
             <param name="className">Optional class name of elements to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Text(System.String)">
             <summary>
             Matches element text. 
             </summary>
             <param name="text">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Index(System.Int32)">
             <summary>
             Matches the nth element of the currently matched elements.
             </summary>
             <param name="index">The zero-based index of the element to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.WebView">
             <summary>
             Matches WebViews
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.WebView(System.Int32)">
             <summary>
             Matches the nth WebView
             </summary>
             <param name="index">The zero-based index of the webview to return.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String,System.Object)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
             <param name="arg1">A raw argument to pass to the Calabash query.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String,System.Object,System.Object)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
             <param name="arg1">A raw argument to pass to the Calabash query.</param>
             <param name="arg2">A raw argument to pass to the Calabash query.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String,System.Object,System.Object,System.Object)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
             <param name="arg1">A raw argument to pass to the Calabash query.</param>
             <param name="arg2">A raw argument to pass to the Calabash query.</param>
             <param name="arg3">A raw argument to pass to the Calabash query.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
             <param name="arg1">A raw argument to pass to the Calabash query.</param>
             <param name="arg2">A raw argument to pass to the Calabash query.</param>
             <param name="arg3">A raw argument to pass to the Calabash query.</param>
             <param name="arg4">A raw argument to pass to the Calabash query.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
             <param name="arg1">A raw argument to pass to the Calabash query.</param>
             <param name="arg2">A raw argument to pass to the Calabash query.</param>
             <param name="arg3">A raw argument to pass to the Calabash query.</param>
             <param name="arg4">A raw argument to pass to the Calabash query.</param>
             <param name="arg5">A raw argument to pass to the Calabash query.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Raw(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             A raw Calabash selector. Allows for string based Calabash queries.
             </summary>
             <param name="calabashQuery">The Calabash query to match.</param>
             <param name="arg1">A raw argument to pass to the Calabash query.</param>
             <param name="arg2">A raw argument to pass to the Calabash query.</param>
             <param name="arg3">A raw argument to pass to the Calabash query.</param>
             <param name="arg4">A raw argument to pass to the Calabash query.</param>
             <param name="arg5">A raw argument to pass to the Calabash query.</param>
             <param name="arg6">A raw argument to pass to the Calabash query.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Invoke(System.String)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Invoke(System.String,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Invoke(System.String,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Invoke(System.String,System.Object,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
             <param name="arg3">The 3rd parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Invoke(System.String,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
             <param name="arg3">The 3rd parameter.</param>
             <param name="arg4">The 4th parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Invoke(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
             <param name="arg3">The 3rd parameter.</param>
             <param name="arg4">The 4th parameter.</param>
             <param name="arg5">The 5th parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.InvokeJS(System.String)">
             <summary>
             Invokes javascript on the view elements matched by the query. If view elements other than WebViews are encountered, the execution will halt and an Exception will be thrown.
             </summary>
             <param name="javascript">The javascript to invoke on the views</param>
             <returns></returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Css(System.String)">
             <summary>
             Matches elements in web views matching the given css selector. Must be used on web view elements. If used alone, will default to <c>android.webkit.WebView</c> for Android and <c>UIWebView</c> for iOS.
             </summary>
             <param name="cssSelector">The css selector to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Frame(System.String)">
             <summary>
             Matches a Frame/IFrame, allowing subsequent Css queries to execute within that frame. Must be used on web view elements. 
             If used alone, will default to <c>android.webkit.WebView</c> for Android and <c>UIWebView</c> for iOS.
             </summary>
             <param name="cssSelector">The css selector to match. Should refer to an html Frame/IFrame</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.XPath(System.String)">
             <summary>
             Matches elements in web views matching the given XPath selector. Must be used on web view elements. If used alone, will default to <c>android.webkit.WebView</c> for Android and <c>UIWebView</c> for iOS.
             </summary>
             <param name="xPathSelector">The css selector to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Property(System.String,System.String)">
             <summary>
             Matches a property or getter method value on the element. 
             </summary>
             <param name="propertyName">The name of the property.</param>
             <param name="value">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Property(System.String,System.Int32)">
             <summary>
             Matches a property or getter method value on the element. 
             </summary>
             <param name="propertyName">The name of the property.</param>
             <param name="value">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Property(System.String,System.Boolean)">
             <summary>
             Matches a property or getter method value on the element. 
             </summary>
             <param name="propertyName">The name of the property.</param>
             <param name="value">The value to match.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.Property(System.String)">
             <summary>
             Allows for further filtering on a given property value.
             </summary>
             <param name="propertyName">The name of the property.</param>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppQuery.QueryPlatform">
             <summary>
             The target platform of the query. Useful when writing extensions methods for queries for platform differences.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppQuery.ToString">
             <summary>
             Converts the string into it's Calabash query equivalent.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.QueryPlatform">
             <summary>
             Representation of the different platforms a query can be targettet at.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Queries.QueryPlatform.Android">
             <summary>
             The Android platform.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Queries.QueryPlatform.iOS">
             <summary>
             The iOS platform.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.IApp">
             <summary>
             Represents the main gateway to interact with an app. This interface contains shared
             functionality between <see cref="T:Xamarin.UITest.Android.AndroidApp" /> and <see cref="T:Xamarin.UITest.iOS.iOSApp" />.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.Query(System.String)">
             <summary>
             Queries view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Queries web view objects using the fluent API. Defaults to only return view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the element. If left as <c>null</c> returns all visible view
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.Query``1(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppTypedSelector{``0}})">
             <summary>
             Queries properties on view objects using the fluent API. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the type of the property.</param> 
             <typeparam name="T">The type of the property.</typeparam>
            </member>
        <member name="M:Xamarin.UITest.IApp.Query(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.InvokeJSAppQuery})">
             <summary>
             Invokes Javascript on view objects using the fluent API.
             </summary>
             <param name="query">Entry point for the fluent API to specify the elements.</param>
             <returns>An array of strings representing the results.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.Flash(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Highlights the results of the query by making them flash. Specify view elements using the fluent API. 
             Defaults to all view objects that are visible.
             </summary>
             <param name="query">
             Entry point for the fluent API to specify the elements. If left as <c>null</c> flashes all visible view 
             objects.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.Flash(System.String)">
             <summary>
             Highlights the results of the query by making them flash. Specify view elements using marked string. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.EnterText(System.String)">
             <summary>
             Enters text into the currently focused element.
             </summary>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.EnterText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.EnterText(System.String,System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.EnterText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String)">
             <summary>
             Enters text into a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="text">The text to enter.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ClearText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ClearText(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ClearText(System.String)">
             <summary>
             Clears text from a matching element that supports it. 
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ClearText">
             <summary>
             Clears text from the currently focused element. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.PressEnter">
             <summary>
             Presses the enter key in the app. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.DismissKeyboard">
             <summary>
             Hides keyboard if present
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.Tap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one
              will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.Tap(System.String)">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one 
             will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.Tap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery})">
             <summary>
             Performs a tap / touch gesture on the matched element. If multiple elements are matched, the first one 
             will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.TapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a tap / touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to tap.</param>
             <param name="y">The y coordinate to tap.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.TouchAndHold(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs a continuous touch gesture on the matched element. If multiple elements are matched, the first 
             one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.TouchAndHold(System.String)">
             <summary>
             Performs a continuous touch gesture on the matched element. If multiple elements are matched, the first 
             one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.TouchAndHoldCoordinates(System.Single,System.Single)">
             <summary>
             Performs a continuous touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.DoubleTap(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.DoubleTap(System.String)">
             <summary>
             Performs two quick tap / touch gestures on the matched element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.DoubleTapCoordinates(System.Single,System.Single)">
             <summary>
             Performs a quick double tap / touch gesture on the given coordinates.
             </summary>
             <param name="x">The x coordinate to touch.</param>
             <param name="y">The y coordinate to touch.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.PinchToZoomIn(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view in. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.PinchToZoomIn(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view in. If multiple elements are matched, 
             the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.PinchToZoomInCoordinates(System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures to zoom the view in on the given coordinates.
             </summary>
             <param name="x">The x coordinate of the center of the pinch.</param>
             <param name="y">The y coordinate of the center of the pinch.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.PinchToZoomOut(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view out. If multiple elements are matched,
              the first one will be used.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.PinchToZoomOut(System.String,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures on the matched element to zoom the view out. If multiple elements are matched,
              the first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.PinchToZoomOutCoordinates(System.Single,System.Single,System.Nullable{System.TimeSpan})">
             <summary>
             Performs a pinch gestures to zoom the view in on the given coordinates.
             </summary>
             <param name="x">The x coordinate of the center of the pinch.</param>
             <param name="y">The y coordinate of the center of the pinch.</param>
             <param name="duration">The <see cref="T:System.TimeSpan" /> duration of the pinch gesture.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitFor(System.Func{System.Boolean},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Generic wait function that will repeatly call the <c>predicate</c> function until it returns <c>true</c>.
              Throws a <see cref="T:System.TimeoutException" /> if the predicate is not fullfilled within the time limit.
             </summary>
             <param name="predicate">Predicate function that should return <c>true</c> when waiting is complete.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each call to the predicate.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the predicate returns <c>true</c>.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitForElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitForElement(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitForElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is found. Throws a 
             <see cref="T:System.TimeoutException" /> if no element is found within the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element has been found.
             </param>
             <returns>An array representing the matched view objects.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitForNoElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitForNoElement(System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.WaitForNoElement(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
             <summary>
             Wait function that will repeatly query the app until a matching element is no longer found. Throws a 
             <see cref="T:System.TimeoutException" /> if the element is visible at the end of the time limit.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="timeoutMessage">The message used in the <see cref="T:System.TimeoutException" />.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
             <param name="retryFrequency">The <see cref="T:System.TimeSpan" /> to wait between each query call to the app.</param>
             <param name="postTimeout">
             The final <see cref="T:System.TimeSpan" /> to wait after the element is no longer visible.
             </param>
            </member>
        <member name="M:Xamarin.UITest.IApp.Screenshot(System.String)">
             <summary>
             Takes a screenshot of the app in it's current state. This is used to denote test steps in the Xamarin 
             Test Cloud.
             </summary>
             <param name="title">The title of screenshot, used as step name.</param>
             <returns>The screenshot file.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeRight">
             <summary>
             Performs a left to right swipe gesture.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeLeftToRight(System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture.
             </summary>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeLeftToRight(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeLeft">
             <summary>
             Performs a right to left swipe gesture.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeRightToLeft(System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture.
             </summary>
             <param name="swipePercentage">How far across the screen to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeRightToLeft(System.String,System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on the matching element. If multiple elements are matched, the 
             first one will be used.
             </summary>
             <param name="marked">
             Marked selector to match. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more information.
             </param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeLeftToRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on an element matched by 'query'.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeLeftToRight(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a left to right swipe gesture on an element matched by 'query'.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeRightToLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on an element matched by 'query'.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SwipeRightToLeft(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Double,System.Int32,System.Boolean)">
             <summary>
             Performs a right to left swipe gesture on an element matched by 'query'.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="swipePercentage">How far across the element to swipe (from 0.0 to 1.0).</param> 
             <param name="swipeSpeed">The speed of the gesture.</param> 
             <param name="withInertia">Whether swipes should cause inertia.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollUp(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls up on the first element matching query.
             </summary>
             <param name="query">Entry point for the fluent API to specify the elements.</param>
             <param name="strategy">Strategy for scrolling element</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollUp(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls up on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollDown(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls down on the first element matching query.
             </summary>
             <param name="withinQuery">
             Entry point for the fluent API to specify the what element to scroll within.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollDown(System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean)">
             <summary>
             Scrolls down on the first element matching query.
             </summary>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollUpTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollDownTo(System.String,System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toMarked">
             Marked selector to select what element to bring on screen. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more 
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.String,Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toMarked</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinMarked">
             Marked selector to select what element to scroll within. See <see cref="M:Xamarin.UITest.Queries.AppQuery.Marked(System.String)" /> for more
             information.
             </param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollUpTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll up until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.ScrollDownTo(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppWebQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},Xamarin.UITest.ScrollStrategy,System.Double,System.Int32,System.Boolean,System.Nullable{System.TimeSpan})">
             <summary>
             Scroll down until an element that matches the <c>toQuery</c> is shown on the screen. 
             </summary>
             <param name="toQuery">Entry point for the fluent API to specify the element to bring on screen.</param>
             <param name="withinQuery">Entry point for the fluent API to specify what element to scroll within.</param>
             <param name="strategy">Strategy for scrolling element.</param>
             <param name="swipePercentage">
             How far across the element to swipe (from 0.0 to 1.0).  Ignored for programmatic scrolling.
             </param> 
             <param name="swipeSpeed">The speed of the gesture.  Ignored for programmatic scrolling.</param> 
             <param name="withInertia">Whether swipes should cause inertia. Ignored for programmatic scrolling.</param>
             <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait before failing.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SetOrientationPortrait">
             <summary>
             Changes the device (iOS) or current activity (Android) orientation to portrait mode.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.SetOrientationLandscape">
             <summary>
             Changes the device (iOS) or current activity (Android) orientation to landscape mode.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.IApp.Print">
             <summary>
             Contains helper methods for outputting the result of queries instead of resorting to 
             <see cref="T:System.Console" />.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.Repl">
             <summary>
             Starts an interactive REPL (Read-Eval-Print-Loop) for app exploration and pauses test execution until it
             is closed.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.IApp.Device">
             <summary>
             Device information and Control
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.Back">
             <summary>
             Navigate back on the device. 
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.PressVolumeUp">
             <summary>
             Presses the volume up button on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.PressVolumeDown">
             <summary>
             Presses the volume down button on the device.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.IApp.TestServer">
             <summary>
             Allows HTTP access to the test server running on the device.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.IApp.Invoke(System.String,System.Object)">
             <summary>
             Invokes a method on the app's main activity for Android and app delegate for iOS. For Xamarin apps,
             methods must be exposed using attributes as shown below.
             
             Android example in activity:
             
             <code>
             [Export]
             public string MyInvokeMethod(string arg)
             {
                 return "uitest";
             }
             </code>
             
             iOS example in app delegate:
             
             <code>
             [Export("myInvokeMethod:")]
             public NSString MyInvokeMethod(NSString arg)
             {
                 return new NSString("uitest");
             }
             </code>
             
             </summary>
             <param name="methodName">The name of the method to invoke.</param>
             <param name="argument">The argument to pass to the method.</param>
             <returns>The result of the invocation.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.Invoke(System.String,System.Object[])">
             <summary>
             Invokes a method on the app's main activity for Android and app delegate for iOS. For Xamarin apps,
             methods must be exposed using attributes as shown below.
             
             Android example in activity:
             
             <code>
             [Export]
             public string MyInvokeMethod(string arg, string arg2)
             {
                 return "uitest";
             }
             </code>
             
             iOS example in app delegate:
             
             <code>
             [Export("myInvokeMethod:")]
             public NSString MyInvokeMethod(NSString arg, NSString arg2)
             {
                 return new NSString("uitest");
             }
             </code>
             
             </summary>
             <param name="methodName">The name of the method to invoke.</param>
             <param name="arguments">The arguments to pass to the method.</param>
             <returns>The result of the invocation.</returns>
            </member>
        <member name="M:Xamarin.UITest.IApp.DragCoordinates(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs a continuous drag gesture between 2 points.
             </summary>
             <param name="fromX">The x coordinate to start dragging from.</param>
             <param name="fromY">The y coordinate to start dragging from.</param>
             <param name="toX">The x coordinate to drag to.</param>
             <param name="toY">The y coordinate to drag to.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.DragAndDrop(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery})">
             <summary>
             Drags the from element to the to element.
             </summary>
             <param name="from">Entry point for the fluent API to specify the from element.</param>
             <param name="to">Entry point for the fluent API to specify the to element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.DragAndDrop(System.String,System.String)">
             <summary>
             Drags the from element to the to element.
             </summary>
             <param name="from">Marked selector of the from element.</param>
             <param name="to">Marked selector of the to element.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SetSliderValue(System.String,System.Double)">
             <summary>
             Sets the value of a slider element that matches <c>marked</c>.
             </summary>
             <param name="marked">Marked selector of the slider element to update.</param>
             <param name="value">The value to set the slider to.</param>
            </member>
        <member name="M:Xamarin.UITest.IApp.SetSliderValue(System.Func{Xamarin.UITest.Queries.AppQuery,Xamarin.UITest.Queries.AppQuery},System.Double)">
             <summary>
             Sets the value of a slider element that matches <c>query</c>.
             </summary>
             <param name="query">Entry point for the fluent API to specify the element.</param>
             <param name="value">The value to set the slider to.</param>
            </member>
        <member name="T:Xamarin.UITest.Queries.Tokens.IQueryToken">
             <summary>
             A query token. Part of a query for matching view elements for queries and gestures.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.Tokens.IQueryToken.ToQueryString(Xamarin.UITest.Queries.QueryPlatform)">
             <summary>
             Converts the query token to a Calabash query string.
             </summary>
             <param name="queryPlatform">The target query platform.</param>
             <returns>A valid Calabash query string.</returns>
            </member>
        <member name="M:Xamarin.UITest.Queries.Tokens.IQueryToken.ToCodeString">
             <summary>
             Returns a string representation of the code representing the query. Used for output. 
             </summary>
             <returns>A string representation of the query code.</returns>
            </member>
        <member name="T:Xamarin.UITest.Queries.ITokenContainer">
             <summary>
             Helper interface for exposing tokens from the fluent query API without cluttering the fluent API itself (when using explicit interface implementation). 
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.ITokenContainer.Tokens">
             <summary>
             The tokens of the current query.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Configuration.IiOSAppConfiguration">
             <summary>
             Configuration for iOS apps. Not to be used directly, should be created by using the fluent <see cref="T:Xamarin.UITest.ConfigureApp" /> API.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.Debug">
             <summary>
             Enable debug logging.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.EnableScreenshots">
             <summary>
             Enable screenshots. Local screenshots are disabled by default to speed up tests.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.LogDirectory">
             <summary>
             Specify the location of the log directory for local test runs.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.DeviceUri">
             <summary>
             The uri of the device test server.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.ConfiguredDeviceIp">
             <summary>
             The configured ip address. Use <c>DeviceUri</c> for the active configuration.
             </summary>
             <value>The configured ip address.</value>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.ConfiguredDevicePort">
             <summary>
             The configured port. Use <c>DeviceUri</c> for the active configuration.
             </summary>
             <value>The configured ip address.</value>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.DeviceIdentifier">
             <summary>
             The device identifier. List of know devices can be found by running "instruments -s devices" 
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.InstalledAppBundleId">
             <summary>
             The bundle id of an already installed to test.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.AppBundleDirectory">
             <summary>
             The location of an app bundle for a simulator test.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.AppBundleZip">
             <summary>
             The location of a zip archive for a simulator test.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.StartAction">
             <summary>
             The desired state of the app after test initialization. Either the test framework can start the app or connect to an already running app in more advanced scenarios.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.PreferDeviceAgent">
             <summary>
             Use DeviceAgent when iOS version and Xcode version support both DeviceAgent and UIAutomation
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Configuration.IiOSAppConfiguration.Verify">
             <summary>
             Verify the state of a configuration. Throw exception if invalid.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.WaitTimes">
             <summary>
             Default wait times.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.IdeIntegrationMode">
             <summary>
             The IDE integration mode. Decides what settings to use in case of both explicit configuration and active IDE integration.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.AppDataMode">
             <summary>
             Whether to clear app data or not.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Configuration.IiOSAppConfiguration.DisableSpecFlowIntegration">
             <summary>
             Whether to disables automatic screenshot generation after each SpecFlow step.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.Integration.IdeConnection.Connect(System.String,Xamarin.UITest.Platform)">
             <summary>
             Starts a connection with an IDE that may be ready to provide additional services for running a UITest session.
             </summary>
             <param name="testAssemblyPath">Full path to the test assembly</param>
             <param name="platform">Target test platform: iOS, Android</param>
             <returns><c>true</c>, if there is an IDE listening that can handle this test run session, <c>false</c> otherwise.</returns>
             <remarks>The connection string</remarks>
            </member>
        <member name="M:Xamarin.UITest.Utils.Integration.IdeConnection.PrepareTestApp">
             <summary>
             Instructs the IDE to prepare the test application for execution, which can include deploying it to the device or simulator
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Utils.IFluentInterface">
             <summary>
             Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object" /> from IntelliSense.
             </summary>
             <remarks>
             Code that consumes implementations of this interface should expect one of two things:
             <list type="number">
               <item>When referencing the interface from within the same solution (project reference), you will still see the methods this interface is meant to hide.</item>
               <item>When referencing the interface through the compiled output assembly (external reference), the standard Object methods will be hidden as intended.</item>
             </list>
             See http://bit.ly/ifluentinterface for more information.
             </remarks>
            </member>
        <member name="M:Xamarin.UITest.Utils.IFluentInterface.GetType">
             <summary>
             Redeclaration that hides the <see cref="M:System.Object.GetType" /> method from IntelliSense.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.IFluentInterface.GetHashCode">
             <summary>
             Redeclaration that hides the <see cref="M:System.Object.GetHashCode" /> method from IntelliSense.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.IFluentInterface.ToString">
             <summary>
             Redeclaration that hides the <see cref="M:System.Object.ToString" /> method from IntelliSense.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.IFluentInterface.Equals(System.Object)">
             <summary>
             Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)" /> method from IntelliSense.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.TestEnvironment">
             <summary>
             Contains runtime information about the current test environment.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.TestEnvironment.Platform">
             <summary>
             Provides the current runtime platform. Useful for complicated test setup scenarios.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.TestEnvironment.IsTestCloud">
             <summary>
             Determines at runtime whether the current test run is in the Xamarin Test Cloud.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.TestPlatform">
             <summary>
             Enum containing the various different test platforms.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.TestPlatform.Local">
             <summary>
             A local test run.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.TestPlatform.TestCloudAndroid">
             <summary>
             An Android test run in the Xamarin Test Cloud.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.TestPlatform.TestCloudiOS">
             <summary>
             An iOS test run in the Xamarin Test Cloud.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Queries.AppTypedSelector`1">
             <summary>
             Fluent query API for specifying the type in property and invoke result.
             </summary>
             <typeparam name="T">type</typeparam>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.#ctor(Xamarin.UITest.Queries.AppQuery,System.Object[],System.Boolean)">
             <summary>
             Constructor for selectors. Should not be called directly, but used as part of the fluent API in the Property class and for Invoke.
             </summary>
             <param name="appQuery">The query for property</param>
             <param name="queryParams">The parameters passed to the query.</param>
             <param name="explicitlyRequestedValue"></param>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppTypedSelector`1.Xamarin#UITest#Queries#ITokenContainer#Tokens">
             <summary>
             The tokens of the current query.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Queries.AppTypedSelector`1.Xamarin#UITest#Queries#IAppTypedSelector#ExplicitlyRequestedValue">
             <summary>
             The value of the query was explicitly requested.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.ToString">
             <summary>
             Converts the string into it's Calabash query equivalent.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Invoke(System.String)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Invoke(System.String,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Invoke(System.String,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Invoke(System.String,System.Object,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
             <param name="arg3">The 3rd parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Invoke(System.String,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
             <param name="arg3">The 3rd parameter.</param>
             <param name="arg4">The 4th parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Invoke(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Invokes a method on the view elements matched by the query. Can be chained to invoke methods on the results.
             </summary>
             <param name="methodName">The name of the method.</param>
             <param name="arg1">The 1st parameter.</param>
             <param name="arg2">The 2nd parameter.</param>
             <param name="arg3">The 3rd parameter.</param>
             <param name="arg4">The 4th parameter.</param>
             <param name="arg5">The 5th parameter.</param>
            </member>
        <member name="M:Xamarin.UITest.Queries.AppTypedSelector`1.Value``1">
             <summary>
             Extracts the result of the query as a given type.
             </summary>
             <typeparam name="TResult">The expected result type of the query.</typeparam>
            </member>
        <member name="T:Xamarin.UITest.Utils.Integration.TestRunContext">
             <summary>
             Used to provide information required to run a test suite
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.Integration.TestRunContext.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Xamarin.UITest.Utils.Integration.TestRunContext" /> class.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.Integration.TestRunContext.CreateError(System.String)">
             <summary>
             TestRunContext factory method.
             </summary>
             <returns>
             A new instance of the <see cref="T:Xamarin.UITest.Utils.Integration.TestRunContext" /> class indicating an
             error has occurred.
             </returns>
             <param name="message">The error message.</param>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.Success">
             <summary>
             When set to False it means that the application preparation failed for some reason. The reason is provided 
             in the ErrorMessage property.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.ErrorMessage">
             <summary>
             Message that explains why the test suite can't be executed (when CanExecute == False)
             </summary>
             <value>The error message.</value>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.TestAppDeployed">
             <summary>
             When set to True it means that the test application is already deployed and UITest doesn't have to do it
             ErrorMessage property.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.PackageFile">
             <summary>
             Package to be installed. It overrides the ApkFile or AppBundle option. To be used only if TestAppDeployed==false.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.DeviceId">
             <summary>
             The serial of the device to use for testing
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.AppId">
             <summary>
             The app package name (Android), or the bundle id (iOS)
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.AndroidKeystoreLocation">
             <summary>
             Location of the Android keystore. If not set, UITest will use the default global keystore. Only for Android.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.AndroidKeyAlias">
             <summary>
             Key store alias. Only for Android.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.AndroidKeystorePassword">
             <summary>
             Key store password. Only for Android.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.Integration.TestRunContext.AndroidKeyPassword">
             <summary>
             The key password. Only for Android.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Utils.IWaitTimes">
             <summary>
             Contains default wait times for the framework to use.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.IWaitTimes.WaitForTimeout">
             <summary>
             Time for the framework to wait when using the WaitFor methods.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.IWaitTimes.GestureWaitTimeout">
             <summary>
             Time for the framework to wait for elements when performing gestures.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.IWaitTimes.GestureCompletionTimeout">
             <summary>
             Time for the framework to wait for gestures to complete.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Utils.RawJson">
             <summary>
             Class for requesting the raw json from the framework.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.RawJson.#ctor(System.String)">
             <summary>
             Constructs an instance of the RawJson class.
             </summary>
             <param name="json">The json contents.</param>
            </member>
        <member name="P:Xamarin.UITest.Utils.RawJson.Json">
             <summary>
             The contained json.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.SharedTestServer.Post(System.String,System.Object)">
             <summary>
             Performs an HTTP POST request to the test server.
             </summary>
             <param name="endpoint">The path of the request, which will be appended on the uri of the test server.</param>
             <param name="arguments">An object that will be serialized as json and posted to the test server.</param>
             <returns>The body of the the reponse.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.SharedTestServer.Get(System.String)">
             <summary>
             Performs an HTTP GET request to the test server.
             </summary>
             <param name="endpoint">The path of the request, which will be appended on the uri of the test server.</param>
             <returns>The body of the the reponse.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.SharedTestServer.Put(System.String,System.Byte[])">
             <summary>
             Performs an HTTP PUT request to the test server.
             </summary>
             <param name="endpoint">The path of the request, which will be appended on the uri of the test server.</param>
             <param name="data">The byte[] data to put.</param>
             <returns>The body of the the reponse.</returns>
            </member>
        <member name="T:Xamarin.UITest.Utils.ReplWaitTimes">
             <summary>
             Default wait times when using the REPL.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.ReplWaitTimes.WaitForTimeout">
             <summary>
             Time for the framework to wait when using the WaitFor methods.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.ReplWaitTimes.GestureWaitTimeout">
             <summary>
             Time for the framework to wait for elements when performing gestures.
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.ReplWaitTimes.GestureCompletionTimeout">
             <summary>
             Time for the framework to wait for gestures to complete.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.ScrollStrategy">
             <summary>
             Strategy for scrolling 
             </summary>
            </member>
        <member name="F:Xamarin.UITest.ScrollStrategy.Auto">
             <summary>
             Use any combination of <c>Programmatically</c> and <c>Gesture</c> when trying to scroll. Biased towards <c>Programmatically</c>
             </summary>
            </member>
        <member name="F:Xamarin.UITest.ScrollStrategy.Programmatically">
             <summary>
             Scroll programmatically, will not mimic real user interactions, but are as fast as possible.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.ScrollStrategy.Gesture">
             <summary>
             Scroll using gestures, tries to mimic user interaction as closely as possible.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Android.UserAction">
             <summary>
             User actions that can be sent to android applications
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Normal">
             <summary>
             The normal action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Unspecified">
             <summary>
             The unspecified action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.None">
             <summary>
             The none action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Go">
             <summary>
             The go action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Search">
             <summary>
             The search action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Send">
             <summary>
             The send action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Next">
             <summary>
             The next action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Done">
             <summary>
             The done action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.UserAction.Previous">
             <summary>
             The previous action.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Android.DropLocation">
             <summary>
             Specifies the location of the drop in a drag and drop action.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.DropLocation.OnTop">
             <summary>
             Drop on top of the element matched by the query.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.DropLocation.Above">
             <summary>
             Drop above the element matched by the query.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.DropLocation.Below">
             <summary>
             Drop below the element matched by the query.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.DropLocation.Left">
             <summary>
             Drop to the left of the element matched by the query.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Android.DropLocation.Right">
             <summary>
             Drop to the right of the element matched by the query.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Platform">
             <summary>
             The platform being tested.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Platform.Android">
             <summary>
             An Android device is being tested.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Platform.iOS">
             <summary>
             An iOS device is being tested.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Configuration.IdeIntegrationMode">
             <summary>
             IDE integration mode. Decides what settings to use in case of both explicit configuration and active IDE integration.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.IdeIntegrationMode.PreferExplicitConfiguration">
             <summary>
             Prefers any explicit configuration choices made by the user as part of configuration.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.IdeIntegrationMode.PreferIdeSettingsIfPresent">
             <summary>
             Prefers IDE integration settings if it is active.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Configuration.AppDataMode">
             <summary>
             Enum for controlling whether or not to clear app data.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.AppDataMode.Auto">
             <summary>
             Default behavior depending on platform.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.AppDataMode.Clear">
             <summary>
             Always clear app data.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.Configuration.AppDataMode.DoNotClear">
             <summary>
             Never clear app data.
             </summary>
            </member>
        <member name="T:Xamarin.UITest.UITestConstants">
             <summary>
             Default parameter values for various UITest API functions
             </summary>
            </member>
        <member name="F:Xamarin.UITest.UITestConstants.DefaultDeviceIp">
             <summary>
             The IPAddress to use if the user has not specified one.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.UITestConstants.DefaultSwipePercentage">
             <summary>
             Default percent (from 0 to 1.0) of view to scroll/swipe interactions.
             </summary> 
            </member>
        <member name="F:Xamarin.UITest.UITestConstants.DefaultSwipeSpeed">
             <summary>
             Default speed (pixels/points per second) for scroll/swipe interactions.
             </summary>
            </member>
        <member name="F:Xamarin.UITest.UITestConstants.AUTArgIdentifier">
             <summary>
             A dummy launch argument use to identify apps running on an iOS simulator
             that were started by UITest.
             </summary>
            </member>
        <member name="M:TinyIoC.TypeExtensions.GetGenericMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
             <summary>
             Gets a generic method from a type given the method name, binding flags, generic types and parameter types
             </summary>
             <param name="sourceType">Source type</param>
             <param name="bindingFlags">Binding flags</param>
             <param name="methodName">Name of the method</param>
             <param name="genericTypes">Generic types to use to make the method generic</param>
             <param name="parameterTypes">Method parameters</param>
             <returns>MethodInfo or null if no matches found</returns>
             <exception cref="T:System.Reflection.AmbiguousMatchException" />
             <exception cref="T:System.ArgumentException" />
            </member>
        <member name="T:TinyIoC.NamedParameterOverloads">
             <summary>
             Name/Value pairs for specifying "user" parameters when resolving
             </summary>
            </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.AttemptResolve">
             <summary>
             Attempt to resolve type, even if the type isn't registered.
             
             Registered types/options will always take precedence.
             </summary>
            </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.Fail">
             <summary>
             Fail resolution if type not explicitly registered
             </summary>
            </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.GenericsOnly">
             <summary>
             Attempt to resolve unregistered type if requested type is generic
             and no registration exists for the specific generic parameters used.
             
             Registered types/options will always take precedence.
             </summary>
            </member>
        <member name="T:TinyIoC.ResolveOptions">
             <summary>
             Resolution settings
             </summary>
            </member>
        <member name="P:TinyIoC.ResolveOptions.Default">
             <summary>
             Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
             </summary>
            </member>
        <member name="P:TinyIoC.ResolveOptions.FailNameNotFoundOnly">
             <summary>
             Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
             </summary>
            </member>
        <member name="P:TinyIoC.ResolveOptions.FailUnregisteredAndNameNotFound">
             <summary>
             Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
             </summary>
            </member>
        <member name="P:TinyIoC.ResolveOptions.FailUnregisteredOnly">
             <summary>
             Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.RegisterOptions">
             <summary>
             Registration options for "fluent" API
             </summary>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.AsSingleton">
             <summary>
             Make registration a singleton (single instance) if possible
             </summary>
             <returns>RegisterOptions</returns>
             <exception cref="!:TinyIoCInstantiationTypeException"></exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.AsMultiInstance">
             <summary>
             Make registration multi-instance if possible
             </summary>
             <returns>RegisterOptions</returns>
             <exception cref="!:TinyIoCInstantiationTypeException"></exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.WithWeakReference">
             <summary>
             Make registration hold a weak reference if possible
             </summary>
             <returns>RegisterOptions</returns>
             <exception cref="!:TinyIoCInstantiationTypeException"></exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.WithStrongReference">
             <summary>
             Make registration hold a strong reference if possible
             </summary>
             <returns>RegisterOptions</returns>
             <exception cref="!:TinyIoCInstantiationTypeException"></exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(TinyIoC.TinyIoCContainer.RegisterOptions,TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
             <summary>
             Switches to a custom lifetime manager factory if possible.
             
             Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
             </summary>
             <param name="instance">RegisterOptions instance</param>
             <param name="lifetimeProvider">Custom lifetime manager</param>
             <param name="errorString">Error string to display if switch fails</param>
             <returns>RegisterOptions</returns>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.MultiRegisterOptions">
             <summary>
             Registration options for "fluent" API when registering multiple implementations
             </summary>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{TinyIoC.TinyIoCContainer.RegisterOptions})">
             <summary>
             Initializes a new instance of the MultiRegisterOptions class.
             </summary>
             <param name="registerOptions">Registration options</param>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.AsSingleton">
             <summary>
             Make registration a singleton (single instance) if possible
             </summary>
             <returns>RegisterOptions</returns>
             <exception cref="!:TinyIoCInstantiationTypeException"></exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.AsMultiInstance">
             <summary>
             Make registration multi-instance if possible
             </summary>
             <returns>MultiRegisterOptions</returns>
             <exception cref="!:TinyIoCInstantiationTypeException"></exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.ToCustomLifetimeManager(TinyIoC.TinyIoCContainer.MultiRegisterOptions,TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
             <summary>
             Switches to a custom lifetime manager factory if possible.
             
             Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
             </summary>
             <param name="instance">MultiRegisterOptions instance</param>
             <param name="lifetimeProvider">Custom lifetime manager</param>
             <param name="errorString">Error string to display if switch fails</param>
             <returns>MultiRegisterOptions</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the current app domain.
             
             If more than one class implements an interface then only one implementation will be registered
             although no error will be thrown.
             </summary>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Func{System.Type,System.Boolean})">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the current app domain.
             Types will only be registered if they pass the supplied registration predicate.
             
             If more than one class implements an interface then only one implementation will be registered
             although no error will be thrown.
             </summary>
             <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(TinyIoC.DuplicateImplementationActions)">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the current app domain.
             </summary>
             <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
             <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException" />
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(TinyIoC.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the current app domain.
             Types will only be registered if they pass the supplied registration predicate.
             </summary>
             <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
             <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
             <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException" />
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
             
             If more than one class implements an interface then only one implementation will be registered
             although no error will be thrown.
             </summary>
             <param name="assemblies">Assemblies to process</param>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
             Types will only be registered if they pass the supplied registration predicate.
             
             If more than one class implements an interface then only one implementation will be registered
             although no error will be thrown.
             </summary>
             <param name="assemblies">Assemblies to process</param>
             <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},TinyIoC.DuplicateImplementationActions)">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
             </summary>
             <param name="assemblies">Assemblies to process</param>
             <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
             <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException" />
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},TinyIoC.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
             <summary>
             Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
             Types will only be registered if they pass the supplied registration predicate.
             </summary>
             <param name="assemblies">Assemblies to process</param>
             <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
             <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
             <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException" />
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type)">
             <summary>
             Creates/replaces a container class registration with default options.
             </summary>
             <param name="registerType">Type to register</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.String)">
             <summary>
             Creates/replaces a named container class registration with default options.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type)">
             <summary>
             Creates/replaces a container class registration with a given implementation and default options.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.String)">
             <summary>
             Creates/replaces a named container class registration with a given implementation and default options.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Object)">
             <summary>
             Creates/replaces a container class registration with a specific, strong referenced, instance.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="instance">Instance of RegisterType to register</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Object,System.String)">
             <summary>
             Creates/replaces a named container class registration with a specific, strong referenced, instance.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="instance">Instance of RegisterType to register</param>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.Object)">
             <summary>
             Creates/replaces a container class registration with a specific, strong referenced, instance.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
             <param name="instance">Instance of RegisterImplementation to register</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.Object,System.String)">
             <summary>
             Creates/replaces a named container class registration with a specific, strong referenced, instance.
             </summary>
             <param name="registerType">Type to register</param>
             <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
             <param name="instance">Instance of RegisterImplementation to register</param>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,System.Object})">
             <summary>
             Creates/replaces a container class registration with a user specified factory
             </summary>
             <param name="registerType">Type to register</param>
             <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,System.Object},System.String)">
             <summary>
             Creates/replaces a container class registration with a user specified factory
             </summary>
             <param name="registerType">Type to register</param>
             <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
             <param name="name">Name of registation</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1">
             <summary>
             Creates/replaces a container class registration with default options.
             </summary>
             <typeparam name="RegisterImplementation">Type to register</typeparam>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.String)">
             <summary>
             Creates/replaces a named container class registration with default options.
             </summary>
             <typeparam name="RegisterImplementation">Type to register</typeparam>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2">
             <summary>
             Creates/replaces a container class registration with a given implementation and default options.
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(System.String)">
             <summary>
             Creates/replaces a named container class registration with a given implementation and default options.
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(``0)">
             <summary>
             Creates/replaces a container class registration with a specific, strong referenced, instance.
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <param name="instance">Instance of RegisterType to register</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(``0,System.String)">
             <summary>
             Creates/replaces a named container class registration with a specific, strong referenced, instance.
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <param name="instance">Instance of RegisterType to register</param>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(``1)">
             <summary>
             Creates/replaces a container class registration with a specific, strong referenced, instance.
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
             <param name="instance">Instance of RegisterImplementation to register</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(``1,System.String)">
             <summary>
             Creates/replaces a named container class registration with a specific, strong referenced, instance.
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
             <param name="instance">Instance of RegisterImplementation to register</param>
             <param name="name">Name of registration</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,``0})">
             <summary>
             Creates/replaces a container class registration with a user specified factory
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,``0},System.String)">
             <summary>
             Creates/replaces a named container class registration with a user specified factory
             </summary>
             <typeparam name="RegisterType">Type to register</typeparam>
             <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
             <param name="name">Name of registation</param>
             <returns>RegisterOptions for fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
             <summary>
             Register multiple implementations of a type.
             
             Internally this registers each implementation using the full name of the class as its registration name.
             </summary>
             <typeparam name="RegisterType">Type that each implementation implements</typeparam>
             <param name="implementationTypes">Types that implement RegisterType</param>
             <returns>MultiRegisterOptions for the fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
             <summary>
             Register multiple implementations of a type.
             
             Internally this registers each implementation using the full name of the class as its registration name.
             </summary>
             <param name="registrationType">Type that each implementation implements</param>
             <param name="implementationTypes">Types that implement RegisterType</param>
             <returns>MultiRegisterOptions for the fluent API</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type)">
             <summary>
             Attempts to resolve a type using default options.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1">
             <summary>
             Attempts to resolve a type using default options.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type)">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.Object@)">
             <summary>
             Attemps to resolve a type using the default options
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.ResolveOptions,System.Object@)">
             <summary>
             Attemps to resolve a type using the given options
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,System.Object@)">
             <summary>
             Attemps to resolve a type using the default options and given name
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.ResolveOptions,System.Object@)">
             <summary>
             Attemps to resolve a type using the given options and name
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.NamedParameterOverloads,System.Object@)">
             <summary>
             Attemps to resolve a type using the default options and supplied constructor parameters
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,System.Object@)">
             <summary>
             Attemps to resolve a type using the default options and supplied name and constructor parameters
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,System.Object@)">
             <summary>
             Attemps to resolve a type using the supplied options and constructor parameters
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,System.Object@)">
             <summary>
             Attemps to resolve a type using the supplied name, options and constructor parameters
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(``0@)">
             <summary>
             Attemps to resolve a type using the default options
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.ResolveOptions,``0@)">
             <summary>
             Attemps to resolve a type using the given options
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,``0@)">
             <summary>
             Attemps to resolve a type using the default options and given name
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.ResolveOptions,``0@)">
             <summary>
             Attemps to resolve a type using the given options and name
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.NamedParameterOverloads,``0@)">
             <summary>
             Attemps to resolve a type using the default options and supplied constructor parameters
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.NamedParameterOverloads,``0@)">
             <summary>
             Attemps to resolve a type using the default options and supplied name and constructor parameters
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,``0@)">
             <summary>
             Attemps to resolve a type using the supplied options and constructor parameters
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,``0@)">
             <summary>
             Attemps to resolve a type using the supplied name, options and constructor parameters
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <param name="resolvedType">Resolved type or default if resolve fails</param>
             <returns>True if resolved sucessfully, false otherwise</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll(System.Type,System.Boolean)">
             <summary>
             Returns all registrations of a type
             </summary>
             <param name="resolveType">Type to resolveAll</param>
             <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
             <returns>IEnumerable</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll(System.Type)">
             <summary>
             Returns all registrations of a type, both named and unnamed
             </summary>
             <param name="resolveType">Type to resolveAll</param>
             <returns>IEnumerable</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll``1(System.Boolean)">
             <summary>
             Returns all registrations of a type
             </summary>
             <typeparam name="ResolveType">Type to resolveAll</typeparam>
             <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
             <returns>IEnumerable</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll``1">
             <summary>
             Returns all registrations of a type, both named and unnamed
             </summary>
             <typeparam name="ResolveType">Type to resolveAll</typeparam>
             <returns>IEnumerable</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.BuildUp(System.Object)">
             <summary>
             Attempts to resolve all public property dependencies on the given object.
             </summary>
             <param name="input">Object to "build up"</param>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.BuildUp(System.Object,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve all public property dependencies on the given object using the given resolve options.
             </summary>
             <param name="input">Object to "build up"</param>
             <param name="resolveOptions">Resolve options to use</param>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider">
             <summary>
             Provides custom lifetime management for ASP.Net per-request lifetimes etc.
             </summary>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.GetObject">
             <summary>
             Gets the stored object if it exists, or null if not
             </summary>
             <returns>Object instance or null</returns>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.SetObject(System.Object)">
             <summary>
             Store the object
             </summary>
             <param name="value">Object to store</param>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.ReleaseObject">
             <summary>
             Release the object
             </summary>
            </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.AssumeConstruction">
             <summary>
             Whether to assume this factory sucessfully constructs its objects
             
             Generally set to true for delegate style factories as CanResolve cannot delve
             into the delegates they contain.
             </summary>
            </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.CreatesType">
             <summary>
             The type the factory instantiates
             </summary>
            </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.Constructor">
             <summary>
             Constructor to use, if specified
             </summary>
            </member>
        <member name="M:TinyIoC.TinyIoCContainer.ObjectFactoryBase.GetObject(System.Type,TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Create the type
             </summary>
             <param name="requestedType">Type user requested to be resolved</param>
             <param name="container">Container that requested the creation</param>
             <param name="parameters">Any user parameters passed</param>
             <param name="options"></param>
             <returns></returns>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.MultiInstanceFactory">
             <summary>
             IObjectFactory that creates new instances of types for each resolution
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.DelegateFactory">
             <summary>
             IObjectFactory that invokes a specified delegate to construct the object
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.WeakDelegateFactory">
             <summary>
             IObjectFactory that invokes a specified delegate to construct the object
             Holds the delegate using a weak reference
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.InstanceFactory">
             <summary>
             Stores an particular instance to return for a type
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.WeakInstanceFactory">
             <summary>
             Stores an particular instance to return for a type
             
             Stores the instance with a weak reference
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.SingletonFactory">
             <summary>
             A factory that lazy instantiates a type and always returns the same instance
             </summary>
            </member>
        <member name="T:TinyIoC.TinyIoCContainer.CustomObjectLifetimeFactory">
             <summary>
             A factory that offloads lifetime to an external lifetime provider
             </summary>
            </member>
        <member name="P:TinyIoC.TinyIoCContainer.Current">
             <summary>
             Lazy created Singleton instance of the container for simple scenarios
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Utils.IVersionNumber">
             <summary>
             An object representing a version
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.IVersionNumber.Major">
             <summary>
             The version's major number
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.IVersionNumber.Minor">
             <summary>
             The version's minor number
             </summary>
            </member>
        <member name="T:Xamarin.UITest.Utils.VersionNumber">
             <summary>
             An object representing a version with the format <![CDATA[ <major>.<minor>.<build>.<revision>-<label> ]]>.
             </summary>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> class.
             </summary>
             <param name="versionStr">A version string used to set the version's value.</param>
            </member>
        <member name="P:Xamarin.UITest.Utils.VersionNumber.Label">
             <summary>
             The version's label component
             </summary>
             <value>The label.</value>
            </member>
        <member name="P:Xamarin.UITest.Utils.VersionNumber.RawVersion">
             <summary>
             The version string used to initialize this <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <value>The raw version.</value>
            </member>
        <member name="P:Xamarin.UITest.Utils.VersionNumber.Major">
             <summary>
             The version's major number
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.VersionNumber.Minor">
             <summary>
             The version's minor number
             </summary>
            </member>
        <member name="P:Xamarin.UITest.Utils.VersionNumber.BuildOrPatch">
             <summary>
             The version's build number
             </summary>
             <value>The build or patch.</value>
            </member>
        <member name="P:Xamarin.UITest.Utils.VersionNumber.Revision">
             <summary>
             The version's revision number
             </summary>
             <value>The revision.</value>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.CompareTo(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Compares two <see cref="T:Xamarin.UITest.Utils.VersionNumber" />s.
             </summary>
             <param name="v1">A <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare</param>
             <param name="v2">A <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare</param>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> that represents the current 
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <returns>
             A <see cref="T:System.String" /> that represents the current 
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.CompareTo(Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Compares the current <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> with the provided
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="v1">
             The <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare this 
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> with.
             </param>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.op_LessThan(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether one specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is lower than another
             specfied <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">The first <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <param name="y">The second <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <returns><c>true</c> if <c>x</c> is lower than <c>y</c>; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.op_GreaterThan(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether one specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is greater than another
             specfied <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">The first <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <param name="y">The second <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <returns><c>true</c> if <c>x</c> is greater than <c>y</c>; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.op_LessThanOrEqual(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether one specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is lower than or equal to
             another specfied <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">The first <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <param name="y">The second <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <returns><c>true</c> if <c>x</c> is lower than or equal to <c>y</c>; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.op_GreaterThanOrEqual(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether one specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is greater than or equal
             to another specfied <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">The first <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <param name="y">The second <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <returns><c>true</c> if <c>x</c> is greater than or equal to <c>y</c>; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.op_Equality(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether a specified instance of <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is equal to
             another specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">The first <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <param name="y">The second <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <returns><c>true</c> if <c>x</c> and <c>y</c> are equal; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.op_Inequality(Xamarin.UITest.Utils.VersionNumber,Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether a specified instance of <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is not equal to
             another specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">The first <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <param name="y">The second <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare.</param>
             <returns><c>true</c> if <c>x</c> and <c>y</c> are not equal; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.Equals(Xamarin.UITest.Utils.VersionNumber)">
             <summary>
             Determines whether the specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is equal to the current
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="x">
             The <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> to compare with the current 
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </param>
             <returns>
             <c>true</c> if the specified <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> is equal to the current
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to the current 
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </summary>
             <param name="obj">
             The <see cref="T:System.Object" /> to compare with the current <see cref="T:Xamarin.UITest.Utils.VersionNumber" />.
             </param>
             <returns>
             <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
             <see cref="T:Xamarin.UITest.Utils.VersionNumber" />; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:Xamarin.UITest.Utils.VersionNumber.GetHashCode">
             <summary>
             Serves as a hash function for a <see cref="T:Xamarin.UITest.Utils.VersionNumber" /> object.
             </summary>
             <returns>
             A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
             hash table.
             </returns>
            </member>
    </members>
</doc>
