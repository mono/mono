<Project>
	<UsingTask AssemblyFile="$(MSBuildThisFileDirectory)Mono.WebAssembly.Build.dll" TaskName="WasmLinkAssemblies" />
	<UsingTask AssemblyFile="$(MSBuildThisFileDirectory)Mono.WebAssembly.Build.dll" TaskName="WasmCreateRuntimeJs" />

	<PropertyGroup>
		<EnableDefaultWebContentItems Condition="'$(EnableDefaultWebContentItems)' == ''">True</EnableDefaultWebContentItems>
		<MonoWasmManagedOutputDirName Condition="'$(MonoWasmManagedOutputDirName)'==''">managed</MonoWasmManagedOutputDirName>
		<_MonoWasmManagedOutputDir>$(OutputPath)$(MonoWasmManagedOutputDirName)\</_MonoWasmManagedOutputDir>
		<MonoWasmIntermediateDir>$(IntermediateOutputPath)monowasm\</MonoWasmIntermediateDir>
		<MonoWasmLinkMode Condition="'$(MonoWasmLinkMode)'==''">SdkOnly</MonoWasmLinkMode>
		<MonoWasmI18n Condition="'$(MonoWasmI18n)'==''">None</MonoWasmI18n>
		<_MonoWasmRuntimeJs>$(OutputPath)runtime.js</_MonoWasmRuntimeJs>
	</PropertyGroup>

	<PropertyGroup>
		<CleanDependsOn>
			$(CleanDependsOn);
			_CleanManagedOutputDir;
		</CleanDependsOn>
	</PropertyGroup>

	<!-- suppress local copy for now, we don't want any local copied dlls -->
	<Target Name="CopyFilesToOutputDirectory" DependsOnTargets="MonoWasmCopyOutput" />

	<Target Name="MonoWasmCopyOutput" DependsOnTargets="_MonoWasmAssemblyCollectOutput;_MonoWasmLink">
		<Copy
				SourceFiles="@(_WasmOutput)"
				DestinationFiles="@(_WasmOutput->'$(OutputPath)%(TargetPath)')"
				SkipUnchangedFiles="True" />
	</Target>

	<Target Name="_MonoWasmAssemblyCollectOutput"
					AfterTargets="_CheckForCompileOutputs">

		<!-- 
			Make sure we set the runtime paths correctly.
			If running from a master build the runtime builds path is different
			from the nuget paths.

			FIXME should this be decoupled from whether managed symbols are produced?
		-->
		<PropertyGroup Condition="Exists('$(MonoWasmRuntimePath)builds\')">
			<_MonoWasmDebugRuntime>$(_DebugSymbolsProduced)</_MonoWasmDebugRuntime>
			<_MonoWasmRuntimePath>$(MonoWasmRuntimePath)builds\release\</_MonoWasmRuntimePath>
			<_MonoWasmRuntimePath Condition="'$(_MonoWasmDebugRuntime)'=='true'">$(MonoWasmRuntimePath)builds\debug\</_MonoWasmRuntimePath>
		</PropertyGroup>

		<PropertyGroup Condition="!Exists('$(MonoWasmRuntimePath)builds\')">
			<_MonoWasmDebugRuntime>$(_DebugSymbolsProduced)</_MonoWasmDebugRuntime>
			<_MonoWasmRuntimePath>$(MonoWasmRuntimePath)release\</_MonoWasmRuntimePath>
			<_MonoWasmRuntimePath Condition="'$(_MonoWasmDebugRuntime)'=='true'">$(MonoWasmRuntimePath)debug\</_MonoWasmRuntimePath>
		</PropertyGroup>

		<PropertyGroup Condition="'$(EnableMonoWasmThreads)'=='true' And Exists('$(MonoWasmRuntimePath)builds\')">
			<_MonoWasmDebugRuntime>$(_DebugSymbolsProduced)</_MonoWasmDebugRuntime>
			<_MonoWasmRuntimePath>$(MonoWasmRuntimePath)builds\threads-release\</_MonoWasmRuntimePath>
			<_MonoWasmRuntimePath Condition="'$(_MonoWasmDebugRuntime)'=='true'">$(MonoWasmRuntimePath)builds\threads-debug\</_MonoWasmRuntimePath>
		</PropertyGroup>

		<PropertyGroup Condition="'$(EnableMonoWasmThreads)'=='true' And !Exists('$(MonoWasmRuntimePath)builds\')">
			<_MonoWasmDebugRuntime>$(_DebugSymbolsProduced)</_MonoWasmDebugRuntime>
			<_MonoWasmRuntimePath>$(MonoWasmRuntimePath)threads-release\</_MonoWasmRuntimePath>
			<_MonoWasmRuntimePath Condition="'$(_MonoWasmDebugRuntime)'=='true'">$(MonoWasmRuntimePath)threads-debug\</_MonoWasmRuntimePath>
		</PropertyGroup>

		<ItemGroup>
			<_WasmOutput Include="$(_MonoWasmRuntimePath)mono.js" TargetPath="mono.js" />
			<_WasmOutput Include="$(_MonoWasmRuntimePath)mono.wasm" TargetPath="mono.wasm" />
			<_WasmOutput Include="$(_MonoWasmRuntimePath)mono.worker.js" TargetPath="mono.worker.js" Condition="'$(EnableMonoWasmThreads)'=='true'"/>
			<_WasmOutput Include="$(_MonoWasmRuntimePath)mono.wasm.map" TargetPath="mono.wasm.map" Condition="'$(_MonoWasmDebugRuntime)'=='true'"/>
			<_WasmOutput Include="$(_MonoWasmRuntimePath)mono.js.mem" TargetPath="mono.js.mem" Condition="'$(EnableMonoWasmThreads)'=='true'"/>
		</ItemGroup>

		<AssignTargetPath
			Files="@(Content)"
			RootFolder="$(MSBuildProjectDirectory)">
			<Output TaskParameter="AssignedFiles" ItemName="_WasmOutput" />
		</AssignTargetPath>

		<ItemGroup>
			<FileWrites Include="$(_MonoWasmRuntimeJs)" />
			<FileWrites Include="@(_WasmOutput->'$(OutputPath)%(TargetPath)')" />
		</ItemGroup>
	</Target>

	<Target Name="_MonoWasmLink"
					Inputs="@(IntermediateAssembly);@(ReferencePath);$(MSBuildAllProjects)"
					Outputs="$(_MonoWasmRuntimeJs);@(IntermediateAssembly->'$(_MonoWasmManagedOutputDir)%(Filename)%(Extension)')">
		<WasmLinkAssemblies
			RootAssembly="@(IntermediateAssembly)"
			Assemblies="@(ReferencePath)"
			FrameworkDir="$(MonoWasmFrameworkPath)"
			OutputDir="$(_MonoWasmManagedOutputDir)"
			LinkMode="$(MonoWasmLinkMode)"
			LinkSkip="$(MonoWasmLinkSkip)"
			Debug="$(_DebugSymbolsProduced)"
			I18n="$(MonoWasmI18n)"
			LinkDescriptions="@(LinkDescription)"
		/>

		<PropertyGroup>
			<_WasmHasBindingReference>@(ReferencePath->AnyHaveMetadataValue("Filename","WebAssembly.Bindings"))</_WasmHasBindingReference>
		</PropertyGroup>
		<!-- HACK this list should really come from the linker -->
		<ItemGroup>
			<_WasmOutputFiles Include="$(_MonoWasmManagedOutputDir)*.dll" />
			<_WasmOutputFiles Include="$(_MonoWasmManagedOutputDir)*.pdb" />
		</ItemGroup>
		<WasmCreateRuntimeJs
			DeployPrefix="$(MonoWasmManagedOutputDirName)"
			VfsPrefix="$(MonoWasmManagedOutputDirName)"
			InitBindings="$(_WasmHasBindingReference)"
			EnableDebugging="$(_DebugSymbolsProduced)"
			FileList="@(_WasmOutputFiles)"
			OutputFile="$(_MonoWasmRuntimeJs)"
		/>
  </Target>
	<Target Name = "_CleanManagedOutputDir">
		<ItemGroup>
			<FilesToDelete Include="$(_MonoWasmManagedOutputDir)**\*"/>
		</ItemGroup>   
    	<Delete Files="@(FilesToDelete)" />
	</Target>
</Project>