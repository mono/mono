<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebAssembly.Bindings</name>
    </assembly>
    <members>
        <member name="T:WebAssembly.Runtime">
            <summary>
              Provides access to the Mono/WebAssembly runtime to perform tasks like invoking JavaScript functions and retrieving global variables.
            </summary>
        </member>
        <member name="M:WebAssembly.Runtime.InvokeJS(System.String)">
            <summary>
            Execute the provided string in the JavaScript context
            </summary>
            <returns>The js.</returns>
            <param name="str">String.</param>
        </member>
        <member name="M:WebAssembly.Runtime.NewJSArray">
            <summary>
            Creates a new JavaScript array object
            </summary>
            <returns>The JS Array.</returns>
        </member>
        <member name="M:WebAssembly.Runtime.NewJSObject(WebAssembly.JSObject,System.Object[])">
            <summary>
            Creates a new JavaScript object 
            </summary>
            <returns>The JSO bject.</returns>
            <param name="js_func_ptr">Js func ptr.</param>
            <param name="_params">Parameters.</param>
        </member>
        <member name="M:WebAssembly.Runtime.GetGlobalObject(System.String)">
            <summary>
              Fetches a global object from the Javascript world, either from the current brower window or from the node.js global context.
            </summary>
            <remarks>
              This method returns the value of a global object marshalled for consumption in C#.
            </remarks>
            <returns>
              <para>
                The return value can either be a primitive (string, int, double), a 
                <see cref="T:WebAssembly.JSObject"/> for JavaScript objects, a 
                <see cref="T:System.Threading.Tasks.Task"/>(object) for JavaScript promises, an array of
                a byte, int or double (for Javascript objects typed as ArrayBuffer) or a 
                <see cref="T:System.Func"/> to represent JavaScript functions.  The specific version of
                the Func that will be returned depends on the parameters of the Javascript function
                and return value.
              </para>
              <para>
                The value of a returned promise (The Task(object) return) can in turn be any of the above
                valuews.
              </para>
            </returns>
            <param name="str">The name of the global object, or null if you want to retrieve the 'global' object itself.
            On a browser, this is the 'window' object, on node.js it is the 'global' object.
            </param>
        </member>
        <member name="T:WebAssembly.JSObject">
            <summary>
              JSObjects are wrappers for a native JavaScript object, and
              they retain a reference to the JavaScript object for the lifetime of this C# object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebAssembly.JSObject.Invoke(System.String,System.Object[])" -->
        <member name="M:WebAssembly.JSObject.GetObjectProperty(System.String)">
            <summary>
              Returns the named property from the object, or throws a JSException on error.
            </summary>
            <param name="name">The name of the property to lookup</param>
            <remarks>
              This method can raise a <see cref="T:WebAssembly.JSException"/> if fetching the property in Javascript raises an exception.
            </remarks>
            <returns>
              <para>
                The return value can either be a primitive (string, int, double), a 
                <see cref="T:WebAssembly.JSObject"/> for JavaScript objects, a 
                <see cref="T:System.Threading.Tasks.Task"/>(object) for JavaScript promises, an array of
                a byte, int or double (for Javascript objects typed as ArrayBuffer) or a 
                <see cref="T:System.Func"/> to represent JavaScript functions.  The specific version of
                the Func that will be returned depends on the parameters of the Javascript function
                and return value.
              </para>
              <para>
                The value of a returned promise (The Task(object) return) can in turn be any of the above
                valuews.
              </para>
            </returns>
        </member>
        <member name="M:WebAssembly.JSObject.SetObjectProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
              Sets the named property to the provided value.
            </summary>
            <remarks>
            </remarks>
            <param name="name">The name of the property to lookup</param>
            <param name="value">The value can be a primitive type (int, double, string, bool), an
            array that will be surfaced as a typed ArrayBuffer (byte[], sbyte[], short[], ushort[],
            float[], double[]) </param>
            <param name="createIfNotExists">Defaults to <see langword="true"/> and creates the property on the javascript object if not found, if set to <see langword="false"/> it will not create the property if it does not exist.  If the property exists, the value is updated with the provided value.</param>
            <param name="hasOwnProperty"></param>
        </member>
    </members>
</doc>
