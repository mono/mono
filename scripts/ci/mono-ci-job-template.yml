parameters:
- name: displayName
  type: string
- name: os
  type: string
- name: arch
  type: string
- name: timeoutInMinutes
  type: number
  default: 120
- name: publishTestResults
  type: boolean
  default: true
- name: containerImage
  type: string
  default: ''
- name: additionalCITags
  type: string
  default: ''
- name: additionalSteps
  type: stepList
  default: []

jobs:
- job:
  displayName: ${{ parameters.displayName }}
  pool:
    ${{ if eq(parameters.os, 'osx') }}:
      vmImage: macos-10.15
    ${{ if and(eq(parameters.os, 'linux'),eq(parameters.arch, 'amd64')) }}:
      vmImage: ubuntu-20.04
    ${{ if and(eq(parameters.os, 'linux'),eq(parameters.arch, 'aarch64')) }}:
      name: MonoARM64
    ${{ if and(eq(parameters.os, 'linux'),eq(parameters.arch, 'armhf')) }}:
      name: MonoARM64
  ${{ if and(eq(parameters.os, 'linux'), eq(parameters.arch, 'i386')) }}:
    container:
      image: i386/ubuntu:20.04
      options: --platform linux/386
  ${{ if and(eq(parameters.os, 'linux'), eq(parameters.arch, 'aarch64')) }}:
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8-a45aeeb-20190620155855
      options: --platform linux/arm64 --user 0:0
  ${{ if and(eq(parameters.os, 'linux'), eq(parameters.arch, 'armhf')) }}:
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-mono-arm32v7-20210301133940-7b1af2f
      options: --platform linux/arm/v7 --user 0:0
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  steps:
    - checkout: self
      clean: true
      fetchDepth: 10
      submodules: recursive
    - ${{ if eq(parameters.os, 'osx')}}:
      - script: brew install autoconf automake libtool pkg-config cmake python3
        displayName: Install dependencies
    - ${{ if eq(parameters.os, 'linux')}}:
      - script: sudo apt update && sudo apt install -y autoconf libtool automake build-essential gettext cmake python3 curl wget bc
        displayName: Install dependencies
    - script: CI_TAGS="${{ parameters.os }}-${{ parameters.arch }},$(pullRequestCITags),${{ parameters.additionalCITags }}" scripts/ci/run-jenkins.sh
      displayName: Build and Test

    - ${{ each step in parameters.additionalSteps }}:
        - ${{ step }}

    - script: echo "Found unstable steps, please check previous logs for details." && exit 1
      displayName: Fail build on unstable steps
      condition: eq(variables['BuildHasUnstableSteps'], true)
    - task: PublishTestResults@2
      condition: and(succeededOrFailed(), eq('${{ parameters.publishTestResults }}', 'true'), not(contains('${{ parameters.additionalCITags }}', 'no-tests')))
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/TestResult*.xml'
        testRunTitle: ${{ parameters.displayName }}
        failTaskOnFailedTests: true
