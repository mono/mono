trigger:
  batch: true
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master

variables:
- ${{ if ne(variables['System.TeamProject'], 'public') }}:
  - group: DotNet-VSTS-Bot
  - group: DotNet-Blob-Feed
- ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  # Variables used by arcade to publish packages
  - name: _DotNetFeedUrl
    value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
  - name: _DotNetValidationArtifactsCategory
    value: .NETCore
  - name: _DotNetArtifactsCategory
    value: .NETCore

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      variables:
        - _BuildConfig: Release
      jobs:

      ############ LINUX BUILD ############
      - job: Build_Linux
        displayName: Linux
        timeoutInMinutes: 120
        strategy:
          matrix:
            x64:
              poolname: Hosted Ubuntu 1604
              assetManifestOS: linux
              assetManifestPlatform: x64
              installDependencies: true
              llvm: false
            x64_LLVM:
              poolname: Hosted Ubuntu 1604
              assetManifestOS: linux
              assetManifestPlatform: x64_LLVM
              installDependencies: true
              llvm: true
            ARM64:
              assetManifestOS: linux
              assetManifestPlatform: arm64
              installDependencies: false
              llvm: false
              ${{ if eq(variables['System.TeamProject'], 'public') }}:
                poolname: Xamarin-ARM64
              ${{ if eq(variables['System.TeamProject'], 'internal') }}:
                poolname: Xamarin-ARM64-Private
        pool:
          name: $(poolname)
        steps:
        - bash: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - bash: |
            git submodule update --init -- external/llvm
          condition: eq(variables['llvm'], 'true')
          displayName: 'Checkout external/llvm'

        - bash: |
            sudo apt update
            sudo apt -y install nuget libgdiplus build-essential libtool libtool-bin cmake gettext bc
          displayName: 'Install Linux dependencies'
          condition: and(succeeded(), eq(variables['installDependencies'], 'true'))

        - bash: |
            sed -i "s#git://github.com/#https://dn-bot:${dncengPat}@dev.azure.com/dnceng/internal/_git/#; s#\.git\$##; s#\(url = .*\)/\(.*\)#\1-\2#" .gitmodules
          env:
            dncengPat: $(dn-bot-dotnet-build-rw-code-rw)
          displayName: 'Rewrite .gitmodules'
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

        - bash: |
            if [ $(llvm) = true ]; then
              ./netcore/build.sh --ci -c $(_BuildConfig) --llvm
            else
              ./netcore/build.sh --ci -c $(_BuildConfig)
            fi
          displayName: 'Build (Make)'

        - bash: |
            if [ $(llvm) = true ]; then
              ./netcore/build.sh --ci --pack --skipnative --skipmscorlib --llvm
            else
              ./netcore/build.sh --ci --pack --skipnative --skipmscorlib
            fi
            mkdir -p ./artifacts/log/$(_BuildConfig)
            mkdir -p ./artifacts/SymStore/$(_BuildConfig)
            mkdir -p ./artifacts/packages/$(_BuildConfig)/Shipping
            cp ./netcore/System.Private.CoreLib/bin/*/System.Private.CoreLib.pdb ./artifacts/SymStore/$(_BuildConfig)
            rm -f ./artifacts/Microsoft.NETCore.Runtime.Mono*nupkg
            mv ./artifacts/*.nupkg ./artifacts/packages/$(_BuildConfig)/Shipping
          displayName: 'Build nupkg'

        - bash: |
            ./netcore/build.sh --ci --test --skipnative --skipmscorlib
          displayName: 'Download and Run CoreFX Tests'
          timeoutInMinutes: 90
          condition: and(succeeded(), eq(variables['System.TeamProject'], 'public'), ne(variables['llvm'], 'true'))

        - task: PublishTestResults@2
          inputs:
            testRunTitle: $(poolname)
            testResultsFormat: 'XUnit'
            testResultsFiles: 'netcore/corefx/tests/TestResult-*.xml'
          condition: and(succeededOrFailed(), eq(variables['System.TeamProject'], 'public'))

        - script: ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) /p:DotNetPublishUsingPipelines=true /p:DotNetPublishToBlobFeed=true /p:DotNetPublishBlobFeedUrl=$(_DotNetFeedUrl) /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory) /p:AssetManifestOS=$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) --projects $(Build.SourcesDirectory)/eng/empty.csproj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

      ############ MACOS BUILD ############
      - job: Build_macOS
        displayName: macOS
        timeoutInMinutes: 120
        strategy:
          matrix:
            x64:
              poolname: Hosted macOS
              assetManifestOS: osx
              assetManifestPlatform: x64
              llvm: false
            #TODO: download pre-built LLVM binaries, currently it has to build llvm from sources (>1h)
            #x64_LLVM:
            #  poolname: Hosted macOS
            #  assetManifestOS: osx
            #  assetManifestPlatform: x64
            #  llvm: true
        pool:
          name: $(poolname)
        steps:
        - bash: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - bash: |
            git submodule update --init -- external/llvm
          condition: eq(variables['llvm'], 'true')
          displayName: 'Checkout external/llvm'

        - bash: |
            brew install autoconf automake libtool gnu-sed
          displayName: 'Prepare macOS dependencies'

        - bash: |
            gsed -i "s#git://github.com/#https://dn-bot:${dncengPat}@dev.azure.com/dnceng/internal/_git/#; s#\.git\$##; s#\(url = .*\)/\(.*\)#\1-\2#" .gitmodules
          env:
            dncengPat: $(dn-bot-dotnet-build-rw-code-rw)
          displayName: 'Rewrite .gitmodules'
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

        - bash: |
            if [ $(llvm) = true ]; then
              ./netcore/build.sh --ci -c $(_BuildConfig) --llvm
            else
              ./netcore/build.sh --ci -c $(_BuildConfig)
            fi
          displayName: 'Build (Make)'

        - bash: |
            if [ $(llvm) = true ]; then
              ./netcore/build.sh --ci --pack --skipnative --skipmscorlib --llvm
            else
              ./netcore/build.sh --ci --pack --skipnative --skipmscorlib
            fi
            mkdir -p ./artifacts/log/$(_BuildConfig)
            mkdir -p ./artifacts/SymStore/$(_BuildConfig)
            mkdir -p ./artifacts/packages/$(_BuildConfig)/Shipping
            cp ./netcore/System.Private.CoreLib/bin/x64/System.Private.CoreLib.pdb ./artifacts/SymStore/$(_BuildConfig)
            rm -f ./artifacts/Microsoft.NETCore.Runtime.Mono*nupkg
            mv ./artifacts/*.nupkg ./artifacts/packages/$(_BuildConfig)/Shipping
          displayName: 'Build nupkg'

        - bash: |
            ./netcore/build.sh --ci --test --skipnative --skipmscorlib
          displayName: 'Download and Run CoreFX Tests'
          timeoutInMinutes: 90
          condition: and(succeeded(), eq(variables['System.TeamProject'], 'public'), ne(variables['llvm'], 'true'))

        - task: PublishTestResults@2
          inputs:
            testRunTitle: $(poolname)
            testResultsFormat: 'XUnit'
            testResultsFiles: 'netcore/corefx/tests/TestResult-*.xml'
          condition: and(succeededOrFailed(), eq(variables['System.TeamProject'], 'public'))

        - script: ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) /p:DotNetPublishUsingPipelines=true /p:DotNetPublishToBlobFeed=true /p:DotNetPublishBlobFeedUrl=$(_DotNetFeedUrl) /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory) /p:AssetManifestOS=$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) --projects $(Build.SourcesDirectory)/eng/empty.csproj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

      ############ WINDOWS BUILD ############
      - job: Build_Windows
        displayName: Windows
        timeoutInMinutes: 120
        strategy:
          matrix:
            x64:
              poolname: Hosted VS2017
              assetManifestOS: win
              assetManifestPlatform: x64
        pool:
          name: $(poolname)
        steps:
        - bash: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - script: |
            choco install msys2 --params="/InstallDir:%CD:~0,2%\msys64 /NoUpdate /NoPath"
            %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Syyuu
            %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Syuu
            %CD:~0,2%\msys64\usr\bin\bash -lc "pacman --noconfirm -Suy"
            %CD:~0,2%\msys64\usr\bin\bash -lc "pacman --noconfirm -S --needed python2 gettext autoconf automake libtool mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-make"
            copy %CD:~0,2%\msys64\mingw64\bin\mingw32-make.exe %CD:~0,2%\msys64\mingw64\bin\make.exe
          env:
            CHERE_INVOKING: yes
          displayName: 'Prepare Windows dependencies'

        - bash: |
            sed -i "s#git://github.com/#https://dn-bot:${dncengPat}@dev.azure.com/dnceng/internal/_git/#; s#\.git\$##; s#\(url = .*\)/\(.*\)#\1-\2#" .gitmodules
          env:
            dncengPat: $(dn-bot-dotnet-build-rw-code-rw)
          displayName: 'Rewrite .gitmodules'
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

        - script: |
            %CD:~0,2%\msys64\usr\bin\bash -lc "PATH=/usr/bin:/mingw64/bin:/c/hostedtoolcache/windows/dncs/2.2.203/x64:/c/Program\ Files/Git/bin ./autogen.sh --host=x86_64-w64-mingw32 --with-core=only"
            CALL msvc\run-msbuild.bat build x86_64 release "/p:PlatformToolset=v140 /p:MONO_TARGET_GC=sgen"
            IF %ERRORLEVEL% NEQ 0 EXIT /b %ERRORLEVEL%
            %CD:~0,2%\msys64\usr\bin\bash -lc "PATH=/c/windows/System32/WindowsPowerShell/v1.0/:/usr/bin:/mingw64/bin:/c/hostedtoolcache/windows/dncs/2.2.203/x64:/c/Program\ Files/Git/bin make -C netcore bcl CORLIB_BUILD_FLAGS='-c $(_BuildConfig)'"
            IF %ERRORLEVEL% NEQ 0 EXIT /b %ERRORLEVEL%
            MKDIR mono\mini\.libs\
            COPY msvc\build\sgen\x64\bin\Release\mono-2.0-sgen.dll mono\mini\.libs\monosgen-2.0.dll
            %CD:~0,2%\msys64\usr\bin\bash -lc "PATH=/c/windows/System32/WindowsPowerShell/v1.0/:/usr/bin:/mingw64/bin:/c/hostedtoolcache/windows/dncs/2.2.203/x64:/c/Program\ Files/Git/bin make -C netcore nupkg"
            IF %ERRORLEVEL% NEQ 0 EXIT /b %ERRORLEVEL%
            MKDIR artifacts\log\$(_BuildConfig)\
            MKDIR artifacts\SymStore\$(_BuildConfig)\
            MKDIR artifacts\packages\$(_BuildConfig)\Shipping\
            COPY netcore\System.Private.CoreLib\bin\x64\System.Private.CoreLib.pdb artifacts\SymStore\$(_BuildConfig)\
            MOVE artifacts\*.nupkg artifacts\packages\$(_BuildConfig)\Shipping\
          displayName: 'Build (MSBuild and Make)'
          env:
            CHERE_INVOKING: yes

        - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) /p:DotNetPublishUsingPipelines=true /p:DotNetPublishToBlobFeed=true /p:DotNetPublishBlobFeedUrl=$(_DotNetFeedUrl) /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory) /p:AssetManifestOS=$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) -projects $(Build.SourcesDirectory)\eng\empty.csproj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

############ POST BUILD ARCADE LOGIC ############
- ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      enableSourceLinkValidation: false
      enableSigningValidation: false
      enableSymbolValidation: false
      enableNugetValidation: true
