variables:
- ${{ if ne(variables['System.TeamProject'], 'public') }}:
  - group: DotNet-VSTS-Bot
  - group: DotNet-Blob-Feed
- ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  # Variables used to publish packages to blob feed
  - name: dotnetFeedUrl
    value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
  # Variables used by arcade to gather asset manifests
  - name: _DotNetPublishToBlobFeed
    value: true

jobs:
- job: Build
  strategy:
    matrix:
      Linux x64:
        poolname: Hosted Ubuntu 1604
        manifest: linux-x64
        sed: sed
      Windows x64:
        poolname: Hosted VS2017
        manifest: win-x64
        sed: sed
      OSX x64:
        poolname: Hosted macOS
        manifest: osx-x64
        sed: gsed
  pool:
    name: $(poolname)
  steps:
  - bash: |  
      brew install autoconf automake libtool gnu-sed
    displayName: 'Prepare OSX dependencies'
    condition: eq(variables['poolname'], 'Hosted macOS')

  - bash: |  
      sudo apt update
      sudo apt -y install nuget build-essential libtool libtool-bin cmake gettext dotnet-sdk-2.2
    displayName: 'Prepare Linux dependencies'
    condition: eq(variables['poolname'], 'Hosted Ubuntu 1604')
  
  - script: |
      choco install msys2 --params="/InstallDir:%CD:~0,2%\msys64 /NoUpdate /NoPath"
      %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Syyuu
      %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Syuu
      %CD:~0,2%\msys64\usr\bin\bash -lc "pacman --noconfirm -Suy"
      %CD:~0,2%\msys64\usr\bin\bash -lc "pacman --noconfirm -S --needed python2 gettext autoconf automake libtool mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-make"
      copy %CD:~0,2%\msys64\mingw64\bin\mingw32-make.exe %CD:~0,2%\msys64\mingw64\bin\make.exe
    env:
      CHERE_INVOKING: yes
    displayName: 'Prepare Windows dependencies'
    condition: eq(variables['poolname'], 'Hosted VS2017')

  - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    - bash: |
        ${sed} -i "s#git://github.com/#https://dn-bot:${dncengPat}@dev.azure.com/dnceng/internal/_git/#; s#\.git\$##; s#\(url = .*\)/\(.*\)#\1-\2#" .gitmodules
      env:
        dncengPat: $(dn-bot-dotnet-build-rw-code-rw)
        sed: $(sed)
      displayName: 'Rewrite .gitmodules'

  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.203'
    displayName: Install .NET Core 2.2 latest
    condition: eq(variables['poolname'], 'Hosted VS2017')

  - script: |
      %CD:~0,2%\msys64\usr\bin\bash -lc "PATH=/usr/bin:/mingw64/bin:/c/hostedtoolcache/windows/dncs/2.2.203/x64:/c/Program\ Files/Git/bin ./autogen.sh --host=x86_64-w64-mingw32 --with-core=only"
      CALL msvc\run-msbuild.bat build x86_64 release "/p:PlatformToolset=v140 /p:MONO_TARGET_GC=sgen"
      %CD:~0,2%\msys64\usr\bin\bash -lc "PATH=/usr/bin:/mingw64/bin:/c/hostedtoolcache/windows/dncs/2.2.203/x64:/c/Program\ Files/Git/bin make -C netcore bcl"
      MKDIR mono\mini\.libs\
      COPY msvc\build\sgen\x64\bin\Release\mono-2.0-sgen.dll mono\mini\.libs\monosgen-2.0.dll
      %CD:~0,2%\msys64\usr\bin\bash -lc "PATH=/usr/bin:/mingw64/bin:/c/hostedtoolcache/windows/dncs/2.2.203/x64:/c/Program\ Files/Git/bin make -C netcore nupkg"
    displayName: 'Build (MSBuild and Make)'
    env:
      CHERE_INVOKING: yes
    condition: eq(variables['poolname'], 'Hosted VS2017')

  - bash: |
      ./autogen.sh --with-core=only
      make
      make -C netcore nupkg
    displayName: 'Build (Make)'
    condition: ne(variables['poolname'], 'Hosted VS2017')
  
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    - powershell: |
        eng\common\build.ps1 /p:DotNetPublishToBlobFeed=true -ci -restore -projects $(Build.Repository.LocalPath)\eng\empty.proj
      displayName: 'restore Arcade stuff with PowerShell'
      condition: eq(variables['poolname'], 'Hosted VS2017')
    - bash: |
        ./eng/common/build.sh -p:DotNetPublishToBlobFeed=true --ci --restore --projects $(Build.Repository.LocalPath)/eng/empty.proj
      displayName: 'restore Arcade stuff with Bash'
      condition: ne(variables['poolname'], 'Hosted VS2017')
    - bash: |
        rm -f ./artifacts/Microsoft.NETCore.Runtime.Mono*nupkg
      displayName: 'Delete metapackage, except on Windows'
      condition: ne(variables['poolname'], 'Hosted VS2017')
    - bash: |
        dotnet msbuild eng/publishwitharcade.proj -p:AzureFeedUrl=$(dotnetfeedUrl) -p:AzureAccountKey=${dotnetFeedPat} -p:AssetManifest=${manifest}
      env:
        dotnetFeedPat: $(dotnetfeed-storage-access-key-1)
        manifest: $(manifest)
      displayName: 'publish with Arcade'
    - task: CopyFiles@2
      displayName: Gather Asset Manifests
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/artifacts/log/Debug/AssetManifest'
        TargetFolder: '$(Build.StagingDirectory)/AssetManifests'
      continueOnError: false
      condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))
    - task: PublishBuildArtifacts@1
      displayName: Push Asset Manifests
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)/AssetManifests'
        PublishLocation: Container
        ArtifactName: AssetManifests
      continueOnError: false
      condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))

- ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/phases/publish-build-assets.yml
    parameters:
      dependsOn:
        - Build
      queue:
        name: Hosted VS2017
