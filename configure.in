AC_INIT(README)
AC_CANONICAL_SYSTEM

# Gross hack to enable 'make dist' on automake 1.9+tar 1.14.
# The extra brackets are to foil regex-based scans.
m4_ifdef([_A][M_PROG_TAR],[_A][M_SET_OPTION([tar-ustar])])

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(mono,2.9)
AM_MAINTAINER_MODE

API_VER=2.0
AC_SUBST(API_VER)

AC_PROG_LN_S

# In case of cygwin, override LN_S, irrespective of what it determines.
# The build uses cygwin, but the actual runtime doesn't.
case $host_os in
*cygwin* ) LN_S='cp -p';;
esac

dnl
dnl libgc checks
dnl

gc_headers=no
gc=included
gc_msg="included Boehm"
use_included_gc=no
libgc_configure_args=

if test -d $srcdir/libgc ; then
  gc_default=included
else
  gc_default=boehm
fi

# These variables are the CPPFLAGS/CFLAGS passed to libgc's configure
# libgc should inherit the original CFLAGS/CPPFLAGS passed to configure, i.e. -O0
CPPFLAGS_FOR_LIBGC=$CPPFLAGS
CFLAGS_FOR_LIBGC=$CFLAGS
CPPFLAGS_FOR_EGLIB=$CPPFLAGS
CFLAGS_FOR_EGLIB=$CFLAGS

#
# These are the flags that need to be stored in the mono.pc file for 
# compiling code that will embed Mono
#
libmono_cflags=""
libmono_ldflags=""
AC_SUBST(libmono_cflags)
AC_SUBST(libmono_ldflags)

# Variable to have relocatable .pc files (lib, or lib64)
reloc_libdir=`basename ${libdir}`
AC_SUBST(reloc_libdir)

dnl if linker handles the version script
no_version_script=no

# Set to yes if Unix sockets cannot be created in an anonymous namespace
need_link_unlink=no

# Thread configuration inspired by sleepycat's db
AC_MSG_CHECKING([host platform characteristics])
libgc_threads=no
has_dtrace=no
parallel_mark=yes
ikvm_native=yes

case "$host" in
	powerpc*-*-linux*)
		# https://bugzilla.novell.com/show_bug.cgi?id=504411
		disable_munmap=yes
	;;
esac

host_win32=no
target_win32=no
case "$host" in
	*-mingw*|*-*-cygwin*)
		AC_DEFINE(HOST_WIN32,1,[Host Platform is Win32])
		AC_DEFINE(DISABLE_PORTABILITY,1,[Disable the io-portability layer])
		AC_DEFINE(PLATFORM_NO_SYMLINKS,1,[This platform does not support symlinks])
		host_win32=yes
		if test "x$cross_compiling" = "xno"; then
			target_win32=yes
			if test "x$host" == "x$target"; then
				AC_DEFINE(TARGET_WIN32,1,[Target OS is Win32])
			fi
			CC="gcc -mno-cygwin -g"
			CXX="g++ -mno-cygwin -g"
			# So libgc configure gets -mno-cygwin
			export CC
			export CXX
			CFLAGS_FOR_EGLIB="$CFLAGS_FOR_EGLIB -mno-cygwin"
		else
			target_win32=yes
			AC_DEFINE(TARGET_WIN32,1,[Target OS is Win32/MinGW])
			AC_DEFINE(MINGW_CROSS_COMPILE,1,[Cross-compiling using MinGW])
		fi
		HOST_CC="gcc"
		# Windows 2000 is required that includes Internet Explorer 5.01
		CPPFLAGS="$CPPFLAGS -DWINVER=0x0500 -D_WIN32_WINNT=0x0500 -D_WIN32_IE=0x0501 -D_UNICODE -DUNICODE -DWIN32_THREADS -DFD_SETSIZE=1024"
		LDFLAGS="$LDFLAGS -lmswsock -lws2_32 -lole32 -loleaut32 -lpsapi -lversion -ladvapi32 -lwinmm -lkernel32"
		libmono_cflags="-mno-cygwin -mms-bitfields -mwindows"
		libmono_ldflags="-mno-cygwin -mms-bitfields -mwindows"
		libdl=
		libgc_threads=win32
		gc_default=included
		with_sigaltstack=no
		LN_S=cp
		# This forces libgc to use the DllMain based thread registration code on win32
		libgc_configure_args="$libgc_configure_args --enable-win32-dllmain=yes"
		;;
	*-*-*netbsd*)
		host_win32=no
		CPPFLAGS="$CPPFLAGS -D_REENTRANT -DGC_NETBSD_THREADS -D_GNU_SOURCE"
		libmono_cflags="-D_REENTRANT"
		LDFLAGS="$LDFLAGS -pthread"
		CPPFLAGS="$CPPFLAGS -DPLATFORM_BSD"
		libmono_ldflags="-pthread"
		need_link_unlink=yes
		libdl="-ldl"
		libgc_threads=pthreads
		with_sigaltstack=no
		use_sigposix=yes
		;;
	*-*-*freebsd*)
		host_win32=no
		if test "x$PTHREAD_CFLAGS" = "x"; then
			CPPFLAGS="$CPPFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags=
		else
			CPPFLAGS="$CPPFLAGS $PTHREAD_CFLAGS -DGC_FREEBSD_THREADS"
			libmono_cflags="$PTHREAD_CFLAGS"
		fi
		if test "x$PTHREAD_LIBS" = "x"; then
			LDFLAGS="$LDFLAGS -pthread"
			libmono_ldflags="-pthread"
		else
			LDFLAGS="$LDFLAGS $PTHREAD_LIBS"
			libmono_ldflags="$PTHREAD_LIBS"
		fi
		CPPFLAGS="$CPPFLAGS -DPLATFORM_BSD"
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID, 1, [pthread is a pointer])
		libdl=
		libgc_threads=pthreads
		# This doesn't seem to work as of 7.0 on amd64
		with_sigaltstack=no
# TLS is only partially implemented on -CURRENT (compiler support
# but NOT library support)
#
		with_tls=pthread
		use_sigposix=yes
		;;
	*-*-*openbsd*)
		host_win32=no
		CPPFLAGS="$CPPFLAGS -D_THREAD_SAFE -DGC_OPENBSD_THREADS -DPLATFORM_BSD -D_REENTRANT -DUSE_MMAP"
		if test "x$disable_munmap" != "xyes"; then
		CPPFLAGS="$CPPFLAGS -DUSE_MUNMAP"
		fi
		libmono_cflags="-D_THREAD_SAFE -D_REENTRANT"
		LDFLAGS="$LDFLAGS -pthread"
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		libdl=
		gc_default=boehm
		libgc_threads=pthreads
		with_sigaltstack=no
		use_sigposix=yes
		;;
	*-*-linux*)
		host_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_LINUX_THREADS -D_GNU_SOURCE -D_REENTRANT -DUSE_MMAP"
		if test "x$disable_munmap" != "xyes"; then
			CPPFLAGS="$CPPFLAGS -DUSE_MUNMAP"
		fi
		libmono_cflags="-D_REENTRANT"
		libdl="-ldl"
		libgc_threads=pthreads
		use_sigposix=yes
		;;
	*-*-nacl*)
		host_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_LINUX_THREADS -D_GNU_SOURCE -D_REENTRANT -DUSE_MMAP"
		if test "x$disable_munmap" != "xyes"; then
			CPPFLAGS="$CPPFLAGS -DUSE_MUNMAP"
		fi
		libmono_cflags="-D_REENTRANT"
		libdl=
		libgc_threads=pthreads
		gc_default=boehm
		use_sigposix=yes
		ikvm_native=no
		AC_DEFINE(DISABLE_SOCKETS,1,[Disable sockets support])
		;;
	*-*-hpux*)
	        host_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_HPUX_THREADS -D_HPUX_SOURCE -D_XOPEN_SOURCE_EXTENDED -D_REENTRANT"
		# +ESdbgasm only valid on bundled cc on RISC
		# silently ignored for ia64
		if test $GCC != "yes"; then
			CFLAGS="$CFLAGS +ESdbgasm"
			# Arrange for run-time dereferencing of null
			# pointers to produce a SIGSEGV signal.
			LDFLAGS="$LDFLAGS -z"
		fi
		CFLAGS="$CFLAGS +ESdbgasm"
		LDFLAGS="$LDFLAGS -z"
		libmono_cflags="-D_REENTRANT"
		libmono_ldflags="-lpthread"
		libgc_threads=pthreads
		need_link_unlink=yes
		use_sigposix=yes
		;;
	*-*-solaris*)
		host_win32=no
		CPPFLAGS="$CPPFLAGS -DGC_SOLARIS_THREADS -DGC_SOLARIS_PTHREADS -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -DUSE_MMAP -DUSE_MUNMAP -DPLATFORM_SOLARIS"
		need_link_unlink=yes
		libmono_cflags="-D_REENTRANT"
		libgc_threads=pthreads
		# This doesn't seem to work on solaris/x86, but the configure test runs
		with_tls=pthread
		has_dtrace=yes
		use_sigposix=yes
		enable_solaris_tar_check=yes
		;;
	*-*-darwin*)
		parallel_mark="Disabled_Currently_Hangs_On_MacOSX"
		host_win32=no
		platform_darwin=yes
		CPPFLAGS="$CPPFLAGS -no-cpp-precomp -D_THREAD_SAFE -DGC_MACOSX_THREADS -DPLATFORM_MACOSX -DUSE_MMAP -DUSE_MUNMAP"
		CPPFLAGS="$CPPFLAGS -DGetCurrentProcess=MonoGetCurrentProcess -DGetCurrentThread=MonoGetCurrentThread -DCreateEvent=MonoCreateEvent"
		libmono_cflags="-D_THREAD_SAFE"
		LDFLAGS="$LDFLAGS -pthread"
		libmono_ldflags="-pthread"
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		AC_DEFINE(USE_MACH_SEMA, 1, [...])
		no_version_script=yes
		libdl=
		libgc_threads=pthreads
		has_dtrace=yes
		if test "x$cross_compiling" = "xyes"; then
			has_broken_apple_cpp=yes
		fi
		dnl Snow Leopard is horribly broken -- it reports itself as i386-apple-darwin10.0.0, but
		dnl its gcc defaults to 64-bit mode.  They have also deprecated the usage of ucontext
		dnl we need to set some flags to build our 32-bit binaries on 10.6 properly
		case "$host" in
			dnl Snow Leopard config.guess reports as this
			i*86-*-darwin10*)
				BROKEN_DARWIN_FLAGS="-arch i386 -D_XOPEN_SOURCE -mmacosx-version-min=10.5"
				CPPFLAGS="$CPPFLAGS $BROKEN_DARWIN_FLAGS"
				CFLAGS="$CFLAGS $BROKEN_DARWIN_FLAGS"
				CXXFLAGS="$CXXFLAGS $BROKEN_DARWIN_FLAGS"
				CCASFLAGS="$CCASFLAGS $BROKEN_DARWIN_FLAGS"
				CPPFLAGS_FOR_LIBGC="$CPPFLAGS_FOR_LIBGC $BROKEN_DARWIN_FLAGS"
				CFLAGS_FOR_LIBGC="$CFLAGS_FOR_LIBGC $BROKEN_DARWIN_FLAGS"
				CPPFLAGS_FOR_EGLIB="$CPPFLAGS_FOR_EGLIB $BROKEN_DARWIN_FLAGS"
				CFLAGS_FOR_EGLIB="$CFLAGS_FOR_EGLIB $BROKEN_DARWIN_FLAGS"
				;;
		esac
		;;
	*-*-haiku*)
		host_win32=no
		CPPFLAGS="$CPPFLAGS -D_REENTRANT -D_THREAD_SAFE"
		libmono_cflags="-D_REENTRANT -D_THREAD_SAFE"
		libdl=
		LIBS="$LIBS -lnetwork"
		need_link_unlink=yes
		AC_DEFINE(PTHREAD_POINTER_ID)
		libgc_threads=pthreads
		use_sigposix=yes
		;;
	*)
		AC_MSG_WARN([*** Please add $host to configure.in checks!])
		host_win32=no
		libdl="-ldl"
		;;
esac
AC_MSG_RESULT(ok)

if test x$need_link_unlink = xyes; then
   AC_DEFINE(NEED_LINK_UNLINK, 1, [Define if Unix sockets cannot be created in an anonymous namespace])
fi

AM_CONDITIONAL(HOST_WIN32, test x$host_win32 = xyes)
AM_CONDITIONAL(TARGET_WIN32, test x$target_win32 = xyes)
AM_CONDITIONAL(PLATFORM_LINUX, echo x$target_os | grep -q linux)
AM_CONDITIONAL(PLATFORM_DARWIN, test x$platform_darwin = xyes)
AM_CONDITIONAL(PLATFORM_SIGPOSIX, test x$use_sigposix = xyes)

AC_CHECK_TOOL(CC, gcc, gcc)
AC_PROG_CC
AC_CHECK_TOOL(CXX, g++, g++)
AC_PROG_CXX
AM_PROG_AS
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_AWK
dnl We should use AM_PROG_AS, but it's not available on automake/aclocal 1.4
: ${CCAS='$(CC)'}
# Set ASFLAGS if not already set.
: ${CCASFLAGS='$(CFLAGS)'}
AC_SUBST(CCAS)
AC_SUBST(CCASFLAGS)

# AC_PROG_CXX helpfully sets CXX to g++ even if no c++ compiler is found so check
# GXX instead. See http://lists.gnu.org/archive/html/bug-autoconf/2002-04/msg00056.html
if test "x$CXX" = "xg++"; then
	if test "x$GXX" != "xyes"; then
		# automake/libtool is so broken, it requires g++ even if the c++ sources
		# are inside automake conditionals
		AC_MSG_ERROR([You need to install g++])
	fi
fi

AC_CHECK_PROG(BISON, bison,yes,no)
if test "x$BISON" = "xno";
then
	AC_MSG_ERROR([You need to install bison])
fi

dnl may require a specific autoconf version
dnl AC_PROG_CC_FOR_BUILD
dnl CC_FOR_BUILD not automatically detected
CC_FOR_BUILD=$CC
CFLAGS_FOR_BUILD=$CFLAGS
BUILD_EXEEXT=
if test "x$cross_compiling" = "xyes"; then
	CC_FOR_BUILD=cc
	CFLAGS_FOR_BUILD=
	BUILD_EXEEXT=""
fi
AC_SUBST(CC_FOR_BUILD)
AC_SUBST(CFLAGS_FOR_BUILD)
AC_SUBST(HOST_CC)
AC_SUBST(BUILD_EXEEXT)

AM_CONDITIONAL(CROSS_COMPILING, [test x$cross_compiling = xyes])
AM_CONDITIONAL(USE_BATCH_FILES, [test x$host_win32 = xyes -a x$cross_compiling = xyes])

# Set STDC_HEADERS
AC_HEADER_STDC
AC_LIBTOOL_WIN32_DLL
# This causes monodis to not link correctly
#AC_DISABLE_FAST_INSTALL
AM_PROG_LIBTOOL
# Use dolt (http://dolt.freedesktop.org/) instead of libtool for building.
DOLT

export_ldflags=`(./libtool --config; echo eval echo \\$export_dynamic_flag_spec) | sh`
AC_SUBST(export_ldflags)

# Test whenever ld supports -version-script
AC_PROG_LD
AC_PROG_LD_GNU
if test "x$lt_cv_prog_gnu_ld" = "xno"; then
   no_version_script=yes
fi

AM_CONDITIONAL(NO_VERSION_SCRIPT, test x$no_version_script = xyes)

AC_CHECK_HEADERS(sys/filio.h sys/sockio.h netdb.h utime.h sys/utime.h semaphore.h sys/un.h linux/rtc.h sys/syscall.h sys/mkdev.h sys/uio.h sys/param.h)
AC_CHECK_HEADERS(sys/param.h sys/socket.h sys/ipc.h sys/sem.h sys/utsname.h alloca.h ucontext.h pwd.h sys/select.h netinet/tcp.h netinet/in.h unistd.h sys/types.h link.h asm/sigcontext.h)

AC_CHECK_HEADERS(sys/user.h, [], [],
[
#ifdef HAVE_SYS_PARAM_H
# include <sys/param.h>
#endif
])

AC_CHECK_HEADER(zlib.h, [have_zlib=yes], [have_zlib=no])
if test x$have_zlib = xyes; then
   AC_TRY_COMPILE([#include <zlib.h>], [
   #if defined(ZLIB_VERNUM) && (ZLIB_VERNUM >= 0x1230)
   return 0;
   #else
   #error No good zlib found
   #endif
   ],[
	AC_MSG_RESULT(Using system zlib)
	zlib_msg="system zlib"
	AC_DEFINE(HAVE_SYS_ZLIB,1,[Have system zlib])
   ],[
	AC_MSG_RESULT(Using embedded zlib)
	have_zlib=no
	zlib_msg="bundled zlib"
   ])
fi

AM_CONDITIONAL(HAVE_ZLIB, test x$have_zlib = xyes)
AC_DEFINE(HAVE_ZLIB,1,[Have system zlib])

# for mono/metadata/debug-symfile.c
AC_CHECK_HEADERS(elf.h)

# for support
AC_CHECK_HEADERS(poll.h)
AC_CHECK_HEADERS(sys/poll.h)
AC_CHECK_HEADERS(sys/wait.h)
AC_CHECK_HEADERS(grp.h)
AC_CHECK_HEADERS(syslog.h)

# for mono/dis
AC_CHECK_HEADERS(wchar.h)
AC_CHECK_HEADERS(ieeefp.h)
AC_MSG_CHECKING(for isinf)
AC_TRY_LINK([#include <math.h>], [
	int f = isinf (1);
], [
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_ISINF, 1, [isinf available])
], [
	# We'll have to use signals
	AC_MSG_RESULT(no)
])


# not 64 bit clean in cross-compile
AC_CHECK_SIZEOF(void *, 4)

WARN=''
if test x"$GCC" = xyes; then
        WARN='-Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes  -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wno-cast-qual -Wwrite-strings'
		# The runtime code does not respect ANSI C strict aliasing rules
		CFLAGS="$CFLAGS -fno-strict-aliasing"

		ORIG_CFLAGS=$CFLAGS
		CFLAGS="$CFLAGS -Wdeclaration-after-statement"
		AC_MSG_CHECKING(for -Wdeclaration-after-statement option to gcc)
		AC_TRY_COMPILE([], [
						   void main () { }
		], [
		   AC_MSG_RESULT(yes)
		], [
		   AC_MSG_RESULT(no)
		   CFLAGS=$ORIG_CFLAGS
		])
else
	# The Sun Forte compiler complains about inline functions that access static variables
	# so disable all inlining.
	case "$host" in
	*-*-solaris*)
		CFLAGS="$CFLAGS -Dinline="
		;;
	esac
fi
CFLAGS="$CFLAGS -g $WARN"
CFLAGS_FOR_LIBGC="$CFLAGS_FOR_LIBGC -g"

# Where's the 'mcs' source tree?
if test -d $srcdir/mcs; then
  mcsdir=mcs
else
  mcsdir=../mcs
fi

AC_ARG_WITH(mcs-path, [  --with-mcs-path=/path/to/mcs      Specify an alternate mcs source tree],
	if test x$with_mcs_path != "x" -a -d $with_mcs_path ; then
		mcsdir=$with_mcs_path
	fi
)

#
# A sanity check to catch cases where the package was unpacked
# with an ancient tar program (Solaris)
#
AC_ARG_ENABLE(solaris-tar-check,
[  --disable-solaris-tar-check    disable solaris tar check],
   do_solaris_tar_check=no, do_solaris_tar_check=yes)

if test x"$do_solaris_tar_check" = xyes -a x"$enable_solaris_tar_check" = xyes; then
   	AC_MSG_CHECKING(integrity of package)
	if test -f $mcsdir/class/System.Runtime.Serialization.Formatters.Soap/System.Runtime.Serialization.Formatters.Soap/SoapTypeMapper.cs
   	then
		AC_MSG_RESULT(ok)
   	else
		errorm="Your mono distribution is incomplete;  if unpacking from a tar file, make sure you use GNU tar;  see http://www.mono-project.com/IncompletePackage for more details"
		AC_MSG_ERROR([$errorm])
	fi
fi

if test "x$with_mcs_path" != "x"; then
mcs_topdir=$(cd "$mcsdir" && pwd)
mcs_topdir_from_srcdir=$mcs_topdir
else
mcs_topdir=$(cd "$srcdir/$mcsdir" && pwd)
mcs_topdir_from_srcdir='$(top_builddir)'/$mcsdir
fi

# Convert mcs_topdir* paths to Windows syntax.
if test x$cross_compiling$host_win32 = xnoyes; then
  mcs_topdir=$(cygpath -m $mcs_topdir)
  case $mcs_topdir_from_srcdir in
    /cygdrive/*)
	mcs_topdir_from_srcdir=$(cygpath -m $mcs_topdir_from_srcdir)
	;;
  esac
fi

## Maybe should also disable if mcsdir is invalid.  Let's punt the issue for now.
AM_CONDITIONAL(BUILD_MCS, [test x$cross_compiling = xno && test x$enable_mcs_build != xno])

AC_SUBST([mcs_topdir])
AC_SUBST([mcs_topdir_from_srcdir])

# Where's the 'olive' source tree?
if test -d $srcdir/olive; then
  olivedir=olive
else
  olivedir=../olive
fi

if test -d $srcdir/$olivedir; then
olive_topdir='$(top_srcdir)/'$olivedir
fi

# gettext: prepare the translation directories. 
# we do not configure the full gettext, as we consume it dynamically from C#
AM_PO_SUBDIRS

if test "x$USE_NLS" = "xyes"; then
   AC_CHECK_PROG(HAVE_MSGFMT, msgfmt,yes,no)

   if test "x$HAVE_MSGFMT" = "xno"; then
	  AC_MSG_ERROR([msgfmt not found. You need to install the 'gettext' package, or pass --enable-nls=no to configure.])
   fi
fi

AC_ARG_WITH([libgdiplus], 
	[  --with-libgdiplus=installed|sibling|<path>	Override the libgdiplus used for System.Drawing tests (defaults to installed)], 
	[], [with_libgdiplus=installed])

case $with_libgdiplus in
no|installed) libgdiplus_loc= ;;
yes|sibling) libgdiplus_loc=`cd ../libgdiplus && pwd`/src/libgdiplus.la ;;
/*) libgdiplus_loc=$with_libgdiplus ;;
*) libgdiplus_loc=`pwd`/$with_libgdiplus ;;
esac
AC_SUBST([libgdiplus_loc])

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

pkg_config_path=
AC_ARG_WITH(crosspkgdir, [  --with-crosspkgdir=/path/to/pkg-config/dir      Change pkg-config dir to custom dir],
	if test x$with_crosspkgdir = "x"; then
		if test -s $PKG_CONFIG_PATH; then
			pkg_config_path=$PKG_CONFIG_PATH
		fi
	else
		pkg_config_path=$with_crosspkgdir
		PKG_CONFIG_PATH=$pkg_config_path
		export PKG_CONFIG_PATH
	fi
)

AC_ARG_WITH([glib],
	[  --with-glib=embedded|system    Choose glib API: system or embedded (default to embedded)],
	[], [with_glib=embedded])

ac_configure_args="$ac_configure_args \"CPPFLAGS_FOR_EGLIB=$EGLIB_CPPFLAGS\" \"CFLAGS_FOR_EGLIB=$CFLAGS_FOR_EGLIB\""
AC_CONFIG_SUBDIRS(eglib)

case $with_glib in
embedded) 
  GLIB_CFLAGS='-I$(top_srcdir)/eglib/src -I$(top_builddir)/eglib/src'
  GLIB_LIBS='-L$(top_builddir)/eglib/src -leglib -lm'
  BUILD_GLIB_CFLAGS="$GLIB_CFLAGS"
  BUILD_GLIB_LIBS="$GLIB_LIBS"
  GMODULE_CFLAGS="$GLIB_CFLAGS"
  GMODULE_LIBS="$GLIB_LIBS"
  ;;
system)
  AC_MSG_ERROR([--with-glib=system is no longer supported as of Mono 2.8])
  ;;
*)
  AC_MSG_ERROR([Invalid argument to --with-glib.])
esac
  
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GMODULE_CFLAGS)
AC_SUBST(GMODULE_LIBS)
AC_SUBST(BUILD_GLIB_CFLAGS)
AC_SUBST(BUILD_GLIB_LIBS)

AC_ARG_WITH(gc,   [  --with-gc=boehm,included,none  Controls the Boehm GC config, default=included],[gc=$with_gc],[gc=$gc_default])

# Enable support for fast thread-local storage
# Some systems have broken support, so we allow to disable it.
AC_ARG_WITH(tls, [  --with-tls=__thread,pthread    select Thread Local Storage implementation (defaults to __thread)],[],[with_tls=__thread])

# Enable support for using sigaltstack for SIGSEGV and stack overflow handling
# This does not work on some platforms (bug #55253)
AC_ARG_WITH(sigaltstack, [  --with-sigaltstack=yes,no      enable/disable support for sigaltstack (defaults to yes)],[],[with_sigaltstack=yes])

AC_ARG_WITH(static_mono, [  --with-static_mono=yes,no      link mono statically to libmono (faster) (defaults to yes)],[],[with_static_mono=yes])
AC_ARG_WITH(shared_mono, [  --with-shared_mono=yes,no      build a shared libmono library (defaults to yes)],[],[with_shared_mono=yes])

if test "x$enable_static" = "xno"; then
   with_static_mono=no
fi

if test "x$enable_shared" = "xno"; then
   with_shared_mono=no
fi

if test "x$host_win32" = "xyes"; then
   # Boehm GC requires the runtime to be in its own dll
   with_static_mono=no
fi

AM_CONDITIONAL(STATIC_MONO, test x$with_static_mono != xno)
AM_CONDITIONAL(SHARED_MONO, test x$with_shared_mono != xno)
AC_ARG_ENABLE(mcs-build, [  --disable-mcs-build disable the build of the mcs directory], try_mcs_build=$enableval, enable_mcs_build=yes)

AC_ARG_WITH(xen_opt,   [  --with-xen_opt=yes,no          Enable Xen-specific behaviour (defaults to yes)],[],[with_xen_opt=yes])
if test "x$with_xen_opt" = "xyes"; then
	AC_DEFINE(MONO_XEN_OPT, 1, [Xen-specific behaviour])
	ORIG_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS -mno-tls-direct-seg-refs"
	AC_MSG_CHECKING(for -mno-tls-direct-seg-refs option to gcc)
	AC_TRY_COMPILE([], [
					   void main () { }
	], [
	   AC_MSG_RESULT(yes)
	   # Pass it to libgc as well
	   CFLAGS_FOR_LIBGC="$CFLAGS_FOR_LIBGC -mno-tls-direct-seg-refs"
	], [
	   AC_MSG_RESULT(no)
	   CFLAGS=$ORIG_CFLAGS
	])
fi

AC_ARG_ENABLE(quiet-build, [  --enable-quiet-build  Enable quiet runtime build (on by default)], enable_quiet_build=$enableval, enable_quiet_build=yes)
AC_ARG_ENABLE(small-config, [  --enable-small-config Enable tweaks to reduce requirements (and capabilities)], enable_small_config=$enableval, enable_small_config=no)

if test x$enable_small_config = xyes; then
	AC_DEFINE(MONO_SMALL_CONFIG,1,[Reduce runtime requirements (and capabilities)])
	CFLAGS_FOR_LIBGC="$CFLAGS_FOR_LIBGC -DSMALL_CONFIG"
fi

AC_ARG_ENABLE(system-aot, [  --enable-system-aot  Enable the Ahead-Of-Time compilation of system assemblies during the build (on by default on some platforms)], enable_system_aot=$enableval, enable_system_aot=default)

DISABLED_FEATURES=none

AC_ARG_ENABLE(minimal, [  --enable-minimal=LIST      drop support for LIST subsystems.
     LIST is a comma-separated list from: aot, profiler, decimal, pinvoke, debug,
     reflection_emit, reflection_emit_save, large_code, logging, com, ssa, generics, attach, jit, simd, soft_debug, normalization, assembly_remapping.],
[
	for feature in `echo "$enable_minimal" | sed -e "s/,/ /g"`; do
		eval "mono_feature_disable_$feature='yes'"
	done
	DISABLED_FEATURES=$enable_minimal
	disabled="Disabled:      $enable_minimal"
],[])

AC_DEFINE_UNQUOTED(DISABLED_FEATURES, "$DISABLED_FEATURES", [String of disabled features])

if test "x$mono_feature_disable_aot" = "xyes"; then
	AC_DEFINE(DISABLE_AOT_COMPILER, 1, [Disable AOT Compiler])
	AC_MSG_NOTICE([Disabled AOT compiler])
fi

if test "x$mono_feature_disable_profiler" = "xyes"; then
	AC_DEFINE(DISABLE_PROFILER, 1, [Disable default profiler support])
	AC_MSG_NOTICE([Disabled support for the profiler])
fi
AM_CONDITIONAL(DISABLE_PROFILER, test x$mono_feature_disable_profiler = xyes)

if test "x$mono_feature_disable_decimal" = "xyes"; then
	AC_DEFINE(DISABLE_DECIMAL, 1, [Disable System.Decimal support])
	AC_MSG_NOTICE([Disabled support for decimal])
fi

if test "x$mono_feature_disable_pinvoke" = "xyes"; then
	AC_DEFINE(DISABLE_PINVOKE, 1, [Disable P/Invoke support])
	AC_MSG_NOTICE([Disabled support for P/Invoke])
fi

if test "x$mono_feature_disable_debug" = "xyes"; then
	AC_DEFINE(DISABLE_DEBUG, 1, [Disable runtime debugging support])
	AC_MSG_NOTICE([Disabled support for runtime debugging])
fi

if test "x$mono_feature_disable_reflection_emit" = "xyes"; then
	AC_DEFINE(DISABLE_REFLECTION_EMIT, 1, [Disable reflection emit support])
	mono_feature_disable_reflection_emit_save=yes
	AC_MSG_NOTICE([Disabled support for Reflection.Emit])
fi

if test "x$mono_feature_disable_reflection_emit_save" = "xyes"; then
	AC_DEFINE(DISABLE_REFLECTION_EMIT_SAVE, 1, [Disable assembly saving support in reflection emit])
	AC_MSG_NOTICE([Disabled support for Reflection.Emit.Save])
fi

if test "x$mono_feature_disable_large_code" = "xyes"; then
	AC_DEFINE(DISABLE_LARGE_CODE, 1, [Disable support for huge assemblies])
	AC_MSG_NOTICE([Disabled support for large assemblies])
fi

if test "x$mono_feature_disable_logging" = "xyes"; then
	AC_DEFINE(DISABLE_LOGGING, 1, [Disable support debug logging])
	AC_MSG_NOTICE([Disabled support for logging])
fi

if test "x$mono_feature_disable_com" = "xyes"; then
	AC_DEFINE(DISABLE_COM, 1, [Disable COM support])
	AC_MSG_NOTICE([Disabled COM support])
fi

if test "x$mono_feature_disable_ssa" = "xyes"; then
	AC_DEFINE(DISABLE_SSA, 1, [Disable advanced SSA JIT optimizations])
	AC_MSG_NOTICE([Disabled SSA JIT optimizations])
fi

if test "x$mono_feature_disable_generics" = "xyes"; then
	AC_DEFINE(DISABLE_GENERICS, 1, [Disable generics support])
	AC_MSG_NOTICE([Disabled Generics Support])
fi

if test "x$mono_feature_disable_shadowcopy" = "xyes"; then
   	AC_DEFINE(DISABLE_SHADOW_COPY, 1, [Disable Shadow Copy for AppDomains])
	AC_MSG_NOTICE([Disabled Shadow copy for AppDomains])
fi

if test "x$mono_feature_disable_portability" = "xyes"; then
   	AC_DEFINE(DISABLE_PORTABILITY, 1, [Disables the IO portability layer])
	AC_MSG_NOTICE([Disabled IO Portability layer])
fi

if test "x$mono_feature_disable_attach" = "xyes"; then
	AC_DEFINE(DISABLE_ATTACH, 1, [Disable agent attach support])
	AC_MSG_NOTICE([Disabled agent attach])
fi

if test "x$mono_feature_disable_full_messages" = "xyes"; then
	AC_DEFINE(DISABLE_FULL_MESSAGES, 1, [Disables building in the full table of WAPI messages])
	AC_MSG_NOTICE([Disabled full messages for Win32 errors, only core message strings shipped])
fi

if test "x$mono_feature_disable_verifier" = "xyes"; then
	AC_DEFINE(DISABLE_VERIFIER, 1, [Disables the verifier])
	AC_MSG_NOTICE([Disabled the metadata and IL verifiers])
fi

if test "x$mono_feature_disable_jit" = "xyes"; then
	AC_DEFINE(DISABLE_JIT, 1, [Disable the JIT, only full-aot mode will be supported by the runtime.])
	AC_MSG_NOTICE([Disabled the JIT engine, only full AOT will be supported])
fi

AM_CONDITIONAL(DISABLE_JIT, test x$mono_feature_disable_jit = xyes)

if test "x$mono_feature_disable_simd" = "xyes"; then
	AC_DEFINE(DISABLE_SIMD, 1, [Disable SIMD intrinsics related optimizations.])
	AC_MSG_NOTICE([Disabled SIMD support])
fi

if test "x$mono_feature_disable_soft_debug" = "xyes"; then
	AC_DEFINE(DISABLE_SOFT_DEBUG, 1, [Disable Soft Debugger Agent.])
	AC_MSG_NOTICE([Disabled Soft Debugger.])
fi

if test "x$mono_feature_disable_normalization" = "xyes"; then
	AC_DEFINE(DISABLE_NORMALIZATION, 1, [Disable String normalization support.])
	AC_MSG_NOTICE([Disabled String normalization support.])
fi

if test "x$mono_feature_disable_assembly_remapping" = "xyes"; then
	AC_DEFINE(DISABLE_ASSEMBLY_REMAPPING, 1, [Disable assembly remapping.])
	AC_MSG_NOTICE([Disabled Assembly remapping.])
fi

AC_MSG_CHECKING(for visibility __attribute__)
AC_TRY_COMPILE([], [
   void __attribute__ ((visibility ("hidden"))) doit (void) {}
   void main () { doit (); }
], [
   have_visibility_hidden=yes
   AC_MSG_RESULT(yes)
], [
   have_visibility_hidden=no
   AC_MSG_RESULT(no)
])

AC_MSG_CHECKING(for deprecated __attribute__)
AC_TRY_COMPILE([
     int doit (void) __attribute__ ((deprecated));
     int doit (void) { return 0; }
], [
	return 0;
], [
   have_deprecated=yes
   AC_MSG_RESULT(yes)
], [
   have_deprecated=no
   AC_MSG_RESULT(no)
])

AC_ARG_ENABLE(parallel-mark, [  --enable-parallel-mark     Enables GC Parallel Marking], enable_parallel_mark=$enableval, enable_parallel_mark=$parallel_mark)
if test x$enable_parallel_mark = xyes; then
	libgc_configure_args="$libgc_configure_args --enable-parallel-mark"
fi

dnl
dnl Boehm GC configuration
dnl
LIBGC_CFLAGS=
LIBGC_LIBS=
LIBGC_STATIC_LIBS=
libgc_dir=
case "x$gc" in
	xboehm|xbohem|xyes)
		AC_CHECK_HEADERS(gc.h gc/gc.h, gc_headers=yes)
		AC_CHECK_LIB(gc, GC_malloc, found_boehm="yes",,$libdl)

		if test "x$found_boehm" != "xyes"; then
			AC_MSG_ERROR("GC requested but libgc not found! Install libgc or run configure with --with-gc=none.")
		fi
		if test "x$gc_headers" != "xyes"; then
			AC_MSG_ERROR("GC requested but header files not found! You may need to install them by hand.")
		fi

		LIBGC_LIBS="-lgc $libdl"
		LIBGC_STATIC_LIBS="$LIBGC_LIBS"
		libmono_ldflags="$libmono_ldflags -lgc"
		BOEHM_DEFINES="-DHAVE_BOEHM_GC"

		# AC_CHECK_FUNCS does not work for some reason...
		AC_CHECK_LIB(gc, GC_gcj_malloc, found_gcj_malloc="yes",,$libdl)
		if test "x$found_gcj_malloc" = "xyes"; then
			BOEHM_DEFINES="-DHAVE_GC_GCJ_MALLOC $BOEHM_DEFINES"
			AC_DEFINE_UNQUOTED(DEFAULT_GC_NAME, "System Boehm (with typed GC)", [GC description])
			gc_msg="System Boehm with typed GC"
		else
			AC_DEFINE_UNQUOTED(DEFAULT_GC_NAME, "System Boehm (no typed GC)", [GC description])
			gc_msg="System Boehm (without typed GC)"
		fi
		AC_CHECK_LIB(gc, GC_enable, found_gc_enable="yes",,$libdl)
		if test "x$found_gc_enable" = "xyes"; then
			BOEHM_DEFINES="-DHAVE_GC_ENABLE $BOEHM_DEFINES"
		fi
		;;

	xincluded)
		use_included_gc=yes
		libgc_dir=libgc

		LIBGC_CFLAGS='-I$(top_srcdir)/libgc/include'
		LIBGC_LIBS='$(top_builddir)/libgc/libmonogc.la'
		LIBGC_STATIC_LIBS='$(top_builddir)/libgc/libmonogc-static.la'

		BOEHM_DEFINES="-DHAVE_BOEHM_GC -DHAVE_GC_H -DUSE_INCLUDED_LIBGC -DHAVE_GC_GCJ_MALLOC -DHAVE_GC_ENABLE"

		gc_msg="bundled Boehm GC with typed GC"
		if test x$enable_parallel_mark = xyes; then
			AC_DEFINE_UNQUOTED(DEFAULT_GC_NAME, "Included Boehm (with typed GC and Parallel Mark)", [GC description])
			gc_msg="$gc_msg and parallel mark"
		else
			AC_DEFINE_UNQUOTED(DEFAULT_GC_NAME, "Included Boehm (with typed GC)", [GC description])
		fi
		;;

	xsgen)
		AC_MSG_WARN("Use --with-sgen instead, --with-gc= controls Boehm configuration")
		;;

	xnone)
		AC_MSG_WARN("Compiling mono without GC.")
		AC_DEFINE_UNQUOTED(DEFAULT_GC_NAME, "none", [GC description])
		AC_DEFINE(HAVE_NULL_GC,1,[No GC support.])
		;;
	*)
		AC_MSG_ERROR([Invalid argument to --with-gc.])
		;;
esac

AC_ARG_WITH(large-heap, [  --with-large-heap=yes,no       Enable support for GC heaps larger than 3GB (defaults to no)], [large_heap=$withval], [large_heap=no])
if test "x$large_heap" = "xyes"; then
   CPPFLAGS="$CPPFLAGS -DLARGE_CONFIG"
fi

AM_CONDITIONAL(INCLUDED_LIBGC, test x$use_included_gc = xyes)
AC_SUBST(LIBGC_CFLAGS)
AC_SUBST(LIBGC_LIBS)
AC_SUBST(LIBGC_STATIC_LIBS)
AC_SUBST(libgc_dir)
AC_SUBST(BOEHM_DEFINES)

dnl
dnl End of libgc checks
dnl

dnl *************************************
dnl *** Checks for zero length arrays ***
dnl *************************************
AC_MSG_CHECKING(whether $CC supports zero length arrays)
AC_TRY_COMPILE([
	struct s {
		int  length;
		char data [0];
	};
], [], [
	AC_MSG_RESULT(yes)
	AC_DEFINE_UNQUOTED(MONO_ZERO_LEN_ARRAY, 0, [Length of zero length arrays])
], [
	AC_MSG_RESULT(no)
	AC_DEFINE_UNQUOTED(MONO_ZERO_LEN_ARRAY, 1, [Length of zero length arrays])
])

if test x$target_win32 = xno; then

	dnl hires monotonic clock support
	AC_SEARCH_LIBS(clock_gettime, rt)

	dnl dynamic loader support
	AC_CHECK_FUNC(dlopen, DL_LIB="",
		AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl", dl_support=no)
	)
	if test x$dl_support = xno; then
		AC_MSG_WARN([No dynamic loading support available])
	else
		LIBS="$LIBS $DL_LIB"
		AC_DEFINE(HAVE_DL_LOADER,1,[dlopen-based dynamic loader available])
		dnl from glib's configure.in
		AC_CACHE_CHECK([for preceeding underscore in symbols],
			mono_cv_uscore,[
			AC_TRY_RUN([#include <dlfcn.h>
			int mono_underscore_test (void) { return 42; }
			int main() {
			  void *f1 = (void*)0, *f2 = (void*)0, *handle;
			  handle = dlopen ((void*)0, 0);
			  if (handle) {
			    f1 = dlsym (handle, "mono_underscore_test");
			    f2 = dlsym (handle, "_mono_underscore_test");
			  } return (!f2 || f1);
			}],
				[mono_cv_uscore=yes],
				[mono_cv_uscore=no],
			[])
		])
		if test "x$mono_cv_uscore" = "xyes"; then
			MONO_DL_NEED_USCORE=1
		else
			MONO_DL_NEED_USCORE=0
		fi
		AC_SUBST(MONO_DL_NEED_USCORE)
		AC_CHECK_FUNC(dlerror)
	fi

	dnl ******************************************************************
	dnl *** Checks for the IKVM JNI interface library                  ***
	dnl ******************************************************************
	AC_ARG_WITH(ikvm-native, [  --with-ikvm-native=yes,no      build the IKVM JNI interface library (defaults to yes)],[with_ikvm_native=$withval],[with_ikvm_native=$ikvm_native])

	ikvm_native_dir=
	if test x$with_ikvm_native = xyes; then
		ikvm_native_dir=ikvm-native
		jdk_headers_found="IKVM Native"
	fi

	AC_SUBST(ikvm_native_dir)

	AC_CHECK_HEADERS(execinfo.h)

	AC_CHECK_FUNCS(getgrgid_r)
	AC_CHECK_FUNCS(getgrnam_r)
	AC_CHECK_FUNCS(getpwnam_r)
	AC_CHECK_FUNCS(getpwuid_r)
	AC_CHECK_FUNCS(getresuid)
	AC_CHECK_FUNCS(setresuid)
	AC_CHECK_FUNCS(kqueue)
	AC_CHECK_FUNCS(backtrace_symbols)
	AC_CHECK_FUNCS(mkstemp)
	AC_CHECK_FUNCS(mmap)
	AC_CHECK_FUNCS(madvise)
	AC_CHECK_FUNCS(getrusage)
	AC_CHECK_FUNCS(getpriority)
	AC_CHECK_FUNCS(setpriority)
	AC_CHECK_FUNCS(dl_iterate_phdr)
	AC_CHECK_FUNCS(sysconf)

	AC_CHECK_FUNCS(sched_setaffinity)
	AC_CHECK_FUNCS(sched_getcpu)

	dnl ****************************************************************
	dnl *** Check for sched_setaffinity from glibc versions before   ***
	dnl *** 2.3.4. The older versions of the function only take 2    ***
	dnl *** parameters, not 3.                                       ***
	dnl ***                                                          ***
	dnl *** Because the interface change was not made in a minor     ***
	dnl *** version rev, the __GLIBC__ and __GLIBC_MINOR__ macros    ***
	dnl *** won't always indicate the interface sched_affinity has.  ***
	dnl ****************************************************************
	AC_MSG_CHECKING(for sched_setaffinity from glibc < 2.3.4)
	AC_TRY_COMPILE([#include <sched.h>], [
		int main() {
            int mask = 1; 
            sched_setaffinity(0, &mask);
        }
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY, 1, [Have GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY])
	], [
		# We have the new, three-parameter version
		AC_MSG_RESULT(no)
	])


	dnl ******************************************************************
	dnl *** Check for large file support                               ***
	dnl *** (If we were using autoconf 2.50 we'd use AC_SYS_LARGEFILE) ***
	dnl ******************************************************************
	
	# Check that off_t can represent 2**63 - 1 correctly, working around
	# potential compiler bugs.  Defines LARGE_FILE_SUPPORT, adds $1 to
	# CPPFLAGS and sets $large_offt to yes if the test succeeds
	large_offt=no
	AC_DEFUN([LARGE_FILES], [
		large_CPPFLAGS=$CPPFLAGS
		CPPFLAGS="$CPPFLAGS $1"
		AC_TRY_RUN([
			#include <sys/types.h>

			#define BIG_OFF_T (((off_t)1<<62)-1+((off_t)1<<62))

			int main(void) {
				int big_off_t=((BIG_OFF_T%2147483629==721) &&
					       (BIG_OFF_T%2147483647==1));
				if(big_off_t) {
					exit(0);
				} else {
					exit(1);
				}
			}
		], [
			AC_MSG_RESULT(ok)
			AC_DEFINE(HAVE_LARGE_FILE_SUPPORT, 1, [Have large file support])
			large_CPPFLAGS="$large_CPPFLAGS $1"
			large_offt=yes
		], [
			AC_MSG_RESULT(no)
		], "")
		CPPFLAGS=$large_CPPFLAGS
	])

	AC_MSG_CHECKING(if off_t is 64 bits wide)
	LARGE_FILES("")
	if test $large_offt = no; then
		AC_MSG_CHECKING(if _FILE_OFFSET_BITS=64 gives 64 bit off_t)
		LARGE_FILES("-D_FILE_OFFSET_BITS=64")
	fi
	if test $large_offt = no; then
		AC_MSG_WARN([No 64 bit file size support available])
	fi
	
	dnl *****************************
	dnl *** Checks for libsocket  ***
	dnl *****************************
	AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")

	dnl *******************************
	dnl *** Checks for MSG_NOSIGNAL ***
	dnl *******************************
	AC_MSG_CHECKING(for MSG_NOSIGNAL)
	AC_TRY_COMPILE([#include <sys/socket.h>], [
		int f = MSG_NOSIGNAL;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_MSG_NOSIGNAL, 1, [Have MSG_NOSIGNAL])
	], [
		# We'll have to use signals
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for SOL_IP     ***
	dnl *****************************
	AC_MSG_CHECKING(for SOL_IP)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = SOL_IP;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SOL_IP, 1, [Have SOL_IP])
	], [
		# We'll have to use getprotobyname
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for SOL_IPV6     ***
	dnl *****************************
	AC_MSG_CHECKING(for SOL_IPV6)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = SOL_IPV6;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SOL_IPV6, 1, [Have SOL_IPV6])
	], [
		# We'll have to use getprotobyname
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for SOL_TCP    ***
	dnl *****************************
	AC_MSG_CHECKING(for SOL_TCP)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = SOL_TCP;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SOL_TCP, 1, [Have SOL_TCP])
	], [
		# We'll have to use getprotobyname
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for IP_PKTINFO ***
	dnl *****************************
	AC_MSG_CHECKING(for IP_PKTINFO)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = IP_PKTINFO;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IP_PKTINFO, 1, [Have IP_PKTINFO])
	], [
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for IPV6_PKTINFO ***
	dnl *****************************
	AC_MSG_CHECKING(for IPV6_PKTINFO)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = IPV6_PKTINFO;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IPV6_PKTINFO, 1, [Have IPV6_PKTINFO])
	], [
		AC_MSG_RESULT(no)
	])

	dnl **********************************
	dnl *** Checks for IP_DONTFRAGMENT ***
	dnl **********************************
	AC_MSG_CHECKING(for IP_DONTFRAGMENT)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = IP_DONTFRAGMENT;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IP_DONTFRAGMENT, 1, [Have IP_DONTFRAGMENT])
	], [
		AC_MSG_RESULT(no)
	])

	dnl **********************************
	dnl *** Checks for IP_MTU_DISCOVER ***
	dnl **********************************
	AC_MSG_CHECKING(for IP_MTU_DISCOVER)
	AC_TRY_COMPILE([#include <netdb.h>], [
		int level = IP_MTU_DISCOVER;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IP_MTU_DISCOVER, 1, [Have IP_MTU_DISCOVER])
	], [
		AC_MSG_RESULT(no)
	])

 	dnl *********************************
	dnl *** Check for struct ip_mreqn ***
	dnl *********************************
	AC_MSG_CHECKING(for struct ip_mreqn)
	AC_TRY_COMPILE([#include <netinet/in.h>], [
		struct ip_mreqn mreq;
		mreq.imr_address.s_addr = 0;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_STRUCT_IP_MREQN, 1, [Have struct ip_mreqn])
	], [
		# We'll just have to try and use struct ip_mreq
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(for struct ip_mreq)
		AC_TRY_COMPILE([#include <netinet/in.h>], [
			struct ip_mreq mreq;
			mreq.imr_interface.s_addr = 0;
		], [
			# Yes, we have it...
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STRUCT_IP_MREQ, 1, [Have struct ip_mreq])
		], [
			# No multicast support
			AC_MSG_RESULT(no)
		])
	])
	
	dnl **********************************
	dnl *** Check for gethostbyname2_r ***
	dnl **********************************
	AC_MSG_CHECKING(for gethostbyname2_r)
		AC_TRY_LINK([#include <netdb.h>], [
		gethostbyname2_r(NULL,0,NULL,NULL,0,NULL,NULL);
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GETHOSTBYNAME2_R, 1, [Have gethostbyname2_r])
	], [
		AC_MSG_RESULT(no)
	])

	dnl *****************************
	dnl *** Checks for libnsl     ***
	dnl *****************************
	AC_CHECK_FUNC(gethostbyaddr, , AC_CHECK_LIB(nsl, gethostbyaddr, LIBS="$LIBS -lnsl"))

	AC_CHECK_FUNCS(inet_pton inet_aton)

	dnl ***********************************************
	dnl *** Checks for size of sockaddr_un.sun_path ***
	dnl ***********************************************
	# AC_CHECK_SIZEOF can't cope with struct members :-(
	AC_MSG_CHECKING(size of sockaddr_un.sun_path)
	AC_CACHE_VAL(mono_cv_sizeof_sunpath,
		[AC_TRY_RUN([
			#include <sys/types.h>
			#include <stdio.h>
			#include <sys/un.h>

			int main(void) {
				struct sockaddr_un sock_un;
				FILE *f=fopen("conftestval", "w");
				if(!f) exit(1);
				fprintf(f, "%d\n", sizeof(sock_un.sun_path));
				exit(0);
			}
		], mono_cv_sizeof_sunpath=`cat conftestval`,
		   mono_cv_sizeof_sunpath=0,
		   mono_cv_sizeof_sunpath=0)])dnl
	AC_MSG_RESULT($mono_cv_sizeof_sunpath)
	AC_DEFINE_UNQUOTED(MONO_SIZEOF_SUNPATH, $mono_cv_sizeof_sunpath, [Sizeof sock_un.sun_path])

	dnl *****************************
	dnl *** Checks for libxnet    ***
	dnl *****************************
	case "${host}" in
		*solaris* )
			AC_MSG_CHECKING(for Solaris XPG4 support)
			if test -f /usr/lib/libxnet.so; then
				CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE=500"
	    			CPPFLAGS="$CPPFLAGS -D__EXTENSIONS__"
				CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE_EXTENDED=1"
           			LIBS="$LIBS -lxnet"
  	    			AC_MSG_RESULT(yes)
			else
  	    			AC_MSG_RESULT(no)
			fi

			if test "$GCC" = "yes"; then
		    		CFLAGS="$CFLAGS -Wno-char-subscripts"
			fi
    		;;
	esac

	dnl *****************************
	dnl *** Checks for libpthread ***
	dnl *****************************
# on FreeBSD -STABLE, the pthreads functions all reside in libc_r
# and libpthread does not exist
#
	case "${host}" in
		*-*-*freebsd*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -pthread")
		;;
		*-*-*openbsd*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -pthread")
		;;
		*)
			AC_CHECK_LIB(pthread, main, LIBS="$LIBS -lpthread")
		;;
	esac
	AC_CHECK_HEADERS(pthread.h)
	AC_CHECK_FUNCS(pthread_mutex_timedlock)
	AC_CHECK_FUNCS(pthread_getattr_np pthread_attr_get_np)
	AC_MSG_CHECKING(for PTHREAD_MUTEX_RECURSIVE)
	AC_TRY_COMPILE([ #include <pthread.h>], [
		pthread_mutexattr_t attr;
		pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
	], [
		AC_MSG_RESULT(ok)
	], [
		AC_MSG_RESULT(no)
		AC_MSG_WARN(Using mono_mutex_t for recursive mutexes)
		AC_DEFINE(USE_MONO_MUTEX, 1, [Use mono_mutex_t])
	])
	AC_CHECK_FUNCS(pthread_attr_setstacksize)
	AC_CHECK_FUNCS(pthread_attr_getstack pthread_attr_getstacksize)
	AC_CHECK_FUNCS(pthread_get_stacksize_np pthread_get_stackaddr_np)

	dnl ***********************************
	dnl *** Checks for signals
	dnl ***********************************
	AC_CHECK_HEADERS(signal.h)
	AC_CHECK_FUNCS(sigaction)

	dnl ***********************************
	dnl *** Checks for working __thread ***
	dnl ***********************************
	AC_MSG_CHECKING(for working __thread)
	if test "x$with_tls" != "x__thread"; then
		AC_MSG_RESULT(disabled)
	else
		AC_TRY_RUN([
			#include <pthread.h>
			__thread int i;
			static int res1, res2;

			void thread_main (void *arg)
			{
				i = arg;
				sleep (1);
				if (arg == 1)
					res1 = (i == arg);
				else
					res2 = (i == arg);
			}

			int main () {
				pthread_t t1, t2;

				i = 5;

				pthread_create (&t1, NULL, thread_main, 1);
				pthread_create (&t2, NULL, thread_main, 2);

				pthread_join (t1, NULL);
				pthread_join (t2, NULL);

				return !(res1 + res2 == 2);
			}
		], [
				AC_MSG_RESULT(yes)
		], [
				AC_MSG_RESULT(no)
				with_tls=pthread
		])
	fi

	dnl **************************************
	dnl *** Checks for working sigaltstack ***
	dnl **************************************
	AC_MSG_CHECKING(for working sigaltstack)
	if test "x$with_sigaltstack" != "xyes"; then
		AC_MSG_RESULT(disabled)
	else
		AC_TRY_RUN([
			#include <stdio.h>
			#include <stdlib.h>
			#include <unistd.h>
			#include <signal.h>
			#include <pthread.h>
			#include <sys/wait.h>
			#if defined(__FreeBSD__) || defined(__NetBSD__)
			#define SA_STACK SA_ONSTACK
			#endif
			static void
			sigsegv_signal_handler (int _dummy, siginfo_t *info, void *context)
			{
				exit (0);
			}

			static void *
			loop (void *ignored)
			{
				char *ptr = NULL;

				*ptr = 0;
				return NULL;
			}

			static void
			child ()
			{
				struct sigaction sa;
				struct sigaltstack sas;
				pthread_t id;
				pthread_attr_t attr;

				sa.sa_sigaction = sigsegv_signal_handler;
				sigemptyset (&sa.sa_mask);
				sa.sa_flags = SA_SIGINFO | SA_ONSTACK;
				if (sigaction (SIGSEGV, &sa, NULL) == -1) {
					perror ("sigaction");
					return;
				}

				sas.ss_sp = malloc (SIGSTKSZ);
				sas.ss_size = SIGSTKSZ;
				sas.ss_flags = 0;
				if (sigaltstack (&sas, NULL) == -1) {
					perror ("sigaltstack");
					return;
				}

				pthread_attr_init (&attr);
				if (pthread_create(&id, &attr, loop, &attr) != 0) {
					printf ("pthread_create\n");
					return;
				}

				sleep (100);
			}

			int
			main ()
			{
				pid_t son;
				int status;
				int i;

				son = fork ();
				if (son == -1) {
					return 1;
				}

				if (son == 0) {
					child ();
					return 0;
				}

				for (i = 0; i < 3; ++i) {
					sleep (1);
					waitpid (son, &status, WNOHANG);
					if (WIFEXITED (status) && WEXITSTATUS (status) == 0)
						return 0;
				}

				kill (son, SIGKILL);
				return 1;
			}

		], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_WORKING_SIGALTSTACK, 1, [Have a working sigaltstack])
		], [
				with_sigaltstack=no
				AC_MSG_RESULT(no)
		])
	fi

	dnl ********************************
	dnl *** Checks for semaphore lib ***
	dnl ********************************
	# 'Real Time' functions on Solaris
	# posix4 on Solaris 2.6
	# pthread (first!) on Linux
	AC_SEARCH_LIBS(sem_init, pthread rt posix4) 

	AC_SEARCH_LIBS(shm_open, pthread rt posix4) 
	AC_CHECK_FUNCS(shm_open)

	dnl ********************************
	dnl *** Checks for timezone stuff **
	dnl ********************************
	AC_CACHE_CHECK(for tm_gmtoff in struct tm, ac_cv_struct_tm_gmtoff,
		AC_TRY_COMPILE([
			#include <time.h>
			], [
			struct tm tm;
			tm.tm_gmtoff = 1;
			], ac_cv_struct_tm_gmtoff=yes, ac_cv_struct_tm_gmtoff=no))
	if test $ac_cv_struct_tm_gmtoff = yes; then
		AC_DEFINE(HAVE_TM_GMTOFF, 1, [Have tm_gmtoff])
	else
		AC_CACHE_CHECK(for timezone variable, ac_cv_var_timezone,
			AC_TRY_COMPILE([
				#include <time.h>
			], [
				timezone = 1;
			], ac_cv_var_timezone=yes, ac_cv_var_timezone=no))
		if test $ac_cv_var_timezone = yes; then
			AC_DEFINE(HAVE_TIMEZONE, 1, [Have timezone variable])
		else
			AC_ERROR(unable to find a way to determine timezone)
		fi
	fi

	dnl *********************************
	dnl *** Checks for math functions ***
	dnl *********************************
	AC_SEARCH_LIBS(sqrtf, m)
	if test "x$has_broken_apple_cpp" != "xyes"; then
	        AC_CHECK_FUNCS(finite, , AC_MSG_CHECKING(for finite in math.h)
	                AC_TRY_LINK([#include <math.h>], 
	                [ finite(0.0); ], 
	                AC_DEFINE(HAVE_FINITE, 1, [Have finite in -lm]) AC_MSG_RESULT(yes),
	                AC_MSG_RESULT(no)))
	fi
        AC_CHECK_FUNCS(isfinite, , AC_MSG_CHECKING(for isfinite in math.h)
                AC_TRY_LINK([#include <math.h>], 
                [ isfinite(0.0); ], 
                AC_DEFINE(HAVE_ISFINITE, 1, [Have isfinite]) AC_MSG_RESULT(yes),
                AC_MSG_RESULT(no)))

	dnl ****************************************************************
	dnl *** Checks for working poll() (macosx defines it but doesn't ***
	dnl *** have it in the library (duh))                            ***
	dnl ****************************************************************
	AC_CHECK_FUNCS(poll)

	dnl *************************
	dnl *** Check for signbit ***
	dnl *************************
	AC_MSG_CHECKING(for signbit)
	AC_TRY_LINK([#include <math.h>], [
		int s = signbit(1.0);
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGNBIT, 1, [Have signbit])
	], [
		AC_MSG_RESULT(no)
	]) 

	dnl **********************************
	dnl *** epoll			   ***
	dnl **********************************
	AC_CHECK_HEADERS(sys/epoll.h)
	haveepoll=no
	AC_CHECK_FUNCS(epoll_ctl, [haveepoll=yes], )
	if test "x$haveepoll" = "xyes" -a "x$ac_cv_header_sys_epoll_h" = "xyes" ; then
		AC_DEFINE(HAVE_EPOLL, 1, [epoll supported])
	fi

	dnl ******************************
	dnl *** Checks for SIOCGIFCONF ***
	dnl ******************************
	AC_CHECK_HEADERS(sys/ioctl.h)
	AC_CHECK_HEADERS(net/if.h, [], [],
	   [
	   #ifdef HAVE_SYS_TYPES_H
	   # include <sys/types.h>
	   #endif
	   #ifdef HAVE_SYS_SOCKET_H
	   # include <sys/socket.h>
	   #endif
	   ])
	AC_MSG_CHECKING(for ifreq)
	AC_TRY_COMPILE([
		#include <stdio.h>
		#include <sys/ioctl.h>
		#include <net/if.h>
		], [
		struct ifconf ifc;
		struct ifreq *ifr;
		void *x;
		ifc.ifc_len = 0;
		ifc.ifc_buf = NULL;
		x = (void *) &ifr->ifr_addr;
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SIOCGIFCONF, 1, [Can get interface list])
		], [
			AC_MSG_RESULT(no)
		])
	dnl **********************************
	dnl ***     Checks for sin_len     ***
	dnl **********************************
	AC_MSG_CHECKING(for sockaddr_in.sin_len)
	AC_TRY_COMPILE([
		#include <netinet/in.h>
		], [
		struct sockaddr_in saddr;
		saddr.sin_len = sizeof (saddr);
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SOCKADDR_IN_SIN_LEN, 1, [sockaddr_in has sin_len])
		], [
			AC_MSG_RESULT(no)
		])	
	dnl **********************************
	dnl ***    Checks for sin6_len     ***
	dnl **********************************
	AC_MSG_CHECKING(for sockaddr_in6.sin6_len)
	AC_TRY_COMPILE([
		#include <netinet/in.h>
		], [
		struct sockaddr_in6 saddr6;
		saddr6.sin6_len = sizeof (saddr6);
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SOCKADDR_IN6_SIN_LEN, 1, [sockaddr_in6 has sin6_len])
		], [
			AC_MSG_RESULT(no)
		])	
	dnl **********************************
	dnl *** Checks for MonoPosixHelper ***
	dnl **********************************
	AC_CHECK_HEADERS(checklist.h)
	AC_CHECK_HEADERS(pathconf.h)
	AC_CHECK_HEADERS(fstab.h)
	AC_CHECK_HEADERS(attr/xattr.h)
	AC_CHECK_HEADERS(sys/extattr.h)
	AC_CHECK_HEADERS(sys/sendfile.h)
	AC_CHECK_HEADERS(sys/statvfs.h)
	AC_CHECK_HEADERS(sys/statfs.h)
	AC_CHECK_HEADERS(sys/vfstab.h)
	AC_CHECK_HEADERS(sys/xattr.h)
	AC_CHECK_HEADERS(sys/mman.h)
	AC_CHECK_HEADERS(sys/param.h)
	AC_CHECK_HEADERS(sys/mount.h, [], [],
		[
		#ifdef HAVE_SYS_PARAM_H
		# include <sys/param.h>
		#endif
		])
	AC_CHECK_HEADERS(sys/mount.h)
	AC_CHECK_FUNCS(confstr)
	AC_CHECK_FUNCS(seekdir telldir)
	AC_CHECK_FUNCS(getdomainname)
	AC_CHECK_FUNCS(setdomainname)
	AC_CHECK_FUNCS(endgrent getgrent fgetgrent setgrent)
	AC_CHECK_FUNCS(setgroups)
	AC_CHECK_FUNCS(endpwent getpwent fgetpwent setpwent)
	AC_CHECK_FUNCS(getfsstat)
	AC_CHECK_FUNCS(lutimes futimes)
	AC_CHECK_FUNCS(mremap)
	AC_CHECK_FUNCS(remap_file_pages)
	AC_CHECK_FUNCS(posix_fadvise)
	AC_CHECK_FUNCS(posix_fallocate)
	AC_CHECK_FUNCS(posix_madvise)
	AC_CHECK_FUNCS(vsnprintf)
	AC_CHECK_FUNCS(sendfile)
	AC_CHECK_FUNCS(gethostid sethostid)
	AC_CHECK_FUNCS(sethostname)
	AC_CHECK_FUNCS(statfs)
	AC_CHECK_FUNCS(fstatfs)
	AC_CHECK_FUNCS(statvfs)
	AC_CHECK_FUNCS(fstatvfs)
	AC_CHECK_FUNCS(stime)
	AC_CHECK_FUNCS(strerror_r)
	AC_CHECK_FUNCS(ttyname_r)
	AC_CHECK_FUNCS(psignal)
	AC_CHECK_FUNCS(getlogin_r)
	AC_CHECK_FUNCS(lockf)
	AC_CHECK_FUNCS(swab)
	AC_CHECK_FUNCS(setusershell endusershell)
	AC_CHECK_SIZEOF(size_t)
	AC_CHECK_TYPES([blksize_t], [AC_DEFINE(HAVE_BLKSIZE_T)], , 
		[#include <sys/types.h>
		 #include <sys/stat.h>
		 #include <unistd.h>])
	AC_CHECK_TYPES([blkcnt_t], [AC_DEFINE(HAVE_BLKCNT_T)], ,
		[#include <sys/types.h>
		 #include <sys/stat.h>
		 #include <unistd.h>])
	AC_CHECK_TYPES([suseconds_t], [AC_DEFINE(HAVE_SUSECONDS_T)], ,
		[#include <sys/time.h>])
	AC_CHECK_TYPES([struct flock], [AC_DEFINE(HAVE_STRUCT_FLOCK)], ,
		[#include <unistd.h>
		 #include <fcntl.h>])
	AC_CHECK_TYPES([struct pollfd], [AC_DEFINE(HAVE_STRUCT_POLLFD)], ,
		[#include <sys/poll.h>])
	AC_CHECK_TYPES([struct stat], [AC_DEFINE(HAVE_STRUCT_STAT)], ,
		[#include <sys/types.h>
		 #include <sys/stat.h>
		 #include <unistd.h>])
	AC_CHECK_TYPES([struct timespec], [AC_DEFINE(HAVE_STRUCT_TIMESPEC)], ,
		[#include <time.h>])
	AC_CHECK_TYPES([struct timeval], [AC_DEFINE(HAVE_STRUCT_TIMEVAL)], ,
		[#include <sys/time.h>
		 #include <sys/types.h>
		 #include <utime.h>])
	AC_CHECK_TYPES([struct timezone], [AC_DEFINE(HAVE_STRUCT_TIMEZONE)], ,
		[#include <sys/time.h>])
	AC_CHECK_TYPES([struct utimbuf], [AC_DEFINE(HAVE_STRUCT_UTIMBUF)], ,
		[#include <sys/types.h>
		 #include <utime.h>])
	AC_CHECK_MEMBERS(
		[struct dirent.d_off, struct dirent.d_reclen, struct dirent.d_type],,, 
		[#include <sys/types.h>
		 #include <dirent.h>])
	AC_CHECK_MEMBERS(
		[struct passwd.pw_gecos],,, 
		[#include <sys/types.h>
		 #include <pwd.h>])
	AC_CHECK_MEMBERS(
		[struct statfs.f_flags],,, 
		[#include <sys/types.h>
		 #include <sys/vfs.h>])

	dnl Favour xattr through glibc, but use libattr if we have to
	AC_CHECK_FUNC(lsetxattr, ,
		AC_CHECK_LIB(attr, lsetxattr, XATTR_LIB="-lattr",)
	)
	AC_SUBST(XATTR_LIB)

	dnl kinfo_proc.kp_proc works on darwin but fails on other simil-bsds
	AC_CHECK_MEMBERS(
		[struct kinfo_proc.kp_proc],,, 
		[#include <sys/types.h>
		 #include <sys/param.h>
		 #include <sys/sysctl.h>
		 #include <sys/proc.h>
		 ])

	dnl *********************************
	dnl *** Checks for Windows compilation ***
	dnl *********************************
	AC_CHECK_HEADERS(sys/time.h)
	AC_CHECK_HEADERS(sys/param.h)
	AC_CHECK_HEADERS(dirent.h)

	dnl *********************************
	dnl *** Check for Console 2.0 I/O ***
	dnl *********************************
	AC_CHECK_HEADERS([curses.h])
	AC_CHECK_HEADERS([term.h], [], [],
	[#if HAVE_CURSES_H
	 #include <curses.h>
	 #endif
	])
	AC_CHECK_HEADERS([termios.h])

	dnl * This is provided in io-layer, but on windows it's only available
	dnl * on xp+
	AC_DEFINE(HAVE_GETPROCESSID, 1, [Define if GetProcessId is available])
else
	jdk_headers_found=no
	AC_CHECK_LIB(ws2_32, main, LIBS="$LIBS -lws2_32", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(psapi, main, LIBS="$LIBS -lpsapi", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(ole32, main, LIBS="$LIBS -lole32", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(winmm, main, LIBS="$LIBS -lwinmm", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(oleaut32, main, LIBS="$LIBS -loleaut32", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(advapi32, main, LIBS="$LIBS -ladvapi32", AC_ERROR(bad mingw install?))
	AC_CHECK_LIB(version, main, LIBS="$LIBS -lversion", AC_ERROR(bad mingw install?))

	dnl *********************************
	dnl *** Check for struct ip_mreqn ***
	dnl *********************************
	AC_MSG_CHECKING(for struct ip_mreqn)
	AC_TRY_COMPILE([#include <ws2tcpip.h>], [
		struct ip_mreqn mreq;
		mreq.imr_address.s_addr = 0;
	], [
		# Yes, we have it...
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_STRUCT_IP_MREQN)
	], [
		# We'll just have to try and use struct ip_mreq
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(for struct ip_mreq)
		AC_TRY_COMPILE([#include <ws2tcpip.h>], [
			struct ip_mreq mreq;
			mreq.imr_interface.s_addr = 0;
		], [
			# Yes, we have it...
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STRUCT_IP_MREQ)
		], [
			# No multicast support
			AC_MSG_RESULT(no)
		])
	])
	AC_CHECK_FUNCS(GetProcessId)
fi

dnl socklen_t check
AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
],[
  socklen_t foo;
],[
ac_cv_c_socklen_t=yes
	AC_DEFINE(HAVE_SOCKLEN_T, 1, [Have socklen_t])
	AC_MSG_RESULT(yes)
],[
	AC_MSG_RESULT(no)
])

AC_MSG_CHECKING(for array element initializer support)
AC_TRY_COMPILE([#include <sys/socket.h>], [
	const int array[] = {[1] = 2,};
], [
	# Yes, we have it...
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_ARRAY_ELEM_INIT,1,[Supports C99 array initialization])
], [
	# We'll have to use signals
	AC_MSG_RESULT(no)
])

AC_CHECK_FUNCS(trunc, , AC_MSG_CHECKING(for trunc in math.h)
	# Simply calling trunc (0.0) is no good since gcc will optimize the call away
	AC_TRY_LINK([#include <math.h>], 
	[ static void *p = &trunc; ],
	[
		AC_DEFINE(HAVE_TRUNC) 
		AC_MSG_RESULT(yes)
		ac_cv_trunc=yes
	],
	AC_MSG_RESULT(no)))

if test "x$ac_cv_truncl" != "xyes"; then
   AC_CHECK_LIB(sunmath, aintl, [ AC_DEFINE(HAVE_AINTL, 1, [Has the 'aintl' function]) LIBS="$LIBS -lsunmath"])
fi

AC_CHECK_FUNCS(round)
AC_CHECK_FUNCS(rint)
AC_CHECK_FUNCS(execvp)

dnl ****************************
dnl *** Look for /dev/random ***
dnl ****************************

AC_MSG_CHECKING([if usage of random device is requested])
AC_ARG_ENABLE(dev-random,
[  --disable-dev-random    disable the use of the random device (enabled by default)],
try_dev_random=$enableval, try_dev_random=yes)

AC_MSG_RESULT($try_dev_random)

case "{$target}" in
    *-openbsd*)
    NAME_DEV_RANDOM="/dev/srandom"
    ;;

dnl Win32 does not have /dev/random, they have their own method...

    *-mingw*|*-*-cygwin*)
    ac_cv_have_dev_random=no
    ;;

dnl Everywhere else, it's /dev/random

    *)
    NAME_DEV_RANDOM="/dev/random"
    ;;
esac

AC_DEFINE_UNQUOTED(NAME_DEV_RANDOM, "$NAME_DEV_RANDOM", [Name of /dev/random])

dnl Now check if the device actually exists

if test "x$try_dev_random" = "xyes"; then
    AC_CACHE_CHECK(for random device, ac_cv_have_dev_random,
    [if test -r "$NAME_DEV_RANDOM" ; then
        ac_cv_have_dev_random=yes; else ac_cv_have_dev_random=no; fi])
    if test "x$ac_cv_have_dev_random" = "xyes"; then
        AC_DEFINE(HAVE_CRYPT_RNG, 1, [Have /dev/random])
    fi
else
    AC_MSG_CHECKING(for random device)
    ac_cv_have_dev_random=no
    AC_MSG_RESULT(has been disabled)
fi

if test "x$host_win32" = "xyes"; then
    AC_DEFINE(HAVE_CRYPT_RNG)
fi

if test "x$ac_cv_have_dev_random" = "xno" \
    && test "x$host_win32" = "xno"; then
    AC_MSG_WARN([[
***
*** A system-provided entropy source was not found on this system.
*** Because of this, the System.Security.Cryptography random number generator
*** will throw a NotImplemented exception.
***
*** If you are seeing this message, and you know your system DOES have an
*** entropy collection in place, please contact <crichton@gimp.org> and
*** provide information about the system and how to access the random device.
***
*** Otherwise you can install either egd or prngd and set the environment
*** variable MONO_EGD_SOCKET to point to the daemon's socket to use that.
***]])
fi
 
AC_MSG_CHECKING([if inter-process shared handles are requested])
AC_ARG_ENABLE(shared-handles, [  --disable-shared-handles disable inter-process shared handles], try_shared_handles=$enableval, try_shared_handles=yes)
AC_MSG_RESULT($try_shared_handles)
if test "x$try_shared_handles" != "xyes"; then
	AC_DEFINE(DISABLE_SHARED_HANDLES, 1, [Disable inter-process shared handles])
	AC_SUBST(DISABLE_SHARED_HANDLES)
fi

AC_ARG_ENABLE(nunit-tests, [  --enable-nunit-tests	Run the nunit tests of the class library on 'make check'])
AM_CONDITIONAL(ENABLE_NUNIT_TESTS, [test x$enable_nunit_tests = xyes])

AC_MSG_CHECKING([if big-arrays are to be enabled])
AC_ARG_ENABLE(big-arrays,  [  --enable-big-arrays	Enable the allocation and indexing of arrays greater than Int32.MaxValue], enable_big_arrays=$enableval, enable_big_arrays=no)
if test "x$enable_big_arrays" = "xyes" ; then
    if  test "x$ac_cv_sizeof_void_p" = "x8"; then
	AC_DEFINE(MONO_BIG_ARRAYS,1,[Enable the allocation and indexing of arrays greater than Int32.MaxValue])
    else
        AC_MSG_ERROR([The allocation and indexing of arrays greater than Int32.MaxValue is not supported on this platform.])
    fi
fi
AC_MSG_RESULT($enable_big_arrays)

dnl **************
dnl *** DTRACE ***
dnl **************

AC_ARG_ENABLE(dtrace,[  --enable-dtrace	Enable DTrace probes], enable_dtrace=$enableval, enable_dtrace=$has_dtrace)

if test "x$enable_dtrace" = "xyes"; then
   if test "x$has_dtrace" = "xno"; then
   	  AC_MSG_ERROR([DTrace probes are not supported on this platform.])
   fi
   AC_PATH_PROG(DTRACE, [dtrace], [no], [$PATH:/usr/sbin])
   if test "x$DTRACE" = "xno"; then
   	  AC_MSG_RESULT([dtrace utility not found, dtrace support disabled.])
	  enable_dtrace=no
   elif ! $DTRACE -h -s $srcdir/data/mono.d > /dev/null 2>&1; then
	  AC_MSG_RESULT([dtrace doesn't support -h option, dtrace support disabled.])
	  enable_dtrace=no
   fi
fi

dtrace_g=no
if test "x$enable_dtrace" = "xyes"; then
	AC_DEFINE(ENABLE_DTRACE, 1, [Enable DTrace probes])
	DTRACEFLAGS=
	if test "x$ac_cv_sizeof_void_p" = "x8"; then
		case "$host" in
			powerpc-*-darwin*)
			DTRACEFLAGS="-arch ppc64"
			;;
			i*86-*-darwin*)
			DTRACEFLAGS="-arch x86_64"
			;;
			*)
			DTRACEFLAGS=-64
			;;
		esac
	else
		case "$host" in
			powerpc-*-darwin*)
			DTRACEFLAGS="-arch ppc"
			;;
			i*86-*-darwin*)
			DTRACEFLAGS="-arch i386"
			;;
			*)
			DTRACEFLAGS=-32
			;;
		esac
	fi
	AC_SUBST(DTRACEFLAGS)
	case "$host" in
		*-*-solaris*)
		dtrace_g=yes
		;;
	esac
	AC_CHECK_HEADERS([sys/sdt.h])
fi
AM_CONDITIONAL(ENABLE_DTRACE, [test x$enable_dtrace = xyes])
AM_CONDITIONAL(DTRACE_G_REQUIRED, [test x$dtrace_g = xyes])

dnl **************
dnl ***  NaCl  ***
dnl **************

AC_ARG_ENABLE(nacl_codegen, [  --enable-nacl-codegen      Enable Native Client code generation], enable_nacl_codegen=$enableval, enable_nacl_codegen=no)

AM_CONDITIONAL(NACL_CODEGEN, test x$enable_nacl_codegen != xno)
if test "x$enable_nacl_codegen" = "xyes"; then
   MONO_NACL_ALIGN_MASK_OFF=1
   CPPFLAGS="$CPPFLAGS -D__native_client_codegen__"
   AC_DEFINE(TARGET_NACL, 1, [...])
else
   MONO_NACL_ALIGN_MASK_OFF=0
fi
AC_SUBST(MONO_NACL_ALIGN_MASK_OFF)

dnl **************
dnl ***  LLVM  ***
dnl **************

AC_ARG_ENABLE(llvm,[  --enable-llvm	Enable the experimental LLVM back-end], enable_llvm=$enableval, enable_llvm=no)
AC_ARG_ENABLE(loadedllvm,[  --enable-loadedllvm	Load the LLVM back-end dynamically], enable_llvm=$enableval && enable_loadedllvm=$enableval, enable_loadedllvm=no)

if test "x$enable_llvm" = "xyes"; then
   AC_PATH_PROG(LLVM_CONFIG, llvm-config, no)
   if test "x$LLVM_CONFIG" = "xno"; then
   	  AC_MSG_ERROR([llvm-config not found.])
   fi

   # The output of --cflags seems to include optimizations flags too
   LLVM_CFLAGS=`$LLVM_CONFIG --cflags | sed -e 's/-O2//g' | sed -e 's/-O0//g' | sed -e 's/-fomit-frame-pointer//g' | sed -e 's/-fPIC//g'`
   # LLVM is compiled with -fno-rtti, so we need this too, since our classes inherit
   # from LLVM classes.
   LLVM_CXXFLAGS="`$LLVM_CONFIG --cxxflags` -fno-rtti"
   LLVM_LDFLAGS=`$LLVM_CONFIG --ldflags`
   LLVM_LIBS=`$LLVM_CONFIG --libs core bitwriter jit x86codegen`
   LLVM_LIBS="$LLVM_LDFLAGS $LLVM_LIBS -lstdc++"

   # Should be something like '2.6' or '2.7svn'
   llvm_version=`$LLVM_CONFIG --version`
   major_version=`echo $llvm_version | cut -c 1`
   minor_version=`echo $llvm_version | cut -c 3`
   if echo $llvm_version | grep -q 'mono'; then
   	  AC_DEFINE(LLVM_MONO_BRANCH, 1, [Whenever we are using the mono branch of LLVM])
	  LLVM_CXXFLAGS="$LLVM_CXXFLAGS -DLLVM_MONO_BRANCH"	  
   fi

   AC_DEFINE_UNQUOTED(LLVM_MAJOR_VERSION, $major_version, [Major version of LLVM libraries])
   AC_DEFINE_UNQUOTED(LLVM_MINOR_VERSION, $minor_version, [Minor version of LLVM libraries])
   AC_DEFINE_UNQUOTED(LLVM_VERSION, "$llvm_version", [Full version of LLVM libraties])

   # Have to pass these on the command line since mini-llvm-cpp.h already includes
   # llvm's config.h
   LLVM_CXXFLAGS="$LLVM_CXXFLAGS -DLLVM_MAJOR_VERSION=$major_version -DLLVM_MINOR_VERSION=$minor_version"

   AC_SUBST(LLVM_CFLAGS)
   AC_SUBST(LLVM_CXXFLAGS)
   AC_SUBST(LLVM_LIBS)
   AC_SUBST(LLVM_LDFLAGS)
   AC_DEFINE(ENABLE_LLVM, 1, [Enable the LLVM back end])
fi

AM_CONDITIONAL(ENABLE_LLVM, [test x$enable_llvm = xyes])
if test "x$enable_loadedllvm" = "xyes"; then
   AC_DEFINE(MONO_LLVM_LOADED, 1, [The LLVM back end is dynamically loaded])
fi
AM_CONDITIONAL(LOADED_LLVM, [test x$enable_loadedllvm = xyes])

TARGET="unknown"
ACCESS_UNALIGNED="yes"

JIT_SUPPORTED=no
INTERP_SUPPORTED=no
LIBC="libc.so.6"
INTL="libc.so.6"
SQLITE="libsqlite.so.0"
SQLITE3="libsqlite3.so.0"
X11="libX11.so"

sizeof_register="SIZEOF_VOID_P"

jit_wanted=false
interp_wanted=false
sgen_supported=false
case "$host" in
#	mips-sgi-irix5.* | mips-sgi-irix6.*)
#		TARGET=MIPS;
#		ACCESS_UNALIGNED="no"
#		;;
	mips*)
		TARGET=MIPS;
		arch_target=mips;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		jit_wanted=true

		AC_MSG_CHECKING(for mips n32)
		AC_TRY_COMPILE([], [
		void main () {
		#if _MIPS_SIM != _ABIN32
		#error Not mips n32
		#endif
   		}
		],[
		AC_MSG_RESULT(yes)
		sizeof_register=8
		],[
		AC_MSG_RESULT(no)
		])
		;;
	i*86-*-*)
		TARGET=X86;
		arch_target=x86;
		JIT_SUPPORTED=yes
		jit_wanted=true
		case $host_os in
		  solaris*)
			LIBC="libc.so"
			INTL="libintl.so"
			if test "x$ac_cv_sizeof_void_p" = "x8"; then
				TARGET=AMD64
				arch_target=amd64
			fi

			# On solaris 10 x86, gcc prints a warning saying 'visibility attribute not supported on this configuration; ignored', but linking fails. A test case:
			# int astruct __attribute__ ((visibility ("hidden")));
			# void foo ()
			# {
			#	void *p = &astruct;
			# }
			# gcc -fPIC --shared -o libfoo.so foo.c
			# yields:
			# foo.c:6: warning: visibility attribute not supported in this configuration; ignored
			# ld: fatal: relocation error: R_386_GOTOFF: file /var/tmp//ccxYR96k.o: symbol astruct: relocation must bind locally
			have_visibility_hidden=no
			;;
		  cygwin*)
			have_visibility_hidden=no		  
			;;
		  haiku*)
			LIBC=libroot.so
			;;
		  linux*)
			sgen_supported=true
			AOT_SUPPORTED="yes"
			;;
		  darwin*|openbsd*)
			sgen_supported=true
		        ;;
		esac
		;;
	x86_64-*-* | amd64-*-*)
		TARGET=AMD64;
		arch_target=amd64;
		JIT_SUPPORTED=yes
		jit_wanted=true
		case $host_os in
		  linux*)
			sgen_supported=true
			AOT_SUPPORTED="yes"
			;;
		  darwin*|openbsd*)
			sgen_supported=true
			;;
		esac
		;;
	ia64-*-*)
		TARGET=IA64
		arch_target=ia64
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		jit_wanted=true
		LIBC="libc.so.6.1"
		INTL="libc.so.6.1"
		AC_CHECK_LIB(unwind, _U_dyn_register, [], [AC_MSG_ERROR(library libunwind not found)])
		libmono_ldflags="-lunwind"
		;;
	sparc*-*-*)
		if test "x$ac_cv_sizeof_void_p" = "x8"; then
		   TARGET=SPARC64
		else
			TARGET=SPARC
		fi
		arch_target=sparc;
		JIT_SUPPORTED=yes
		ACCESS_UNALIGNED="no"
		case $host_os in
		  linux*) ;;
		  *)
			LIBC="libc.so"
			INTL="libintl.so"
		esac
		jit_wanted=true
		if test x"$GCC" = xyes; then
			# We don't support v8 cpus
			CFLAGS="$CFLAGS -Wno-cast-align -mcpu=v9"
		fi
		if test x"$AR" = xfalse; then
			AC_MSG_ERROR([The required utility 'ar' is not found in your PATH. Usually it can be found in /usr/ccs/bin.])
		fi
		;;
       alpha*-*-linux* | alpha*-*-osf*)
		TARGET=ALPHA;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		jit_wanted=true
		arch_target=alpha;
		CFLAGS="$CFLAGS -mieee -O0"
		case $host_os in
		  linux*)
			LIBC="libc.so.6.1"
			INTL="libc.so.6.1"
		esac
	       ;;
	*-mingw*|*-*-cygwin*)
		# When this is enabled, it leads to very strange crashes at runtime (gcc-3.4.4)
		have_visibility_hidden=no
		INTL="intl"
		;;
	hppa2.0w-hp-hpux11.00 | hppa64-hp-hpux11.00)
		TARGET=HPPA;
		arch_target=hppa; 
		LIBC="libc.sl"
		ACCESS_UNALIGNED="no"
		INTERP_SUPPORTED=yes
		interp_wanted=true
		;;
	hppa*linux*)
		TARGET=HPPA;
		arch_target=hppa; 
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		jit_wanted=true
		;;
	macppc-*-openbsd* | powerpc*-*-linux* | powerpc-*-openbsd* | \
        powerpc-*-sysv* | powerpc-*-darwin* | powerpc-*-netbsd* | powerpc-*-freebsd* )
		if test "x$ac_cv_sizeof_void_p" = "x8"; then
			TARGET=POWERPC64;
			CPPFLAGS="$CPPFLAGS -D__mono_ppc__ -D__mono_ppc64__"
			CFLAGS="$CFLAGS -mminimal-toc"
		else
			TARGET=POWERPC;
			CPPFLAGS="$CPPFLAGS -D__mono_ppc__"
		fi
		arch_target=ppc;
		JIT_SUPPORTED=yes
		jit_wanted=true
		case $host_os in
		  linux*|darwin*)
			sgen_supported=true
			;;
		esac
		;;
	arm*-darwin*)
		TARGET=ARM;
		arch_target=arm;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		CPPFLAGS="$CPPFLAGS -DARM_FPU_NONE=1"
		jit_wanted=true
		sgen_supported=true
		;;
	arm*-linux*)
		TARGET=ARM;
		arch_target=arm;
		ACCESS_UNALIGNED="no"
		JIT_SUPPORTED=yes
		jit_wanted=true
		sgen_supported=true
		;;
	s390-*-linux*)
		TARGET=S390;
		arch_target=s390;
		ACCESS_UNALIGNED="yes"
		JIT_SUPPORTED=yes
		jit_wanted=true
		sgen_supported=true
		# Required CFLAGS for s390[x].  USE_STRING_INLINES is automatic with gcc 4.1
		CFLAGS="$CFLAGS -mbackchain -D__USE_STRING_INLINES"
		;;
	s390x-*-linux*)
		TARGET=S390x;
		arch_target=s390x;
		ACCESS_UNALIGNED="yes"
		JIT_SUPPORTED=yes
		jit_wanted=true
		sgen_supported=true
		CFLAGS="$CFLAGS -mbackchain -D__USE_STRING_INLINES"
		;;
esac

if test "x$host" != "x$target"; then
   case "$target" in
   powerpc64-ps3-linux-gnu)
		TARGET=POWERPC64
		arch_target=powerpc64
		AC_DEFINE(TARGET_PS3, 1, [...])
		AC_DEFINE(MONO_CROSS_COMPILE,1,[The runtime is compiled for cross-compiling mode])
		# It would be better to just use TARGET_POWERPC64, but lots of code already
		# uses this define
		AC_DEFINE(__mono_ppc64__, 1, [...])
		AC_DEFINE(__mono_ilp32__, 1, [64 bit mode with 4 byte longs and pointers])
		sizeof_register=8
		target_byte_order=G_BIG_ENDIAN
		;;

   powerpc64-xbox360-linux-gnu)
		TARGET=POWERPC64
		arch_target=powerpc64
		AC_DEFINE(TARGET_XBOX360, 1, [...])
		AC_DEFINE(MONO_CROSS_COMPILE,1,[The runtime is compiled for cross-compiling mode])
		# It would be better to just use TARGET_POWERPC64, but lots of code already
		# uses this define
		sizeof_register=8
		target_byte_order=G_BIG_ENDIAN
		;;
	*)
		AC_MSG_WARN([Cross compiling is only supported for targets matching 'powerpc64-{ps3,xbox360}-linux-gnu'])
	esac
fi

# FIXME: Define the others as well
case "$TARGET" in
X86)
	AC_DEFINE(TARGET_X86, 1, [...])
	;;
AMD64)
	AC_DEFINE(TARGET_AMD64, 1, [...])
	;;
ARM)
	AC_DEFINE(TARGET_ARM, 1, [...])
	;;
POWERPC)
	AC_DEFINE(TARGET_POWERPC, 1, [...])
	;;
POWERPC64)
	AC_DEFINE(TARGET_POWERPC, 1, [...])
	AC_DEFINE(TARGET_POWERPC64, 1, [...])
	;;
esac

if test "x$sizeof_register" = "x4"; then
   AC_DEFINE(SIZEOF_REGISTER,4,[size of machine integer registers])
elif test "x$sizeof_register" = "x8"; then
   AC_DEFINE(SIZEOF_REGISTER,8,[size of machine integer registers])
else
   AC_DEFINE(SIZEOF_REGISTER,SIZEOF_VOID_P,[size of machine integer registers])
fi

if test "x$target_byte_order" = "xG_BIG_ENDIAN"; then
   AC_DEFINE(TARGET_BYTE_ORDER,G_BIG_ENDIAN,[byte order of target])
elif test "x$target_byte_order" = "xG_LITTLE_ENDIAN"; then
   AC_DEFINE(TARGET_BYTE_ORDER,G_LITTLE_ENDIAN,[byte order of target])
else
   AC_DEFINE(TARGET_BYTE_ORDER,G_BYTE_ORDER,[byte order of target])
fi

if test "x$have_visibility_hidden" = "xyes"; then
   AC_DEFINE(HAVE_VISIBILITY_HIDDEN, 1, [Support for the visibility ("hidden") attribute])
fi

if test "x$have_deprecated" = "xyes"; then
   AC_DEFINE(HAVE_DEPRECATED, 1, [Support for the deprecated attribute])
fi

dnl 
dnl Simple Generational checks (sgen)
dnl
if $sgen_supported; then
   build_sgen_default=yes
else
   build_sgen_default=no
fi
SGEN_DEFINES=
AC_ARG_WITH(sgen, [  --with-sgen=yes,no             Extra Generational GC, default=yes],[buildsgen=$with_sgen],[buildsgen=$build_sgen_default])
if test x$buildsgen = xyes; then
   if $sgen_supported; then
       SGEN_DEFINES="-DHAVE_SGEN_GC -DHAVE_MOVING_COLLECTOR -DHAVE_WRITE_BARRIERS"
       gc_msg="sgen and $gc_msg"
   else
       buildsgen=no
       AC_MSG_WARN("Sgen is not supported on this platform")
   fi
fi
AC_SUBST(SGEN_DEFINES)
AM_CONDITIONAL(SUPPORT_SGEN, test x$buildsgen = xyes)

AC_ARG_WITH(jit, [  --with-jit=yes,no              If you want to build scripts that default to the JIT (defaults to no)],[
	if test x$withval = xyes; then
	   jit_wanted=true
	else
	   jit_wanted=false
	fi
])

AC_ARG_WITH(interp, [  --with-interp=yes,no           If you want to build scripts that default to the interpreter (defaults to no)],[
	if test x$withval = xyes; then
	   interp_wanted=true
	else
	   interp_wanted=false
	fi
])

USEJIT=false
if test x$JIT_SUPPORTED = xyes; then
   if $jit_wanted; then
      USEJIT=true
      jit_status="Building and using the JIT"
   else
      if $interp_wanted; then
         jit_status="Building the JIT, defaulting to the interpreter"
      else
         AC_ERROR(No JIT or interpreter support available or selected.)
      fi
   fi
else
   if test x$interp_wanted = xtrue; then
      jit_status="interpreter"
   else
      AC_ERROR(No JIT or interpreter support available or selected.)
   fi
fi

AM_CONDITIONAL(USE_JIT, test x$USEJIT = xtrue)

libsuffix=".so"

case "$host" in
     *-*-darwin*)
	libsuffix=".dylib"
	LIBC="libc.dylib"
	INTL="libintl.dylib"
	SQLITE="libsqlite.0.dylib"
	SQLITE3="libsqlite3.0.dylib"
	X11="libX11.dylib"
	;;
     *-*-*netbsd*)
	LIBC="libc.so.12"
	INTL="libintl.so.0"
	;;
    *-*-*freebsd*)
    	LIBC="libc.so"
	INTL="libintl.so"
	SQLITE="libsqlite.so"
	SQLITE3="libsqlite3.so"
	;;
    *-*-*openbsd*)
    	LIBC="libc.so"
	INTL="libintl.so"
        SQLITE="libsqlite.so"
        SQLITE3="libsqlite3.so"
	;;
    *-*-*linux*)
	AC_PATH_X
	AC_MSG_CHECKING(for the soname of libX11.so)
	for i in $x_libraries /usr/lib /usr/lib64; do
		for r in 4 5 6; do
			if test -f $i/libX11.so.$r; then
				X11=libX11.so.$r
				AC_MSG_RESULT($X11)
			fi
		done
	done
	
	if test "x$X11" = "xlibX11.so"; then
		AC_MSG_WARN([Could not find X development libs. Do you have the -devel package installed? WinForms may not work...]);
	fi
	;;
esac


AC_SUBST(libsuffix)

if test "x$TARGET" = "xAMD64" -o "x$TARGET" = "xX86"; then
	if test "x$with_tls" = "x__thread"; then
		#
		# On some linux distributions, TLS works in executables, but linking 
		# against a shared library containing TLS fails with:
		# undefined reference to `__tls_get_addr'
		#
		rm -f conftest.c conftest.so conftest
		echo "static __thread int foo; void main () { foo = 5; }" > conftest.c
		$CC -fPIC --shared -o conftest.so conftest.c > /dev/null 2>&1
		$CC -o conftest conftest.so > /dev/null 2>&1
		if test ! -f conftest; then
		   AC_MSG_WARN([Disabling usage of __thread.]);
		   with_tls=pthread
		fi
		rm -f conftest.c conftest.so conftest
	fi
fi

mono_debugger_supported=no
AC_ARG_ENABLE(mono-debugger, [  --disable-mono-debugger disable support for the mdb debugger], try_mono_debugger=$enableval, try_mono_debugger=yes)
if test "x$try_mono_debugger" = "xyes"; then
	if test "x$TARGET" = "xAMD64" -o "x$TARGET" = "xX86" -o "x$TARGET" = "xALPHA"; then
		if test x$use_included_gc = xyes; then
			case "$host" in
			*-*-*linux*)
				mono_debugger_supported=yes
				;;
			*86-apple-darwin*)
				mono_debugger_supported=yes
				;;		
			esac
		fi
	fi
fi

# disable the debugger entirely when building with moonlight
if test "x$with_moonlight" != "xno"; then
	mono_debugger_supported=no
fi

AC_MSG_CHECKING(if the Mono Debugger is supported on this platform)
if test "x$mono_debugger_supported" = "xyes"; then
	BOEHM_DEFINES="$BOEHM_DEFINES -DMONO_DEBUGGER_SUPPORTED"
	NESTED_LIBGC_FLAGS="-DMONO_DEBUGGER_SUPPORTED"
fi
AM_CONDITIONAL(MONO_DEBUGGER_SUPPORTED, test x$mono_debugger_supported = xyes)
AC_MSG_RESULT($mono_debugger_supported)

if test "x$with_tls" = "x__thread"; then
	AC_DEFINE(HAVE_KW_THREAD, 1, [Have __thread keyword])
	# Pass the information to libgc
	CPPFLAGS="$CPPFLAGS -DUSE_COMPILER_TLS"
	AC_MSG_CHECKING(if the tls_model attribute is supported)
	AC_TRY_COMPILE([static __thread int foo __attribute__((tls_model("initial-exec")));], [
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TLS_MODEL_ATTR, 1, [tld_model available])
		], [
			AC_MSG_RESULT(no)
	])
fi

if test ${TARGET} = ARM && test x$cross_compiling = xno && test x$enable_mcs_build != xno; then
	dnl ******************************************
	dnl *** Check to see what FPU is available ***
	dnl ******************************************
	AC_MSG_CHECKING(which FPU to use)

	AC_TRY_COMPILE([], [
		__asm__ ("ldfd f0, [r0]");
		], fpu=FPA, fpu=NONE)

	AC_MSG_RESULT($fpu)
	CPPFLAGS="$CPPFLAGS -DARM_FPU_$fpu=1"
	unset fpu
fi

if test ${TARGET} = unknown; then
	CPPFLAGS="$CPPFLAGS -DNO_PORT"
	AC_MSG_WARN("mono has not been ported to $host: some things may not work.")
fi

if test ${ACCESS_UNALIGNED} = no; then
	CPPFLAGS="$CPPFLAGS -DNO_UNALIGNED_ACCESS"
fi

case "x$gc" in
	xincluded)
		# Pass CPPFLAGS to libgc configure
		# We should use a separate variable for this to avoid passing useless and
		# potentially problematic defines to libgc (like -D_FILE_OFFSET_BITS=64)
		# This should be executed late so we pick up the final version of CPPFLAGS
		# The problem with this approach, is that during a reconfigure, the main
		# configure scripts gets invoked with these arguments, so we use separate
		# variables understood by libgc's configure to pass CPPFLAGS and CFLAGS.
		LIBGC_CPPFLAGS="$CPPFLAGS $NESTED_LIBGC_FLAGS"
		if test x$TARGET = xSPARC -o x$TARGET = xSPARC64; then
			LIBGC_CPPFLAGS=`echo $LIBGC_CPPFLAGS | sed -e 's/-D_FILE_OFFSET_BITS=64//g'`
		fi
		ac_configure_args="$ac_configure_args --disable-embed-check --with-libgc-threads=$libgc_threads $libgc_configure_args \"CPPFLAGS_FOR_LIBGC=$LIBGC_CPPFLAGS\" \"CFLAGS_FOR_LIBGC=$CFLAGS_FOR_LIBGC\""
		AC_CONFIG_SUBDIRS(libgc)
		;;
esac

#AC_ARG_WITH(profile2,  [  --with-profile2=yes,no          If you want to install the 2.0 FX (defaults to yes)],                 [], [with_profile2=yes])
AC_ARG_WITH(profile4,  [  --with-profile4=yes,no          If you want to install the 4.0 FX (defaults to yes)],                  [], [with_profile4=yes])
AC_ARG_WITH(monodroid, [  --with-monodroid=yes,no         If you want to build the MonoDroid 2.1 assemblies (defaults to no)], [], [with_monodroid=no])
AC_ARG_WITH(monotouch, [  --with-monotouch=yes,no         If you want to build the MonoTouch 2.1 assemblies (defaults to no)], [], [with_monotouch=no])

OPROFILE=no
AC_ARG_WITH(oprofile,[  --with-oprofile=no,<oprofile install dir>   Enable oprofile support (defaults to no)],[
	if test x$with_oprofile != xno; then
	    oprofile_include=$with_oprofile/include
	    if test ! -f $oprofile_include/opagent.h; then
	   	  AC_MSG_ERROR([oprofile include file not found at $oprofile_include/opagent.h])
		fi
	    OPROFILE=yes
		OPROFILE_CFLAGS="-I$oprofile_include"
	    OPROFILE_LIBS="-L$with_oprofile/lib/oprofile -lopagent"
	    AC_DEFINE(HAVE_OPROFILE,1,[Have oprofile support])
	fi
])

MALLOC_MEMPOOLS=no
AC_ARG_WITH(malloc_mempools,[  --with-malloc-mempools=yes,no  Use malloc for each single mempool allocation (only for runtime debugging, defaults to no)],[
	if test x$with_malloc_mempools = xyes; then
		MALLOC_MEMPOOLS=yes
		AC_DEFINE(USE_MALLOC_FOR_MEMPOOLS,1,[Use malloc for each single mempool allocation])
	fi
])


DISABLE_MCS_DOCS=no
AC_ARG_WITH(mcs_docs,[  --with-mcs-docs=yes,no         If you want to build the documentation under mcs (defaults to yes)],[
	if test x$with_mcs_docs != xyes; then
		DISABLE_MCS_DOCS=yes
	fi
])
if test x$with_profile4 != xyes; then
	DISABLE_MCS_DOCS=yes
fi

MOONLIGHT_DEFINES=
AC_ARG_WITH(moonlight, [  --with-moonlight=yes|no|only         If you want to build Mono for Moonlight (defaults to no)],[
        MOONLIGHT_DEFINES="-DMOONLIGHT -DDISABLE_ASSEMBLY_REMAPPING"
], [with_moonlight=no])
AC_SUBST(MOONLIGHT_DEFINES)



AC_CHECK_HEADER([malloc.h], 
		[AC_DEFINE([HAVE_USR_INCLUDE_MALLOC_H], [1], 
			[Define to 1 if you have /usr/include/malloc.h.])],,)

dnl
dnl Consistency settings
dnl
if test x$cross_compiling = xyes -o x$enable_mcs_build = xno; then
   DISABLE_MCS_DOCS=yes
fi

if test x$DISABLE_MCS_DOCS = xyes; then
   docs_dir=""
else
   docs_dir=docs
fi
AC_SUBST(docs_dir)

AM_CONDITIONAL(HAVE_OPROFILE, test x$OPROFILE = xyes)
AC_SUBST(OPROFILE_CFLAGS)
AC_SUBST(OPROFILE_LIBS)

libmono_ldflags="$libmono_ldflags $LIBS"

AM_CONDITIONAL(MOONLIGHT, [test "x$with_moonlight" != "xno"])
AM_CONDITIONAL(ONLY_MOONLIGHT, [test "x$with_moonlight" = "xonly"])
AM_CONDITIONAL(INSTALL_4_0, [test "x$with_profile4" = xyes])
AM_CONDITIONAL(INSTALL_MONODROID, [test "x$with_monodroid" = xyes])
AM_CONDITIONAL(INSTALL_MONOTOUCH, [test "x$with_monotouch" = xyes])

AM_CONDITIONAL(MIPS_GCC, test ${TARGET}${ac_cv_prog_gcc} = MIPSyes)
AM_CONDITIONAL(MIPS_SGI, test ${TARGET}${ac_cv_prog_gcc} = MIPSno)
AM_CONDITIONAL(SPARC, test x$TARGET = xSPARC)
AM_CONDITIONAL(SPARC64, test x$TARGET = xSPARC64)
AM_CONDITIONAL(X86, test x$TARGET = xX86)
AM_CONDITIONAL(AMD64, test x$TARGET = xAMD64)
AM_CONDITIONAL(ALPHA, test x$TARGET = xALPHA)
AM_CONDITIONAL(IA64, test x$TARGET = xIA64)
AM_CONDITIONAL(M68K, test x$TARGET = xM68K)
AM_CONDITIONAL(MIPS, test x$TARGET = xMIPS)
AM_CONDITIONAL(POWERPC, test x$TARGET = xPOWERPC)
AM_CONDITIONAL(POWERPC64, test x$TARGET = xPOWERPC64)
AM_CONDITIONAL(ARM, test x$TARGET = xARM)
AM_CONDITIONAL(S390, test x$TARGET = xS390)
AM_CONDITIONAL(S390x, test x$TARGET = xS390x)
AM_CONDITIONAL(HPPA, test x$TARGET = xHPPA)

AM_CONDITIONAL(JIT_SUPPORTED, test x$JIT_SUPPORTED = xyes)
AM_CONDITIONAL(INTERP_SUPPORTED, test x$interp_wanted = xtrue)
AM_CONDITIONAL(INCLUDED_LIBGC, test x$gc = xincluded)

AC_SUBST(LIBC)
AC_SUBST(INTL)
AC_SUBST(SQLITE)
AC_SUBST(SQLITE3)
AC_SUBST(X11)
AC_DEFINE_UNQUOTED(ARCHITECTURE,"$arch_target",[The architecture this is running on])
AC_SUBST(arch_target)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

mono_build_root=`pwd`
AC_SUBST(mono_build_root)

if test x$USEJIT = xtrue; then
  mono_runtime=mono/mini/mono
else
  mono_runtime=mono/interpreter/mint
fi
AC_SUBST(mono_runtime)

mono_cfg_root=$mono_build_root/runtime
if test x$host_win32 = xyes; then
  if test "x$cross_compiling" = "xno"; then
    mono_cfg_dir=`cygpath -w -a $mono_cfg_root`\\etc
  else
    mono_cfg_dir=`echo $mono_cfg_root | tr '/' '\\'`\\etc
  fi
else
  mono_cfg_dir=$mono_cfg_root/etc
fi
AC_SUBST(mono_cfg_dir)

AC_CONFIG_FILES([po/mcs/Makefile.in])

AC_CONFIG_FILES([runtime/mono-wrapper],[chmod +x runtime/mono-wrapper])
AC_CONFIG_FILES([runtime/monodis-wrapper],[chmod +x runtime/monodis-wrapper])

AC_CONFIG_COMMANDS([runtime/etc/mono/1.0/machine.config],
[   depth=../../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/1.0
    cd runtime/etc/mono/1.0
    rm -f machine.config
    $LN_S $reldir/data/net_1_1/machine.config machine.config
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/2.0/machine.config],
[   depth=../../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/2.0
    cd runtime/etc/mono/2.0
    rm -f machine.config
    $LN_S $reldir/data/net_2_0/machine.config machine.config
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/2.0/web.config],
[   depth=../../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/2.0
    cd runtime/etc/mono/2.0
    rm -f web.config
    $LN_S $reldir/data/net_2_0/web.config web.config
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/browscap.ini],
[   depth=../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/
    cd runtime/etc/mono/
    rm -f browscap.ini
    $LN_S $reldir/data/browscap.ini browscap.ini
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/2.0/Browsers/Compat.browser],
[   depth=../../../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/2.0/Browsers/
    cd runtime/etc/mono/2.0/Browsers
    rm -f Compat.browser
    $LN_S $reldir/data/net_2_0/Browsers/Compat.browser Compat.browser
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/4.0/machine.config],
[   depth=../../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/4.0
    cd runtime/etc/mono/4.0
    rm -f machine.config
    $LN_S $reldir/data/net_4_0/machine.config machine.config
    cd $depth
],[LN_S='$LN_S'])

AC_CONFIG_COMMANDS([runtime/etc/mono/4.0/web.config],
[   depth=../../../..
    case $srcdir in
    [[\\/$]]* | ?:[[\\/]]* ) reldir=$srcdir ;;
    .) reldir=$depth ;;
    *) reldir=$depth/$srcdir ;;
    esac
    $ac_aux_dir/install-sh -d runtime/etc/mono/4.0
    cd runtime/etc/mono/4.0
    rm -f web.config
    $LN_S $reldir/data/net_4_0/web.config web.config
    cd $depth
],[LN_S='$LN_S'])

if test x$enable_quiet_build = xyes; then
   AC_CONFIG_COMMANDS([quiet], [for i in `find mono libgc support -name Makefile.in | sed -e 's/Makefile.in/Makefile/g'`; do if test -f $i; then $srcdir/scripts/patch-quiet.sh $i; fi; done], [shell=$SHELL])
   AC_CONFIG_COMMANDS([quiet-libtool], [sed -e 's/$echo "copying selected/$show "copying selected/g' < libtool > libtool.tmp && mv libtool.tmp libtool && chmod a+x libtool; sed -e 's/$ECHO "copying selected/# "copying selected/g' < libtool > libtool.tmp && mv libtool.tmp libtool && chmod a+x libtool])
fi

AC_OUTPUT([
Makefile
mono-core.spec
mono-uninstalled.pc
scripts/mono-find-provides
scripts/mono-find-requires
mono/Makefile
mono/utils/Makefile
mono/metadata/Makefile
mono/dis/Makefile
mono/cil/Makefile
mono/arch/Makefile
mono/arch/x86/Makefile
mono/arch/amd64/Makefile
mono/arch/hppa/Makefile
mono/arch/ppc/Makefile
mono/arch/sparc/Makefile
mono/arch/s390/Makefile
mono/arch/s390x/Makefile
mono/arch/arm/Makefile
mono/arch/alpha/Makefile
mono/arch/ia64/Makefile
mono/arch/mips/Makefile
mono/interpreter/Makefile
mono/tests/Makefile
mono/tests/tests-config
mono/tests/assemblyresolve/Makefile
mono/tests/cas/Makefile
mono/tests/cas/assembly/Makefile
mono/tests/cas/demand/Makefile
mono/tests/cas/inheritance/Makefile
mono/tests/cas/linkdemand/Makefile
mono/tests/cas/threads/Makefile
mono/benchmark/Makefile
mono/monograph/Makefile
mono/io-layer/Makefile
mono/mini/Makefile
mono/profiler/Makefile
ikvm-native/Makefile
scripts/Makefile
man/Makefile
docs/Makefile
data/Makefile
data/net_2_0/Makefile
data/net_4_0/Makefile
data/net_2_0/Browsers/Makefile
data/mint.pc
data/mono-2.pc
data/mono.pc
data/mono-cairo.pc
data/mono-nunit.pc
data/mono-options.pc
data/mono-lineeditor.pc
data/monodoc.pc
data/mono.web.pc
data/dotnet.pc
data/dotnet35.pc
data/wcf.pc
data/cecil.pc
data/system.web.extensions_1.0.pc
data/system.web.extensions.design_1.0.pc
data/system.web.mvc.pc
data/system.web.mvc2.pc
samples/Makefile
support/Makefile
data/config
tools/Makefile
tools/locale-builder/Makefile
tools/sgen/Makefile
runtime/Makefile
msvc/Makefile
po/Makefile
])

if test x$host_win32 = xyes; then
   # Get rid of 'cyg' prefixes in library names
   sed -e "s/\/cyg\//\/\//" libtool > libtool.new; mv libtool.new libtool; chmod 755 libtool
   # libtool seems to inherit -mno-cygwin from our CFLAGS, and uses it to compile its executable
   # wrapper scripts which use exec(). gcc has no problem compiling+linking this, but the resulting
   # executable doesn't work...
   sed -e "s,-mno-cygwin,,g" libtool > libtool.new; mv libtool.new libtool; chmod 755 libtool
fi

(
  case $prefix in
  NONE) prefix=$ac_default_prefix ;;
  esac
  case $exec_prefix in
  NONE) exec_prefix='${prefix}' ;;
  esac

  #
  # If we are cross compiling, we don't build in the mcs/ tree.  Let us not clobber
  # any existing config.make.  This allows people to share the same source tree
  # with different build directories, one native and one cross
  #
  if test x$cross_compiling = xno && test x$enable_mcs_build != xno; then

    test -w $mcs_topdir/build || chmod +w $mcs_topdir/build

    echo "prefix=$prefix" > $mcs_topdir/build/config.make
    echo "exec_prefix=$exec_prefix" >> $mcs_topdir/build/config.make
    echo "sysconfdir=$sysconfdir" >> $mcs_topdir/build/config.make
    echo 'mono_libdir=${exec_prefix}/lib' >> $mcs_topdir/build/config.make
    echo 'MCS_FLAGS = $(PLATFORM_DEBUG_FLAGS)' >> $mcs_topdir/build/config.make
    echo 'IL_FLAGS = /debug' >> $mcs_topdir/build/config.make
    echo "RUNTIME = $mono_build_root/runtime/mono-wrapper" >> $mcs_topdir/build/config.make
    echo "ILDISASM = $mono_build_root/runtime/monodis-wrapper" >> $mcs_topdir/build/config.make

    case $INSTALL in
    [[\\/$]]* | ?:[[\\/]]* ) mcs_INSTALL=$INSTALL ;;
    *) mcs_INSTALL=$mono_build_root/$INSTALL ;;
    esac

    echo "INSTALL = $mcs_INSTALL" >> $mcs_topdir/build/config.make

    export VERSION
    [myver=$($AWK 'BEGIN {
      split (ENVIRON["VERSION"] ".0.0.0", vsplit, ".")
      if(length(vsplit [1]) > 4) {
        split (substr(ENVIRON["VERSION"], 0, 4) "." substr(ENVIRON["VERSION"], 5) ".0.0", vsplit, ".")
      }
      print vsplit [1] "." vsplit [2] "." vsplit [3] "." vsplit [4]
    }')]

    echo "MONO_VERSION = $myver" >> $mcs_topdir/build/config.make

    if test x$platform_darwin = xyes; then
      echo "PLATFORM = darwin" >> $mcs_topdir/build/config.make
    fi

	if test x$AOT_SUPPORTED = xyes -a x$enable_system_aot = xdefault; then
	   enable_system_aot=yes
	fi

    if test x$host_win32 = xno -a x$platform_darwin != xyes -a x$enable_system_aot = xyes; then
      echo "ENABLE_AOT = 1" >> $mcs_topdir/build/config.make
    fi

    if test x$DISABLE_MCS_DOCS = xyes; then
      echo "DISABLE_MCS_DOCS = yes" >> $mcs_topdir/build/config.make
    fi

    if test x$with_moonlight != xno; then
      echo "MOONLIGHT = 1" >> $srcdir/$mcsdir/build/config.make
    fi

  fi

  # if we have an olive folder, override the default settings
  if test -d $olivedir; then

    if test x$cross_compiling = xno && test x$enable_olive_build != xno; then

      test -w $srcdir/$olivedir/build || chmod +w $srcdir/$olivedir/build

      echo "prefix=$prefix" > $srcdir/$olivedir/build/config.make
      echo "exec_prefix=$exec_prefix" >> $srcdir/$olivedir/build/config.make
      echo 'mono_libdir=${exec_prefix}/lib' >> $srcdir/$olivedir/build/config.make
      echo 'MCS_FLAGS = $(PLATFORM_DEBUG_FLAGS)' >> $srcdir/$olivedir/build/config.make
      echo "RUNTIME = $mono_build_root/runtime/mono-wrapper" >> $srcdir/$olivedir/build/config.make
      echo "MONO_VERSION = $myver" >> $srcdir/$olivedir/build/config.make
    fi
  fi

)

libgdiplus_msg=${libgdiplus_loc:-assumed to be installed}

echo "
        mcs source:    $mcsdir
        olive source:  $olive_topdir

   Engine:
	GC:	       $gc_msg 
	GLIB:	       $with_glib
	TLS:           $with_tls
	SIGALTSTACK:   $with_sigaltstack
	Engine:        $jit_status
	oprofile:      $OPROFILE
	BigArrays:     $enable_big_arrays
	DTrace:        $enable_dtrace
	Parallel Mark: $enable_parallel_mark
	LLVM Back End: $enable_llvm (dynamically loaded: $enable_loadedllvm)

    Libraries:
	Moon Profile:  $with_moonlight
	MonoDroid:     $with_monodroid
	MonoTouch:     $with_monotouch
	JNI support:   $jdk_headers_found
	libgdiplus:    $libgdiplus_msg
	zlib:          $zlib_msg
	$disabled
"
if test x$with_static_mono = xno -a "x$host_win32" != "xyes"; then
   AC_MSG_WARN(Turning off static Mono is a risk, you might run into unexpected bugs)
fi
