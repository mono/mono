<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlAnyElementAttribute" FullName="System.Xml.Serialization.XmlAnyElementAttribute">
  <TypeSignature Maintainer="auto" Language="C#" Value="public class XmlAnyElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAnyElementAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>To be added</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue | System.AttributeTargets.All, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <block subset="none" type="note">
        <para>When working in a portable class library, such as in Silverlight, Windows Phone or Windows Store App project, and you are using the .NET Framework 4.0.3 and above, use <see cref="T:System.Xml.Linq.XElement" /> or <see cref="T:System.Xml.Linq.XNode" /> in place of <see cref="T:System.Xml.XmlElement" /> and <see cref="T:System.Xml.XmlNode" />.</para>
      </block>
      <para>Use the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to contain arbitrary data (as XML elements) that can be sent as part of an XML document, such as metadata sent as part of the document.</para>
      <para>Apply the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to a field that returns an array of <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects. Such a field can be used in two ways, depending on whether an object is being serialized or deserialized. When serialized, the object is generated as XML elements or nodes, even though they have no corresponding member (or members) in the object being serialized. If you specify a <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property value when applying the attribute, all <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects inserted into the array must have the same element name and default namespace, or an exception is thrown. If you set the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property value, you must set the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property as well, and the <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects must also have the same name and namespace values. If no <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> value is specified, the <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects can have any element name.</para>
      <para>When you call the <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class, all elements that do not have a corresponding member in the object being deserialized are collected in the array. After deserialization, iterate through the collection of <see cref="T:System.Xml.XmlElement" /> items to process the data. If you specify a <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> value, the array contains only XML elements with that name. If you do not specify a <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> value, the array contains all elements that have no corresponding member in the class. If a class contains more than one field to which the attribute is applied, use the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />, or <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> and <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> properties to differentiate between the contents of the arrays. If such a class (with multiple fields) also contains one field that has no differentiating property values set (in other words, <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> and <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" />) during deserialization, this array contains any unknown XML elements that are not already contained in the other arrays. If a class contains more than one field that does not have a differentiating <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />, or <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> and <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> value set, the behavior during deserialization is unspecified.</para>
      <para>You can also apply the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to a field that returns a single <see cref="T:System.Xml.XmlElement" /> object. If you do so, you must use the properties and methods of the <see cref="T:System.Xml.XmlElement" /> class to recursively iterate through the unknown elements.</para>
      <para>You can apply multiple instances of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to a class member, but each instance must have a distinct <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property value. Or, if the same <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property is set for each instance, a distinct <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property value must be set for each instance.</para>
      <para>The <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> and <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> events of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> do not occur if you apply the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to a member of a class.</para>
      <block subset="none" type="note">
        <para>You can use the word XmlAnyElement in your code instead of the longer <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</para>
      </block>
      <para>For more information about using attributes, see <format type="text/html"><a href="30386922-1e00-4602-9ebf-526b271a8b87">Extending Metadata Using Attributes</a></format>.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> constructor when you are overriding the serialization of a field. For more details about overriding serialization, see the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> constructor when you are overriding the serialization of a field. For more details about overriding serialization, see the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAnyElementAttribute (string name, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string ns) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> constructor when you are overriding the serialization of a field. For more details about overriding serialization, see the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document and its XML namespace.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The XML namespace of the XML element. </param>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If you specify a <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property value when applying the attribute, all <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects inserted into the array must have the same element name and default namespace, or an exception is thrown. If you set the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property value, you must set the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property as well, and the <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects must also have the same name and namespace values. If no <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> value is specified, the <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects can have any element name.</para>
          <para>When you call the <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class, all attributes that do not have a corresponding member in the object being deserialized are collected in the array. If you specify a <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> value, the array contains only XML elements with that name. If you do not specify a <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> value, the array contains all elements that have no corresponding member in the class. If a class contains more than one field to which the attribute is applied, use the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> and <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> properties to differentiate between the contents of the arrays. If such a class (with multiple fields) also contains one field that has no differentiating property values set (that is, <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> and <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" />) during deserialization, the array contains any XML elements that are not already contained in the other arrays. If you add more than one field that does not have a differentiating <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> or <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> value set, the last field in the class contains all unknown elements that are not already contained in the other arrays, and any other fields are set to null.</para>
          <para>You can apply multiple instances of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to a class member, but each instance must have a distinct <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property value. Or, if the same <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property is set for each instance, a distinct <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property value must be set for each instance.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the XML element name.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property allows you to set a unique name for the XML attribute. The <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property conforms to the rules for creating an XML namespace as found in the World Wide Web Consortium (www.w3.org) document, "Namespaces in XML." </para>
          <para>To set the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property to a prefixed name, create an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains the namespaces and prefixes used in the XML document. Set the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace" /> property to one of the namespaces in the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />. When the XML is generated, the attribute name is correctly prefixed with the prefix associated with the specified namespace.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the XML namespace generated in the XML document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder" /> enumeration to instruct the <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" /> to generate code that sets the <see cref="P:System.Xml.Serialization.XmlElementAttribute.Order" /> property. </para>
          <block subset="none" type="note">
            <para>Once the <see cref="P:System.Xml.Serialization.XmlElementAttribute.Order" /> property has been used on one public property or field in a type, it must be applied to all public properties and fields for that type and all inherited types.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the explicit order in which the elements are serialized or deserialized.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>