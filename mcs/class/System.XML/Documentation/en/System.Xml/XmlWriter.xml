<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlWriter" FullName="System.Xml.XmlWriter" FullNameSP="System_Xml_XmlWriter" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public abstract XmlWriter extends System.Object" />
  <TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <MemberOfLibrary>XML</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Xml.XmlWriter" /> class writes XML data to a stream, file, text reader, or string. It supports the W3C <see cref="http://www.w3.org/TR/2006/REC-xml-20060816/">Extensible Markup Language (XML) 1.0 (fourth edition)</see> and <see cref="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML 1.0 (third edition)</see> recommendations.</para>
      <para>The members of the <see cref="T:System.Xml.XmlWriter" /> class enable you to:</para>
      <list type="bullet">
        <item>
          <para>Verify that the characters are legal XML characters and that element and attribute names are valid XML names.</para>
        </item>
        <item>
          <para>Verify that the XML document is well-formed.</para>
        </item>
        <item>
          <para>Encode binary bytes as Base64 or BinHex, and write out the resulting text.</para>
        </item>
        <item>
          <para>Pass values by using common language runtime types instead of strings, to avoid having to manually perform value conversions.</para>
        </item>
        <item>
          <para>Write multiple documents to one output stream.</para>
        </item>
        <item>
          <para>Write valid names, qualified names, and name tokens.</para>
        </item>
      </list>
      <para>In this section:</para>
      <para>
        <format type="text/html">
          <a href="#create">Creating an XML writer</a>
        </format>
        <br />
<format type="text/html"><a href="#output">Specifying the output format</a></format><br />
<format type="text/html"><a href="#conformance">Data conformance</a></format><br />
<format type="text/html"><a href="#writing_elements">Writing elements</a></format><br />
<format type="text/html"><a href="#writing_attributes">Writing attributes</a></format><br />
<format type="text/html"><a href="#handling_ns">Handling namespaces</a></format><br />
<format type="text/html"><a href="#writing_types">Writing typed data</a></format><br />
<format type="text/html"><a href="#close">Closing the XML writer</a></format><br />
<format type="text/html"><a href="#async">Asynchronous programming</a></format><br />
<format type="text/html"><a href="#security">Security considerations</a></format></para>
      <format type="text/html">
        <a href="#create" />
      </format>
      <format type="text/html">
        <h2>Creating an XML writer</h2>
      </format>
      <para>To create an <see cref="T:System.Xml.XmlWriter" /> instance, use the <see cref="Overload:System.Xml.XmlWriter.Create" /> method. To specify the set of features you want to enable on the XML writer, pass an <see cref="T:System.Xml.XmlWriterSettings" /> to the <see cref="Overload:System.Xml.XmlWriter.Create" /> method. Otherwise, default settings are used. See the <see cref="Overload:System.Xml.XmlWriter.Create" /> reference pages for details.</para>
      <format type="text/html">
        <a href="#output" />
      </format>
      <format type="text/html">
        <h2>Specifying the output format</h2>
      </format>
      <para>The <see cref="T:System.Xml.XmlWriterSettings" /> class includes several properties that control how <see cref="T:System.Xml.XmlWriter" /> output is formatted:</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Property</para>
            </term>
            <description>
              <para>Description</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.Encoding" />
            </para>
          </term>
          <description>
            <para>Specifies the text encoding to use. The default is Encoding.UTF8.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.Indent" />
            </para>
          </term>
          <description>
            <para>Indicates whether to indent elements. The default is false (no indentation).</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.IndentChars" />
            </para>
          </term>
          <description>
            <para>Specifies the character string to use when indenting. The default is two spaces.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />
            </para>
          </term>
          <description>
            <para>Specifies the character string to use for line breaks. The default is \r\n (carriage return, line feed).</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.NewLineHandling" />
            </para>
          </term>
          <description>
            <para>Specifies how to handle newline characters.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
            </para>
          </term>
          <description>
            <para>Indicates whether to write attributes on a new line. <see cref="P:System.Xml.XmlWriterSettings.Indent" /> should be set to true when using this property. The default is false.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
            </para>
          </term>
          <description>
            <para>Indicates whether to write an XML declaration. The default is false.</para>
          </description>
        </item>
      </list>
      <para>The <see cref="P:System.Xml.XmlWriterSettings.Indent" /> and <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> properties control how insignificant white space is formatted. For example, to indent element nodes:</para>
      <para>code reference: XmlWriter_v2#8</para>
      <para>Use the <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> to write each attribute on a new line with one extra level of indentation:</para>
      <para>code reference: XmlWriter_v2#9</para>
      <format type="text/html">
        <a href="#conformance" />
      </format>
      <format type="text/html">
        <h2>Data conformance</h2>
      </format>
      <para>An XML writer uses two properties from the <see cref="T:System.Xml.XmlWriterSettings" /> class to check for data conformance:</para>
      <list type="bullet">
        <item>
          <para>The <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> property instructs the XML writer to check characters and throw an <see cref="T:System.Xml.XmlException" /> exception if any characters are outside the legal range, as defined by the W3C.</para>
        </item>
        <item>
          <para>The <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> property configures the XML writer to check that the stream being written complies with the rules for a well-formed XML 1.0 document or document fragment, as defined by the W3C. The three conformance levels are described in the following table. The default is <see cref="F:System.Xml.ConformanceLevel.Document" />. For details, see the <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> property and the <see cref="T:System.Xml.ConformanceLevel" /> enumeration.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Level</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Document" />
                </para>
              </term>
              <description>
                <para>The XML output conforms to the rules for a well-formed XML 1.0 document and can be processed by any conforming processor.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Fragment" />
                </para>
              </term>
              <description>
                <para>The XML output conforms to the rules for a well-formed XML 1.0 document fragment.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Auto" />
                </para>
              </term>
              <description>
                <para>The XML writer determines which level of conformation checking to apply (document or fragment) based on the incoming data.</para>
              </description>
            </item>
          </list>
        </item>
      </list>
      <format type="text/html">
        <a href="#writing_elements" />
      </format>
      <format type="text/html">
        <h2>Writing elements</h2>
      </format>
      <para>You can use the following <see cref="T:System.Xml.XmlWriter" /> methods to write element nodes. For examples, see the methods listed.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Use</para>
            </term>
            <description>
              <para>To</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Xml.XmlWriter.WriteElementString" />
            </para>
          </term>
          <description>
            <para>Write an entire element  node, including a string value. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Xml.XmlWriter.WriteStartElement" />
            </para>
          </term>
          <description>
            <para>To write an element value by using multiple method calls.  For example, you can call <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> to write a typed value, <see cref="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" /> to write a character entity, <see cref="Overload:System.Xml.XmlWriter.WriteAttributeString" /> to write an attribute, or you can write a child element. This is a more sophisticated version of the <see cref="Overload:System.Xml.XmlWriter.WriteElementString" /> method.</para>
            <para>To close the element, you call the <see cref="M:System.Xml.XmlWriter.WriteEndElement" /> or <see cref="M:System.Xml.XmlWriter.WriteFullEndElement" /> method.</para>
            <para />
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Xml.XmlWriter.WriteNode" />
            </para>
          </term>
          <description>
            <para>To copy an element node found at the current position of an <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XPath.XPathNavigator" /> object. When called, it copies everything from the source object to the <see cref="T:System.Xml.XmlWriter" /> instance.</para>
          </description>
        </item>
      </list>
      <para>  </para>
      <format type="text/html">
        <a href="#writing_attributes" />
      </format>
      <format type="text/html">
        <h2>Writing attributes</h2>
      </format>
      <para>You can use the following <see cref="T:System.Xml.XmlWriter" /> methods to write attributes on element nodes. These methods can also be used to create namespace declarations on an element, as discussed in the next section.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Use</para>
            </term>
            <description>
              <para>To</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Xml.XmlWriter.WriteAttributeString" />
            </para>
          </term>
          <description>
            <para>To write an entire attribute node, including a string value.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Xml.XmlWriter.WriteStartAttribute" />
            </para>
          </term>
          <description>
            <para>To write the attribute value using multiple method calls. For example, you can call <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> to write a typed value. This is a more sophisticated version of the <see cref="Overload:System.Xml.XmlWriter.WriteElementString" /> method.</para>
            <para>To close the element, you call the <see cref="M:System.Xml.XmlWriter.WriteEndAttribute" /> method.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
            </para>
          </term>
          <description>
            <para>To copy all the attributes found at the current position of an <see cref="T:System.Xml.XmlReader" /> object. The attributes that are written depend on the type of node the reader is currently positioned on:</para>
            <list type="bullet">
              <item>
                <para>For an attribute node, it writes the current attribute, and then the rest of the attributes until the element closing tag.</para>
              </item>
              <item>
                <para>For an element node, it writes all attributes contained by the element.</para>
              </item>
              <item>
                <para>For an XML declaration node, it writes all the attributes in the declaration.</para>
              </item>
              <item>
                <para>For all other node types, the method throws an exception.</para>
              </item>
            </list>
          </description>
        </item>
      </list>
      <format type="text/html">
        <a href="#handling_ns" />
      </format>
      <format type="text/html">
        <h2>Handling namespaces</h2>
      </format>
      <para>Namespaces are used to qualify element and attribute names in an XML document. Namespace prefixes associate elements and attributes with namespaces, which are in turn associated with URI references. Namespaces create element and attribute name uniqueness in an XML document.</para>
      <para>The <see cref="T:System.Xml.XmlWriter" /> maintains a namespace stack that corresponds to all the namespaces defined in the current namespace scope. When writing elements and attributes you can utilize namespaces in the following ways:</para>
      <list type="bullet">
        <item>
          <para>Declare namespaces manually by using the <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" /> method. This can be useful when you know how to best optimize the number of namespace declarations. For an example, see the <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" /> method.</para>
        </item>
        <item>
          <para>Override the current namespace declaration with a new namespace. In the following code, the <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" /> method changes the namespace URI for the "x" prefix from "123" to "abc".</para>
          <para>code reference: XmlWriter_v2#18</para>
          <para>The code generates the following XML string:</para>
          <code>&lt;x:root xmlns:x="123"&gt;
  &lt;item xmlns:x="abc" /&gt;
&lt;/x:root&gt;</code>
        </item>
        <item>
          <para>Specify a namespace prefix when writing attributes or elements. Many of the methods used to write element and attributes enable you to do this. For example, the <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" /> method writes a start tag and associates it with a specified namespace and prefix.</para>
        </item>
      </list>
      <format type="text/html">
        <a href="#writing_types" />
      </format>
      <format type="text/html">
        <h2>Writing typed data</h2>
      </format>
      <para>The <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> method accepts a common language runtime (CLR) object, converts the input value to its string representation according to XML schema definition language (XSD) data type conversion rules, and writes it out by using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method. This is easier than using the methods in the <see cref="T:System.Xml.XmlConvert" /> class to convert the typed data to a string value before writing it out. </para>
      <para>When writing to text, the typed value is serialized to text by using the <see cref="T:System.Xml.XmlConvert" /> rules for that schema type.</para>
      <para>For default XSD data types that correspond to CLR types, see the <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> method.</para>
      <para>The <see cref="T:System.Xml.XmlWriter" /> can also be used to write to an XML data store. For example, the <see cref="T:System.Xml.XPath.XPathNavigator" /> class can create an <see cref="T:System.Xml.XmlWriter" /> object to create nodes for an <see cref="T:System.Xml.XmlDocument" /> object. If the data store has schema information available to it, the <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> method throws an exception if you try to convert to a type that is not allowed.If the data store does not have schema information available to it, the <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> method treats all values as an xsd:anySimpleType type. </para>
      <format type="text/html">
        <a href="#close" />
      </format>
      <format type="text/html">
        <h2>Closing the XML writer</h2>
      </format>
      <para>When you use <see cref="T:System.Xml.XmlWriter" /> methods to output XML, the elements and attributes are not written until you call the <see cref="M:System.Xml.XmlWriter.Close" /> method. For example, if you are using <see cref="T:System.Xml.XmlWriter" /> to populate an <see cref="T:System.Xml.XmlDocument" /> object, you won't be able to see the written elements and attributes in the target document until you close the <see cref="T:System.Xml.XmlWriter" /> instance.</para>
      <format type="text/html">
        <a href="#async" />
      </format>
      <format type="text/html">
        <h2>Asynchronous programming</h2>
      </format>
      <para>Most of the <see cref="T:System.Xml.XmlWriter" /> methods have asynchronous counterparts that have "Async" at the end of their method names. For example, the asynchronous equivalent of <see cref="Overload:System.Xml.XmlWriter.WriteAttributeString" /> is <see cref="Overload:System.Xml.XmlWriter.WriteAttributeStringAsync" />.</para>
      <para>For the <see cref="Overload:System.Xml.XmlWriter.WriteValue" /> method, which doesn't have an asynchronous counterpart, convert the return value to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method instead.</para>
      <format type="text/html">
        <a href="#security" />
      </format>
      <format type="text/html">
        <h2>Security considerations</h2>
      </format>
      <para>Consider the following when working with the <see cref="T:System.Xml.XmlWriter" /> class:</para>
      <list type="bullet">
        <item>
          <para>Exceptions thrown by the <see cref="T:System.Xml.XmlWriter" /> can disclose path information that you do not want bubbled up to the app. Your app must catch exceptions and process them appropriately.</para>
        </item>
        <item>
          <para>
            <see cref="T:System.Xml.XmlWriter" /> does not validate any data that is passed to the <see cref="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" /> or <see cref="Overload:System.Xml.XmlWriter.WriteRaw" /> method. You should not pass arbitrary data to these methods.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="family specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlWriter" /> class.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void Close()" />
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Any elements or attributes left open are automatically closed.</para>
          <block subset="none" type="note">
            <para>When you use the <see cref="T:System.Xml.XmlWriter" /> methods to output XML, the elements and attributes will not be written until you call the <see cref="M:System.Xml.XmlWriter.Close" /> method. For example, if you are using the XmlWriter to populate an <see cref="T:System.Xml.XmlDocument" />, until you close the <see cref="T:System.Xml.XmlWriter" />, you will not be able to observe the written elements and attributes in the target document.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, closes this stream and the underlying stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use this overload, an <see cref="T:System.Xml.XmlWriterSettings" /> object with the following default settings is used to create the XML writer: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Setting</para>
                </term>
                <description>
                  <para>Default</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CloseOutput" />
                </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Document" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Encoding" /> </para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Text.Encoding.UTF8" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Indent" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> </para>
              </term>
              <description>
                <para>Two spaces</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NamespaceHandling.Default" /> (no removal)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> </para>
              </term>
              <description>
                <para>\r\n (carriage return, new line)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NewLineHandling.Replace" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OutputMethod" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.XmlOutputMethod.Xml" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
                </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
          </list>
          <para>If you want to specify the features to support on the created writer, use an overload that takes an <see cref="T:System.Xml.XmlWriterSettings" /> object as one of its arguments, and pass in an <see cref="T:System.Xml.XmlWriterSettings" /> object with your custom settings.</para>
          <para>Also, XmlWriter always writes a Byte Order Mark (BOM) to the underlying data stream; however, some streams must not have a BOM. To omit the BOM, create a new <see cref="T:System.Xml.XmlWriterSettings" /> object and set the Encoding property to be a new <see cref="T:System.Text.UTF8Encoding" /> object with the Boolean value in the constructor set to false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use this overload, an <see cref="T:System.Xml.XmlWriterSettings" /> object with default settings is used to create the XML writer. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Setting</para>
                </term>
                <description>
                  <para>Default</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CloseOutput" />
                </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Document" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Encoding" /> </para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Text.Encoding.UTF8" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Indent" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> </para>
              </term>
              <description>
                <para>Two spaces</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NamespaceHandling.Default" /> (no removal)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> </para>
              </term>
              <description>
                <para>\r\n (carriage return, new line)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NewLineHandling.Replace" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OutputMethod" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.XmlOutputMethod.Xml" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
                </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
          </list>
          <para>If you want to specify the features to support on the created writer, use an overload that takes an <see cref="T:System.Xml.XmlWriterSettings" /> object as one of its arguments, and pass in an <see cref="T:System.Xml.XmlWriterSettings" /> object with your custom settings.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.IO.TextWriter" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use this overload, an <see cref="T:System.Xml.XmlWriterSettings" /> object with default settings is used to create the XML writer. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Setting</para>
                </term>
                <description>
                  <para>Default</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CloseOutput" />
                </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Document" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Encoding" /> </para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Text.Encoding.UTF8" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Indent" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> </para>
              </term>
              <description>
                <para>Two spaces</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NamespaceHandling.Default" /> (no removal)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> </para>
              </term>
              <description>
                <para>\r\n (carriage return, new line)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NewLineHandling.Replace" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OutputMethod" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.XmlOutputMethod.Xml" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
                </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
          </list>
          <para>If you want to specify the features to support on the created XML writer, use an overload that takes an <see cref="T:System.Xml.XmlWriterSettings" /> object as one of its arguments, and pass in a <see cref="T:System.Xml.XmlWriterSettings" /> object with your custom settings.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified filename.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="outputFileName">
          <attribution license="cc4" from="Microsoft" modified="false" />The file to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> creates a file at the specified path and writes to it in XML 1.0 text syntax. The <paramref name="outputFileName" /> must be a file system path.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use this overload, an <see cref="T:System.Xml.XmlWriterSettings" /> object with default settings is used to create the XML writer. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Setting</para>
                </term>
                <description>
                  <para>Default</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CloseOutput" />
                </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Document" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Encoding" /> </para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Text.Encoding.UTF8" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Indent" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> </para>
              </term>
              <description>
                <para>Two spaces</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NamespaceHandling.Default" /> (no removal)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> </para>
              </term>
              <description>
                <para>\r\n (carriage return, new line)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NewLineHandling.Replace" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OutputMethod" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.XmlOutputMethod.Xml" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
                </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
          </list>
          <para>If you want to specify the features to support on the created XML writer, use an overload that takes an <see cref="T:System.Xml.XmlWriterSettings" /> object as one of its arguments, and pass in a <see cref="T:System.Xml.XmlWriterSettings" /> object with your custom settings.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Text.StringBuilder" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method allows you add features to an underlying <see cref="T:System.Xml.XmlWriter" /> object. The underlying <see cref="T:System.Xml.XmlWriter" /> object can be an object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method, or an object created using the <see cref="T:System.Xml.XmlTextWriter" /> implementation.</para>
          <para>When you use this overload, an <see cref="T:System.Xml.XmlWriterSettings" /> object with default settings is used to create the XML writer. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Setting</para>
                </term>
                <description>
                  <para>Default</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.CloseOutput" />
                </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.ConformanceLevel.Document" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Encoding" /> </para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Text.Encoding.UTF8" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.Indent" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> </para>
              </term>
              <description>
                <para>Two spaces</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NamespaceHandling.Default" /> (no removal)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> </para>
              </term>
              <description>
                <para>\r\n (carriage return, new line)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineHandling" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.NewLineHandling.Replace" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" /> </para>
              </term>
              <description>
                <para>false</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.OutputMethod" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Xml.XmlOutputMethod.Xml" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
                </para>
              </term>
              <description>
                <para>true</para>
              </description>
            </item>
          </list>
          <para>If you want to specify the features to support on the created XML writer, use an overload that takes an <see cref="T:System.Xml.XmlWriterSettings" /> object as one of its arguments, and pass in a <see cref="T:System.Xml.XmlWriterSettings" /> object with your custom settings.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>XmlWriter always writes a Byte Order Mark (BOM) to the underlying data stream; however, some streams must not have a BOM. To omit the BOM, create a new <see cref="T:System.Xml.XmlWriterSettings" /> object and set the Encoding property to be a new <see cref="T:System.Text.UTF8Encoding" /> object with the Boolean value in the constructor set to false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the stream and <see cref="T:System.Xml.XmlWriterSettings" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the filename and <see cref="T:System.Xml.XmlWriterSettings" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="outputFileName">
          <attribution license="cc4" from="Microsoft" modified="false" />The file to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> creates a file at the specified path and writes to it in XML 1.0 text syntax. The <paramref name="outputFileName" /> must be a file system path.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method allows you add additional features to an underlying <see cref="T:System.Xml.XmlWriter" /> object. The underlying <see cref="T:System.Xml.XmlWriter" /> object can be an object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method, or an object created using the <see cref="T:System.Xml.XmlTextWriter" /> implementation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</para>
        </returns>
        <param name="output">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases all resources used by the current instance of the <see cref="T:System.Xml.XmlWriter" /> class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlWriter" /> and optionally releases the managed resources.</para>
        </summary>
        <param name="disposing">
          <attribution license="cc4" from="Microsoft" modified="false" />true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void Flush()" />
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is called instead of <see cref="M:System.Xml.XmlWriter.Close" /> when you want to write more to the underlying stream without losing what is still in the buffer.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.FlushAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.Flush" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous Flush operation.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string LookupPrefix(string ns)" />
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> As described above. </block>
          </para>
          <para>
            <block subset="none" type="overrides"> This method must be overridden in order
      to provide the functionality described above, as there is no default implementation.
   </block>
          </para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns " />is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The matching prefix or null if no matching namespace URI is found in the current scope.</para>
        </returns>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI whose prefix you want to find.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Xml.XmlWriterSettings" /> class is used to specify the set of features to support on the created writer instance. The <see cref="T:System.Xml.XmlWriterSettings" /> object returned by the <see cref="P:System.Xml.XmlWriter.Settings" /> property cannot be modified. Any attempt to change individual settings results in an exception being thrown.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this <see cref="T:System.Xml.XmlWriter" /> instance.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Xml.XmlWriter" /> instance is cast to an <see cref="T:System.IDisposable" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void WriteAttributes(class System.Xml.XmlReader reader, bool defattr)" />
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="reader" /> is not positioned on a node of <see cref="T:System.Xml.XmlNodeType" /><see langword="Attribute" />, <see langword="Element" />, or <see langword="XmlDeclaration" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the reader is positioned on an element node WriteAttributes copies all the contained attributes. If the reader is positioned on an attribute node, this method writes the current attribute, then the rest of the attributes until the element closing tag. If the reader is positioned on an XmlDeclaration node, this method writes all the attributes in the declaration. If the reader is positioned on any other node type this method throws an <see cref="T:System.Xml.XmlException" />.</para>
          <para>If this method is called using <see cref="T:System.Xml.XmlValidatingReader" />, to ensure well-formed XML any content (which has been expanded from the entities) that could result in an invalid document is replaced when written. For example, if an attribute includes an &amp;gt; entity that has been expanded, to ensure a well-formed document the expanded &gt; is replaced when written out with &amp;gt;.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader" />.</para>
        </summary>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlReader from which to copy the attributes.</param>
        <param name="defattr">
          <attribution license="cc4" from="Microsoft" modified="false" />true to copy the default attributes from the XmlReader; otherwise, false.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteAttributes operation.</para>
        </returns>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlReader from which to copy the attributes.</param>
        <param name="defattr">
          <attribution license="cc4" from="Microsoft" modified="false" />true to copy the default attributes from the XmlReader; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value)" />
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not <see cref="F:System.Xml.WriteState.Element" qualify="true" />.</exception>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>WriteAttributeString does the following: </para>
          <list type="bullet">
            <item>
              <para>If the attribute value includes double or single quotes, they are replaced with &amp;quot; and &amp;apos; respectively.</para>
            </item>
            <item>
              <para>If writing an xml:space attribute, the writer verifies the attribute value is valid. (Valid values are preserve or default.) </para>
            </item>
            <item>
              <para>If writing an xml:lang attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</para>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out the attribute with the specified local name and value.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value)" />
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not <see cref="F:System.Xml.WriteState.Element" qualify="true" />.</exception>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to associate with the attribute.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method writes out the attribute with a user defined namespace prefix and associates it with the given namespace. If <paramref name="localName" /> is "xmlns" then this method also treats this as a namespace declaration. In this case, the <paramref name="ns" /> argument can be null.</para>
          <para>WriteAttributeString does the following: </para>
          <list type="bullet">
            <item>
              <para>If the attribute value includes double or single quotes, they are replaced with &amp;quot; and &amp;apos; respectively.</para>
            </item>
            <item>
              <para>If writing an xml:space attribute, the writer verifies the attribute value is valid. (Valid values are preserve or default.) </para>
            </item>
            <item>
              <para>If writing an xml:lang attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</para>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to associate with the attribute.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value)" />
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" /> .</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not <see cref="F:System.Xml.WriteState.Element" qualify="true" />.</exception>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method writes out the attribute with a user defined namespace prefix and associates it with the given namespace. If the prefix is "xmlns" then this method also treats this as a namespace declaration and associates the declared prefix with the namespace URI provided in the given attribute value. In this case the <paramref name="ns" /> argument can be null.</para>
          <para>WriteAttributeString does the following: </para>
          <list type="bullet">
            <item>
              <para>If the attribute value includes double or single quotes, they are replaced with &amp;quot; and &amp;apos; respectively.</para>
            </item>
            <item>
              <para>If writing an xml:space attribute, the writer verifies the attribute value is valid. (Valid values are preserve or default.) </para>
            </item>
            <item>
              <para>If writing an xml:lang attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</para>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</para>
        </summary>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace prefix of the attribute.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteAttributeString operation.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace prefix of the attribute.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the attribute.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteBase64(class System.Byte[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For example, the byte buffer may contain the binary contents of a GIF image. This clearly would not be valid XML. The Base64 encoding is designed to represent arbitrary byte sequences in a text form comprised of the 65 US-ASCII characters ([A-Za-z0-9+/=]) where each character encodes 6 bits of the binary data. For more information, see Requests for Comments (RFC) 1521 located on the Request for Comments Web site at http://www.rfc-editor.org/.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Byte array to encode.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the buffer indicating the start of the bytes to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteBase64 operation.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Byte array to encode.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the buffer indicating the start of the bytes to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteBinHex(class System.Byte[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Byte array to encode.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the buffer indicating the start of the bytes to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously encodes the specified binary bytes as BinHex and writes out the resulting text.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteBinHex operation.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Byte array to encode.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the buffer indicating the start of the bytes to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteCData(string text)" />
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="text" /> is either null or String.Empty, this method writes an empty CDATA block, for example &lt;![CDATA[]]&gt;.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</para>
        </summary>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to place inside the CDATA block.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteCData(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteCData operation.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to place inside the CDATA block.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteCharEntity(valuetype System.Char ch)" />
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff, or the text would result in a non-well formed XML document.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method writes the Unicode character in hexadecimal character entity reference format.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</para>
        </summary>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character for which to generate a character entity.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously forces the generation of a character entity for the specified Unicode character value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteCharEntity operation.</para>
        </returns>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character for which to generate a character entity.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteChars(class System.Char[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to write large amounts of text one buffer at a time.</para>
          <para>Special handling must be done to ensure the WriteChars method does not split surrogate pair characters across multiple buffer writes. The XML specification defines the valid ranges for surrogate pairs.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes text one buffer at a time.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Character array containing the text to write.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the buffer indicating the start of the text to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes text one buffer at a time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteChars operation.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Character array containing the text to write.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the buffer indicating the start of the text to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteComment(string text)" />
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="text" /> is either null or String.Empty, this method writes a comment with no data content, for example &lt;!----&gt;.</para>
          <para>If <paramref name="text" /> contains an invalid sequence of two dashes "--" the <see cref="T:System.Xml.XmlWriter" /> can either throw an <see cref="T:System.ArgumentException" /> (<see cref="T:System.Xml.XmlTextWriter" /> objects) or insert a space between the dashes "- -" so that the text is a valid XML comment (<see cref="T:System.Xml.XmlWriter" /> objects created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method).</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.</para>
        </summary>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />Text to place inside the comment.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteComment(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out a comment &lt;!--...--&gt; containing the specified text.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteComment operation.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />Text to place inside the comment.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteDocType(string name, string pubid, string sysid, string subset)" />
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />.</para>
          <para>-or-</para>
          <para>The value for <paramref name="name" /> would result in invalid XML.</para>
        </exception>
        <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element).</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not check for invalid characters in <paramref name="pubid" />, <paramref name="sysid" /> or <paramref name="subset" />. It also does not check that the internal subset is well-formed.</para>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Xml.XmlWriter" /> does not validate the data that is passed to the <see cref="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" /> method. You should not pass arbitrary data to this method.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the DOCTYPE. This must be non-empty.</param>
        <param name="pubid">
          <attribution license="cc4" from="Microsoft" modified="false" />If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments.</param>
        <param name="sysid">
          <attribution license="cc4" from="Microsoft" modified="false" />If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument.</param>
        <param name="subset">
          <attribution license="cc4" from="Microsoft" modified="false" />If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteDocType operation.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the DOCTYPE. This must be non-empty.</param>
        <param name="pubid">
          <attribution license="cc4" from="Microsoft" modified="false" />If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments.</param>
        <param name="sysid">
          <attribution license="cc4" from="Microsoft" modified="false" />If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument.</param>
        <param name="subset">
          <attribution license="cc4" from="Microsoft" modified="false" />If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteElementString(string localName, string value)" />
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the element.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes an element with the specified local name and value.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the element.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value)" />
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the element.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes an element with the specified local name, namespace URI, and value.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to associate with the element.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the element.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes an element with the specified prefix, local name, namespace URI, and value.</para>
        </summary>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix of the element.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteElementString operation.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix of the element.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteEndAttribute()" />
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not <see cref="F:System.Xml.WriteState.Attribute" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If you call WriteStartAttribute, you can close the attribute with this method.</para>
          <para>You can also close the attribute by calling WriteStartAttribute again, calling <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />, or calling <see cref="M:System.Xml.XmlWriter.WriteEndElement" />.</para>
          <block subset="none" type="note">
            <para>When you use the <see cref="T:System.Xml.XmlWriter" /> methods to output XML, the elements and attributes will not be written until you call the <see cref="M:System.Xml.XmlWriter.Close" /> method. For example, if you are using the XmlWriter to populate an <see cref="T:System.Xml.XmlDocument" />, until you close the <see cref="T:System.Xml.XmlWriter" />, you will not be able to observe the written elements and attributes in the target document.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> call.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteEndAttribute" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> call.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteEndAttribute operation.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteEndDocument()" />
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.ArgumentException">The current instance is in the wrong <see cref="T:System.Xml.WriteState" qualify="true" />, or the document does not have a root element.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>When you use the <see cref="T:System.Xml.XmlWriter" /> methods to output XML, the elements and attributes will not be written until you call the <see cref="M:System.Xml.XmlWriter.Close" /> method. For example, if you are using the XmlWriter to populate an <see cref="T:System.Xml.XmlDocument" />, until you close the <see cref="T:System.Xml.XmlWriter" />, you will not be able to observe the written elements and attributes in the target document.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteEndDocument" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously closes any open elements or attributes and puts the writer back in the Start state.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteEndDocument operation.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteEndElement()" />
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">No element was open, or the <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the element contains no content, a short end tag "/&gt;" is written; otherwise, a full end tag is written.</para>
          <block subset="none" type="note">
            <para>When you use the <see cref="T:System.Xml.XmlWriter" /> methods to output XML, the elements and attributes will not be written until you call the <see cref="M:System.Xml.XmlWriter.Close" /> method. For example, if you are using the XmlWwriter to populate an <see cref="T:System.Xml.XmlDocument" />, until you close the <see cref="T:System.Xml.XmlWriter" />, you will not be able to observe the written elements and attributes in the target document.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteEndElementAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteEndElement" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously closes one element and pops the corresponding namespace scope.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteEndElement operation.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteEntityRef(string name)" />
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out an entity reference as &amp;name;.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the entity reference.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out an entity reference as &amp;name;.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteEntityRef operation.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the entity reference.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteFullEndElement()" />
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">No element was open, or the <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method always writes the full end tag. This is useful when dealing with elements that must include a full end tag. For example, browsers expect HTML script blocks to be closed with "&lt;/script&gt;".</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteFullEndElement" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously closes one element and pops the corresponding namespace scope.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteFullEndElement operation.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteName(string name)" />
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />; or <paramref name="name" /> is not a valid XML Name.</para>
        </exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <see cref="P:System.Xml.XmlTextWriter.Namespaces" /> is set to true, WriteName also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteName(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteName operation.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteNmToken(string name)" />
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />; or <paramref name="name" /> is not a valid XML Nmtoken.</para>
        </exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteNmToken operation.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void WriteNode(class System.Xml.XmlReader reader, bool defattr)" />
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <example>
          <para> The following example uses a <see cref="T:System.Xml.XmlTextReader" /> and
   a <see cref="T:System.Xml.XmlTextWriter" /> to copy an XML file, specified in the command line, to the
   console.</para>
          <code lang="C#">using System;
using System.Xml;

public class Copier {

  public static void Main(string[] args) {

    XmlTextReader xtReader = new XmlTextReader(args[0]);
    XmlTextWriter xtWriter =
      new XmlTextWriter(Console.Out);
    xtWriter.WriteNode(xtReader, false);
    xtWriter.Close();
    xtReader.Close();
  }
}
</code>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following table shows the supported node types for this method.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>NodeType </para>
                </term>
                <description>
                  <para>WriteNode Behavior </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>None</para>
              </term>
              <description>
                <para>Writes out all the nodes irrespective of type. That is, the writer consumes the <see cref="T:System.Xml.XmlReader" /> and writes out all the nodes read including attributes, processing instructions, comments, and so on. </para>
                <para>This situation occurs when the <see cref="T:System.Xml.XmlReader" /> is in an initial state. (The <see cref="P:System.Xml.XmlReader.ReadState" /> property returns ReaderState.Initial).</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>Writes out the element node and any attribute nodes.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>No operation. Use <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> or <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" /> instead.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>Writes out the text node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>CDATA </para>
              </term>
              <description>
                <para>Writes out the CDATA section node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EntityReference </para>
              </term>
              <description>
                <para>Writes out the entity reference node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>ProcessingInstruction </para>
              </term>
              <description>
                <para>Writes out the processing instruction node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment </para>
              </term>
              <description>
                <para>Writes out the comment node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>Writes out the document type node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>SignificantWhitespace </para>
              </term>
              <description>
                <para>Writes out the significant white space node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Whitespace </para>
              </term>
              <description>
                <para>Writes out the white space node.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement </para>
              </term>
              <description>
                <para>Writes out the end element tag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndEntity </para>
              </term>
              <description>
                <para>No operation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>Writes out the XML declaration node.</para>
              </description>
            </item>
          </list>
          <para>If the reader is in the initial state, this method moves the reader to the end of file. If the reader is already at the end of file or in a closed state, this method is non-operational.</para>
          <para>The following C# code copies an entire XML input document to the console: </para>
          <code>XmlReader reader = XmlReader.Create(myfile);
XmlWriter writer = XmlWriter.Create(Console.Out);
writer.WriteNode(reader, false);</code>
          <para>If you have moved off the root node and are positioned elsewhere in the document the following C# example correctly writes out the nodes.</para>
          <code>XmlReader reader = XmlReader.Create(myfile);
reader.Read(); // Read PI
reader.Read(); // Read Comment
reader.Read(); // Read DOCType
XmlWriter writer = XmlWriter.Create(Console.Out);
while (!reader.EOF){
  writer.WriteNode(reader, false);
 }</code>
          <para>If the reader is configured to return white space and the writer has is configured to indent output, WriteNode may produce strange output. You will essentially be getting double formatting.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</para>
        </summary>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
        <param name="defattr">
          <attribution license="cc4" from="Microsoft" modified="false" />true to copy the default attributes from the XmlReader; otherwise, false.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following table shows the supported XPath node types for this method.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XPathNodeType </para>
                </term>
                <description>
                  <para>WriteNode Behavior </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Root</para>
              </term>
              <description>
                <para>Writes out all the nodes irrespective of type. That is, the writer consumes the <see cref="T:System.Xml.XPath.XPathNavigator" /> and writes out all the nodes from the root node (including attributes, processing instructions, comments and so on.)</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>Writes out the element node and any attribute nodes. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>No operation. Use <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> or <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" /> instead. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>Writes out the text node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Namespace</para>
              </term>
              <description>
                <para>No operation. Use the <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> or <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" /> method to write the namespace declaration.</para>
              </description>
            </item>
            <item>
              <term>
                <para>ProcessingInstruction </para>
              </term>
              <description>
                <para>Writes out the processing instruction node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment </para>
              </term>
              <description>
                <para>Writes out the comment node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>SignificantWhitespace </para>
              </term>
              <description>
                <para>Writes out the significant white space node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Whitespace </para>
              </term>
              <description>
                <para>Writes out the white space node. </para>
              </description>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Copies everything from the <see cref="T:System.Xml.XPath.XPathNavigator" /> object to the writer. The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> remains unchanged.</para>
        </summary>
        <param name="navigator">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XPath.XPathNavigator" /> to copy from.</param>
        <param name="defattr">
          <attribution license="cc4" from="Microsoft" modified="false" />true to copy the default attributes; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteNode operation.</para>
        </returns>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
        <param name="defattr">
          <attribution license="cc4" from="Microsoft" modified="false" />true to copy the default attributes from the XmlReader; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously copies everything from the <see cref="T:System.Xml.XPath.XPathNavigator" /> object to the writer. The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> remains unchanged.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteNode operation.</para>
        </returns>
        <param name="navigator">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XPath.XPathNavigator" /> to copy from.</param>
        <param name="defattr">
          <attribution license="cc4" from="Microsoft" modified="false" />true to copy the default attributes; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteProcessingInstruction(string name, string text)" />
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para> The text would result in a non-well formed XML document.</para>
          <para> - or -</para>
          <para>
            <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" />.</para>
          <para> - or -</para>
          <para>This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> has already been called. </para>
        </exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to include in the processing instruction.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to write the XML declaration (rather than <see cref="M:System.Xml.XmlWriter.WriteStartDocument" />). This could result in the encoding attribute being incorrectly written. For example, the following C# code would result in an invalid XML document because the default encoding is UTF-8.</para>
          <code>XmlWriter writer = XmlWriter.Create("output.xml");
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");
writer.WriteStartElement("root");
writer.Close();</code>
          <para>If <paramref name="text" /> is either null or String.Empty, this method writes a ProcessingInstruction with no data content, for example &lt;?name?&gt;.</para>
          <para>If text contains an invalid sequence of "?&gt;", the <see cref="T:System.Xml.XmlWriter" /> can either throw an <see cref="T:System.ArgumentException" /> (<see cref="T:System.Xml.XmlTextWriter" /> objects) or insert a space "? &gt;" to avoid writing invalid XML (<see cref="T:System.Xml.XmlWriter" /> objects created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method).</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the processing instruction.</param>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to include in the processing instruction.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteProcessingInstruction operation.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the processing instruction.</param>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to include in the processing instruction.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteQualifiedName(string localName, string ns)" />
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="localName" /> is <see langword="null" />, is <see cref="F:System.String.Empty" qualify="true" />, or is not a valid XML name.</para>
        </exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="localName" /> is not a valid XML name.</exception>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI for the name.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="ns" /> maps to the current default namespace, no prefix is generated.</para>
          <para>When writing attribute values, this method generates a prefix if <paramref name="ns" /> is not found. When writing element content, it throws an exception if <paramref name="ns" /> is not found.</para>
          <block subset="none" type="note">
            <para> If a class derived from the <see cref="T:System.Xml.XmlWriter" /> does not override this method <paramref name="localName" /> is not checked to be a valid W3C XML name. In such case, before calling this method, the validity of the string can be checked by <see cref="M:System.Xml.XmlReader.IsName(System.String)" /> method.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name to write.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI for the name.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteQualifiedName operation.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name to write.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI for the name.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteRaw(string data)" />
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not escape special characters.</para>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Xml.XmlWriter" /> does not validate the data that is passed to the <see cref="M:System.Xml.XmlWriter.WriteRaw(System.String)" /> method. You should not pass arbitrary data to this method.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes raw markup manually from a string.</para>
        </summary>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />String containing the text to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteRaw(class System.Char[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not escape special characters.</para>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Xml.XmlWriter" /> does not validate the data that is passed to the <see cref="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" /> method. You should not pass arbitrary data to this method.</para>
          </block>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes raw markup manually from a character buffer.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Character array containing the text to write.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position within the buffer indicating the start of the text to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteRaw(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes raw markup manually from a string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteRaw operation.</para>
        </returns>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />String containing the text to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes raw markup manually from a character buffer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteRaw operation.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />Character array containing the text to write.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position within the buffer indicating the start of the text to write.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method enables you to write a value using multiple Write methods.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the start of an attribute with the specified local name.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns)" />
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is a more advanced version of <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" /> that allows you to write an attribute value using multiple write methods, such as <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" />, <see cref="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />, and so on.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the start of an attribute with the specified local name and namespace URI.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteStartAttribute(string prefix, string localName, string ns)" />
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not one of the following:<see cref="F:System.Xml.WriteState.Attribute" qualify="true" /> or <see cref="F:System.Xml.WriteState.Element" qualify="true" />.</exception>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI for the attribute.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method enables you to write a value using multiple Write methods.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</para>
        </summary>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace prefix of the attribute.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI for the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes the start of an attribute with the specified prefix, local name, and namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteStartAttribute operation.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace prefix of the attribute.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI for the attribute.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteStartDocument()" />
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not <see cref="F:System.Xml.WriteState.Start" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The encoding level of the document is determined by how the writer is implemented. For example, if an <see cref="T:System.Text.Encoding" /> object is specified in the XmlTextWriter constructor, this determines the value of the encoding attribute. This method does not create a standalone attribute.</para>
          <para>When WriteStartDocument is called the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</para>
          <para>If WriteStartDocument has been called and then the <see cref="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" /> method is used to create another XML declaration, an exception will be thrown.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the XML declaration with the version "1.0".</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteStartDocument(bool standalone)" />
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is not <see cref="F:System.Xml.WriteState.Start" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The encoding level of the document is determined by how the writer is implemented. For example, if an <see cref="T:System.Text.Encoding" /> object is specified in the XmlTextWriter constructor, this determines the value of the encoding attribute.</para>
          <para>When WriteStartDocument is called, the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</para>
          <para>If WriteStartDocument has been called and then the <see cref="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" /> method is used to create another XML declaration, an exception will be thrown.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</para>
        </summary>
        <param name="standalone">
          <attribution license="cc4" from="Microsoft" modified="false" />If true, it writes "standalone=yes"; if false, it writes "standalone=no".</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteStartDocument" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes the XML declaration with the version "1.0".</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteStartDocument operation.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes the XML declaration with the version "1.0" and the standalone attribute.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteStartDocument operation.</para>
        </returns>
        <param name="standalone">
          <attribution license="cc4" from="Microsoft" modified="false" />If true, it writes "standalone=yes"; if false, it writes "standalone=no".</param>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteStartElement(string localName)" />
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out a start tag with the specified local name.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns)" />
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>After calling this method you can either write attributes, or create content using <see cref="M:System.Xml.XmlWriter.WriteComment(System.String)" />, <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" />, or WriteStartElement for child elements. You can close the element with either <see cref="M:System.Xml.XmlWriter.WriteEndElement" /> or <see cref="M:System.Xml.XmlWriter.WriteFullEndElement" />. For example, the following C# code: </para>
          <code> writer.WriteStartElement("item",null);
 writer.WriteString("some text");
 writer.WriteEndElement();</code>
          <para>Generates the following output: </para>
          <code> &lt;item&gt;some text&lt;/item&gt;</code>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</para>
        </summary>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteStartElement(string prefix, string localName, string ns)" />
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <example>
          <para>See <see cref="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)" /> for an example demonstrating this method.</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</para>
        </summary>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace prefix of the element.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to associate with the element.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes the specified start tag and associates it with the given namespace and prefix.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteStartElement operation.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace prefix of the element.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to associate with the element.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.WriteState WriteState { public hidebysig virtual abstract specialname valuetype System.Xml.WriteState get_WriteState() }" />
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> One of the members of the <see cref="T:System.Xml.WriteState" /> enumeration.
   </para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>As described above.</para>
            <para>This property is read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides">
      This property must be overridden in order to provide the functionality as described herein, as there is no default implementation.
      </block>
          </para>
          <para>
            <block subset="none" type="usage">Use this property to query the current state, for
      example, whether the writer is newly initialized, writing specific XML structures, or
      closed. </block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the state of the writer.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteString(string text)" />
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>WriteString does the following:</para>
          <list type="bullet">
            <item>
              <para>The characters &amp;, &lt;, and &gt; are replaced with &amp;amp;, &amp;lt;, and &amp;gt;, respectively.</para>
            </item>
            <item>
              <para>The default behavior of an <see cref="T:System.Xml.XmlWriter" /> created using <see cref="Overload:System.Xml.XmlWriter.Create" /> is to throw an <see cref="T:System.ArgumentException" /> when attempting to write character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD). These invalid XML characters can be written by creating the <see cref="T:System.Xml.XmlWriter" /> with the <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters" /> property set to false. Doing so will result in the characters being replaced with numeric character entities (&amp;#0; through &amp;#0x1F). Additionally, an <see cref="T:System.Xml.XmlTextWriter" /> created with the new operator will replace the invalid characters with numeric character entities by default.</para>
            </item>
          </list>
          <para>Note   Microsoft does not encourage the practice of writing invalid XML characters since many applications that consume XML are not designed to handle invalid characters.</para>
          <list type="bullet">
            <item>
              <para>If WriteString is called in the context of an attribute value, double and single quotes are replaced with &amp;quot; and &amp;apos; respectively.</para>
            </item>
          </list>
          <para>For example, this input string test&lt;item&gt;test is written out as </para>
          <code> test&amp;lt;item&amp;gt;test</code>
          <para>If <paramref name="text" /> is either null or String.Empty, this method writes a text node with no data content.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes the given text content.</para>
        </summary>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to write.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes the given text content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteString operation.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteSurrogateCharEntity(valuetype System.Char lowChar, valuetype System.Char highChar)" />
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">An invalid surrogate character pair was passed.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <param name="highChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is only applicable on systems that use UTF-16 encoding.</para>
          <para>The surrogate character entity is written in hexadecimal format. The range for surrogate characters is #x10000 to #x10FFFF. The following formula is used to generate the surrogate character entity: (<paramref name="highChar" /> -0xD800) * 0x400 + (<paramref name="lowChar" /> -0xDC00) + 0x10000 </para>
          <para>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646]. A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate). These 16-bit units are referred to as a surrogate pair.</para>
          <para>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at http://www.unicode.org, or section 2.2 of the W3C XML 1.0 Recommendation located at http://www.w3.org/TR/REC-xml#charsets.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</para>
        </summary>
        <param name="lowChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</param>
        <param name="highChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously generates and writes the surrogate character entity for the surrogate character pair.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteSurrogateCharEntity operation.</para>
        </returns>
        <param name="lowChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</param>
        <param name="highChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.Boolean" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Boolean" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.DateTime" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.DateTime" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.DateTimeOffset" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.DateTimeOffset" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.Decimal" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Decimal" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Double)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.Double)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.Double)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.Double" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Double" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int32)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int32)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int32)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.Int32" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Int32" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int64)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int64)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.Int64)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.Int64" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Int64" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime (CLR) object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>If the CLR object is a list type such as <see cref="T:System.Collections.IEnumerable" />, <see cref="T:System.Collections.IList" />, or <see cref="T:System.Collections.ICollection" />, it is treated as an array of the value type. The <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the object value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>When the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Single)" /> method is called, the <see cref="T:System.Xml.XmlWriter" /> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <see cref="M:System.Xml.XmlWriter.WriteString(System.String)" /> method.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.Single)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.Single)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, convert the return value of this method to a string and use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a single-precision floating-point number.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The single-precision floating-point number to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</para>
          <para>If <see cref="M:System.Xml.XmlWriter.WriteValue(System.String)" /> is called multiple times in succession, the values are not delimited by a space. You must call <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" /> between calls to <see cref="M:System.Xml.XmlWriter.WriteValue(System.String)" /> to insert white space. Pass an array type to the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)" /> overload to write out an array of distinct values.</para>
          <para>If this method is called on an <see cref="T:System.Xml.XmlWriter" /> instance that outputs text-only, the typed value is serialized to text.</para>
          <para>For asynchronous operations, use the <see cref="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a <see cref="T:System.String" /> value.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.String" /> value to write.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void WriteWhitespace(string ws)" />
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="ws" /> is <see langword="null" /> or <see cref="F:System.String.Empty" qualify="true" /> or contains non-white space characters.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlWriter.WriteState" /> is <see cref="F:System.Xml.WriteState.Closed" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is used to manually format your document.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, writes out the given white space.</para>
        </summary>
        <param name="ws">
          <attribution license="cc4" from="Microsoft" modified="false" />The string of white space characters.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlWriterSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously writes out the given white space.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The task that represents the asynchronous WriteWhitespace operation.</para>
        </returns>
        <param name="ws">
          <attribution license="cc4" from="Microsoft" modified="false" />The string of white space characters.</param>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="ILASM" Value=".property string XmlLang { public hidebysig virtual abstract specialname string get_XmlLang() }" />
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the language attribute, or <see langword="null" /> if the language
attribute is not specified for the element.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property allows one component to find out in what state another component has left the writer. For example, perhaps one component wants to tell another which language help text to generate. The language information is communicated by writing an xml:lang attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the current xml:lang scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.XmlSpace XmlSpace { public hidebysig virtual abstract specialname valuetype System.Xml.XmlSpace get_XmlSpace() }" />
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>One of the members of the <see cref="T:System.Xml.XmlSpace" qualify="true" /> enumeration, or <see cref="F:System.Xml.XmlSpace.None" /> if the white space
   attribute is not specified for the element. </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This allows one component to find out what state another component has left the writer in.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>