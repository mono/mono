<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlReader" FullName="System.Xml.XmlReader" FullNameSP="System_Xml_XmlReader" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public abstract XmlReader extends System.Object" />
  <TypeSignature Language="C#" Value="public abstract class XmlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlReader extends System.Object implements class System.IDisposable" />
  <MemberOfLibrary>XML</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>
        <see cref="T:System.Xml.XmlReader" /> provides forward-only, read-only access to a stream of XML data. The <see cref="T:System.Xml.XmlReader" /> class conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</para>
      <para>The current node refers to the node on which the reader is positioned. The reader is advanced using any of the read methods, and properties reflect the value of the current node.</para>
      <block subset="none" type="note">
        <para>Although the .NET Framework includes concrete implementations of the <see cref="T:System.Xml.XmlReader" /> class, such as the <see cref="T:System.Xml.XmlTextReader" />, <see cref="T:System.Xml.XmlNodeReader" />, and the <see cref="T:System.Xml.XmlValidatingReader" /> classes, in the 2.0 release the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. For more information, see <format type="text/html"><a href="441e5aac-dfa9-41ed-9336-cd541b11c2d1">Creating XML Readers</a></format>.</para>
      </block>
      <para>
        <see cref="T:System.Xml.XmlReader" /> throws an <see cref="T:System.Xml.XmlException" /> on XML parse errors. After an exception is thrown, the state of the reader is not predictable. For example, the reported node type may be different from the actual node type of the current node. Use the <see cref="P:System.Xml.XmlReader.ReadState" /> property to check whether the reader is in error state.</para>
      <para>For further discussion on the <see cref="T:System.Xml.XmlReader" /> class, see <format type="text/html"><a href="3029834c-a27e-4331-b7aa-711924062182">Reading XML with the XmlReader</a></format>.</para>
      <para>The following methods can be used with asynchronous method calls: </para>
      <list type="bullet">
        <item>
          <para>
            <see cref="Overload:System.Xml.XmlReader.GetAttribute" />
          </para>
        </item>
        <item>
          <para>
            <see cref="Overload:System.Xml.XmlReader.MoveToAttribute" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.MoveToNextAttribute" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.MoveToElement" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.ReadAttributeValue" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.ReadSubtree" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.ResolveEntity" />
          </para>
        </item>
      </list>
      <para>Some synchronous methods have asynchronous counterparts that include "Async" at the end of the method name. For example, the asynchronous equivalents for the ReadContentAsXxx and ReadElementContentAsXxx methods are: </para>
      <list type="bullet">
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.ReadContentAsObjectAsync" /> and <see cref="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync" /></para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.ReadContentAsStringAsync" /> and <see cref="M:System.Xml.XmlReader.ReadElementContentAsStringAsync" /></para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" /> and <see cref="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" /></para>
        </item>
      </list>
      <para>The following sections describe asynchronous usage for methods that don't have asynchronous counterparts.</para>
      <format type="text/html">
        <h2>ReadStartElement method</h2>
      </format>
      <code>public static async Task ReadStartElementAsync(this XmlReader reader, string localname, string ns) {
 if (await 
   reader.MoveToContentAsync() != 
   XmlNodeType.Element) {
 throw new 
InvalidOperationException(
reader.NodeType.ToString() + " is an invalid XmlNodeType");
   }
 if (reader.LocalName == 
     localname &amp;&amp; 
     reader.NamespaceURI == ns) {
 await reader.ReadAsync();
   }
 else {
 throw new InvalidOperationException("localName or namespace doesnâ€™t match");
    }
}
</code>
      <format type="text/html">
        <h2>ReadEndElement method</h2>
      </format>
      <para>Extension function:</para>
      <code>public static async Task ReadEndElementAsync(this XmlReader reader) {
if (await reader.MoveToContentAsync() != XmlNodeType.EndElement) {
    throw new InvalidOperationException();
   }
 await reader.ReadAsync();
}</code>
      <para />
      <format type="text/html">
        <h2>ReadToNextSibling method</h2>
      </format>
      <code>public static async Task&lt;bool&gt; ReadToNextSiblingAsync(this XmlReader reader, string localName, string namespaceURI) {
 if (localName == null || 
    localName.Length == 0) {
 throw new ArgumentException ("localName is empty or null");
   }
 if (namespaceURI == null) {
 throw new ArgumentNullException("namespaceURI");
   }

// atomize local name and namespace
   localName = 
    reader.NameTable.Add(localName);
   namespaceURI = 
   reader.NameTable.Add(namespaceURI);

// find the next sibling
 XmlNodeType nt;
 do {
 await reader.SkipAsync();
 if (reader.ReadState !=
 ReadState.Interactive)
 break;
      nt = reader.NodeType;
 if (nt == XmlNodeType.Element &amp;&amp;
      ((object)localName == 
      (object)reader.LocalName) &amp;&amp; 
      ((object)namespaceURI == 
      (object)reader.NamespaceURI)) {
 return true;
       }
   }while(nt != XmlNodeType.EndElement 

   &amp;&amp; !reader.EOF);
 return false;
}</code>
      <format type="text/html">
        <h2>ReadToFollowing method</h2>
      </format>
      <code>public static async Task&lt;bool&gt; ReadToFollowingAsync(this XmlReader reader, string localName, string namespaceURI) 
{
 if (localName == null || 
     localName.Length == 0) {
 throw new 
     ArgumentException(
     "localName is empty or null");
   }
 if (namespaceURI == null) {
 throw new 
      ArgumentNullException(
     "namespaceURI");
}

// atomize local name and namespace
   localName = 
    reader.NameTable.Add(localName);
   namespaceURI = 
   reader.NameTable.Add(namespaceURI);

// find element with that name
 while (await reader.ReadAsync()) {
 if (reader.NodeType == XmlNodeType.Element &amp;&amp; ((object)localName == (object)reader.LocalName) &amp;&amp; ((object)namespaceURI == (object)reader.NamespaceURI)) {
 return true;
      }
   }
 return false;
}</code>
      <format type="text/html">
        <h2>ReadToDescendant method</h2>
      </format>
      <code>public static async Task&lt;bool&gt; ReadToDescendantAsync(this XmlReader reader, string localName, string namespaceURI) {
 if (localName == null || localName.Length == 0) {
 throw new ArgumentException("localName is empty or null");
   }
 if (namespaceURI == null) {
 throw new ArgumentNullException("namespaceURI");
   }
 // save the element or root depth
 int parentDepth = reader.Depth;
 if (reader.NodeType != XmlNodeType.Element) {
 // adjust the depth if we are on root node
if (reader.ReadState == ReadState.Initial) {
    parentDepth--;
   }
else {
     return false;
       }
   }
else if (reader.IsEmptyElement) {
   return false;
}

// atomize local name and namespace
localName = reader.NameTable.Add(localName);
namespaceURI = reader.NameTable.Add(namespaceURI);

// find the descendant
while (await reader.ReadAsync() &amp;&amp; reader.Depth &gt; parentDepth) {
if (reader.NodeType == XmlNodeType.Element &amp;&amp; ((object)localName == (object)reader.LocalName) &amp;&amp; ((object)namespaceURI == (object)reader.NamespaceURI)) {
 return true;
}
}
return false;
}</code>
      <format type="text/html">
        <h2>Security considerations</h2>
      </format>
      <para>The following items are things to consider when working with the <see cref="T:System.Xml.XmlReader" /> class.</para>
      <list type="bullet">
        <item>
          <para>Exceptions thrown from the <see cref="T:System.Xml.XmlReader" /> can disclose path information that you do not want bubbled up to the application. Your applications must catch exceptions and process them appropriately.</para>
        </item>
        <item>
          <para>Do not enable DTD processing if you are concerned about denial of service issues or if you are dealing with untrusted sources. DTD processing is disabled by default for <see cref="T:System.Xml.XmlReader" /> objects created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method.</para>
          <para>If you have DTD processing enabled, you can use the <see cref="T:System.Xml.XmlSecureResolver" /> to restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application.</para>
        </item>
        <item>
          <para>XML data can include references to external resources such as a schema file. By default external resources are resolved using an <see cref="T:System.Xml.XmlUrlResolver" /> object with no user credentials. You can secure this further by doing one of the following:</para>
          <list type="bullet">
            <item>
              <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            </item>
            <item>
              <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
            </item>
          </list>
        </item>
        <item>
          <para>The <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" /> and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> validation flags of an <see cref="T:System.Xml.XmlReaderSettings" /> object are not set by default. This helps to protect the <see cref="T:System.Xml.XmlReader" /> against schema-based attacks when it is processing XML data from an untrusted source. When these flags are set, the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> of the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to resolve schema locations encountered in the instance document in the <see cref="T:System.Xml.XmlReader" />. If the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property is set to null, schema locations are not resolved even if the <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" /> and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> validation flags are set.</para>
          <para>Schemas added during validation add new types and can change the validation outcome of the document being validated. As a result, external schemas should only be resolved from trusted sources.</para>
          <para>We recommend disabling the <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> flag (enabled by default) when validating, untrusted, large XML documents in high availability scenarios against a schema with identity constraints over a large part of the document.</para>
        </item>
        <item>
          <para>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process. To limit the size of the input that is sent to the <see cref="T:System.Xml.XmlReader" />, you can: </para>
          <list type="bullet">
            <item>
              <para>Limit the size of the document by setting the <see cref="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" /> property.</para>
            </item>
            <item>
              <para>Limit the number of characters that result from expanding entities by setting the <see cref="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" /> property.</para>
            </item>
            <item>
              <para>Create a custom IStream implementation and supply it the <see cref="T:System.Xml.XmlReader" />.</para>
            </item>
          </list>
        </item>
        <item>
          <para>The <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method can be used to handle large streams of data. This method reads a small number of characters at a time instead of allocating a single string for the whole value.</para>
        </item>
        <item>
          <para>When reading an XML document with a large number of unique local names, namespaces, or prefixes, a problem can occur. If you are using a class that derives from <see cref="T:System.Xml.XmlReader" />, and you call either the <see cref="P:System.Xml.XmlReader.LocalName" />, <see cref="P:System.Xml.XmlReader.Prefix" />, or <see cref="P:System.Xml.XmlReader.NamespaceURI" /> property for each item, the returned string is added to a <see cref="T:System.Xml.NameTable" />. The collection held by the <see cref="T:System.Xml.NameTable" /> never decreases in size, creating a virtual "memory leak" of the string handles. One mitigation for this is to derive from the <see cref="T:System.Xml.NameTable" /> class and enforce a maximum size quota. (There is no way to prevent the use of a <see cref="T:System.Xml.NameTable" />, or to switch the <see cref="T:System.Xml.NameTable" /> when it is full). Another mitigation is to avoid using the properties mentioned and instead use the <see cref="Overload:System.Xml.XmlReader.MoveToAttribute" /> method with the <see cref="Overload:System.Xml.XmlReader.IsStartElement" /> method where possible; those methods do not return strings and thus avoid the problem of overfilling the <see cref="T:System.Xml.NameTable" /> collection.</para>
        </item>
        <item>
          <para>
            <see cref="T:System.Xml.XmlReaderSettings" /> objects can contain sensitive information such as user credentials. An untrusted component could use the <see cref="T:System.Xml.XmlReaderSettings" /> object and its user credentials to create <see cref="T:System.Xml.XmlReader" /> objects to read data. You should be careful when caching <see cref="T:System.Xml.XmlReaderSettings" /> objects, or when passing the <see cref="T:System.Xml.XmlReaderSettings" /> object from one component to another.</para>
        </item>
        <item>
          <para>Do not accept supporting components, such as <see cref="T:System.Xml.NameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, and <see cref="T:System.Xml.XmlResolver" /> objects, from an untrusted source.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a reader that provides fast, noncached, forward-only access to XML data.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="family specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="protected XmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor is called by derived class constructors to initialize state in this type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the XmlReader class.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="ILASM" Value=".property int32 AttributeCount { public hidebysig virtual abstract specialname int32 get_AttributeCount() }" />
      <MemberSignature Language="C#" Value="public abstract int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Int32" qualify="true" /> containing the
   number of attributes on the current node, or zero if the current node does not support attributes.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is relevant to Element, DocumentType and XmlDeclaration nodes only. (Other node types do not have attributes.) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the number of attributes on the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="ILASM" Value=".property string BaseURI { public hidebysig virtual abstract specialname string get_BaseURI() }" />
      <MemberSignature Language="C#" Value="public abstract string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>The base URI of the current node.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), String.Empty is returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the base URI of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public virtual bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The binary content read methods include the <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />, and <see cref="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> methods. If this property returns false a <see cref="T:System.NotSupportedException" /> is returned when any of the binary read methods is called.</para>
          <para>All Microsoft .NET Framework implementations of the <see cref="T:System.Xml.XmlReader" /> class return true for this property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the binary content read methods.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public virtual bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Text parsing <see cref="T:System.Xml.XmlReader" /> objects that were created from the static <see cref="Overload:System.Xml.XmlReader.Create" /> method always return true. All other Microsoft .NET Framework implementations of the <see cref="T:System.Xml.XmlReader" /> class, including the <see cref="T:System.Xml.XmlTextReader" /> class, return false.</para>
          <para>If this property returns false a <see cref="T:System.NotSupportedException" /> is returned when the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method is called.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="ILASM" Value=".property bool CanResolveEntity { public hidebysig virtual specialname bool get_CanResolveEntity() }" />
      <MemberSignature Language="C#" Value="public virtual bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" />
equal to <see langword="false" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property always returns false for implementations of <see cref="T:System.Xml.XmlReader" /> that do not support DTD information. In this case, calling <see cref="M:System.Xml.XmlReader.ResolveEntity" /> throws an exception.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether this reader can parse and resolve entities.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void Close()" />
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method also releases any resources held during reading. If <see cref="M:System.Xml.XmlReader.Close" /> has already been called, no action is performed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReaderSettings" /> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <see cref="T:System.Xml.XmlReaderSettings" /> object as one of its arguments, and pass in an <see cref="T:System.Xml.XmlReaderSettings" /> object with the correct settings.</para>
          <para>A default <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials using the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property.</para>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object used to read the data contained in the stream.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReaderSettings" /> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <see cref="T:System.Xml.XmlReaderSettings" /> object as one of its arguments, and pass in an <see cref="T:System.Xml.XmlReaderSettings" /> object with the correct settings.</para>
          <para>A default <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials using the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property.</para>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.IO.TextReader" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReaderSettings" /> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <see cref="T:System.Xml.XmlReaderSettings" /> object as one of its arguments, and pass in an <see cref="T:System.Xml.XmlReaderSettings" /> object with the correct settings.</para>
          <para>A default <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials using the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property.</para>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with specified URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</para>
        </returns>
        <param name="inputUri">
          <attribution license="cc4" from="Microsoft" modified="false" />The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlUrlResolver" /> class is used to convert the path to a canonical data representation.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified stream and <see cref="T:System.Xml.XmlReaderSettings" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" />. This value can be null.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. This means that the <see cref="T:System.Xml.XmlReader" /> can access any locations that does not require authentication. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials. </para>
          <block subset="none" type="note">
            <para>You can restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new instance with the specified URI and <see cref="T:System.Xml.XmlReaderSettings" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="inputUri">
          <attribution license="cc4" from="Microsoft" modified="false" />The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlUrlResolver" /> object is used.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.Xml.XmlReader reader, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.Xml.XmlReader reader, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method allows you add additional features to an underlying <see cref="T:System.Xml.XmlReader" /> object. The underlying <see cref="T:System.Xml.XmlReader" /> object can be another <see cref="T:System.Xml.XmlReader" /> object created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method, or an <see cref="T:System.Xml.XmlReader" /> object created using one of the concrete <see cref="T:System.Xml.XmlReader" /> implementations.</para>
          <para>A default <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a schema. If the external resource is located on a network resource that requires authentication, specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials using the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <list type="bullet">
            <item>
              <para />
            </item>
          </list>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlReader" /> object.</para>
        </returns>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReader" /> object that you wish to use as the underlying reader.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, string baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings, string baseUri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="baseUri" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, base URI, and <see cref="T:System.Xml.XmlReaderSettings" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data. </param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
        <param name="baseUri">
          <attribution license="cc4" from="Microsoft" modified="false" />The base URI for the entity or document being read. This value can be null.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data. </param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
        <param name="inputContext">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. </param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, string baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings, string baseUri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="baseUri" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and base URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
        <param name="baseUri">
          <attribution license="cc4" from="Microsoft" modified="false" />The base URI for the entity or document being read. This value can be null.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials.</para>
          <block subset="none" type="note">
            <para>You can use one of the following methods to control which resources the <see cref="T:System.Xml.XmlReader" /> can access:</para>
            <para>Restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            <para>-or-</para>
            <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to null.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
        <param name="inputContext">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition.</param>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default an <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. This means that the <see cref="T:System.Xml.XmlReader" /> can access any locations that does not require authentication. If the external resource is located on a network resource that requires authentication, use the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to specify an <see cref="T:System.Xml.XmlResolver" /> with the necessary credentials. </para>
          <block subset="none" type="note">
            <para>You can restrict the resources that the <see cref="T:System.Xml.XmlReader" /> can access by setting the <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
          </block>
          <para>The created <see cref="T:System.Xml.XmlReader" /> object expands entity references and performs XML normalization of new line characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified URI, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</para>
        </returns>
        <param name="inputUri">
          <attribution license="cc4" from="Microsoft" modified="false" />The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlUrlResolver" /> object is used.</param>
        <param name="settings">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
        <param name="inputContext">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. </param>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="ILASM" Value=".property int32 Depth { public hidebysig virtual abstract specialname int32 get_Depth() }" />
      <MemberSignature Language="C#" Value="public abstract int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" qualify="true" />
containing the depth of the current node in the XML document. </para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>As described
         above.</para>
            <para> This property is
         read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the depth of the current node in the XML document.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases all resources used by the current instance of the <see cref="T:System.Xml.XmlReader" /> class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlReader" /> and optionally releases the managed resources.</para>
        </summary>
        <param name="disposing">
          <attribution license="cc4" from="Microsoft" modified="false" />true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="ILASM" Value=".property bool EOF { public hidebysig virtual abstract specialname bool get_EOF() }" />
      <MemberSignature Language="C#" Value="public abstract bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates the reader is positioned at the end
   of the stream; otherwise, <see langword="false" />. </para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>As described
         above.</para>
            <para> This property is
         read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string GetAttribute(int32 i)" />
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> This method does not move the
      reader. </block>
          </para>
          <para>
            <block subset="none" type="overrides"> This method must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> is less than 0, or greater than or equal to the <see cref="P:System.Xml.XmlReader.AttributeCount" /> of the containing element.</exception>
        <example>
          <para>For an example demonstrating this method, see <see cref="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />(<see cref="T:System.String" />, <see cref="T:System.String" />).</para>
        </example>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the value of the attribute with the specified index.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the specified attribute. This method does not move the reader.</para>
        </returns>
        <param name="i">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string GetAttribute(string name)" />
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>For an example demonstrating this method, see <see cref="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />(<see cref="T:System.String" />, <see cref="T:System.String" />).</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not move the reader.</para>
          <para>If the reader is positioned on a DocumentType node, this method can be used to get the PUBLIC and SYSTEM literals, for example, reader.GetAttribute("PUBLIC") </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string GetAttribute(string name, string namespaceURI)" />
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string name, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>For an example demonstrating this method, see <see cref="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />(<see cref="T:System.String" />, <see cref="T:System.String" />).</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following XML contains an attribute in a specific namespace: </para>
          <code>&lt;test xmlns:dt="urn:datatypes" dt:type="int"/&gt;</code>
          <para>You can lookup the dt:type attribute using one argument (prefix and local name) or two arguments (local name and namespace URI): </para>
          <code>String dt = reader.GetAttribute("dt:type");
String dt2 = reader.GetAttribute("type","urn:datatypes");</code>
          <para>To lookup the xmlns:dt attribute, use one of the following arguments: </para>
          <code>String dt3 = reader.GetAttribute("xmlns:dt");
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);</code>
          <para>You can also get this information using the <see cref="P:System.Xml.XmlReader.Prefix" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetValueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetValueAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetValueAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously gets the value of the current node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current node.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="ILASM" Value=".property bool HasAttributes { public hidebysig virtual specialname bool get_HasAttributes() }" />
      <MemberSignature Language="C#" Value="public virtual bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates the current node has attributes; otherwise,
<see langword="false" />.</para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>As described
         above.</para>
            <para> This property is
         read-only.</para>
          </block>
          <para>
            <block subset="none" type="default"> This property
      returns <see langword="true" /> if the <see cref="P:System.Xml.XmlReader.AttributeCount" /> property of the current node is greater than zero. </block>
          </para>
          <para>
            <block subset="none" type="overrides"> Override this 
      property to customize the behavior of this property in types derived from
      the <see cref="T:System.Xml.XmlReader" />
      class.
   </block>
          </para>
          <para>
            <block subset="none" type="usage"> Use this property to determine whether the current node has any attributes.
   </block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current node has any attributes.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="ILASM" Value=".property bool HasValue { public hidebysig virtual abstract specialname bool get_HasValue() }" />
      <MemberSignature Language="C#" Value="public virtual bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" />
where <see langword="true" /> indicates the node on which the reader is currently
positioned can have an associated text value; otherwise,
<see langword="false" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following table lists node types that have a value to return.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Node Type </para>
                </term>
                <description>
                  <para>Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>The value of the attribute. </para>
              </description>
            </item>
            <item>
              <term>
                <para>CDATA </para>
              </term>
              <description>
                <para>The content of the CDATA section. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment </para>
              </term>
              <description>
                <para>The content of the comment. </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>The internal subset. </para>
              </description>
            </item>
            <item>
              <term>
                <para>ProcessingInstruction </para>
              </term>
              <description>
                <para>The entire content, excluding the target. </para>
              </description>
            </item>
            <item>
              <term>
                <para>SignificantWhitespace </para>
              </term>
              <description>
                <para>The white space between markup in a mixed content model. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>The content of the text node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Whitespace </para>
              </term>
              <description>
                <para>The white space between markup. </para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>The content of the declaration. </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="ILASM" Value=".property bool IsDefault { public hidebysig virtual abstract specialname bool get_IsDefault() }" />
      <MemberSignature Language="C#" Value="public virtual bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" />
where <see langword="true" /> indicates the
current node is an attribute whose value was generated from the default value
defined in the DTD or schema; <see langword="false" /> indicates the attribute value was
explicitly set. </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>IsDefault always returns false for implementations of XmlReader that do not support schema or DTD information. This property applies only to an attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="ILASM" Value=".property bool IsEmptyElement { public hidebysig virtual abstract specialname bool get_IsEmptyElement() }" />
      <MemberSignature Language="C#" Value="public abstract bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates the
   current node is an element (<see cref="P:System.Xml.XmlReader.NodeType" />
   equals <see cref="F:System.Xml.XmlNodeType.Element" />) that ends with "<c>/&gt;</c>", otherwise,<see langword=" false" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property enables you to determine the difference between the following: </para>
          <para>&lt;item num="123"/&gt; (IsEmptyElement is true).</para>
          <para>&lt;item num="123"&gt;&lt;/item&gt; (IsEmptyElement is false, although element content is empty).</para>
          <para>A corresponding EndElement node is not generated for empty elements.</para>
          <para>If default content has been added to an element due to schema validation, IsEmptyElement still returns true. It has no bearing on whether or not the element has a default value. In other words, IsEmptyElement simply reports whether or not the element in the source document had an end element tag.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsName(string str)" />
      <MemberSignature Language="C#" Value="public static bool IsName (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsName(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <see cref="http://go.microsoft.com/fwlink/?LinkId=49863">W3C XML 1.0 Recommendation</see> to determine whether the name is valid.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether the string argument is a valid XML name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the name is valid; otherwise, false.</para>
        </returns>
        <param name="str">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to validate.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsNameToken">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsNameToken(string str)" />
      <MemberSignature Language="C#" Value="public static bool IsNameToken (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNameToken(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <see cref="http://go.microsoft.com/fwlink/?LinkId=49863">W3C XML 1.0 Recommendation</see> to determine whether the name token is valid.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether or not the string argument is a valid XML name token.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if it is a valid name token; otherwise false.</para>
        </returns>
        <param name="str">
          <attribution license="cc4" from="Microsoft" modified="false" />The name token to validate.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool IsStartElement()" />
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <see cref="M:System.Xml.XmlReader.MoveToContent" /> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool IsStartElement(string name)" />
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given argument.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The string matched against the Name property of the element found.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool IsStartElement(string localname, string ns)" />
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement(string localname, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found match the given strings.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.</para>
        </returns>
        <param name="localname">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to match against the LocalName property of the element found.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to match against the NamespaceURI property of the element found.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="ILASM" Value=".property string Item[int32 i] { public hidebysig virtual abstract specialname string get_Item(int32 i) }" />
      <MemberSignature Language="C#" Value="public virtual string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">A <see cref="T:System.Int32" qualify="true" /> specifying the zero-based index of the attribute relative to the containing element.</param>
        <summary>
          <para>Retrieves the value of the attribute with the specified index relative to the containing element.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the value of the attribute.</para>
        </value>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> This property does not move the reader.</block>
          </para>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlReader.AttributeCount" /> of the containing element.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="ILASM" Value=".property string Item[string name] { public hidebysig virtual abstract specialname string get_Item(string name) }" />
      <MemberSignature Language="C#" Value="public virtual string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A <see cref="T:System.String" qualify="true" /> specifying the qualified name of the attribute.</param>
        <summary>
          <para>Retrieves the value of the attribute with the specified qualified name.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the value of the specified attribute, or
<see langword="null" /> 
if the attribute is not found.</para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>This property does not move the reader.</para>
            <para>If the reader
         is positioned on a <see langword="DocumentType" />
         
         node, this method can be used to get the PUBLIC and
         SYSTEM literals.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="ILASM" Value=".property string Item[string name, string namespaceURI] { public hidebysig virtual abstract specialname string get_Item(string name, string namespaceURI) }" />
      <MemberSignature Language="C#" Value="public virtual string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="namespaceURI">To be added.</param>
        <summary>
          <para>Retrieves the value of the attribute with the specified local name and namespace URI.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the value of the specified attribute, or <see langword="null" /> if the
attribute is not found.</para>
        </value>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> This property does not move the reader. </block>
          </para>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
      to provide the functionality described above, as there is no default implementation.
   </block>
          </para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="ILASM" Value=".property string LocalName { public hidebysig virtual abstract specialname string get_LocalName() }" />
      <MemberSignature Language="C#" Value="public abstract string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the local name of the current node or, for node types that do not
have a name (like <see langword="Text" />, <see langword="Comment" /> , and so on),
<see cref="F:System.String.Empty" qualify="true" />.</para>
        </value>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> As described
      above. </block>
          </para>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the local name of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string LookupNamespace(string prefix)" />
      <MemberSignature Language="C#" Value="public abstract string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In the following XML string, if the reader is positioned on the href attribute, the prefix a is resolved by calling reader.LookupNamespace("a"). The returned string is urn:456.</para>
          <code>&lt;root xmlns:a="urn:456"&gt;
  &lt;item&gt;
  &lt;ref href="a:b"/&gt;
  &lt;/item&gt;
 &lt;/root&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The namespace URI to which the prefix maps or null if no matching prefix is found.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void MoveToAttribute(int32 i)" />
      <MemberSignature Language="C#" Value="public virtual void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> After calling
      this method, the <see cref="P:System.Xml.XmlReader.Name" />,
      <see cref="P:System.Xml.XmlReader.NamespaceURI" />, and <see cref="P:System.Xml.XmlReader.Prefix" /> properties reflect the properties of current attribute.</block>
          </para>
          <para>
            <block subset="none" type="overrides"> This method must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlReader.AttributeCount" /> of the containing element.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, moves to the attribute with the specified index.</para>
        </summary>
        <param name="i">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool MoveToAttribute(string name)" />
      <MemberSignature Language="C#" Value="public abstract bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>After calling MoveToAttribute, the <see cref="P:System.Xml.XmlReader.Name" />, <see cref="P:System.Xml.XmlReader.NamespaceURI" />, and <see cref="P:System.Xml.XmlReader.Prefix" /> properties reflect the properties of that attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool MoveToAttribute(string name, string ns)" />
      <MemberSignature Language="C#" Value="public abstract bool MoveToAttribute (string name, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string name, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>After calling MoveToAttribute, the <see cref="P:System.Xml.XmlReader.Name" />, <see cref="P:System.Xml.XmlReader.NamespaceURI" />, and <see cref="P:System.Xml.XmlReader.Prefix" /> properties reflect the properties of that attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToContent">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual valuetype System.Xml.XmlNodeType MoveToContent()" />
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeType MoveToContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xml.XmlNodeType MoveToContent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the current node is an attribute node, this method moves the reader back to the element that owns the attribute.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.MoveToContentAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt; MoveToContentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Xml.XmlNodeType&gt; MoveToContentAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.MoveToContent" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool MoveToElement()" />
      <MemberSignature Language="C#" Value="public abstract bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: Element, DocumentType, or XmlDeclaration.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, moves to the element that contains the current attribute node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool MoveToFirstAttribute()" />
      <MemberSignature Language="C#" Value="public abstract bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> If <see cref="P:System.Xml.XmlReader.AttributeCount" /> is non-zero,
   the position of
   the reader
   moves to the first attribute; otherwise, the position of the reader does not change. </block>
          </para>
          <para>
            <block subset="none" type="overrides"> This method must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, moves to the first attribute.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool MoveToNextAttribute()" />
      <MemberSignature Language="C#" Value="public abstract bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the current node is an element node, this method is equivalent to <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute" />. If MoveToNextAttribute returns true, the reader moves to the next attribute; otherwise, the position of the reader does not change.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, moves to the next attribute.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if there is a next attribute; false if there are no more attributes.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="ILASM" Value=".property string Name { public hidebysig virtual abstract specialname string get_Name() }" />
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the qualified name of the current node or, for node types that do not
have a name (like <see langword="Text" />, <see langword="Comment" /> , and so on),
<see cref="F:System.String.Empty" qualify="true" />.</para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para> The qualified name is equivalent to
         the <see cref="P:System.Xml.XmlReader.LocalName" />
         
         prefixed with <see cref="P:System.Xml.XmlReader.Prefix" /> and the
         ':' character. For example, <see cref="P:System.Xml.XmlReader.Name" /> is
         "bk:book" for the element <c>&lt;bk:book&gt;</c>.
      </para>
            <para> The name returned is dependent on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following node types
   return the listed values. All other node types return an empty string.</para>
            <list type="table">
              <listheader>
                <term>Node Type</term>
                <description>Name</description>
              </listheader>
              <item>
                <term>
                  <see langword="Attribute" />
                </term>
                <description>The name of the attribute.</description>
              </item>
              <item>
                <term>
                  <see langword="DocumentType" />
                </term>
                <description>The document type name.</description>
              </item>
              <item>
                <term>
                  <see langword="Element" />
                </term>
                <description>The tag name.</description>
              </item>
              <item>
                <term>
                  <see langword="EntityReference" />
                </term>
                <description>The name of the entity referenced.</description>
              </item>
              <item>
                <term>
                  <see langword="ProcessingInstruction" />
                </term>
                <description>The target of the processing
   instruction.</description>
              </item>
              <item>
                <term>
                  <see langword="XmlDeclaration" />
                </term>
                <description>The literal string "xml".</description>
              </item>
            </list>
            <para>This property is read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the qualified name of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="ILASM" Value=".property string NamespaceURI { public hidebysig virtual abstract specialname string get_NamespaceURI() }" />
      <MemberSignature Language="C#" Value="public abstract string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" qualify="true" /> containing the namespace URI of the current node or, if
   no namespace URI is associated with the current node, <see cref="F:System.String.Empty" qualify="true" />.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is relevant to Element and Attribute nodes only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="ILASM" Value=".property class System.Xml.XmlNameTable NameTable { public hidebysig virtual abstract specialname class System.Xml.XmlNameTable get_NameTable() }" />
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>The <see cref="T:System.Xml.XmlNameTable" qualify="true" /> used by the current
   instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All node and attribute names returned from <see cref="T:System.Xml.XmlReader" /> are atomized using the NameTable. When the same name is returned multiple times (for example, Customer), then the same String object will be returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.XmlNodeType NodeType { public hidebysig virtual abstract specialname valuetype System.Xml.XmlNodeType get_NodeType() }" />
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>One of the members of the <see cref="T:System.Xml.XmlNodeType" /> enumeration representing the type of the current
   node. </para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>This property does not return the following <see cref="T:System.Xml.XmlNodeType" /> members:
      <see langword="Document" />, <see langword="DocumentFragment" />,
      <see langword="Entity" />, <see langword="EndEntity" />, and
      <see langword="Notation" />.</para>
            <para>This property is
      read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the type of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="ILASM" Value=".property string Prefix { public hidebysig virtual abstract specialname string get_Prefix() }" />
      <MemberSignature Language="C#" Value="public abstract string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the namespace prefix associated with the current node. </para>
        </value>
        <remarks>
          <para>
            <block subset="none" type="note"> A namespace prefix
      is used as a reference for a namespace URI and is defined in an element
      declaration. For example, <c>&lt;someElement xmlns:bk="someURL"&gt;</c>, defines a
   prefix name "bk".
</block>
          </para>
          <block subset="none" type="behaviors">
            <para>As described
      above.</para>
            <para> This property is
      read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the namespace prefix associated with the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Char QuoteChar { public hidebysig virtual abstract specialname valuetype System.Char get_QuoteChar() }" />
      <MemberSignature Language="C#" Value="public virtual char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Char" qualify="true" /> specifying the quotation mark character (" or ') used to enclose the value of
   an attribute.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property applies only to an attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool Read()" />
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When an XmlReader is first created and initialized, there is no information available. You must call Read to read the first node.</para>
          <para>This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method will fail. If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, reads the next node from the stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the next node was read successfully; false if there are no more nodes to read.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ReadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReadAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.Read" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the next node from the stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the next node was read successfully; false if there are no more nodes to read.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract bool ReadAttributeValue()" />
      <MemberSignature Language="C#" Value="public abstract bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadAttributeValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method after calling <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)" /> to read through the text or entity reference nodes that make up the attribute value. The <see cref="P:System.Xml.XmlReader.Depth" /> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if there are nodes to return.</para>
          <para>false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
          <para>An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the text content at the current reader position and converts it to the requested return type. Text, white space, significant white space and CDATA sections are concatenated. Comments and processing instructions are skipped and entity references are automatically resolved.</para>
          <para>This method is used to read, convert if necessary, and return atomic value items from the current node content. If the input type is a valid mappings for the type of the current node then an instance of the target type containing the value of the current node is returned. The <format type="text/html"><a href="cabdfcad-f359-479b-b71c-8b2fad42ca49">Mapping XML Data Types to CLR Types</a></format> topic has a list of the default mappings.</para>
          <para>For example, if you had the following XML text:</para>
          <code>&lt;elem&gt;123 &lt;!-- comment --&gt; &lt;?pi my_text?&gt; 456 &lt;?pi another_pi?&gt;&lt;/elem&gt;</code>
          <para>If the data is typed and a string array is supplied to the <see cref="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" /> method call, then the integer values are converted from strings according to the list of valid CLR type mappings.</para>
          <para>If the data is untyped and a string array is supplied to the <see cref="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" /> method call, then the content is parsed into separate strings. An array containing two strings is returned with the values "123" and "456". The spaces are not preserved from the content.</para>
          <para>In general when reading untyped data the content is parsed according to the supplied type. For example, if an integer array is supplied to the <see cref="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" /> method call then the string is parsed into an array of integers {123,456}.</para>
          <para>In the following example the XML text is not separated by spaces</para>
          <code>&lt;elem&gt;123&lt;!-- comment --&gt;&lt;?pi my_text?&gt;456789&lt;?pi another_pi?&gt;&lt;/elem&gt;</code>
          <para>If the content is untyped and a string array is supplied to the <see cref="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" /> method call then an array containing one concatenated string is returned with the value "123456789".</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the content as an object of the type specified.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The concatenated text content or attribute value converted to the requested type.</para>
        </returns>
        <param name="returnType">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the value to be returned.</param>
        <param name="namespaceResolver">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadContentAsAsync(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the content as an object of the type specified.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The concatenated text content or attribute value converted to the requested type.</para>
        </returns>
        <param name="returnType">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the value to be returned.</param>
        <param name="namespaceResolver">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method streams the content, decodes the Base64 content, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies". You can obtain RFCs from the <see cref="http://go.microsoft.com/fwlink/?LinkId=37119">Request for Comments Web site</see>.</para>
          <block subset="none" type="note">
            <para>You should not access any of the reader properties between calls to the <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> method until the method returns the value 0.</para>
          </block>
          <para>This method has the following behavior:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.</para>
            </item>
            <item>
              <para>If you ask for fewer, or the exact number of, bytes than are left in the stream the reader remains in its current position.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported on the following XML node types: Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, DocumentFragment.</para>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the content and returns the Base64 decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadContentAsBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the content and returns the Base64 decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method streams the content, decodes the BinHex content, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.</para>
          <block subset="none" type="note">
            <para>You should not access any of the reader properties between calls to the <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> method until the method returns the value 0.</para>
          </block>
          <para>This method has the following behavior:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.</para>
            </item>
            <item>
              <para>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the following XML node types: Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, DocumentFragment.</para>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the content and returns the BinHex decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadContentAsBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the content and returns the BinHex decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadContentAsBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadContentAsBoolean() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:boolean, the reader returns an unboxed <see cref="T:System.Boolean" /> object. If the content is not typed xsd:boolean, the reader attempts to convert it to a <see cref="T:System.Boolean" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a Boolean.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a <see cref="T:System.Boolean" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadContentAsDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadContentAsDateTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:dateTime, the reader returns an unboxed <see cref="T:System.DateTime" /> object. If the content is not typed xsd:dateTime, the reader attempts to convert it to a <see cref="T:System.DateTime" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <block subset="none" type="note">
            <para>You cannot rely on the <see cref="P:System.DateTime.Year" /> value when the content is typed as xsd:gMonthDay. <see cref="T:System.Xml.XmlReader" /> always sets the <see cref="P:System.DateTime.Year" /> value to 1904 in this case.</para>
          </block>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDateTimeOffset">
      <MemberSignature Language="C#" Value="public virtual DateTimeOffset ReadContentAsDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTimeOffset ReadContentAsDateTimeOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a <see cref="T:System.DateTimeOffset" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadContentAsDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadContentAsDecimal() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:decimal, the reader returns an unboxed <see cref="T:System.Decimal" /> object. If the content is not typed xsd:decimal, the reader attempts to convert it to a <see cref="T:System.Decimal" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a <see cref="T:System.Decimal" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content at the current position as a <see cref="T:System.Decimal" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadContentAsDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadContentAsDouble() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:double, the reader returns a double-precision floating-point number. If the content is not typed xsd:double, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a double-precision floating-point number.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadContentAsFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadContentAsFloat() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:float, the reader returns an unboxed a single-precision floating point number. If the content is not typed xsd:float, the reader attempts to convert it to a single-precision floating point number according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a single-precision floating point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content at the current position as a single-precision floating point number.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsInt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:integer, the reader returns an unboxed 32-bit signed integer. If the content is not typed xsd:integer, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a 32-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a 32-bit signed integer.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadContentAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadContentAsLong() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed xsd:long, the reader returns an unboxed 64-bit signed integer. If the content is not typed xsd:long, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>The following table describes this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as XmlConvert.ToXxx on attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a 64-bit signed integer.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadContentAsObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadContentAsObject() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>If the content is typed, the reader returns a boxed CLR of the most appropriate type, specified by the <see cref="P:System.Xml.XmlReader.ValueType" /> property. If the content is a list type, the reader returns an array of boxed objects of the appropriate type.</para>
          <block subset="none" type="note">
            <para>If a validation error occurs while parsing the content and the reader is an <see cref="T:System.Xml.XmlReader" /> object created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method, the reader returns the content as a string. In other words when a validation error or warning occurs, the content is considered to be untyped.</para>
          </block>
          <para>If the content is not typed, the reader returns the content as a string.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>The value of the element if the reader is a schema validating reader (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> is set to <see cref="F:System.Xml.ValidationType.Schema" />); otherwise an empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadContentAsObjectAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as an <see cref="T:System.Object" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as the most appropriate common language runtime (CLR) object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsObjectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadContentAsObjectAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadContentAsObject" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the text content at the current position as an <see cref="T:System.Object" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as the most appropriate common language runtime (CLR) object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadContentAsString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadContentAsString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</para>
          <para>This method can be used convert typed values to a string, or to read the text content while skipping comments and processing instructions.</para>
          <para>The following table describes how this method treats each node type. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
                <description>
                  <para>Reader behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Text</para>
                <para>CDATA</para>
                <para>Whitespace</para>
                <para>SignificantWhitespace</para>
                <para>EntityReference</para>
                <para>EndEntity</para>
              </term>
              <description>
                <para>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>Same as calling XmlConvert.ToXxx on the attribute value.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment</para>
                <para>ProcessingInstruction</para>
              </term>
              <description>
                <para>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</para>
              </description>
              <description>
                <para>Moves to the next start element or end element tag. Entity references are automatically expanded.</para>
              </description>
            </item>
            <item>
              <term>
                <para>EndElement</para>
              </term>
              <description>
                <para>An empty string.</para>
              </description>
              <description>
                <para>The reader remains in the current position.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Element</para>
                <para>XmlDeclaration</para>
                <para>None</para>
                <para>Document</para>
                <para>DocumentType</para>
                <para>Notation</para>
                <para>Entity</para>
                <para>DocumentFragment</para>
              </term>
              <description>
                <para>An <see cref="T:System.InvalidOperationException" /> is thrown.</para>
              </description>
              <description>
                <para>Undefined, although typically the reader remains in the current position.</para>
              </description>
            </item>
          </list>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadContentAsStringAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text content at the current position as a <see cref="T:System.String" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a <see cref="T:System.String" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadContentAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadContentAsStringAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadContentAsString" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the text content at the current position as a <see cref="T:System.String" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text content as a <see cref="T:System.String" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the element content as the requested type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content converted to the requested typed object.</para>
        </returns>
        <param name="returnType">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the value to be returned.</param>
        <param name="namespaceResolver">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content converted to the requested typed object.</para>
        </returns>
        <param name="returnType">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the value to be returned.</param>
        <param name="namespaceResolver">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadElementContentAsAsync(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the element content as the requested type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content converted to the requested typed object.</para>
        </returns>
        <param name="returnType">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the value to be returned.</param>
        <param name="namespaceResolver">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64-encoded GIF image) into the buffer. For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies". You can obtain RFCs from the <see cref="http://go.microsoft.com/fwlink/?LinkId=37119">Request for Comments Web site</see>.</para>
          <para>
            <see cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.</para>
          <para>This method is very similar to the <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> method except that it can only be called on element node types.</para>
          <para>If the <paramref name="count" /> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <see cref="T:System.Xml.XmlReader" /> reads all the remaining bytes in the document and returns the number of bytes read. The next <see cref="T:System.Xml.XmlReader" /> method call returns a zero and moves the reader to the node following the EndElement. </para>
          <para>If you call <see cref="M:System.Xml.XmlReader.Read" /> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <see cref="M:System.Xml.XmlReader.Read" /> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the element and decodes the Base64 content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadElementContentAsBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the element and decodes the Base64 content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the element content, decodes it using BinHex encoding, and returns the decoded binary bytes (for example, an inline BinHex-encoded GIF image) into the buffer.</para>
          <para>This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.</para>
          <para>This method is very similar to the <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> method except that it can only be called on element node types.</para>
          <para>If the <paramref name="count" /> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <see cref="T:System.Xml.XmlReader" /> reads all the remaining bytes in the document and returns the number of bytes read. The next <see cref="T:System.Xml.XmlReader" /> method call returns a zero and moves the reader to the node following the EndElement. </para>
          <para>If you call <see cref="M:System.Xml.XmlReader.Read" /> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <see cref="M:System.Xml.XmlReader.Read" /> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the element and decodes the BinHex content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadElementContentAsBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the element and decodes the BinHex content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadElementContentAsBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadElementContentAsBoolean() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the element content is typed xsd:boolean, the reader returns an unboxed <see cref="T:System.Boolean" /> object. If the content is not typed xsd:boolean, the reader attempts to convert it to a <see cref="T:System.Boolean" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.Boolean" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadElementContentAsBoolean (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadElementContentAsBoolean(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:boolean, the reader returns an unboxed <see cref="T:System.Boolean" /> object. If the content is not typed xsd:boolean, the reader attempts to convert it to a <see cref="T:System.Boolean" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.Boolean" /> object.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadElementContentAsDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadElementContentAsDateTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:dateTime, the reader returns an unboxed <see cref="T:System.DateTime" /> object. If the content is not typed xsd:dateTime, the reader attempts to convert it to a <see cref="T:System.DateTime" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <block subset="none" type="note">
            <para>You cannot rely on the <see cref="P:System.DateTime.Year" /> value when the content is typed as xsd:gMonthDay. <see cref="T:System.Xml.XmlReader" /> always sets the <see cref="P:System.DateTime.Year" /> value to 1904 in this case.</para>
          </block>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadElementContentAsDateTime (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadElementContentAsDateTime(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:dateTime, the reader returns an unboxed <see cref="T:System.DateTime" /> object. If the content is not typed xsd:dateTime, the reader attempts to convert it to a <see cref="T:System.DateTime" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <block subset="none" type="note">
            <para>You cannot rely on the <see cref="P:System.DateTime.Year" /> value when the content is typed as xsd:gMonthDay. <see cref="T:System.Xml.XmlReader" /> always sets the <see cref="P:System.DateTime.Year" /> value to 1904 in this case.</para>
          </block>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element contents as a <see cref="T:System.DateTime" /> object.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadElementContentAsDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadElementContentAsDecimal() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>The reader attempts to convert the element content to an <see cref="T:System.Decimal" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.Decimal" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadElementContentAsDecimal (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadElementContentAsDecimal(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>The reader attempts to convert the element content to an <see cref="T:System.Decimal" /> object according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.Decimal" /> object.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadElementContentAsDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadElementContentAsDouble() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:double, the reader returns a double-precision floating-point number. If the content is not typed xsd:double, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a double-precision floating-point number.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadElementContentAsDouble (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadElementContentAsDouble(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:double, the reader returns a double-precision floating-point number. If the content is not typed xsd:double, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a double-precision floating-point number.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadElementContentAsFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadElementContentAsFloat() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as single-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a single-precision floating point number.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadElementContentAsFloat (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadElementContentAsFloat(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a single-precision floating point number.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsInt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:integer, the reader returns an unboxed 32-bit signed integer. If the content is not typed xsd:integer, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a 32-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a 32-bit signed integer.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsInt (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsInt(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:integer, the reader returns an unboxed 32-bit signed integer. If the content is not typed xsd:integer, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a 32-bit signed integer.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadElementContentAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadElementContentAsLong() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:long, the reader returns an unboxed 64-bit signed integer. If the content is not typed xsd:long, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a 64-bit signed integer.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadElementContentAsLong (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadElementContentAsLong(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>If the content is typed xsd:long, the reader returns an unboxed 64-bit signed integer. If the content is not typed xsd:long, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a 64-bit signed integer.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAsObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAsObject() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as an <see cref="T:System.Object" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAsObject (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAsObject(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsObjectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadElementContentAsObjectAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadElementContentAsObject" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the current element and returns the contents as an <see cref="T:System.Object" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementContentAsString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementContentAsString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadElementContentAsStringAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the current element and returns the contents as a <see cref="T:System.String" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.String" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementContentAsString (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementContentAsString(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</para>
          <para>For more information, see <format type="text/html"><a href="81d7e46e-72b1-469f-b65c-4c1614d172df">Reading Typed Data</a></format> and the <see cref="http://go.microsoft.com/fwlink/?LinkId=4871">W3C XML Schema Part 2: Datatypes</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.String" /> object.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadElementContentAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadElementContentAsStringAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the current element and returns the contents as a <see cref="T:System.String" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element content as a <see cref="T:System.String" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ReadElementString()" />
      <MemberSignature Language="C#" Value="public virtual string ReadElementString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="Element" /> node, the element does not contain a simple text value, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is a helper method for reading simple text-only elements. It calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> to find the next content node and then parses its value as a simple string.</para>
          <para>Using the XML, &lt;name&gt;Arlene Huff&lt;/name&gt;, ReadElementString consumes the element and returns the string Arlene Huff.</para>
          <para>This method cannot handle any markup (child elements, comments, processing instructions, and so on) inside the name element, but it can concatenate multiple adjacent text and CDATA blocks.</para>
          <para>After calling this method the reader will be positioned on the node following the EndElement node or after the empty element tag.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads a text-only element.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ReadElementString(string name)" />
      <MemberSignature Language="C#" Value="public virtual string ReadElementString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="Element" /> node, the <see cref="P:System.Xml.XmlReader.Name" /> property of the <see langword="Element" /> node does not equal <paramref name="name" />, the element does not contain a simple text value, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is a helper method for reading simple text-only elements. It calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> to find the next content node and then parses its value as a simple string.</para>
          <para>Using the XML, &lt;name&gt;Arlene Huff&lt;/name&gt;, ReadElementString consumes the element and returns the string Arlene Huff.</para>
          <para>This method cannot handle any markup (child elements, comments, processing instructions, and so on) inside the name element, but it can concatenate multiple adjacent text and CDATA blocks.</para>
          <para>After calling this method the reader will be positioned on the node following the EndElement node or after the empty element tag.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given string before reading a text-only element.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to check.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ReadElementString(string localname, string ns)" />
      <MemberSignature Language="C#" Value="public virtual string ReadElementString (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString(string localname, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="Element" /> node, the <see cref="P:System.Xml.XmlReader.LocalName" /> property of the <see langword="Element" /> node does not equal <paramref name="localname" />, or the <see cref="P:System.Xml.XmlReader.NamespaceURI" /> property of the <see langword="Element" /> node does not equal <paramref name="ns" />, the element does not contain a simple text value, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is a helper method for reading simple text-only elements. It calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> to find the next content node and then parses its value as a simple string.</para>
          <para>Using the XML, &lt;name&gt;Arlene Huff&lt;/name&gt;, ReadElementString consumes the element and returns the string Arlene Huff.</para>
          <para>This method cannot handle any markup (child elements, comments, processing instructions, and so on) inside the name element, but it can concatenate multiple adjacent text and CDATA blocks.</para>
          <para>After calling this method the reader will be positioned on the node following the EndElement node or after the empty element tag.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found matches the given strings before reading a text-only element.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</para>
        </returns>
        <param name="localname">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name to check.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI to check.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadEndElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void ReadEndElement()" />
      <MemberSignature Language="C#" Value="public virtual void ReadEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadEndElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="behaviors"> As described above. </block>
          </para>
          <para>
            <block subset="none" type="default"> This method
      calls the <see cref="M:System.Xml.XmlReader.MoveToContent" /> method, which determines whether the
      current node can contain content and, if not, moves the reader to the next
      content node or the end of the input stream. The node the reader ends up
      positioned on is checked to determine if it is an <see langword="EndElement" />
      node. If so, the node is read and the reader is moved to the next node.</block>
          </para>
          <para>
            <block subset="none" type="overrides">  Override this 
      method to customize the behavior of this method in types derived from
      the <see cref="T:System.Xml.XmlReader" />
      class.

      </block>
          </para>
          <para>
            <block subset="none" type="usage"> Use this method to
      read an <see langword="EndElement" /> node and advance the reader to the next node.
      </block>
          </para>
        </remarks>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="EndElement" /> node or an error occurred while parsing the XML.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the current content node is an end tag and advances the reader to the next node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadInnerXml">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string ReadInnerXml()" />
      <MemberSignature Language="C#" Value="public virtual string ReadInnerXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadInnerXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns all the content of the current node including the markup. The current node (start tag) and corresponding end node (end tag) are not returned. For example, if you had the following: </para>
          <code> &lt;node&gt;
  this &lt;child id="123"/&gt;
 &lt;/node&gt;</code>
          <para>ReadInnerXml returns this &lt;child id="123"/&gt; </para>
          <para>This method handles element and attribute nodes in the following manner: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Node type </para>
                </term>
                <description>
                  <para>Position before the call </para>
                </description>
                <description>
                  <para>XML fragment </para>
                </description>
                <description>
                  <para>Return value </para>
                </description>
                <description>
                  <para>Position after the call </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>On the item1 start tag. </para>
              </description>
              <description>
                <para>&lt;item1&gt;text1&lt;/item1&gt;&lt;item2&gt;text2&lt;/item2&gt; </para>
              </description>
              <description>
                <para>text1 </para>
              </description>
              <description>
                <para>On the item2 start tag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>On the attr1 attribute node. </para>
              </description>
              <description>
                <para>&lt;item attr1="val1" attr2="val2"&gt;text&lt;/item&gt; </para>
              </description>
              <description>
                <para>val1 </para>
              </description>
              <description>
                <para>Remains on the attr1 attribute node. </para>
              </description>
            </item>
          </list>
          <para>If the reader is positioned on a leaf node, calling ReadInnerXml is equivalent to calling <see cref="M:System.Xml.XmlReader.Read" />. The method returns String.Empty (except for attribute nodes, in which case the value of the attribute is returned).</para>
          <para>This method checks for well-formed XML. If ReadInnerXml is called from an <see cref="T:System.Xml.XmlValidatingReader" />, this method also validates the content returned.</para>
          <para>As implemented in the <see cref="T:System.Xml.XmlNodeReader" />, <see cref="T:System.Xml.XmlTextReader" /> and XmlValidatingReader classes the ReadOuterXml method is namespace aware.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadInnerXmlAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, reads all the content, including markup, as a string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
          <para>If the current node is neither an element nor attribute, an empty string is returned.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadInnerXmlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadInnerXmlAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadInnerXmlAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadInnerXml" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads all the content, including markup, as a string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadOuterXml">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string ReadOuterXml()" />
      <MemberSignature Language="C#" Value="public virtual string ReadOuterXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadOuterXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is similar to <see cref="M:System.Xml.XmlReader.ReadInnerXml" /> except it also returns the start and end tags.</para>
          <para>This method handles element and attribute nodes in the following manner: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Node type </para>
                </term>
                <description>
                  <para>Position before the call </para>
                </description>
                <description>
                  <para>XML fragment </para>
                </description>
                <description>
                  <para>Return value </para>
                </description>
                <description>
                  <para>Position After the Call </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>On the item1 start tag. </para>
              </description>
              <description>
                <para>&lt;item1&gt;text1&lt;/item1&gt;&lt;item2&gt;text2&lt;/item2&gt; </para>
              </description>
              <description>
                <para>&lt;item1&gt;text1&lt;/item1&gt; </para>
              </description>
              <description>
                <para>On the item2 start tag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>On the attr1 attribute node. </para>
              </description>
              <description>
                <para>&lt;item attr1="val1" attr2="val2"&gt;text&lt;/item&gt; </para>
              </description>
              <description>
                <para>attr1="val1" </para>
              </description>
              <description>
                <para>Remains on the attr1 attribute node. </para>
              </description>
            </item>
          </list>
          <para>If the reader is positioned on a leaf node, calling ReadOuterXml is equivalent to calling <see cref="M:System.Xml.XmlReader.Read" />. The method returns String.Empty (except for attribute nodes, in which case the attribute markup is returned).</para>
          <para>This method checks for well-formed XML. If ReadOuterXml is called from an <see cref="T:System.Xml.XmlValidatingReader" />, this method also validates the content returned </para>
          <para>As implemented in the <see cref="T:System.Xml.XmlNodeReader" />, <see cref="T:System.Xml.XmlTextReader" /> and XmlValidatingReader classes the ReadOuterXml method is namespace aware. Given the following XML text &lt;A xmlns:S="urn:1"&gt;&lt;S:B&gt;hello&lt;/S:B&gt;&lt;/A&gt;, if the reader were positioned on the S:B start tag, ReadOuterXml returns &lt;S:B xmlns:S="urn:1"&gt;hello&lt;S:B/&gt;.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadOuterXmlAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadOuterXmlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadOuterXmlAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadOuterXmlAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadOuterXml" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads the content, including markup, representing this node and all its children.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void ReadStartElement()" />
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="Element" /> node or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method calls <see cref="M:System.Xml.XmlReader.IsStartElement" /> followed by <see cref="M:System.Xml.XmlReader.Read" /> to position you on the content of that element found in the input stream.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the current node is an element and advances the reader to the next node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void ReadStartElement(string name)" />
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="Element" /> node, the <see cref="P:System.Xml.XmlReader.Name" /> property of the <see langword="Element" /> node does not equal <paramref name="name" />, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A call to this method corresponds to a call to <see cref="M:System.Xml.XmlReader.IsStartElement" /> followed by a call to <see cref="M:System.Xml.XmlReader.Read" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name" /> and advances the reader to the next node.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the element.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void ReadStartElement(string localname, string ns)" />
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement(string localname, string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">The node is not an <see langword="Element" /> node, the <see cref="P:System.Xml.XmlReader.LocalName" /> property of the <see langword="Element" /> node does not equal <paramref name="localname" />, the <see cref="P:System.Xml.XmlReader.NamespaceURI" /> property of the <see langword="Element" /> node does not equal <paramref name="ns" />, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A call to this method corresponds to a call to <see cref="M:System.Xml.XmlReader.IsStartElement" /> followed by a call to <see cref="M:System.Xml.XmlReader.Read" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> and advances the reader to the next node.</para>
        </summary>
        <param name="localname">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="ns">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.ReadState ReadState { public hidebysig virtual abstract specialname valuetype System.Xml.ReadState get_ReadState() }" />
      <MemberSignature Language="C#" Value="public abstract System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> One of the members of the <see cref="T:System.Xml.ReadState" /> enumeration.
   </para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>As described
         above.</para>
            <para> This property is
         read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the state of the reader.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract string ReadString()" />
      <MemberSignature Language="C#" Value="public virtual string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns the content of element, text, white space, significant white space or CDATA nodes.</para>
          <para>If positioned on an element, ReadString concatenates all text, significant white space, white space, and CDATA section nodes together and returns the concatenated data as the element content. It stops when any markup is encountered, including comments and processing instructions. This could occur in a mixed content model, or when an element end tag is read.</para>
          <para>If positioned on an element text node, ReadString performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, ReadString has the same functionality as if the reader were positioned on the element start tag. It returns all the concatenated element text nodes.</para>
          <para>If positioned on an attribute, ReadString returns an empty string and moves the reader back to the element that owns the attribute.</para>
          <para>If ReadString is called on any other node type, it returns an empty string and the reader is positioned on the next node. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, reads the contents of an element or text node as a string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The contents of the element or an empty string.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlReader ReadSubtree() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Xml.XmlReader.ReadSubtree" /> can be called only on element nodes. When the entire sub-tree has been read, calls to the Read method returns false. When the new XmlReader has been closed, the original XmlReader will be positioned on the EndElement node of the sub-tree. Thus, if you called the <see cref="M:System.Xml.XmlReader.ReadSubtree" /> method on the start tag of the book element, after the sub-tree has been read and the new XmlReader has been closed, the original XmlReader is positioned on the end tag of the book element.</para>
          <para>You should not perform any operations on the original XmlReader until the new XmlReader has been closed. This action is not supported and can result in unpredictable behavior.</para>
          <block subset="none" type="note">
            <para>The <see cref="M:System.Xml.XmlReader.ReadSubtree" /> method is not intended to create a copy of the XML data that you can work with independently. Rather, it can be used create a boundary around an XML element. This is useful if you need to pass data to another component for processing and you wish to limit how much of your data the component can access. When you pass an XmlReader returned by the <see cref="M:System.Xml.XmlReader.ReadSubtree" /> method to another application, the application can access only that XML element, rather than the entire XML document.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new XmlReader instance that can be used to read the current node, and all its descendants.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read" /> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadToDescendant">
      <MemberSignature Language="C#" Value="public virtual bool ReadToDescendant (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToDescendant(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified qualified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.</para>
          <para>If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the element you wish to move to.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadToDescendant">
      <MemberSignature Language="C#" Value="public virtual bool ReadToDescendant (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToDescendant(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified local name and namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.</para>
          <para>If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element you wish to move to.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element you wish to move to.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool ReadToFollowing (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToFollowing(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is functionally equivalent executing the following::name XPath expression from the current node. It provides a quick way to find a named element in the XML document. It advances the reader to the next following element that matches the specified name and returns true if a matching element is found. Using the example below, the reader would read to the first instance of the specified element while reading forward.</para>
          <code>&lt;!--"sample.xml"--&gt;
&lt;?xml version="1.0"
   &lt;items&gt;
      &lt;item xmls="urn:1"/&gt;
   &lt;/items&gt;
&lt;/xml&gt;
</code>
          <code>XmlTextReader reader = new XmlTextReader("sample.xml");

reader.ReadToFollowing("item");
</code>
          <para>This method can be called on all node types.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads until an element with the specified qualified name is found.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool ReadToFollowing (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToFollowing(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is functionally equivalent executing the following::name XPath expression from the current node. It provides a quick way to find a named element in the XML document. It advances the reader to the next following element that matches the specified name and returns true if a matching element is found.</para>
          <code>&lt;!--"sample.xml"--&gt;
&lt;?xml version="1.0"
   &lt;items&gt;
      &lt;item xmls="urn:1"/&gt;
   &lt;/items&gt;
&lt;/xml&gt;
</code>
          <code>XmlTextReader reader = new XmlTextReader("sample.xml");

reader.ReadToFollowing("item", "urn:1");
</code>
          <para>This method can be called on all node types.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads until an element with the specified local name and namespace URI is found.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the element.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadToNextSibling">
      <MemberSignature Language="C#" Value="public virtual bool ReadToNextSibling (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToNextSibling(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>Do not call <see cref="M:System.Xml.XmlReader.ReadToNextSibling(System.String)" /> when the XmlReader is an initial state (<see cref="P:System.Xml.XmlReader.ReadState" /> is <see cref="F:System.Xml.ReadState.Initial" />). You can call <see cref="M:System.Xml.XmlReader.Read" /> to advance the XmlReader and then call the <see cref="M:System.Xml.XmlReader.ReadToNextSibling(System.String)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Advances the XmlReader to the next sibling element with the specified qualified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the sibling element you wish to move to.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadToNextSibling">
      <MemberSignature Language="C#" Value="public virtual bool ReadToNextSibling (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToNextSibling(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>Do not call <see cref="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)" /> when the XmlReader is an initial state (<see cref="P:System.Xml.XmlReader.ReadState" /> is <see cref="F:System.Xml.ReadState.Initial" />). You can call <see cref="M:System.Xml.XmlReader.Read" /> to advance the XmlReader and then call the <see cref="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Advances the XmlReader to the next sibling element with the specified local name and namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if a matching sibling element is found; otherwise, false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the sibling element you wish to move to.</param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the sibling element you wish to move to.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadValueChunk">
      <MemberSignature Language="C#" Value="public virtual int ReadValueChunk (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadValueChunk(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method enables reading of very large streams of text embedded in an XML document in a streaming fashion, that is, a small number of characters at a time instead of allocating a single string for the whole value. This method can be called on any node that has a value (<see cref="P:System.Xml.XmlReader.HasValue" /> is true), however actual streaming of the node value only occurs when called on a text, white space and significant white space nodes. Other node type values are cached, including attributes and CDATA nodes.</para>
          <para>This method returns only the content of the <see cref="P:System.Xml.XmlReader.Value" /> property and does not move the <see cref="T:System.Xml.XmlReader" />.</para>
          <para>This method reads the specified number of characters (<paramref name="count" />) of the node value into a character buffer (<paramref name="buffer" />) at a specified offset (<paramref name="index" />) and returns the number of characters written to the buffer. It returns the 0 when it has reached the end of the value. It cannot be restarted to read through the value again.</para>
          <para>In between calls to <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> the <see cref="T:System.Xml.XmlReader" /> properties do no change except for the <see cref="P:System.Xml.XmlReader.Value" /> property. When the <see cref="P:System.Xml.XmlReader.Value" /> property is accessed it may either return a partial value (with characters not yet returned by <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />) or a full value depending on the implementation. All the <see cref="T:System.Xml.XmlReader" /> implementations in the <see cref="N:System.Xml" /> namespace return a partial value for the <see cref="P:System.Xml.XmlReader.Value" /> property implementation.</para>
          <para>Any Read method can be called in between calls to <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />. If this occurs, the <see cref="T:System.Xml.XmlReader" /> moves to the next <see cref="T:System.Xml.XmlNodeType" /> in the stream and any characters not yet returned are skipped. </para>
          <para>There may be a case when <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> returns less than the requested number of characters. For example, if you had a 200-character long value with a surrogate pair at positions 127 and 128 and you called <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> with a 128-character buffer, the method call would return 127 characters instead of the requested 128. The surrogate pair would then be returned in the next <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> call. In this case, <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> did not return the requested 128 characters because doing so would have resulted in an incomplete surrogate pair at the end of the buffer.</para>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads large streams of text embedded in an XML document.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of characters read into the buffer. The value zero is returned when there is no more text content.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadValueChunkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadValueChunkAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadValueChunkAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously reads large streams of text embedded in an XML document.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of characters read into the buffer. The value zero is returned when there is no more text content.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual abstract void ResolveEntity()" />
      <MemberSignature Language="C#" Value="public abstract void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResolveEntity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">The reader is not positioned on a <see cref="F:System.Xml.XmlNodeType.EntityReference" /> node.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the reader is positioned on an EntityReference node (XmlNodeType.EntityReference), if <see cref="M:System.Xml.XmlReader.Read" /> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an EndEntity node is returned to close the entity reference scope.</para>
          <block subset="none" type="note">
            <para>After calling this method, if the entity is part of an attribute value, you must call <see cref="M:System.Xml.XmlReader.ReadAttributeValue" /> to step into the entity.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, resolves the entity reference for EntityReference nodes.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> interface exposes a subset of the Post Schema Validation Infoset (PSVI) associated with an XML node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the schema information that has been assigned to the current node as a result of schema validation.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="T:System.Xml.XmlReaderSettings" /> object can contain sensitive information such as user credentials. Applications must be careful when caching this object or passing it to another component.</para>
          </block>
          <para>The <see cref="T:System.Xml.XmlReaderSettings" /> class is used to specify the set of features to support on the created reader instance. The <see cref="T:System.Xml.XmlReaderSettings" /> object returned by this property cannot be modified. Any attempt to change individual settings results in an exception being thrown.</para>
          <para>For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Create XML Readers</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlReader" /> instance.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void Skip()" />
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In the following XML input if the reader is positioned on the &lt;a&gt; node or any of its attributes, calling Skip positions the reader to the &lt;b&gt; node.</para>
          <para>If the reader is positioned on a leaf node already (such as the &lt;x&gt; node or the text node abc), calling Skip is the same as calling <see cref="M:System.Xml.XmlReader.Read" />.</para>
          <code> &lt;a name="bob" age="123"&gt;
  &lt;x/&gt;abc&lt;y/&gt;
 &lt;/a&gt;
 &lt;b&gt;
 ...
 &lt;/b&gt;</code>
          <para>This method checks for well-formed XML.</para>
          <para>If the reader is an <see cref="T:System.Xml.XmlValidatingReader" />, this method also validates the skipped content.</para>
          <para>The XmlReader implementation determines whether or not the Skip method will expand external entities. The following table describes whether the external entities are expanded for the various types of XmlReader objects.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>TyType of XmlReader</para>
                </term>
                <description>
                  <para>ExExpands external entities</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlTextReader" />
                </para>
              </term>
              <description>
                <para>No.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlReader" /> instance created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method that is reading text data.</para>
              </term>
              <description>
                <para>No.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlReader" /> instance created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method that is reading binary data.</para>
              </term>
              <description>
                <para>Not applicable.</para>
              </description>
            </item>
            <item>
              <term>
                <para>A schema validating <see cref="T:System.Xml.XmlReader" /> instance created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method.</para>
              </term>
              <description>
                <para>Yes.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlValidatingReader" />
                </para>
              </term>
              <description>
                <para>Yes.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlReader" /> instance returned by a <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</para>
              </term>
              <description>
                <para>Not applicable.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlNodeReader" />
                </para>
              </term>
              <description>
                <para>No.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Xml.XmlReader" /> instance wrapped around another <see cref="T:System.Xml.XmlReader" /> instance.</para>
              </term>
              <description>
                <para>Depends on the implementation of the underlying <see cref="T:System.Xml.XmlReader" />. (The Skip method on the underlying <see cref="T:System.Xml.XmlReader" /> is called).</para>
              </description>
            </item>
          </list>
          <para>For the asynchronous version of this method, see <see cref="M:System.Xml.XmlReader.SkipAsync" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Skips the children of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SkipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SkipAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SkipAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is the asynchronous version of <see cref="M:System.Xml.XmlReader.Skip" />, with the same functionality. To use this method, you must set the <see cref="P:System.Xml.XmlReaderSettings.Async" /> flag to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Asynchronously skips the children of the current node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current node.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Xml.XmlReader" /> instance is cast to an <see cref="T:System.IDisposable" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="ILASM" Value=".property string Value { public hidebysig virtual abstract specialname string get_Value() }" />
      <MemberSignature Language="C#" Value="public abstract string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the text value of the current node.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the asynchronous version of this property, see the <see cref="M:System.Xml.XmlReader.GetValueAsync" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the text value of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public virtual Type ValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>See <format type="text/html"><a href="cabdfcad-f359-479b-b71c-8b2fad42ca49">Mapping XML Data Types to CLR Types</a></format> for a list of the default mappings.</para>
          <para>An element of type xs:int has a ValueType of System.Int32 by default. However, the ValueType could be one of the valid types that can be mapped to xs:int, such as System.Int16 or System.Double.</para>
          <para>If a node is un-typed, or if the node is an element that contains mixed content, the node value is mapped to the System.String type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets The Common Language Runtime (CLR) type for the current node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="ILASM" Value=".property string XmlLang { public hidebysig virtual abstract specialname string get_XmlLang() }" />
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the
   current <c>xml:lang</c> scope.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property represents the xml:lang scope within which the current node resides. For example, here is an XML fragment with xml:lang set to US English in the root element: </para>
          <code>&lt;root xml:lang="en-us"&gt; 
&lt;name&gt;Fred&lt;/name&gt; 
&lt;/root&gt; </code>
          <para>When the reader is positioned on the name element, you can use this property to find that it is in the scope of a US English xml:lang attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the current xml:lang scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.XmlSpace XmlSpace { public hidebysig virtual abstract specialname valuetype System.Xml.XmlSpace get_XmlSpace() }" />
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>One of the members of the <see cref="T:System.Xml.XmlSpace" />
enumeration. If no <c>xml:space</c> scope exists, this property defaults to
<see cref="F:System.Xml.XmlSpace.None" />.</para>
        </value>
        <remarks>
          <block subset="none" type="behaviors">
            <para>As described
         above.</para>
            <para> This property is
         read-only.</para>
          </block>
          <para>
            <block subset="none" type="overrides"> This property must be overridden in order
   to provide the functionality described above, as there is no default implementation.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the current xml:space scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>