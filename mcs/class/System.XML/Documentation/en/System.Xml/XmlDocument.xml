<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlDocument" FullName="System.Xml.XmlDocument">
  <TypeSignature Maintainer="auto" Language="C#" Value="public class XmlDocument : System.Xml.XmlNode, System.Xml.IHasXmlChildNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDocument extends System.Xml.XmlNode implements class System.Xml.IHasXmlChildNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>To be added</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Xml.XmlNode</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IHasXmlChildNode</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>This class implements the W3C Document Object Model (DOM) Level 1 Core and the Core DOM Level 2. The DOM is an in-memory (cache) tree representation of an XML document and enables the navigation and editing of this document. Because XmlDocument implements the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface it can also be used as the source document for the <see cref="T:System.Xml.Xsl.XslTransform" /> class.</para>
      <para>The <see cref="T:System.Xml.XmlDataDocument" /> class extends XmlDocument and allows structured data to be stored, retrieved, and manipulated through a relational <see cref="T:System.Data.DataSet" />. This class allows components to mix XML and relational views of the underlying data.</para>
      <para>For more information, see <format type="text/html"><a href="B5E52844-4820-47C0-A61D-DE2DA33E9F54">[&lt;topic://cpconXMLDocumentObjectModelDOM&gt;]</a></format>.</para>
      <block subset="none" type="note">
        <para>Exceptions raised as a result of using the <see cref="T:System.Xml.XmlDocument" /> class, such as the <see cref="T:System.Xml.XmlException" /> class may contain sensitive information that should not be exposed in untrusted scenarios. Exceptions should be properly handled so that this sensitive information is not exposed in untrusted scenarios.</para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents an XML document.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <para>
	Creates a new document object. It is equivalent to <see cref="M:System.Xml.XmlDocument.ctor(System.Xml.XmlNameTable)" /> with a new <see cref="T:NameTable" /> object as its argument.
	</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlDocument" /> class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlDocument (System.Xml.XmlImplementation imp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlImplementation imp) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="imp" Type="System.Xml.XmlImplementation" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlImplementation" />.</para>
        </summary>
        <param name="imp">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlImplementation to use. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDocument (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <remarks>
          <para>
	Creates a new document object, using argument <see cref="T:System.Xml.XmlNameTable" /> as its <see cref="P:System.Xml.XmlDocument.NameTable" /> property.
	</para>
          <para>
	The XmlNameTable is added some name strings used in the document object model, such as "#element" (node names), "xml", "lang" and "space" (predefined xml attributes).
	</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. The BaseURI tells you where these nodes came from.</para>
          <para>For Document nodes, BaseURI returns the location of the XML document. For example, if the XmlDocument was loaded using the following call doc.Load("http://server/mydata.xml"), the BaseURI for the document node is http://server/mydata.xml. However, if the <see cref="M:System.Xml.XmlDocument.Load(System.String)" /> method is redirected by server to a different URI, BaseURI returns the original URI passed to the Load method.</para>
          <para>This property is a Microsoft extension to the Document Object Model (DOM). For additional information on BaseURI and how it behaves with other node types, see <see cref="P:System.Xml.XmlNode.BaseURI" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the base URI of the current node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method serves as a copy constructor for nodes. The cloned node has no parent (<see cref="P:System.Xml.XmlNode.ParentNode" /> returns null).</para>
          <para>If <paramref name="deep" /> is true, the cloned node includes all the child nodes, otherwise only the XmlDocument node is cloned. See the <see cref="M:System.Xml.XmlNode.CloneNode(System.Boolean)" /> method to see how this method behaves on other node types.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a duplicate of this node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The cloned XmlDocument node.</para>
        </returns>
        <param name="deep">
          <attribution license="cc4" from="Microsoft" modified="false" />true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.XmlAttribute CreateAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlAttribute CreateAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The XmlAttribute can be added to an <see cref="T:System.Xml.XmlElement" /> using the <see cref="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlDocument.Name" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlAttribute.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI" /> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The XmlAttribute can be added to an <see cref="T:System.Xml.XmlElement" /> using the <see cref="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlAttribute.</para>
        </returns>
        <param name="qualifiedName">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The XmlAttribute can be added to an <see cref="T:System.Xml.XmlElement" /> using the <see cref="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)" /> method.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlAttribute.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix of the attribute (if any). String.Empty and null are equivalent. </param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute (if any). String.Empty and null are equivalent. If <paramref name="prefix" /> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateCDataSection">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlCDataSection CreateCDataSection(string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlCDataSection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), CDataSection nodes are allowed within Element nodes and in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlCDataSection" /> containing the specified data.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlCDataSection.</para>
        </returns>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />The content of the new XmlCDataSection. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateComment">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlComment CreateComment (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlComment CreateComment(string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlComment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Comment nodes are only allowed within Document, Element and EntityReference nodes, when the EntityReference node is not a child of an Attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlComment" /> containing the specified data.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlComment.</para>
        </returns>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />The content of the new XmlComment. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultAttribute">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xml.XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a default attribute with the specified prefix, local name and namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new <see cref="T:System.Xml.XmlAttribute" />.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix of the attribute (if any). </param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute (if any). </param>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentFragment">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlDocumentFragment CreateDocumentFragment() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocumentFragment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>DocumentFragment nodes cannot be inserted into a document. However, you can insert children of the DocumentFragment node into a document.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlDocumentFragment" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlDocumentFragment.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentType">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocumentType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="internalSubset" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The returned node will have parsed <see cref="P:System.Xml.XmlDocumentType.Entities" /> and <see cref="P:System.Xml.XmlDocumentType.Notations" /> collections.</para>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), DocumentType nodes are only allowed within Document nodes. Each <see cref="T:System.Xml.XmlDocument" /> can have only one DocumentType node. The DocumentType node must also be inserted before the root element of the XmlDocument (if the document already has a root element, you cannot add a DocumentType node).</para>
          <para>If the passed parameters do not combine to build a valid XmlDocumentType, an exception is thrown.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.Xml.XmlDocumentType" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlDocumentType.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />Name of the document type. </param>
        <param name="publicId">
          <attribution license="cc4" from="Microsoft" modified="false" />The public identifier of the document type or null. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.</param>
        <param name="systemId">
          <attribution license="cc4" from="Microsoft" modified="false" />The system identifier of the document type or null. Specifies the URL of the file location for the external DTD subset.</param>
        <param name="internalSubset">
          <attribution license="cc4" from="Microsoft" modified="false" />The DTD internal subset of the document type or null. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement CreateElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement CreateElement(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Note that the instance returned implements the XmlElement interface, so default attributes would be created directly on the returned object.</para>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document and Element nodes, and in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an element with the specified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlElement.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement CreateElement(string qualifiedName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following C# code </para>
          <code> XmlElement elem;
 elem=doc.CreateElement("xy:item", "urn:abc");</code>
          <para>results in an element that is equivalent to the following XML text.</para>
          <code>&lt;xy:item
       xmlns:xy="urn:abc"/&gt;</code>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document and Element nodes, and in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlElement" /> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlElement.</para>
        </returns>
        <param name="qualifiedName">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the element. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following C# code </para>
          <code> XmlElement elem;
 elem=doc.CreateElement("xy", "item", "urn:abc");</code>
          <para>creates an element equivalent to the following XML text: </para>
          <code>&lt;xy:item xmlns:xy="urn:abc"/&gt;</code>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Element nodes are allowed within Document and Element nodes, and in EntityReference nodes when the EntityReference is outside an Attribute node.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new <see cref="T:System.Xml.XmlElement" />.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix of the new element (if any). String.Empty and null are equivalent. </param>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the new element. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the new element (if any). String.Empty and null are equivalent. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateEntityReference">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlEntityReference CreateEntityReference(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlEntityReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the referenced entity is known, the child list of the XmlEntityReference node is made the same as that of the corresponding <see cref="T:System.Xml.XmlEntity" /> node.</para>
          <para>The namespaces used in the replacement text for the entity reference are bound at the time the parent of the entity reference node is first set (for example, when the entity reference node is inserted into the document). For example, given the following entity: </para>
          <code>&lt;!ENTITY a "&lt;b&gt;test&lt;/b&gt;"&gt;</code>
          <para>If you call CreateEntityReference("a") you get back a single node of type EntityReference with no children. If you append this node as a child of the following node, </para>
          <code>&lt;item xmlns="urn:1"/&gt;</code>
          <para>then, at the time of calling <see cref="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)" />, the parent of the newly created entity reference node is set and the children are expanded in this namespace context. The child element node b will have NamespaceURI equal to urn:1. The child nodes of the entity reference remain the same even if you move the entity reference to a place in the document that has a different default namespace context. This does not happen for existing entity reference nodes when you remove and insert them or for entity references that you clone with <see cref="M:System.Xml.XmlDocument.CloneNode(System.Boolean)" />. It only happens for newly created entity references.</para>
          <para>If the corresponding entity is not defined in the DocumentType when the entity reference node is added, because the entity reference is not defined, its only child node will be an empty text node.</para>
          <para>The built-in entities amp, lt, gt, apos, and quot are also allowed, and they will have a child text node with the appropriate expanded character value.</para>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), EntityReference nodes are only allowed within Element, Attribute and EntityReference nodes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlEntityReference.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the entity reference. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public override System.Xml.XPath.XPathNavigator CreateNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator(class System.Xml.XmlNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document positioned on the <see cref="T:System.Xml.XmlNode" /> specified.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</para>
        </returns>
        <param name="node">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeTypeString" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="nodeTypeString" /> parameter is case sensitive and must be one of the values in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>nodeTypeString </para>
                </term>
                <description>
                  <para>XmlNodeType </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>attribute </para>
              </term>
              <description>
                <para>Attribute </para>
              </description>
            </item>
            <item>
              <term>
                <para>cdatasection </para>
              </term>
              <description>
                <para>CDATA </para>
              </description>
            </item>
            <item>
              <term>
                <para>comment </para>
              </term>
              <description>
                <para>Comment </para>
              </description>
            </item>
            <item>
              <term>
                <para>document </para>
              </term>
              <description>
                <para>Document </para>
              </description>
            </item>
            <item>
              <term>
                <para>documentfragment </para>
              </term>
              <description>
                <para>DocumentFragment </para>
              </description>
            </item>
            <item>
              <term>
                <para>documenttype </para>
              </term>
              <description>
                <para>DocumentType </para>
              </description>
            </item>
            <item>
              <term>
                <para>element </para>
              </term>
              <description>
                <para>Element </para>
              </description>
            </item>
            <item>
              <term>
                <para>entityreference </para>
              </term>
              <description>
                <para>EntityReference </para>
              </description>
            </item>
            <item>
              <term>
                <para>processinginstruction </para>
              </term>
              <description>
                <para>ProcessingInstruction </para>
              </description>
            </item>
            <item>
              <term>
                <para>significantwhitespace </para>
              </term>
              <description>
                <para>SignificantWhitespace </para>
              </description>
            </item>
            <item>
              <term>
                <para>text </para>
              </term>
              <description>
                <para>Text </para>
              </description>
            </item>
            <item>
              <term>
                <para>whitespace </para>
              </term>
              <description>
                <para>Whitespace </para>
              </description>
            </item>
          </list>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para> </para>
                </term>
                <description>
                  <para>Document </para>
                </description>
                <description>
                  <para>DocumentType </para>
                </description>
                <description>
                  <para>XmlDeclaration </para>
                </description>
                <description>
                  <para>Element </para>
                </description>
                <description>
                  <para>Attribute </para>
                </description>
                <description>
                  <para>Text </para>
                </description>
                <description>
                  <para>CDATA </para>
                </description>
                <description>
                  <para>Markup </para>
                </description>
                <description>
                  <para>EntityReference </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Document </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>yes* </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes*** </para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes**** </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
            </item>
            <item>
              <term>
                <para>CDATA </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes*** </para>
              </description>
            </item>
            <item>
              <term>
                <para>Markup** </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>EntityReference </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
            </item>
          </list>
          <para>* The XmlDeclaration node must be the first child of the Document node.</para>
          <para>** Markup includes ProcessingInstruction and Comment nodes.</para>
          <para>*** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
          <para>**** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlNode.</para>
        </returns>
        <param name="nodeTypeString">
          <attribution license="cc4" from="Microsoft" modified="false" />String version of the <see cref="T:System.Xml.XmlNodeType" /> of the new node. This parameter must be one of the values listed in the table below. </param>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the new node. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CreateNode(valuetype System.Xml.XmlNodeType type, string name, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XmlNodeType" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para> </para>
                </term>
                <description>
                  <para>Document </para>
                </description>
                <description>
                  <para>DocumentType </para>
                </description>
                <description>
                  <para>XmlDeclaration </para>
                </description>
                <description>
                  <para>Element </para>
                </description>
                <description>
                  <para>Attribute </para>
                </description>
                <description>
                  <para>Text </para>
                </description>
                <description>
                  <para>CDATA </para>
                </description>
                <description>
                  <para>Markup </para>
                </description>
                <description>
                  <para>EntityReference </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Document </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>yes* </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes*** </para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes**** </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
            </item>
            <item>
              <term>
                <para>CDATA </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes*** </para>
              </description>
            </item>
            <item>
              <term>
                <para>Markup** </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>EntityReference </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
            </item>
          </list>
          <para>* The XmlDeclaration node must be the first child of the Document node.</para>
          <para>** Markup includes ProcessingInstruction and Comment nodes.</para>
          <para>*** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
          <para>**** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlNode.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNodeType of the new node. </param>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the new node. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CreateNode(valuetype System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XmlNodeType" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para> </para>
                </term>
                <description>
                  <para>Document </para>
                </description>
                <description>
                  <para>DocumentType </para>
                </description>
                <description>
                  <para>XmlDeclaration </para>
                </description>
                <description>
                  <para>Element </para>
                </description>
                <description>
                  <para>Attribute </para>
                </description>
                <description>
                  <para>Text </para>
                </description>
                <description>
                  <para>CDATA </para>
                </description>
                <description>
                  <para>Markup </para>
                </description>
                <description>
                  <para>EntityReference </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Document </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>yes* </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes*** </para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes**** </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
            </item>
            <item>
              <term>
                <para>CDATA </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes*** </para>
              </description>
            </item>
            <item>
              <term>
                <para>Markup** </para>
              </term>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
            </item>
            <item>
              <term>
                <para>EntityReference </para>
              </term>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>yes </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>no </para>
              </description>
              <description>
                <para>yes </para>
              </description>
            </item>
          </list>
          <para>* The XmlDeclaration node must be the first child of the Document node.</para>
          <para>** Markup includes ProcessingInstruction and Comment nodes.</para>
          <para>*** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.</para>
          <para>**** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlNode.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNodeType of the new node. </param>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix of the new node. </param>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the new node. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the new node. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateProcessingInstruction">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlProcessingInstruction CreateProcessingInstruction(string target, string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlProcessingInstruction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), ProcessingInstruction nodes are only allowed within Document, Element, and EntityReference nodes, when the EntityReference node is not a child of an Attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlProcessingInstruction" /> with the specified name and data.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlProcessingInstruction.</para>
        </returns>
        <param name="target">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the processing instruction. </param>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />The data for the processing instruction. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateSignificantWhitespace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSignificantWhitespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM). It is used when you want to manually format your document.</para>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace" /> node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new XmlSignificantWhitespace node.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
      </Docs>
    </Member>
    <Member MemberName="CreateTextNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlText CreateTextNode (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlText CreateTextNode(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), Text nodes are only allowed within Element, Attribute and EntityReference nodes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlText" /> with the specified text.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlText node.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text for the Text node. </param>
      </Docs>
    </Member>
    <Member MemberName="CreateWhitespace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWhitespace CreateWhitespace(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWhitespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM). It is used when you want to manually format your document.</para>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlWhitespace" /> node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new XmlWhitespace node.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
      </Docs>
    </Member>
    <Member MemberName="CreateXmlDeclaration">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="encoding" Type="System.String" />
        <Parameter Name="standalone" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The attributes are exposed as special properties on the XmlDeclaration node, and not as <see cref="T:System.Xml.XmlAttribute" /> nodes.</para>
          <para>Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.</para>
          <para>According to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210), the XmlDeclaration node must be the first node in the document.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlDeclaration" /> node with the specified values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlDeclaration node.</para>
        </returns>
        <param name="version">
          <attribution license="cc4" from="Microsoft" modified="false" />The version must be "1.0". </param>
        <param name="encoding">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument" /> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding" /> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> fails. If this is null or String.Empty, the Save method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.</param>
        <param name="standalone">
          <attribution license="cc4" from="Microsoft" modified="false" />The value must be either "yes" or "no". If this is null or String.Empty, the Save method does not write a standalone attribute on the XML declaration. </param>
      </Docs>
    </Member>
    <Member MemberName="DocumentElement">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement DocumentElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlElement DocumentElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <value>an <see cref="T:System.Xml.XmlElement" /> object that represents the document element, or null if it does not exist yet.</value>
        <remarks>
          <para>
	It represents the document element (root element) of this document. A well-formed XML document must have exactly one element, but this property could be null.
	</para>
          <para>
	This property is an equivalent of "documentElement" attribute of Document interface in W3C Document Object Model Core specification.
	</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the root <see cref="T:System.Xml.XmlElement" /> for the document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DocumentType">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocumentType DocumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocumentType DocumentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocumentType</ReturnType>
      </ReturnValue>
      <Docs>
        <value>
          <see cref="T:System.Xml.XmlDocumentType" /> object that represents the document type definition (DTD) of this document, or null if none as such.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An XmlDocument can have one and only one child with <see cref="T:System.Xml.XmlNodeType" /> equal to DocumentType.</para>
          <block subset="none" type="note">
            <para>This property is read-only. To change the DocumentType node, delete the existing node, create a new one using the <see cref="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)" /> method, and add the new node to the document.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the node containing the DOCTYPE declaration.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetElementById (string elementId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetElementById(string elementId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementId" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the document has multiple elements with the matching ID, this method returns the first matching element in the document.</para>
          <block subset="none" type="note">
            <para>The DOM implementation must have information which defines which attributes are of type ID. Although attributes of type ID can be defined in either XSD schemas or DTDs, this version of the product only supports those defined in DTDs. Attributes with the name "ID" are not of type ID unless so defined in the DTD. Implementations where it is unknown whether the attributes are of type ID are expected to return null.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlElement" /> with the specified ID.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The XmlElement with the matching ID or null if no matching element is found.</para>
        </returns>
        <param name="elementId">
          <attribution license="cc4" from="Microsoft" modified="false" />The attribute ID to match. </param>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The nodes are placed in the order in which they would be encountered in the document.</para>
          <block subset="none" type="note">
            <para>It is recommended that you use the <see cref="Overload:System.Xml.XmlNode.SelectNodes" /> or <see cref="Overload:System.Xml.XmlNode.SelectSingleNode" /> method instead of the <see cref="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match <paramref name="name" />, the returned collection will be empty.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name to match. It is matched against the Name property of the matching node. The special value "*" matches all tags. </param>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The nodes are placed in the order in which they would be encountered in the document tree.</para>
          <block subset="none" type="note">
            <para>It is recommended that you use the <see cref="Overload:System.Xml.XmlNode.SelectNodes" /> or <see cref="Overload:System.Xml.XmlNode.SelectSingleNode" /> method instead of the <see cref="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match the specified <paramref name="localName" /> and <paramref name="namespaceURI" />, the returned collection will be empty.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The LocalName to match. The special value "*" matches all tags. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />NamespaceURI to match. </param>
      </Docs>
    </Member>
    <Member MemberName="Implementation">
      <MemberSignature Language="C#" Value="public System.Xml.XmlImplementation Implementation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlImplementation Implementation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlImplementation</ReturnType>
      </ReturnValue>
      <Docs>
        <value>
          <see cref="T:System.Xml.XmlImplementation" /> object which created this object, or null if there is no such relevant object.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>XmlDocument objects created from the same XmlImplementation share the same <see cref="T:System.Xml.XmlNameTable" />. This allows users to compare attribute and element names as objects rather than strings.</para>
          <para>Although the XmlDocument objects share the same implementation, to move nodes from one document to another you must use the <see cref="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlImplementation" /> object for the current document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ImportNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode ImportNode(class System.Xml.XmlNode node, bool deep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The returned node has no parent. The source node is not altered or removed from the original document; ImportNode creates a copy of the source node.</para>
          <para>Importing a node creates an XmlNode object owned by the importing document, with <see cref="P:System.Xml.XmlNode.Name" /> and <see cref="P:System.Xml.XmlNode.NodeType" /> identical to the source node. The new object also has the attributes related to namespaces (<see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlNode.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />).</para>
          <para>Depending on the node type of the imported node and the value of the <paramref name="deep" /> parameter, additional information is copied as appropriate. This method attempts to mirror the behavior expected if a fragment of XML or HTML source was copied from one document to another (recognizing that, in the XML case, the two documents could have different DTDs).</para>
          <para>The following table describes the specific behavior for each <see cref="T:System.Xml.XmlNodeType" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType </para>
                </term>
                <description>
                  <para>ImportNode(true) </para>
                </description>
                <description>
                  <para>ImportNode(false) </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>The <see cref="P:System.Xml.XmlAttribute.Specified" /> property is set to true on the generated <see cref="T:System.Xml.XmlAttribute" />. The descendants of the source XmlAttribute are recursively imported and the resulting nodes reassembled to form the corresponding subtree. </para>
              </description>
              <description>
                <para>The <paramref name="deep" /> parameter does not apply to XmlAttribute nodes; they always carry their children with them when imported. </para>
              </description>
            </item>
            <item>
              <term>
                <para>CData </para>
              </term>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment </para>
              </term>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentFragment </para>
              </term>
              <description>
                <para>The descendants of the source node are recursively imported and the resulting nodes reassembled to form the corresponding subtree. </para>
              </description>
              <description>
                <para>An empty <see cref="T:System.Xml.XmlDocumentFragment" /> is generated. </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>Copies the node, including its data.* </para>
              </description>
              <description>
                <para>Copies the node, including its data.* </para>
              </description>
            </item>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>The descendants of the source element and its specified attribute nodes are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</para>
                <para>Note: Default attributes are not copied. If the document being imported into defines default attributes for this element name, those are assigned. </para>
              </description>
              <description>
                <para>Specified attribute nodes of the source element are imported, and the generated XmlAttribute nodes are attached to the generated <see cref="T:System.Xml.XmlElement" />.</para>
                <para>Note: Default attributes are not copied. If the document being imported into defines default attributes for this element name, those are assigned. </para>
              </description>
            </item>
            <item>
              <term>
                <para>EntityReference </para>
              </term>
              <description>
                <para>Because the source and destination documents could have the entities defined differently, this method only copies the <see cref="T:System.Xml.XmlEntityReference" /> node. The replacement text is not included. If the destination document has the entity defined, its value is assigned. </para>
              </description>
              <description>
                <para>Because the source and destination documents could have the entities defined differently, this method only copies the <see cref="T:System.Xml.XmlEntityReference" /> node. The replacement text is not included. If the destination document has the entity defined, its value is assigned. </para>
              </description>
            </item>
            <item>
              <term>
                <para>ProcessingInstruction </para>
              </term>
              <description>
                <para>Copies the target and data value from the imported node. </para>
              </description>
              <description>
                <para>Copies the target and data value from the imported node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
            </item>
            <item>
              <term>
                <para>SignificantWhitespace </para>
              </term>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Whitespace </para>
              </term>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
              <description>
                <para>Copies the node, including its data. </para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>Copies the target and data value from the imported node. </para>
              </description>
              <description>
                <para>Copies the target and data value from the imported node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>All other node types. </para>
              </term>
              <description>
                <para>These node types cannot be imported. </para>
              </description>
              <description>
                <para>These node types cannot be imported. </para>
              </description>
            </item>
          </list>
          <para>*Although DocumentType nodes can be imported, a document can only have one DocumentType. If the document currently has a DocumenType node, it must be removed before adding a new one.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Imports a node from another document to the current document.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The imported <see cref="T:System.Xml.XmlNode" />.</para>
        </returns>
        <param name="node">
          <attribution license="cc4" from="Microsoft" modified="false" />The node being imported. </param>
        <param name="deep">
          <attribution license="cc4" from="Microsoft" modified="false" />true to perform a deep clone; otherwise, false. </param>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is not implemented.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Throws an <see cref="T:System.InvalidOperationException" /> in all cases.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public override string InnerXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Setting this property replaces the children of the node with the parsed contents of the given string. The parsing is done in the current namespace context.</para>
          <para>InnerXml removes redundant namespace declarations. As a result, numerous cut and paste operations do not increase the size of your document with redundant namespace declarations. Consider the following XSL document: </para>
          <code>&lt;xsl:stylesheet version="1.0" 
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
     &lt;xsl:template match="stock"&gt;
         ...
     &lt;/xsl:template&gt;
    &lt;/xsl:stylesheet&gt;</code>
          <para>The InnerXml property on the stylesheet node returns the following string: </para>
          <code>&lt;xsl:template match="stock" 
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
     ...
    &lt;/xsl:template&gt;</code>
          <para>Notice the additional xmlns:xsl namespace declaration which is used to preserve the node identity. If you re-insert this inner XML string, you will get back your original document. In other words, InnerXml recognizes that the xmlns:xsl namespace declaration is redundant, given that the parent xsl:stylesheet element already has the xmlns:xsl namespace delcaration, and therefore removes it.</para>
          <para>If you move InnerXml from a document with no default namespace to a document with a default namespace, the behavior is a little different. Consider the following XML string: </para>
          <code>&lt;test&gt;
      &lt;item&gt;123&lt;/item&gt;
    &lt;/test&gt;</code>
          <para>InnerXml returns a plain XML string with no namespace declarations: </para>
          <code>&lt;item&gt;123&lt;/item&gt;</code>
          <para>If you then insert this string into a document that does have a default namespace, such as the following: </para>
          <code>&lt;test2 xmlns="urn:1"&gt;
    &lt;/test&gt;</code>
          <para>InnerXml parses the string in context, and the new nodes pick up the urn:1 namespace. The result looks like this: </para>
          <code>&lt;test2 xmlns="urn:1"&gt;
      &lt;item&gt;123&lt;/item&gt;
    &lt;/test&gt;</code>
          <para>Now when you ask for the InnerXml you get back the following: </para>
          <code>&lt;item xmlns="urn:1"&gt;123&lt;/item&gt;</code>
          <para>If you explicitly want the inserted item to preserve the fact that it came from a document that had no namespace then you need to manually add an xmlns= "" declaration and insert the resulting string: </para>
          <code>&lt;item xmlns=""&gt;123&lt;/item&gt;</code>
          <para>The net effect of all this is as follows: </para>
          <list type="ordered">
            <item>
              <para>Cutting and pasting InnerXml among documents that do not use namespaces is clean and simple and does not create "xmlns" redundancy in your strings.</para>
            </item>
            <item>
              <para>InnerXml can also be used to cut and paste between documents which have more than one namespace (that is XSL stylesheets).</para>
            </item>
            <item>
              <para>xmlns:xsl declarations automatically appear in your strings and disappear in your node hierarchies.</para>
            </item>
            <item>
              <para>In the case where you are moving InnerXml from a document that has no default namespace to a document that does have a default namespace, the new nodes will pick up the new default namespace.</para>
            </item>
          </list>
          <para>If InnerXml is set with text containing entity references that are not currently defined in the document, the resulting tree will contain empty EntityReference nodes.</para>
          <para>This property is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the markup representing the children of the current node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public override bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only node is one whose properties, attributes, or children cannot be changed. You can remove a read-only node from the tree and insert it somewhere else.</para>
          <para>This property is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current node is read-only.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.IO.Stream inStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.IO.Stream inStream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The Load method always preserves significant white space. The <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is false; white space in element content is not preserved.</para>
          </block>
          <para>If you want validation to occur, you can create a validating <see cref="T:System.Xml.XmlReader" /> instance by using the <see cref="T:System.Xml.XmlReaderSettings" /> class and the <see cref="Overload:System.Xml.XmlReader.Create" /> method. For more information, see <format type="text/html"><a href="2958dbbd-60ca-4447-9b16-72f41d223486">Validating XML Data with XmlReader</a></format>.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the XML document from the specified stream.</para>
        </summary>
        <param name="inStream">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML document to load. </param>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.IO.TextReader txtReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.IO.TextReader txtReader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txtReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The Load method always preserves significant white space. The <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is false; white space in element content is not preserved.</para>
          </block>
          <para>If you want validation to occur, you can create a validating <see cref="T:System.Xml.XmlReader" /> instance by using the <see cref="T:System.Xml.XmlReaderSettings" /> class and the <see cref="Overload:System.Xml.XmlReader.Create" /> method. For more information, see <format type="text/html"><a href="2958dbbd-60ca-4447-9b16-72f41d223486">Validating XML Data with XmlReader</a></format>.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the XML document from the specified <see cref="T:System.IO.TextReader" />.</para>
        </summary>
        <param name="txtReader">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader used to feed the XML data into the document. </param>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The Load method always preserves significant white space. The <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is false; white space in element content is not preserved.</para>
          </block>
          <para>If you want validation to occur, you can create a validating <see cref="T:System.Xml.XmlReader" /> instance by using the <see cref="T:System.Xml.XmlReaderSettings" /> class and the <see cref="Overload:System.Xml.XmlReader.Create" /> method. For more information, see <format type="text/html"><a href="2958dbbd-60ca-4447-9b16-72f41d223486">Validating XML Data with XmlReader</a></format>.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the XML document from the specified URL.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</param>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The Load method always preserves significant white space. The <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> property determines whether or not insignificant white space, that is white space in element content, is preserved. The default is false; white space in element content is not preserved.</para>
          </block>
          <para>If the reader is in the initial state (<see cref="P:System.Xml.XmlReader.ReadState" /> =ReadState.Initial), Load consumes the entire contents of the reader and builds the DOM from what it finds.</para>
          <para>If the reader is already positioned on some node at depth "n", this method loads that node and all subsequent siblings up to the end tag that closes depth "n". This has the following results.</para>
          <para>If the current node and its siblings look like the following: </para>
          <code>&lt;!--comment--&gt;&lt;element1&gt;one&lt;/element1&gt;&lt;element2&gt;two&lt;/element2&gt;</code>
          <para>Load throws an exception because a document cannot have two root level elements. If the current node and its siblings look like the following: </para>
          <code>&lt;!--comment--&gt;&lt;?process instruction?&gt;&lt;!--comment--&gt;&lt;/endtag&gt;</code>
          <para>Load succeeds, but you have an incomplete DOM tree because there is no root level element. Before you save the document, you must add a root level element, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> will throw an exception.</para>
          <para>If the reader is positioned on a leaf node that is invalid for the root level of a document, for example a white space or attribute node, the reader continues to read until it is positioned on a node that can be used for the root. The document begins loading at this point.</para>
          <para>If you want validation to occur, you can create a validating <see cref="T:System.Xml.XmlReader" /> instance by using the <see cref="T:System.Xml.XmlReaderSettings" /> class and the <see cref="Overload:System.Xml.XmlReader.Create" /> method. For more information, see <format type="text/html"><a href="2958dbbd-60ca-4447-9b16-72f41d223486">Validating XML Data with XmlReader</a></format>.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader" />.</para>
        </summary>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlReader used to feed the XML data into the document. </param>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public virtual void LoadXml (string xml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadXml(string xml) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default the LoadXml method does not preserve white space or significant white space.</para>
          <para>This method parses DTDs, but does not do DTD or Schema validation. If you want validation to occur, you can create a validating <see cref="T:System.Xml.XmlReader" /> instance by using the <see cref="T:System.Xml.XmlReaderSettings" /> class and the <see cref="Overload:System.Xml.XmlReader.Create" /> method. For more information, see <format type="text/html"><a href="2958dbbd-60ca-4447-9b16-72f41d223486">Validating XML Data with XmlReader</a></format>.</para>
          <para>If you want to load from a <see cref="T:System.IO.Stream" />, <see cref="T:System.String" />, <see cref="T:System.IO.TextReader" />, or <see cref="T:System.Xml.XmlReader" />, use the Load method instead of this method.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the XML document from the specified string.</para>
        </summary>
        <param name="xml">
          <attribution license="cc4" from="Microsoft" modified="false" />String containing the XML document to load. </param>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The local name returned depends on the <see cref="P:System.Xml.XmlDocument.NodeType" /> of the node. To see a table describing the local name returned for each of the node types, see the <see cref="P:System.Xml.XmlNode.LocalName" /> property in the <see cref="T:System.Xml.XmlNode" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the local name of the node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name returned depends on the <see cref="P:System.Xml.XmlDocument.NodeType" /> of the node. To see a table describing the name returned for each of the node types, see the <see cref="P:System.Xml.XmlNode.Name" /> property in the <see cref="T:System.Xml.XmlNode" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the qualified name of the node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <value>an <see cref="T:System.Xml.XmlNameTable" /> that stores all name strings.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Each XmlDocument object has a <see cref="T:System.Xml.NameTable" /> object. Element and attribute names are stored in the NameTable as atomized strings. This means that even if a name is referenced in the document multiple times it is stored only once in the NameTable. For example, if the document had multiple elements with the name "Customer", NameTable returns the same object whenever it receives a request for that name. As a result, users can write code using object comparisons on these strings rather than the more expensive string comparisons.</para>
          <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeChanged">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event only applies to nodes that have a value.</para>
          <para>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node belonging to this document has been changed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeChanging">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event allows the user to do extra checking and, if necessary, throw an exception to stop the operation. If an exception is thrown the XmlDocument returns to its original state. This event only applies to nodes that have a value.</para>
          <para>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node belonging to this document is about to be changed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeInserted">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeInserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a node belonging to this document has been inserted into another node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeInserting">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeInserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeInserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event allows the user to do extra checking and, if necessary, throw an exception to stop the operation. If an exception is thrown the XmlDocument returns to its original state.</para>
          <para>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a node belonging to this document is about to be inserted into another node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeRemoved">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a node belonging to this document has been removed from its parent.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeRemoving">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeRemoving" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event allows the user to do extra checking and, if necessary, throw an exception to stop the operation. If an exception is thrown the XmlDocument returns to its original state.</para>
          <para>All nodes created by this document, whether or not they have been inserted into the document, are included in this event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a node belonging to this document is about to be removed from the document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the type of the current node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="OwnerDocument">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlDocument OwnerDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument OwnerDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which the current node belongs.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ParentNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode ParentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode ParentNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the parent node of this node (for nodes that can have parents).</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PreserveWhitespace">
      <MemberSignature Language="C#" Value="public bool PreserveWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>A boolean value that indicates whether this document preserves whitespacenodes when it loads the document content.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property determines how white space is handled during the load and save process.</para>
          <para>If PreserveWhitespace is true before <see cref="M:System.Xml.XmlDocument.Load(System.String)" /> or <see cref="M:System.Xml.XmlDocument.LoadXml(System.String)" /> is called, white space nodes are preserved; otherwise, if this property is false, significant white space is preserved, white space is not.</para>
          <para>If PreserveWhitespace is true before <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> is called, white space in the document is preserved in the output; otherwise, if this property is false, XmlDocument auto-indents the output.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to preserve white space in element content.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode ReadNode(class System.Xml.XmlReader reader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads one XmlNode from the given reader and positions the reader on the next node. This method creates the type of XmlNode matching the <see cref="P:System.Xml.XmlNode.NodeType" /> on which the reader is currently positioned. (If the reader is in the initial state, ReadNode advances the reader to the first node and then operates on that node.) </para>
          <para>If the reader is positioned on the start of an element, ReadNode reads all the attributes and any child nodes, up to and including the end tag of the current node. The XmlNode returned contains the sub-tree representing everything read. The reader is positioned immediately after the end tag.</para>
          <para>ReadNode can also read attributes, but in this case it does not advance the reader to the next attribute. This allows you to write the following C# code: </para>
          <code> XmlDocument doc = new XmlDocument();
 while (reader.MoveToNextAttribute())
 {
   XmlNode a = doc.ReadNode(reader);
   // Do some more processing.
 }</code>
          <para>ReadNode does consume the attribute value though, which means after calling ReadNode on an attribute, <see cref="M:System.Xml.XmlReader.ReadAttributeValue" /> returns false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an <see cref="T:System.Xml.XmlNode" /> object based on the information in the <see cref="T:System.Xml.XmlReader" />. The reader must be positioned on a node or attribute.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new XmlNode or null if no more nodes exist.</para>
        </returns>
        <param name="reader">
          <attribution license="cc4" from="Microsoft" modified="false" />The XML source </param>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (System.IO.Stream outStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.IO.Stream outStream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>White space is preserved only if <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> is set to true.</para>
          <para>The XmlDeclaration of the current XmlDocument object determines the encoding attribute in the saved document. The value of the encoding attribute is taken from the <see cref="P:System.Xml.XmlDeclaration.Encoding" /> property. If the XmlDocument does not have an XmlDeclaration, or if the XmlDeclaration does not have an encoding attribute, the saved document will not have one either.</para>
          <para>When the document is saved, xmlns attributes are generated to persist the node identity (local name + namespace URI) correctly. For example, the following C# code </para>
          <code> XmlDocument doc = new XmlDocument();
 doc.AppendChild(doc.CreateElement("item","urn:1"));
 doc.Save(Console.Out);</code>
          <para>generates this xmls attribute &lt;item xmls="urn:1"/&gt;.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
          <para>Note that only the <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> method enforces a well-formed XML document. All other <unmanagedCodeEntityReference>Save</unmanagedCodeEntityReference> overloads only guarantee a well-formed fragment.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the XML document to the specified stream.</para>
        </summary>
        <param name="outStream">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream to which you want to save. </param>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.IO.TextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The encoding on the TextWriter determines the encoding that is written out (The encoding of the XmlDeclaration node is replaced by the encoding of the TextWriter). If there was no encoding specified on the TextWriter, the XmlDocument is saved without an encoding attribute.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
          <para>Note that only the <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> method enforces a well-formed XML document. All other <unmanagedCodeEntityReference>Save</unmanagedCodeEntityReference> overloads only guarantee a well-formed fragment.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the XML document to the specified <see cref="T:System.IO.TextWriter" />.</para>
        </summary>
        <param name="writer">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextWriter to which you want to save. </param>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>White space is preserved in the output file only if <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> is set to true.</para>
          <para>The XmlDeclaration of the current XmlDocument object determines the encoding attribute in the saved document. The value of the encoding attribute is taken from the <see cref="P:System.Xml.XmlDeclaration.Encoding" /> property. If the XmlDocument does not have an XmlDeclaration, or if the XmlDeclaration does not have an encoding attribute, the saved document will not have one either.</para>
          <para>When the document is saved, xmlns attributes are generated to persist the node identity (local name + namespace URI) correctly. For example, the following C# code </para>
          <code> XmlDocument doc = new XmlDocument();
 doc.AppendChild(doc.CreateElement("item","urn:1"));
 doc.Save(Console.Out);</code>
          <para>generates this xmls attribute &lt;item xmls="urn:1"/&gt;.</para>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
          <para>Note that only the <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> method enforces a well-formed XML document. All other <unmanagedCodeEntityReference>Save</unmanagedCodeEntityReference> overloads only guarantee a well-formed fragment.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the XML document to the specified file.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />The location of the file where you want to save the document. </param>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>White space is preserved only if <see cref="P:System.Xml.XmlDocument.PreserveWhitespace" /> is set to true.</para>
          <para>The encoding on the XmlWriter determines the encoding that is written out (The encoding of the XmlDeclaration node is replaced by the encoding of the XmlWriter). If there was no encoding specified on the XmlWriter, the XmlDocument is saved without an encoding attribute.</para>
          <para>When the document is saved, xmlns attributes are generated to persist the node identity (LocalName + NamespaceURI) correctly. For example, the following C# code </para>
          <code> XmlDocument doc = new XmlDocument();
 doc.AppendChild(doc.CreateElement("item","urn:1"));
 doc.Save(Console.Out);</code>
          <para>generates this xmls attribute: </para>
          <code>&lt;item
    xmls="urn:1"/&gt;</code>
          <para>This method is a Microsoft extension to the Document Object Model (DOM).</para>
          <para>Note that only the <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> method enforces a well-formed XML document. All other <unmanagedCodeEntityReference>Save</unmanagedCodeEntityReference> overloads only guarantee a well-formed fragment.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter" />.</para>
        </summary>
        <param name="w">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlWriter to which you want to save. </param>
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The PSVI contents of this property are set after the node has been validated.</para>
          <para>This property is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the Post-Schema-Validation-Infoset (PSVI) of the node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object associated with an <see cref="T:System.Xml.XmlDocument" /> object are used for validation when the <see cref="Overload:System.Xml.XmlDocument.Validate" /> method of an <see cref="T:System.Xml.XmlDocument" /> is executed.</para>
          <para>When an <see cref="T:System.Xml.XmlDocument" /> object is initialized with XML data from an <see cref="T:System.Xml.XmlReader" /> object, the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object is loaded from the <see cref="P:System.Xml.XmlReaderSettings.Schemas" /> property of the <see cref="T:System.Xml.XmlReader" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object associated with this <see cref="T:System.Xml.XmlDocument" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IHasXmlChildNode.LastLinkedChild">
      <MemberSignature Language="C#" Value="System.Xml.XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlLinkedNode System.Xml.IHasXmlChildNode.LastLinkedChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlLinkedNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Validate(class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)" /> method validates the XML data in the <see cref="T:System.Xml.XmlDocument" /> against the schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property. The <see cref="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)" /> method performs infoset augmentation. Specifically, after successful validation, schema defaults are applied, text values are converted to atomic values as necessary, and type information is associated with validated information items. The result is a previously un-typed XML sub-tree in the <see cref="T:System.Xml.XmlDocument" /> replaced with a typed sub-tree.</para>
          <para>The following are important notes to consider when using the <see cref="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)" /> method.</para>
          <list type="bullet">
            <item>
              <para>Schema location hints like xsi:schemaLocation or xsi:noNamespaceSchemaLocation are ignored.</para>
            </item>
            <item>
              <para>Inline schemas are ignored.</para>
            </item>
            <item>
              <para>If schema validation errors occur during validation the <see cref="T:System.Xml.XmlDocument" /> becomes partially validated with some nodes with correct type information and some without.</para>
            </item>
            <item>
              <para>The validation process includes checking for uniqueness and reference constraints (xs:ID, xs:IDREF, xs:key, xs:keyref, and xs:unique).</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Validates the <see cref="T:System.Xml.XmlDocument" /> against the XML Schema Definition Language (XSD) schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</para>
        </summary>
        <param name="validationEventHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Validate(class System.Xml.Schema.ValidationEventHandler validationEventHandler, class System.Xml.XmlNode nodeToValidate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="nodeToValidate" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)" /> method validates the XML data in the <see cref="T:System.Xml.XmlNode" /> object against the schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property. The <see cref="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)" /> method performs infoset augmentation. Specifically, after successful validation, schema defaults are applied, text values are converted to atomic values as necessary, and type information is associated with validated information items. The result is a previously un-typed XML sub-tree in the <see cref="T:System.Xml.XmlDocument" /> replaced with a typed sub-tree.</para>
          <para>The following are important notes to consider when using the <see cref="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)" /> method.</para>
          <list type="bullet">
            <item>
              <para>Schema location hints like xsi:schemaLocation or xsi:noNamespaceSchemaLocation are ignored.</para>
            </item>
            <item>
              <para>Inline schemas are ignored.</para>
            </item>
            <item>
              <para>If schema validation errors occur during validation the <see cref="T:System.Xml.XmlDocument" /> becomes partially validated with some nodes with correct type information and some without.</para>
            </item>
          </list>
          <para>If the node to validate is the root node, the validation process includes checking for uniqueness and reference constraints (xs:ID, xs:IDREF, xs:key, xs:keyref, and xs:unique); otherwise, uniqueness and reference constraints are omitted.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Validates the <see cref="T:System.Xml.XmlNode" /> object specified against the XML Schema Definition Language (XSD) schemas in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</para>
        </summary>
        <param name="validationEventHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
        <param name="nodeToValidate">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlNode" /> object created from an <see cref="T:System.Xml.XmlDocument" /> to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="WriteContentTo">
      <MemberSignature Language="C#" Value="public override void WriteContentTo (System.Xml.XmlWriter xw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteContentTo(class System.Xml.XmlWriter xw) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xw" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <see cref="P:System.Xml.XmlDocument.InnerXml" /> property.</para>
          <para>The <see cref="P:System.Xml.XmlDeclaration.Encoding" /> property determines the encoding that is written out. If the Encoding property does not have a value, the XmlDocument is written out without an encoding attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves all the children of the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</para>
        </summary>
        <param name="xw">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlWriter to which you want to save. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <see cref="P:System.Xml.XmlNode.OuterXml" /> property.</para>
          <para>The <see cref="P:System.Xml.XmlDeclaration.Encoding" /> property determines the encoding that is written out. If the Encoding property does not have a value, the XmlDocument is written out without an encoding attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</para>
        </summary>
        <param name="w">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlWriter to which you want to save. </param>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>An <see cref="T:System.Xml.XmlResolver" /> object to resolve external resources, or null to prohibit to resolve external resources.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The XmlResolver can be used to load DTDs or expand entity references. Using the <see cref="P:System.Xml.XmlResolver.Credentials" /> property, you can set credentials on the XmlResolver to access resources stored on a secure network resource.</para>
          <list type="bullet">
            <item>
              <para>If the document was not loaded using an <see cref="T:System.Xml.XmlReader" /> (that is, if it was loaded using a stream, file, and so on) the XmlResolver on the XmlDocument is always used.</para>
            </item>
            <item>
              <para>If the document was loaded with an <see cref="T:System.Xml.XmlTextReader" />, the resolver on the XmlTextReader is used to resolve any DTD references in the DocumentType node. The resolver on the XmlDocument is used to expand any entity references.</para>
            </item>
            <item>
              <para>If the document was loaded with an <see cref="T:System.Xml.XmlValidatingReader" />, the resolver on the XmlDocument is never used.</para>
            </item>
            <item>
              <para>If the document was loaded with a class that extends XmlReader and the XmlReader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns false), the XmlResolver on the XmlDocument is used to resolve any references in the DocumentType node and to expand any entity references.</para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>If the XmlDocument is loaded using an <see cref="T:System.Xml.XmlReader" /> which had an XmlResolver set to it, the XmlResolver on the XmlReader is not cached by the XmlDocument after <see cref="M:System.Xml.XmlDocument.Load(System.String)" /> completes.</para>
          </block>
          <para>In version 1.1 of the.NET Framework, if this property is not set, the trust level of the application determines the default behavior.</para>
          <para>Fully trusted code: The document uses a default <see cref="T:System.Xml.XmlUrlResolver" /> with no user credentials. If authentication is required to access a network resource, use the XmlResolver property to specify an XmlResolver with the necessary credentials.</para>
          <para>Semi-trusted code: The XmlResolver property is set to null. External resources are not resolved.</para>
          <para>For more information on security and the XmlResolver property, see <format type="text/html"><a href="AD3FA320-4B8F-4E5C-B549-01157591007A">[&lt;topic://cpconresolvingexternalresources&gt;]</a></format>.</para>
          <para>This property is a Microsoft extension to the Document Object Model (DOM).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the <see cref="T:System.Xml.XmlResolver" /> to use for resolving external resources.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>