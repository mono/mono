<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlConvert" FullName="System.Xml.XmlConvert" FullNameSP="System_Xml_XmlConvert" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public XmlConvert extends System.Object" />
  <TypeSignature Language="C#" Value="public class XmlConvert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlConvert extends System.Object" />
  <MemberOfLibrary>XML</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Xml.XmlConvert" /> class is functionally equivalent to the <see cref="T:System.Convert" /> class, but it supports XML standards. The type system is based on the XML Schema definition language (XSD) schema type, and the values returned are always locale-independent.</para>
      <format type="text/html">
        <h2>Encoding and decoding</h2>
      </format>
      <para>Element and attribute names or ID values are limited to a range of XML characters according to the W3C <see cref="http://www.w3.org/TR/2006/REC-xml-20060816/">XML 1.0 recommendation</see>. When names contain invalid characters, you can use the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.DecodeName(System.String)" /> methods in this class to translate them into valid XML names.</para>
      <para>For example, if you want to use the column heading "Order Detail" in a database, the database allows the space between the two words. However, in XML, the space between "Order" and "Detail" is considered an invalid XML character. You have to convert it into an escaped hexadecimal encoding and decode it later.</para>
      <para>You can use the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> method with the <see cref="T:System.Xml.XmlWriter" /> class to ensure the names being written are valid XML names. The following C# code converts the name "Order Detail" into a valid XML name and writes the element &lt;Order_0x0020_Detail&gt;My order&lt;/Order_0x0020_Detail&gt;.</para>
      <code> writer.WriteElementString(XmlConvert.EncodeName("Order Detail"),"My order");
</code>
      <para>The following <see cref="T:System.Xml.XmlConvert" /> methods perform encoding and decoding.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Method</para>
            </term>
            <description>
              <para>Description</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" />
            </para>
          </term>
          <description>
            <para>Takes a name and returns the encoded name along with any invalid character that is replaced by an escape string. This method allows colons in any position, which means that the name may still be invalid according to the W3C <see cref="www.w3.org/TR/REC-xml-names">Namespaces in XML 1.0 recommendation</see>.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Xml.XmlConvert.EncodeNmToken(System.String)" />
            </para>
          </term>
          <description>
            <para>Takes a name and returns the encoded name.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" />
            </para>
          </term>
          <description>
            <para>Same as <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> except that it also encodes the colon character, guaranteeing that the name can be used as the LocalName part of a namespace-qualified name.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Xml.XmlConvert.DecodeName(System.String)" />
            </para>
          </term>
          <description>
            <para>Reverses the transformation for all the encoding methods. </para>
          </description>
        </item>
      </list>
      <format type="text/html">
        <h2>Name validation</h2>
      </format>
      <para>The <see cref="T:System.Xml.XmlConvert" /> class contains two methods that check the characters in an element or attribute name and verify that the name conforms to the rules set by the W3C <see cref="http://www.w3.org/TR/2006/REC-xml-20060816/">XML 1.0 recommendation</see>:  </para>
      <list type="bullet">
        <item>
          <para>
            <see cref="M:System.Xml.XmlConvert.VerifyName(System.String)" /> checks the characters and verifies that the name is valid. The method returns the name if it's valid, and throws an exception if it isn't.</para>
        </item>
        <item>
          <para>
            <see cref="M:System.Xml.XmlConvert.VerifyNCName(System.String)" /> performs the same validation, but accepts non-qualified names.</para>
        </item>
      </list>
      <para>The <see cref="T:System.Xml.XmlConvert" /> contains additional methods that validate tokens, white-space characters, public IDs, and other strings.</para>
      <format type="text/html">
        <h2>Data type conversion</h2>
      </format>
      <para>
        <see cref="T:System.Xml.XmlConvert" /> also provides methods that enable you to convert data from a string to a strongly typed data type. For example, the <see cref="Overload:System.Xml.XmlConvert.ToDateTime" /> method converts a string to its <see cref="T:System.DateTime" /> equivalent. This is useful because most methods in the <see cref="T:System.XmlReader" /> class return data as a string. After the data is read, it can be converted to the proper data type before being used. The <see cref="Overload:System.Xml.XmlConvert.ToString" /> overloads provide the complementary operation by converting strongly typed data to strings. For example, this is useful when you want to add the data to text boxes on a webpage. Locale settings are not taken into account during data conversion. The data types are based on the XML Schema (XSD) data types. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Encodes and decodes XML names, and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types, the values returned are locale-independent.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="family specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="public XmlConvert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlConvert" /> class. </para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DecodeName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string DecodeName(string name)" />
      <MemberSignature Language="C#" Value="public static string DecodeName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DecodeName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the valid and invalid
      character formats for decoding.</para>
          <code lang="C#">using System;
using System.Xml;

public class App {

  public static void Main() {

    Console.WriteLine( "{0} : {1} : {2}",
      // _x0069_ decodes to i
      XmlConvert.DecodeName("Order #1_x0069_"),

      // missing beginning _
      XmlConvert.DecodeName("Order #1x0069_"),

      // short form
      XmlConvert.DecodeName("Order #1_x69_") ); 
  }
}
   </code>
          <para>The output is</para>
          <para>Order #1i : Order #1x0069_ : Order #1_x69_</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The names are decoded using the following rules: </para>
          <list type="bullet">
            <item>
              <para>Names are decoded from left to right.</para>
            </item>
            <item>
              <para>Any sequence _x <paramref name="HHHH_" /> (where HHHH stands for a valid, four digit hexadecimal UCS-2 code) that has not been decoded is transformed into the corresponding Unicode 2.1 (Unicode 3.0 if supported by the application) character.</para>
            </item>
            <item>
              <para>No shortforms are recognized. They are passed on without translation. For example, _x20_ or __ are not decoded.</para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The actual encoding of the character is application-specific. For example, Order_x0020_Details becomes Order Details. Even escaped characters that are invalid in XML names will be recognized and decoded.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Decodes a name. This method does the reverse of the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The decoded name.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to be transformed. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="EncodeLocalName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string EncodeLocalName(string name)" />
      <MemberSignature Language="C#" Value="public static string EncodeLocalName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EncodeLocalName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example compares the <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" />, <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" />, and <see cref="M:System.Xml.XmlConvert.EncodeNmToken(System.String)" /> methods when the name to be encoded is "7:+".</para>
          <code lang="C#">using System;
using System.Xml;

public class App {

  public static void Main() {

    Console.WriteLine( "LocalName  {0}",
      XmlConvert.EncodeLocalName("7:+") ); 
    Console.WriteLine( "Name  {0}",
      XmlConvert.EncodeName("7:+") );
    Console.WriteLine( "NmToken  {0}",
      XmlConvert.EncodeNmToken("7:+") );
  }
}
</code>
          <para>The output is</para>
          <para>LocalName _x0037__x003A__x002B_</para>
          <para>Name _x0037_:_x002B_</para>
          <para>NmToken 7:_x002B_</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is similar to the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> method except that it encodes the colon character, which guarantees that the name can be used as the local name part of a namespace qualified name.</para>
          <para>For example, if you passed this method the invalid name a:b, it returns a_x003a_b, which is a valid local name.</para>
          <para>If <paramref name="name" /> is null or String.Empty then you get the same value returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the name to a valid XML local name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The encoded name.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to be encoded. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="EncodeName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string EncodeName(string name)" />
      <MemberSignature Language="C#" Value="public static string EncodeName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EncodeName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>See the <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> method for an example comparing the <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" />, <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" />, and <see cref="M:System.Xml.XmlConvert.EncodeNmToken(System.String)" /> methods.</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method translates invalid characters, such as spaces or half-width Katakana, that need to be mapped to XML names without the support or presence of schemas. The invalid characters are translated into escaped numeric entity encodings.</para>
          <para>The escape character is "_". Any XML name character that does not conform to the <see cref="http://www.w3.org/TR/2006/REC-xml-20060816/">XML 1.0 spec (fourth edition) recommendation</see> is escaped as _xHHHH_. The HHHH string stands for the four-digit hexadecimal UCS-2 code for the character in most significant bit first order. For example, the name Order Details is encoded as Order_x0020_Details.</para>
          <para>The underscore character does not need to be escaped unless it is followed by a character sequence that together with the underscore can be misinterpreted as an escape sequence when decoding the name. For example, Order_Details is not encoded, but Order_x0020_ is encoded as Order_x005f_x0020_. No shortforms are allowed. For example, the forms _x20_ and __ are not generated.</para>
          <para>This method guarantees the name is valid according to the XML specification. It allows colons in any position, which means the name may still be invalid according to the <see cref="www.w3.org/TR/REC-xml-names">W3C Namespace Specification</see>. To guarantee it is a valid namespace qualified name use <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> for the prefix and local name parts and join the result with a colon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the name to a valid XML name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the name with any invalid characters replaced by an escape string.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />A name to be translated. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="EncodeNmToken">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string EncodeNmToken(string name)" />
      <MemberSignature Language="C#" Value="public static string EncodeNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EncodeNmToken(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>See the <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> method for an example comparing the
<see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" />, <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" />, and <see cref="M:System.Xml.XmlConvert.EncodeNmToken(System.String)" /> methods.</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method guarantees that the name is valid according to the XML specification. For example, if you passed this method the invalid name 70+, it returns 70_x002b_ which is a valid XML name.</para>
          <para>If <paramref name="name" /> is null or String.Empty then you get the same value returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Verifies the name is valid according to the XML specification.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The encoded name.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to be encoded. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsNCNameChar">
      <MemberSignature Language="C#" Value="public static bool IsNCNameChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNCNameChar(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks whether the passed-in character is a valid non-colon character type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns true if the character is a valid non-colon character type; otherwise, false.</para>
        </returns>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to verify as a non-colon character.</param>
      </Docs>
    </Member>
    <Member MemberName="IsPublicIdChar">
      <MemberSignature Language="C#" Value="public static bool IsPublicIdChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPublicIdChar(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in character instance if the character in the argument is a valid public id character, otherwise null.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in character if the character is a valid public id character, otherwise null.</para>
        </returns>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Char" /> object to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="IsStartNCNameChar">
      <MemberSignature Language="C#" Value="public static bool IsStartNCNameChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsStartNCNameChar(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For details about allowed characters, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=147985">XML 1.0 spec (fourth edition)</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks if the passed-in character is a valid Start Name Character type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character is a valid Start Name Character type; otherwise, false. </para>
        </returns>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceChar">
      <MemberSignature Language="C#" Value="public static bool IsWhitespaceChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhitespaceChar(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For details about allowed characters, see the <see cref="http://go.microsoft.com/fwlink/?LinkID=147985">XML 1.0 spec (fourth edition)</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks if the passed-in character is a valid XML whitespace character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the passed in character is a valid XML whitespace character; otherwise false.</para>
        </returns>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="IsXmlChar">
      <MemberSignature Language="C#" Value="public static bool IsXmlChar (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsXmlChar(char ch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For details about allowed characters, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=147985">XML 1.0 spec (fourth edition)</see> recommendation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks if the passed-in character is a valid XML character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the passed in character is a valid XML character; otherwise false.</para>
        </returns>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="IsXmlSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsXmlSurrogatePair (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsXmlSurrogatePair(char lowChar, char highChar) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks if the passed-in surrogate pair of characters is a valid XML character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the passed in surrogate pair of characters is a valid XML character; otherwise false.</para>
        </returns>
        <param name="lowChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The surrogate character to validate.</param>
        <param name="highChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The surrogate character to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool ToBoolean(string s)" />
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not represent a <see cref="T:System.Boolean" /> value.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid strings are "1" or "true" for true and "0" or "false" for false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Boolean value, that is, true or false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int8 ToByte(string s)" />
      <MemberSignature Language="C#" Value="public static byte ToByte (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.Byte.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Byte equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.Char ToChar(string s)" />
      <MemberSignature Language="C#" Value="public static char ToChar (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.Char.Parse(System.String)" />(<paramref name="s" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> contains more than one character.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Char representing the single character.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string containing a single character to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime ToDateTime(string s)" />
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="s" /> is <see cref="F:System.String.Empty" /> or is not in the correct format.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="M:System.Xml.XmlConvert.ToDateTime(System.String)" /> method is obsolete in the 2.0 version of the .NET Framework and has been replaced by the <see cref="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A DateTime equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime ToDateTime(string s, string format)" />
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string s, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string s, string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />(<paramref name="s" />, <paramref name="format" />, <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />, <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />).</para>
          <para>Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="s" /> or <paramref name="format" /> is <see cref="F:System.String.Empty" /> .</para>
          <para>-or-</para>
          <para>
            <paramref name="s" /> does not contain a date and time that corresponds to <paramref name="format" />.</para>
        </exception>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. </param>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A DateTime equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime ToDateTime(string s, class System.String[] formats)" />
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string s, string[] formats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string s, string[] formats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="s" /> or an element of <paramref name="formats" /> is <see cref="F:System.String.Empty" />.</para>
          <para>-or-</para>
          <para>
            <paramref name="s" /> does not contain a date and time that corresponds to any of the elements of <paramref name="formats" />.</para>
        </exception>
        <example>
          <para>The following example converts a <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> and writes the
   result to the console.</para>
          <code lang="C#">using System;
using System.Xml;

public class App {

  public static void Main() {

    String someDate = "1966-09-19T03:45:11Z";
    String[] datetimeFormats = new String[]
      {"HH:mm:ss", "yyyy-MM-ddTHH:mm:ssZ"};
    DateTime dateTime =
      XmlConvert.ToDateTime(someDate, datetimeFormats);
    Console.WriteLine( "{0}", dateTime.ToString() );
  }
}
</code>
          <para>The output is</para>
          <para>9/18/1966 8:45:11 PM</para>
        </example>
        <param name="formats">
          <attribution license="cc4" from="Microsoft" modified="false" />An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method allows multiple formats for the string to be validated against.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A DateTime equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
        <param name="formats">
          <attribution license="cc4" from="Microsoft" modified="false" />An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string s, System.Xml.XmlDateTimeSerializationMode dateTimeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string s, valuetype System.Xml.XmlDateTimeSerializationMode dateTimeOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="dateTimeOption" Type="System.Xml.XmlDateTimeSerializationMode" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.DateTime" /> equivalent of the <see cref="T:System.String" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.String" /> value to convert.</param>
        <param name="dateTimeOption">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.</param>
      </Docs>
    </Member>
    <Member MemberName="ToDateTimeOffset">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ToDateTimeOffset (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ToDateTimeOffset(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When more than seven digits are specified for fractional seconds, the value is rounded. For example, 00000004 becomes 0000000 and 00000005 becomes 0000001.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert.</param>
      </Docs>
    </Member>
    <Member MemberName="ToDateTimeOffset">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ToDateTimeOffset (string s, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ToDateTimeOffset(string s, string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the offset specified within the input string will cause an overflow in the deserialized representation of the DateTimeOffset, a FormatException is thrown.</para>
          <para>When more than seven digits are specified for fractional seconds, the value is rounded. For example, 00000004 becomes 0000000 and 00000005 becomes 0000001.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert.</param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The format from which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against this format.</param>
      </Docs>
    </Member>
    <Member MemberName="ToDateTimeOffset">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ToDateTimeOffset (string s, string[] formats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ToDateTimeOffset(string s, string[] formats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the offset specified within the input string will cause an overflow in the deserialized representation of the DateTimeOffset, a FormatException is thrown.</para>
          <para>When more than seven digits are specified for fractional seconds, the value is rounded. For example, 00000004 becomes 0000000 and 00000005 becomes 0000001.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert.</param>
        <param name="formats">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of formats from which <paramref name="s" /> can be converted. Each format in <paramref name="formats" /> can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against one of these formats.</param>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal ToDecimal(string s)" />
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.Decimal.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Decimal equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 ToDouble(string s)" />
      <MemberSignature Language="C#" Value="public static double ToDouble (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="s" /> is INF or -INF, this method returns Double.PositiveInfinity or Double.NegativeInfinity respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Double equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="ToGuid">
      <MemberSignature Language="C#" Value="public static Guid ToGuid (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid ToGuid(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Guid equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int16 ToInt16(string s)" />
      <MemberSignature Language="C#" Value="public static short ToInt16 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.Int16.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An Int16 equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 ToInt32(string s)" />
      <MemberSignature Language="C#" Value="public static int ToInt32 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.Int32.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An Int32 equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int64 ToInt64(string s)" />
      <MemberSignature Language="C#" Value="public static long ToInt64 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <see cref="M:System.Int64.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An Int64 equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int8 ToSByte(string s)" />
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToInt16(System.String)" />(<see cref="T:System.String" />).</para>
          <para>This method calls <see cref="M:System.SByte.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An SByte equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float32 ToSingle(string s)" />
      <MemberSignature Language="C#" Value="public static float ToSingle (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="s" /> is INF or -INF, this method returns Single.PositiveInfinity or Single.NegativeInfinity respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Single equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(bool value)" />
      <MemberSignature Language="C#" Value="public static string ToString (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Boolean, that is, "true" or "false".</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(unsigned int8 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Byte" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Byte.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(valuetype System.Char value)" />
      <MemberSignature Language="C#" Value="public static string ToString (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Char.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(valuetype System.DateTime value)" />
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="M:System.Xml.XmlConvert.ToString(System.DateTime)" /> method is obsolete in the 2.0 version of the .NET Framework and has been replaced with the <see cref="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the DateTime in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTimeOffset value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.DateTimeOffset" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(decimal value)" />
      <MemberSignature Language="C#" Value="public static string ToString (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Decimal.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(float64 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="value" /> is Double.PositiveInfinity or Double.NegativeInfinity, this method returns the string INF or -INF respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Double.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Guid value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Guid.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(int16 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Int16.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(int32 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Int32.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(int64 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Int64.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(int8 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToString(System.Boolean)" />(<see cref="T:System.Int16" />).</para>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the SByte.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(float32 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="value" /> is Single.PositiveInfinity or Single.NegativeInfinity, this method returns the string INF or -INF respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the Single.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(valuetype System.TimeSpan value)" />
      <MemberSignature Language="C#" Value="public static string ToString (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.TimeSpan value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <example>
          <para> The following example converts a <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" /> and writes the result
   to the console.</para>
          <code lang="C#">using System;
using System.Xml;

public class App {

  public static void Main() {

    TimeSpan timeSpan = new TimeSpan(3, 11, 59, 6, 128);
    Console.WriteLine( "{0}",
      XmlConvert.ToString(timeSpan) );
  }
}
</code>
          <para>The output is</para>
          <para>P3DT11H59M6.128S</para>
        </example>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the TimeSpan.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(unsigned int16 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Xml.XmlConvert.ToString(System.Boolean)" />(<see cref="T:System.Int32" />).</para>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.UInt16" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the UInt16.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToString(System.Boolean)" />(<see cref="T:System.Int64" />).</para>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> ).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the UInt32.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public static string ToString (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToString(System.Boolean)" />(<see cref="T:System.Decimal" />).</para>
          <para>This method calls <paramref name="value" />.ToString(<see langword="null" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the UInt64.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ToString(valuetype System.DateTime value, string format)" />
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value, string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para> This method calls <paramref name="value" />.ToString(<paramref name="format" />, <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the DateTime in the specified format.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value, System.Xml.XmlDateTimeSerializationMode dateTimeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value, valuetype System.Xml.XmlDateTimeSerializationMode dateTimeOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="dateTimeOption" Type="System.Xml.XmlDateTimeSerializationMode" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.String" /> equivalent of the <see cref="T:System.DateTime" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.DateTime" /> value to convert.</param>
        <param name="dateTimeOption">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify how to treat the <see cref="T:System.DateTime" /> value.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTimeOffset value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTimeOffset value, string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" /> in the specified format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.String" /> representation in the specified format of the supplied <see cref="T:System.DateTimeOffset" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The format to which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)</param>
      </Docs>
    </Member>
    <Member MemberName="ToTimeSpan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.TimeSpan ToTimeSpan(string s)" />
      <MemberSignature Language="C#" Value="public static TimeSpan ToTimeSpan (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ToTimeSpan(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format to represent a <see cref="T:System.TimeSpan" /> value.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A TimeSpan equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 ToUInt16(string s)" />
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToInt32(System.String)" />(<see cref="T:System.String" />).</para>
          <para>This method calls <see cref="M:System.UInt16.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A UInt16 equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int32 ToUInt32(string s)" />
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToInt64(System.String)" />(<see cref="T:System.String" />).</para>
          <para>This method calls <see cref="M:System.UInt32.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A UInt32 equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int64 ToUInt64(string s)" />
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Xml.XmlConvert.ToDecimal(System.String)" />(<see cref="T:System.String" />).</para>
          <para>This method calls <see cref="M:System.UInt64.Parse(System.String)" />(<paramref name="s" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />|<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />|<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" />).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A UInt64 equivalent of the string.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="VerifyName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string VerifyName(string name)" />
      <MemberSignature Language="C#" Value="public static string VerifyName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="name" /> is not a valid XML name.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used with the <see cref="T:System.Xml.XmlWriter" /> class in the following manner.</para>
          <code> try{
   writer.WriteStartElement(XmlConvert.VerifyName("item"),"bar");
 }
 catch(Exception e)
 {
   Console.WriteLine("error");
 }</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name, if it is a valid XML name.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to verify. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="VerifyNCName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string VerifyNCName(string name)" />
      <MemberSignature Language="C#" Value="public static string VerifyNCName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNCName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <para>If <paramref name="name" /> contains a colon, <see cref="T:System.Xml.XmlException" /> is
   thrown.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="name" /> is not a valid XML qualified name.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Verifies that the name is a valid NCName according to the W3C Extended Markup Language recommendation. An NCName is a name that cannot contain a colon.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name, if it is a valid NCName.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name to verify. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="VerifyNMTOKEN">
      <MemberSignature Language="C#" Value="public static string VerifyNMTOKEN (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNMTOKEN(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method ensures that the name token follows the proper syntax for a valid NMTOKEN. It can be used in the following manner:</para>
          <code>try {
  writer.WriteStartElement(XmlConvert.VerifyNMTOKEN("abc"),"book");
}
catch(Exception e) {
  Console.WriteLine("error");
}</code>
          <para>For more information on the NMTOKEN data type, see http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/#NMTOKEN.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name token, if it is a valid NMTOKEN.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The string you wish to verify.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyPublicId">
      <MemberSignature Language="C#" Value="public static string VerifyPublicId (string publicId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyPublicId(string publicId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicId" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No other values than the passed in argument should be returned. The characters valid for public id do not vary between XML editions, so no XmlVersion overload is required. </para>
          <para>See <see cref="http://go.microsoft.com/fwlink/?LinkID=147985">XML 1.0 spec (fourth edition)</see> production [13] PublidChar for details on the allowed characters</para>
          <para>If the parameter is null, an ArgumentNullException will be thrown. If any of the characters are not valid public id characters, an XmlException is thrown with information about the first invalid character encountered.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed in string instance if all the characters in the string argument are valid public id characters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in string if all the characters in the argument are valid public id characters.</para>
        </returns>
        <param name="publicId">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.String" /> that contains the id to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyTOKEN">
      <MemberSignature Language="C#" Value="public static string VerifyTOKEN (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyTOKEN(string token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method ensures that the name token follows the proper syntax for a valid token. It can be used in the following manner:</para>
          <code>try {
  writer.WriteStartElement(XmlConvert.VerifyTOKEN("abc"),"book");
}
catch(Exception e) {
  Console.WriteLine("error");
}</code>
          <para>For more information on tokens, see <see cref="http://go.microsoft.com/fwlink/?LinkId=103183">http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/#token</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The token, if it is a valid token.</para>
        </returns>
        <param name="token">
          <attribution license="cc4" from="Microsoft" modified="false" />The string value you wish to verify.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyWhitespace">
      <MemberSignature Language="C#" Value="public static string VerifyWhitespace (string content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyWhitespace(string content) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No other values than the passed in argument should be returned. The characters that are valid for whitespace do not vary between XML editions, so no xml version overload is required.</para>
          <para>See <see cref="http://go.microsoft.com/fwlink/?LinkID=147985">XML 1.0 spec (fourth edition)</see> production [3] S for details on the allowed characters.</para>
          <para>If the parameter is null, an ArgumentNullException will be thrown. </para>
          <para>If any of the characters are not valid whitespace characters, an XmlException is thrown with information about the first invalid character encountered.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise null.</para>
        </returns>
        <param name="content">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.String" /> to verify.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyXmlChars">
      <MemberSignature Language="C#" Value="public static string VerifyXmlChars (string content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyXmlChars(string content) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No other values than the passed in argument should be returned. See <see cref="http://go.microsoft.com/fwlink/?LinkID=147985">XML 1.0 spec (fourth edition)</see> production [2] Char for details on the allowed characters.</para>
          <para>If the parameter is null, an ArgumentNullException will be thrown. If any of the characters are not valid xml characters, an XmlException is thrown with information on the first invalid character encountered.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise null. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise null.</para>
        </returns>
        <param name="content">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.String" /> that contains characters to verify.</param>
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>