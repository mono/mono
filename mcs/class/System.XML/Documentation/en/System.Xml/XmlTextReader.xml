<?xml version="1.0" encoding="utf-8"?>
<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader" FullNameSP="System_Xml_XmlTextReader" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public XmlTextReader extends System.Xml.XmlReader" />
  <TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, Mono.Xml.IHasXmlParserContext, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class Mono.Xml.IHasXmlParserContext, class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <MemberOfLibrary>XML</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Mono.Xml.IHasXmlParserContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <block subset="none" type="note">
        <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
      </block>
      <para>
        <see cref="T:System.Xml.XmlTextReader" /> provides forward-only, read-only access to a stream of XML data. The current node refers to the node on which the reader is positioned. The reader is advanced using any of the read methods and properties reflect the value of the current node.</para>
      <para>This class implements <see cref="T:System.Xml.XmlReader" /> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations. XmlTextReader provides the following functionality: </para>
      <list type="bullet">
        <item>
          <para>Enforces the rules of well-formed XML.</para>
        </item>
        <item>
          <para>XmlTextReader does not provide data validation.</para>
        </item>
        <item>
          <para>Checks that DocumentType nodes are well-formed. XmlTextReader checks the DTD for well-formedness, but does not validate using the DTD.</para>
        </item>
        <item>
          <para>For nodes where <see cref="P:System.Xml.XmlTextReader.NodeType" /> is XmlNodeType.EntityReference, a single empty EntityReference node is returned (that is, the <see cref="P:System.Xml.XmlTextReader.Value" /> property is String.Empty). </para>
        </item>
      </list>
      <block subset="none" type="note">
        <para>The actual declarations of entities in the DTD are called Entity nodes. When you refer to these nodes in your data, they are called EntityReference nodes.</para>
      </block>
      <list type="bullet">
        <item>
          <para>Does not expand default attributes.</para>
        </item>
      </list>
      <para>Because the XmlTextReader does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</para>
      <para>To perform data validation, use a validating <see cref="T:System.Xml.XmlReader" />. For more information, see <format type="text/html"><a href="2958dbbd-60ca-4447-9b16-72f41d223486">Validating XML Data with XmlReader</a></format>.</para>
      <para>To read XML data from an <see cref="T:System.Xml.XmlDocument" />, use <see cref="T:System.Xml.XmlNodeReader" />.</para>
      <para>XmlTextReader throws an <see cref="T:System.Xml.XmlException" /> on XML parse errors. After an exception is thrown the state of the reader is not predictable. For example, the reported node type may be different than the actual node type of the current node. Use the <see cref="P:System.Xml.XmlTextReader.ReadState" /> property to check whether a reader is in error state.</para>
      <para>For further discussion on the XmlReader classes, see <format type="text/html"><a href="3029834C-A27E-4331-B7AA-711924062182">Reading XML with the XmlReader</a></format>.</para>
      <format type="text/html">
        <h2>Security Considerations</h2>
      </format>
      <para>The following are things to consider when using the <see cref="T:System.Xml.XmlTextReader" /> class.</para>
      <list type="bullet">
        <item>
          <para>Exceptions thrown the <see cref="T:System.Xml.XmlTextReader" /> can disclose path information that you do not want bubbled up to the application. Your applications must catch exceptions and process them appropriately.</para>
        </item>
        <item>
          <para>DTD processing is enabled by default. Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources. Set the <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> property to <see cref="F:System.Xml.DtdProcessing.Prohibit" /> to disable DTD processing.</para>
          <para>If you have DTD processing enabled, you can use the <see cref="T:System.Xml.XmlSecureResolver" /> to restrict the resources that the <see cref="T:System.Xml.XmlTextReader" /> can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application.</para>
        </item>
        <item>
          <para>XML data can include references to external resources such as a DTD file. By default external resources are resolved using an <see cref="T:System.Xml.XmlUrlResolver" /> object with no user credentials. You can secure this further by doing one of the following:</para>
          <list type="bullet">
            <item>
              <para>Restrict the resources that the <see cref="T:System.Xml.XmlTextReader" /> can access by setting the <see cref="P:System.Xml.XmlTextReader.XmlResolver" /> property to an <see cref="T:System.Xml.XmlSecureResolver" /> object.</para>
            </item>
            <item>
              <para>Do not allow the <see cref="T:System.Xml.XmlReader" /> to open any external resources by setting the <see cref="P:System.Xml.XmlTextReader.XmlResolver" /> property to null.</para>
            </item>
          </list>
        </item>
        <item>
          <para>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process. To limit the size of the input that is sent to the <see cref="T:System.Xml.XmlTextReader" />, create a custom IStream implementation and supply it the <see cref="T:System.Xml.XmlTextReader" />.</para>
        </item>
        <item>
          <para>The <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method can be used to handle large streams of data. This method reads a small number of characters at a time instead of allocating a single string for the whole value.</para>
        </item>
        <item>
          <para>By default general entities are not expanded. General entities are expanded when you call the <see cref="M:System.Xml.XmlTextReader.ResolveEntity" /> method.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a reader that provides fast, non-cached, forward-only access to XML data.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="family rtspecialname specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the XmlTextReader.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(class System.IO.Stream input)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The <see cref="T:System.Xml.XmlTextReader" /> decodes the stream using <see cref="T:System.Text.Encoding" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</para>
        </summary>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data to read. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(class System.IO.TextReader input)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>It is assumed that the TextReader is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</para>
        </summary>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader containing the XML data to read. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string url)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="url" /> is <see langword="null" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>If the file is located on a resource that requires access credentials, use the <see cref="P:System.Xml.XmlTextReader.XmlResolver" /> property to specify the necessary credentials.</para>
          <block subset="none" type="note">
            <para>In version 1.1 of the dnprdnshort, partially trusted code cannot set the XmlResolver property. The workaround is to create an <see cref="T:System.Xml.XmlUrlResolver" /> with the necessary credentials, pass the URI to the <see cref="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)" /> method, and then construct the XmlTextReader using the resulting <see cref="T:System.IO.Stream" /> object. The workaround is described in the following C# code.</para>
          </block>
          <code> // Create a resolver with the necessary credentials.
 XmlUrlResolver resolver = new XmlUrlResolver();
 NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);
 resolver.Credentials = nc; 
 // Get a Stream object containing the XML file.
 Uri myUri = new Uri ("http://myServer/data/books.xml");
 Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));
 // Construct a reader using the Stream object.
 XmlTextReader reader = new XmlTextReader(s);</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL for the file containing the XML data. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="family rtspecialname specialname instance void .ctor(class System.Xml.XmlNameTable nt)" />
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nt" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> or <paramref name="nt" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The <see cref="T:System.Xml.XmlTextReader" /> decodes the stream using <see cref="T:System.Text.Encoding" />.</para>
          <para>If you specify a name table, this constructor uses the names defined already in that table.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data to read. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nt" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>It is assumed that the TextReader is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader containing the XML data to read. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string url, class System.IO.Stream input)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data to read. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data to read. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string url, class System.IO.TextReader input)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader containing the XML data to read. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>It is assumed that the TextReader is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader containing the XML data to read. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string url, class System.Xml.XmlNameTable nt)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nt" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="url" /> is <see langword="null" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL for the file containing the XML data to read. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlFragment" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see cref="T:System.Xml.XmlNodeType" />.</exception>
        <param name="fragType">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment can contain. (See table below.) </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</para>
          <para>The following table lists valid values for <paramref name="fragType" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType </para>
                </term>
                <description>
                  <para>Fragment May Contain </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Element</para>
              </term>
              <description>
                <para>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references). </para>
                <para>An XML declaration can also be supplied. This allows you to specify the encoding for the XML fragment, rather than having to set it on the <see cref="T:System.Xml.XmlParserContext" /> object.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute</para>
              </term>
              <description>
                <para>The value of an attribute (the part inside the quotes). </para>
              </description>
            </item>
            <item>
              <term>
                <para>Document</para>
              </term>
              <description>
                <para>The contents of an entire XML document. This enforces document level rules. </para>
              </description>
            </item>
          </list>
          <para>The reader uses the following to determine the encoding of the stream.</para>
          <list type="ordered">
            <item>
              <para>Checks the <see cref="P:System.Xml.XmlParserContext.Encoding" /> property to determine the encoding.</para>
            </item>
            <item>
              <para>If the Encoding property is null, the reader checks for a byte-order mark at the beginning of the stream.</para>
            </item>
            <item>
              <para>If the Encoding property is null, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</para>
        </summary>
        <param name="xmlFragment">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML fragment to parse. </param>
        <param name="fragType">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment can contain. (See table below.) </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> or <paramref name="nt" /> is <see langword="null" />.</exception>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The stream containing the XML data to read. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nt" /> is <see langword="null" />.</exception>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader containing the XML data to read. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>It is assumed that the TextReader is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The TextReader containing the XML data to read. </param>
        <param name="nt">
          <attribution license="cc4" from="Microsoft" modified="false" />The XmlNameTable to use. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context)" />
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlFragment" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see cref="T:System.Xml.XmlNodeType" />.</exception>
        <param name="fragType">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain. (See table below.) </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents. This constructor can handle strings returned from <see cref="M:System.Xml.XmlReader.ReadInnerXml" />.</para>
          <para>The following table lists valid values for <paramref name="fragType" /> and how the reader parses each of the different node types.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNodeType </para>
                </term>
                <description>
                  <para>Fragment May Contain </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Element </para>
              </term>
              <description>
                <para>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references). </para>
                <para>An XML declaration can also be supplied. This allows you to specify the encoding for the XML fragment, rather than having to set it on the <see cref="T:System.Xml.XmlParserContext" /> object.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>The value of an attribute (the part inside the quotes). </para>
              </description>
            </item>
            <item>
              <term>
                <para>Document </para>
              </term>
              <description>
                <para>The contents of an entire XML document. This enforces document level rules. </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</para>
        </summary>
        <param name="xmlFragment">
          <attribution license="cc4" from="Microsoft" modified="false" />The string containing the XML fragment to parse. </param>
        <param name="fragType">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain. (See table below.) </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="ILASM" Value=".property int32 AttributeCount { public hidebysig virtual specialname int32 get_AttributeCount() }" />
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Int32" qualify="true" /> containing the 
   number of attributes on the current node, or zero if the current node does not support attributes.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property is relevant to Element, DocumentType and XmlDeclaration nodes only. (Other node types do not have attributes.) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of attributes on the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="ILASM" Value=".property string BaseURI { public hidebysig virtual specialname string get_BaseURI() }" />
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> The base URI of the current node.
      </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), String.Empty is returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the base URI of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The binary content read methods include the <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />, and <see cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The <see cref="T:System.Xml.XmlTextReader" /> throws a <see cref="T:System.NotSupportedException" /> if the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method is called.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This is a change in the dnprdnext release. In previous versions, the XmlTextReader class could not resolve entities and CanResolveEntity always returned false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether this reader can parse and resolve entities.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void Close()" />
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method also releases any resources held while reading. If this reader was constructed using a stream, this method also calls Close on the underlying stream.</para>
          <para>If Close has already been called, no action is performed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="ILASM" Value=".property int32 Depth { public hidebysig virtual specialname int32 get_Depth() }" />
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Int32" qualify="true" /> containing the depth of the current node in the XML document.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the depth of the current node in the XML document.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="ILASM" Value=".property class System.Text.Encoding Encoding { public hidebysig specialname instance class System.Text.Encoding get_Encoding() }" />
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> If the <see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see cref="F:System.Xml.ReadState.Interactive" qualify="true" />, a <see cref="T:System.Text.Encoding" qualify="true" />; otherwise <see langword="null" />. </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>Because <see cref="T:System.Xml.XmlTextReader" /> uses the <see cref="T:System.Text.Encoding" /> class, XmlTextReader also supports all encodings supported by that class. The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the &lt;?xml sequence to different byte values than UTF-8.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the encoding of the document.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property can be changed on the fly and takes effect after the next <see cref="M:System.Xml.XmlTextReader.Read" /> call.</para>
          <para>When EntityHandling is set to ExpandCharEntities, attribute values are only partially normalized. The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</para>
          <para>To illustrate the difference between the entity handling modes consider the following XML: </para>
          <code>&lt;!DOCTYPE doc [&lt;!ENTITY num "123"&gt;]&gt;
    &lt;doc&gt; &amp;#65; &amp;num; &lt;/doc&gt;</code>
          <para>When EntityHandling is set to ExpandEntities the "doc" element node contains one text node with the expanded entity text: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Depth </para>
                </term>
                <description>
                  <para>Node type </para>
                </description>
                <description>
                  <para>Name </para>
                </description>
                <description>
                  <para>Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>Text</para>
              </description>
              <description>
                <para> </para>
              </description>
              <description>
                <para>A 123 </para>
              </description>
            </item>
          </list>
          <para>When EntityHandling is set to ExpandCharEntites, and <see cref="P:System.Xml.XmlTextReader.WhitespaceHandling" /> is set to Significant or All, the "doc" element expands the character entity and returns the general entity as a node: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Depth </para>
                </term>
                <description>
                  <para>Node type </para>
                </description>
                <description>
                  <para>Name </para>
                </description>
                <description>
                  <para>Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>Text</para>
              </description>
              <description>
                <para> </para>
              </description>
              <description>
                <para>A </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>EntityReference</para>
              </description>
              <description>
                <para>num </para>
              </description>
              <description>
                <para> </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>SignificantWhitespace</para>
              </description>
              <description>
                <para> </para>
              </description>
              <description>
                <para> </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that specifies how the reader handles entities.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="ILASM" Value=".property bool EOF { public hidebysig virtual specialname bool get_EOF() }" />
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" />
indicates the reader is positioned at the end of the stream;
otherwise, <see langword="false" />. </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the reader is positioned at the end of the stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string GetAttribute(int32 i)" />
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> is less than 0, or greater than or equal to the <see cref="P:System.Xml.XmlTextReader.AttributeCount" /> of the containing element.<para><block subset="none" type="note"><see cref="P:System.Xml.XmlTextReader.AttributeCount" /> returns zero for all node types except <see langword="Attribute" />, <see langword="DocumentType" />, <see langword="Element" />, and <see langword="XmlDeclaration" />. Therefore, this exception is thrown if the reader is not positioned on one of these node types.</block></para></exception>
        <example>
          <para>See the <see cref="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />(<see langword="String" />,
<see langword="String" />) method for an example using all three overloads of this method.</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method does not move the reader.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the value of the attribute with the specified index.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the specified attribute.</para>
        </returns>
        <param name="i">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string GetAttribute(string name)" />
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>See the <see cref="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />(<see langword="String" />, <see langword="String" />) method for an example
   using all three overloads of this method.</para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method does not move the reader.</para>
          <para>If the reader is positioned on a DocumentType node, this method can be used to get the PUBLIC and SYSTEM literals, for example, reader.GetAttribute("PUBLIC") </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the value of the attribute with the specified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the specified attribute. If the attribute is not found, null is returned.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the attribute. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string GetAttribute(string localName, string namespaceURI)" />
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <example>
          <para>This example writes the value of the attributes from the
      following XML fragment to the console:</para>
          <para>
            <c> &lt;test xmlns:dt="urn:datatypes"
      dt:type="int"/&gt;</c>
          </para>
          <para>The second attribute value is retrieved using all three
      overloads of this method.</para>
          <code lang="C#">using System;
using System.Xml;

public class Reader {

  public static void Main() {

    string xmlFragment = @"&lt;test xmlns:dt=""urn:datatypes""
                            dt:type=""int""/&gt;";

    NameTable nameTable = new NameTable();
    XmlNamespaceManager xmlNsMan = new 
         XmlNamespaceManager(nameTable);
    XmlParserContext xmlPContext = new
         XmlParserContext(null, xmlNsMan,
                          null, XmlSpace.None);
    XmlTextReader xmlTReader = new
         XmlTextReader(xmlFragment,XmlNodeType.Element,
                       xmlPContext);

    xmlTReader.Read();
    Console.WriteLine( "{0}", xmlTReader.GetAttribute(0) );

    string str1 = xmlTReader.GetAttribute(1);
    string str2 = xmlTReader.GetAttribute("dt:type");
    string str3 = xmlTReader.GetAttribute("type",
                                          "urn:datatypes");
    Console.WriteLine("{0} - {1} - {2}",
                      str1, str2, str3);
  }
}
   </code>
          <para>The output is</para>
          <para> urn:datatypes</para>
          <para> int - int - int</para>
        </example>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The following XML contains an attribute in a specific namespace: </para>
          <code>&lt;test xmlns:dt="urn:datatypes" dt:type="int"/&gt;</code>
          <para>You can lookup the dt:type attribute using one argument (prefix and local name) or two arguments (local name and namespace URI): </para>
          <code>String dt = reader.GetAttribute("dt:type");
String dt2 = reader.GetAttribute("type","urn:datatypes");</code>
          <para>To lookup the xmlns:dt attribute, use one of the following arguments: </para>
          <code>String dt3 = reader.GetAttribute("xmlns:dt");
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);</code>
          <para>You can also get this information using the <see cref="P:System.Xml.XmlTextReader.Prefix" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The dictionary consists of a collection of namespace names keyed by prefix. It can be used to enumerate the in-scope namespaces. The dictionary is a disconnected copy of the namespace list of the reader. It remains unchanged as the reader position, current in-scope namespace list, changes.</para>
          <para>The following table describes how the <see cref="T:System.Xml.XmlNamespaceScope" /> enumeration value affects the whether or not the default and built-in namespaces are returned by <see cref="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>XmlNamespaceScope Value</para>
                </term>
                <description>
                  <para>xmlns:xml</para>
                </description>
                <description>
                  <para>xmlns:xmlns</para>
                </description>
                <description>
                  <para>xmlns=""</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>All</para>
              </term>
              <description>
                <para>yes</para>
              </description>
              <description>
                <para>no</para>
              </description>
              <description>
                <para>no</para>
              </description>
            </item>
            <item>
              <term>
                <para>ExcludeXml</para>
              </term>
              <description>
                <para>no</para>
              </description>
              <description>
                <para>no</para>
              </description>
              <description>
                <para>no</para>
              </description>
            </item>
            <item>
              <term>
                <para>Local</para>
              </term>
              <description>
                <para>no</para>
              </description>
              <description>
                <para>no</para>
              </description>
              <description>
                <para>yes</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a collection that contains all namespaces currently in-scope.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</para>
        </returns>
        <param name="scope">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder()" />
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>Because <see cref="T:System.Xml.XmlTextReader" /> does a buffered Read, it must be able to return the remainder of the unused buffer so that no data is lost. This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</para>
          <para>After calling this method, <see cref="P:System.Xml.XmlTextReader.EOF" /> is set to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the remainder of the buffered XML.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the class can return line information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the class can return line information; otherwise, false.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="ILASM" Value=".property bool HasValue { public hidebysig virtual specialname bool get_HasValue() }" />
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates the node on
   which the reader is currently positioned can have an associated text value;
   otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The following table lists node types that have a value to return.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Node type </para>
                </term>
                <description>
                  <para>Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Attribute </para>
              </term>
              <description>
                <para>The value of the attribute. </para>
              </description>
            </item>
            <item>
              <term>
                <para>CDATA </para>
              </term>
              <description>
                <para>The content of the CDATA section. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Comment </para>
              </term>
              <description>
                <para>The content of the comment. </para>
              </description>
            </item>
            <item>
              <term>
                <para>DocumentType </para>
              </term>
              <description>
                <para>The internal subset. </para>
              </description>
            </item>
            <item>
              <term>
                <para>ProcessingInstruction </para>
              </term>
              <description>
                <para>The entire content, excluding the target. </para>
              </description>
            </item>
            <item>
              <term>
                <para>SignificantWhitespace </para>
              </term>
              <description>
                <para>The white space between markup in a mixed content model. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Text </para>
              </term>
              <description>
                <para>The content of the text node. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Whitespace </para>
              </term>
              <description>
                <para>The white space between markup. </para>
              </description>
            </item>
            <item>
              <term>
                <para>XmlDeclaration </para>
              </term>
              <description>
                <para>The content of the declaration. </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than String.Empty.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="ILASM" Value=".property bool IsDefault { public hidebysig virtual specialname bool get_IsDefault() }" />
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>This property always returns the <see cref="T:System.Boolean" qualify="true" /> value <see langword="false" />. 
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property applies only to attribute nodes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="ILASM" Value=".property bool IsEmptyElement { public hidebysig virtual specialname bool get_IsEmptyElement() }" />
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates the
   current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals
<see cref="F:System.Xml.XmlNodeType.Element" />) that ends 
   with "<c>/&gt;</c>"; otherwise,<see langword=" false" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property enables you to determine the difference between the following: </para>
          <para>&lt;item num="123"/&gt; (IsEmptyElement is true).</para>
          <para>&lt;item num="123"&gt; (IsEmptyElement is false, although element content is empty).</para>
          <para>A corresponding EndElement node is not generated for empty elements.</para>
          <para>IsEmptyElement simply reports whether or not the element in the source document had an end element tag.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="ILASM" Value=".property string Item[int32 i] { public hidebysig virtual specialname string get_Item(int32 i) }" />
      <MemberSignature Language="C#" Value="public virtual string this[int i] { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">A <see cref="T:System.Int32" qualify="true" /> specifying the zero-based index of the attribute relative to the containing element.</param>
        <summary>
          <para>Retrieves the value of the attribute with the specified index relative to the containing element.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the value of the attribute.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
          <para>This property does not move the reader.</para>
          <block subset="none" type="note">
            <para>This property overrides the <see cref="T:System.Xml.XmlReader" /> indexer.</para>
          </block>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlTextReader.AttributeCount" /> of the containing element.<para><block subset="none" type="note"><see cref="P:System.Xml.XmlTextReader.AttributeCount" /> returns zero for all node types except <see langword="Attribute" />, <see langword="DocumentType" />, <see langword="Element" />, and <see langword="XmlDeclaration" />. Therefore, this exception is thrown if the reader is not positioned on one of these node types.</block></para></exception>
      </Docs>
      <Excluded>0</Excluded>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="ILASM" Value=".property string Item[string name] { public hidebysig virtual specialname string get_Item(string name) }" />
      <MemberSignature Language="C#" Value="public virtual string this[string name] { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A <see cref="T:System.String" qualify="true" /> specifying the qualified name of the attribute.</param>
        <summary>
          <para>Retrieves the value of the attribute with the specified qualified name.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the value of the specified attribute, or <see langword="null" /> if the
attribute is not found.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
          <para>This property does not move the reader.</para>
          <block subset="none" type="note">
            <para>If the reader is positioned on a <see langword="DocumentType" /> node, this
      method can be used to get the PUBLIC and SYSTEM literals.</para>
            <para>This property overrides the <see cref="T:System.Xml.XmlReader" /> indexer.</para>
          </block>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="ILASM" Value=".property string Item[string name, string namespaceURI] { public hidebysig virtual specialname string get_Item(string name, string namespaceURI) }" />
      <MemberSignature Language="C#" Value="public virtual string this[string name, string namespaceURI] { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="namespaceURI">To be added.</param>
        <summary>
          <para>Retrieves the value of the attribute with the specified local name and namespace URI.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the value of the specified attribute, or <see langword="null" /> if the
attribute is not found.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
          <para>This property does not move the reader.</para>
          <block subset="none" type="note">
            <para>This property overrides the <see cref="T:System.Xml.XmlReader" /> indexer.</para>
          </block>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="ILASM" Value=".property int32 LineNumber { public final hidebysig virtual specialname int32 get_LineNumber() }" />
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" qualify="true" /> containing the current line number.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is 1.</para>
          <para>Combined with <see cref="P:System.Xml.XmlTextReader.LinePosition" />, a value of 1,1 indicates the start of the document.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current line number.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="ILASM" Value=".property int32 LinePosition { public final hidebysig virtual specialname int32 get_LinePosition() }" />
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" qualify="true" /> containing the current line position.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property is most commonly used for error reporting, but can be called at any time. The property's starting value is 1.</para>
          <para>The position indicated is the first character of text in the markup.</para>
          <code> &lt;root&gt;
 abc&lt;tag/&gt;
 &lt;/root&gt;</code>
          <para>On the first line of the preceding XML text, a LinePosition of 2 corresponds to the character r; on the second line, a LinePosition of 5 corresponds to the character t; and on the third line, a LinePosition of 3 corresponds to the character r.</para>
          <para>Combined with <see cref="P:System.Xml.XmlTextReader.LineNumber" />, a value of 1,1 indicates the start of the document.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current line position.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="ILASM" Value=".property string LocalName { public hidebysig virtual specialname string get_LocalName() }" />
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" qualify="true" /> 
containing the local name of the current
node or, for node types that do not have a name (like
<see langword="Text" />, <see langword="Comment" /> 
, and so on), <see cref="F:System.String.Empty" qualify="true" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the local name of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string LookupNamespace(string prefix)" />
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property of the current instance is <see langword="true" /> and <paramref name="prefix" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>In the following XML, if the reader is positioned on the href attribute, the prefix a is resolved by calling reader.LookupNamespace("a"). The returned string is urn:456.</para>
          <code> &lt;root xmlns:a="urn:456"&gt;
  &lt;item&gt;
  &lt;ref href="a:b"/&gt;
  &lt;/item&gt;
 &lt;/root&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resolves a namespace prefix in the current element's scope.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The namespace URI to which the prefix maps or null if no matching prefix is found.</para>
        </returns>
        <param name="prefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Mono.Xml.IHasXmlParserContext.ParserContext">
      <MemberSignature Language="C#" Value="System.Xml.XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlParserContext Mono.Xml.IHasXmlParserContext.ParserContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlParserContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void MoveToAttribute(int32 i)" />
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlTextReader.AttributeCount" /> of the containing element.<para><block subset="none" type="note"><see cref="P:System.Xml.XmlTextReader.AttributeCount" /> returns zero for all node types except <see langword="Attribute" />, <see langword="DocumentType" />, <see langword="Element" />, and <see langword="XmlDeclaration" />. Therefore, this exception is thrown if the reader is not positioned on one of these node types.</block></para></exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Moves to the attribute with the specified index.</para>
        </summary>
        <param name="i">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the attribute. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool MoveToAttribute(string name)" />
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>After calling MoveToAttribute, the <see cref="P:System.Xml.XmlTextReader.Name" />, <see cref="P:System.Xml.XmlTextReader.NamespaceURI" />, and <see cref="P:System.Xml.XmlTextReader.Prefix" /> properties reflects the properties of that attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Moves to the attribute with the specified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The qualified name of the attribute. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool MoveToAttribute(string localName, string namespaceURI)" />
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>After calling MoveToAttribute, the <see cref="P:System.Xml.XmlTextReader.Name" />, <see cref="P:System.Xml.XmlTextReader.NamespaceURI" />, and <see cref="P:System.Xml.XmlTextReader.Prefix" /> properties reflects the properties of that attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Moves to the attribute with the specified local name and namespace URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</para>
        </returns>
        <param name="localName">
          <attribution license="cc4" from="Microsoft" modified="false" />The local name of the attribute. </param>
        <param name="namespaceURI">
          <attribution license="cc4" from="Microsoft" modified="false" />The namespace URI of the attribute. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool MoveToElement()" />
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: Element, DocumentType, or XmlDeclaration.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Moves to the element that contains the current attribute node.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool MoveToFirstAttribute()" />
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Moves to the first attribute.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool MoveToNextAttribute()" />
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>If the current node is an element node, this method is equivalent to <see cref="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />. If MoveToNextAttribute returns true, the reader moves to the next attribute; otherwise, the position of the reader does not change.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Moves to the next attribute.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if there is a next attribute; false if there are no more attributes.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="ILASM" Value=".property string Name { public hidebysig virtual specialname string get_Name() }" />
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" />
containing the qualified name of the current node or, for node types that do not
have a name (like <see langword="Text" />, <see langword="Comment" /> , and so on),
<see cref="F:System.String.Empty" qualify="true" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the qualified name of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="ILASM" Value=".property bool Namespaces { public hidebysig specialname instance bool get_Namespaces() public hidebysig specialname instance void set_Namespaces(bool value) }" />
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates the reader supports namespaces; otherwise,
<see langword="false" />. The default is <see langword="true" />.
   </para>
        </value>
        <exception cref="T:System.InvalidOperationException">When attempting to set the property, the <see cref="P:System.Xml.XmlTextReader.ReadState" /> was not <see cref="F:System.Xml.ReadState.Initial" qualify="true" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</para>
          <para>The Namespaces property cannot be set after a read operation has occurred.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to do namespace support.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="ILASM" Value=".property string NamespaceURI { public hidebysig virtual specialname string get_NamespaceURI() }" />
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" qualify="true" /> containing the
   namespace URI of the current node or, if no namespace URI is associated with the
   current node, <see cref="F:System.String.Empty" qualify="true" />.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property is relevant to Element and Attribute nodes only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="ILASM" Value=".property class System.Xml.XmlNameTable NameTable { public hidebysig virtual specialname class System.Xml.XmlNameTable get_NameTable() }" />
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> The <see cref="T:System.Xml.XmlNameTable" qualify="true" /> used by the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>All node and attribute names returned from <see cref="T:System.Xml.XmlTextReader" /> are atomized using the NameTable. When the same name is returned multiple times (for example, Customer), then the same String object is returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.XmlNodeType NodeType { public hidebysig virtual specialname valuetype System.Xml.XmlNodeType get_NodeType() }" />
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> One of the members of the <see cref="T:System.Xml.XmlNodeType" /> enumeration representing the type of
   the current node.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property never returns the following XmlNodeType types: Document, DocumentFragment, Entity, EndEntity, or Notation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the type of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="ILASM" Value=".property bool Normalization { public hidebysig specialname instance bool get_Normalization() public hidebysig specialname instance void set_Normalization(bool value) }" />
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Boolean" qualify="true" /> where <see langword="true" /> indicates to normalize; otherwise,
<see langword="false" />. The default is <see langword="false" />.</para>
        </value>
        <exception cref="T:System.InvalidOperationException">When attempting to set the property, the current instance has been closed.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property can be changed at any time and takes effect on the next read operation.</para>
          <block subset="none" type="note">
            <para>If the <see cref="T:System.Xml.XmlTextReader" /> is used to construct an <see cref="T:System.Xml.XmlValidatingReader" />, to normalize attribute values, Normalization must be set to true.</para>
          </block>
          <para>If Normalization is set to false, this also disables character range checking for numeric entities. As a result, character entities, such as &amp;#0;, are allowed.</para>
          <para>The following describes attribute value normalization: </para>
          <list type="bullet">
            <item>
              <para>For a character reference, append the referenced character to the attribute value.</para>
            </item>
            <item>
              <para>For an entity reference, recursively process the replacement text of the entity.</para>
            </item>
            <item>
              <para>For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value. (Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.) </para>
            </item>
            <item>
              <para>Process other characters by appending them to the normalized value.</para>
            </item>
            <item>
              <para>If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</para>
            </item>
          </list>
          <para>The XmlTextReader only performs attribute or CDATA normalization. It does not do DTD-specific normalization unless wrapped within an XmlValidatingReader.</para>
          <para>Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to normalize white space and attribute values.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="ILASM" Value=".property string Prefix { public hidebysig virtual specialname string get_Prefix() }" />
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" qualify="true" /> containing the namespace prefix associated with the current node.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the namespace prefix associated with the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>DTD processing is enabled by default for backwards compatibility. However, unless your application requires DTD processing, you should disable this setting. Disabling DTD processing can be useful in preventing certain denial of service attacks. If set to true, the reader throws an <see cref="T:System.Xml.XmlException" /> when any DTD content is encountered.</para>
          <para>If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks. Use the <see cref="T:System.Xml.XmlSecureResolver" /> to restrict the resources that the <see cref="T:System.Xml.XmlTextReader" /> can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application</para>
          <para>For more information, see <format type="text/html"><a href="9f180c2a-e7e9-4e6f-b93a-074d7ab0dcb0">Security and Your System.Xml Applications</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Char QuoteChar { public hidebysig virtual specialname valuetype System.Char get_QuoteChar() }" />
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Char" qualify="true" /> specifying the quotation mark character (" or ') used to enclose the value of
   an attribute.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property applies only to an attribute node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the quotation mark character used to enclose the value of an attribute node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool Read()" />
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>When a reader is first created and initialized, there is no information available. You must call Read to read the first node.</para>
          <para>This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method will fail. If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the next node from the stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the next node was read successfully; false if there are no more nodes to read.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool ReadAttributeValue()" />
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>Use this method after calling MoveToAttribute to read through the text or entity reference nodes that make up the attribute value. The <see cref="P:System.Xml.XmlReader.Depth" /> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if there are nodes to return.</para>
          <para>false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
          <para>An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance int32 ReadBase64(class System.Byte[] array, int32 offset, int32 len)" />
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0.</para>
          <para>- or -</para>
          <para>
            <paramref name="len" /> &gt; <paramref name="array" />.<see langword="Length" /> - <paramref name="offset" />.</para>
        </exception>
        <exception cref="T:System.Xml.XmlException">The Base64 sequence is not valid.</exception>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>Like <see cref="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />, this method can be called successively to read large streams of embedded text. It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. See RFC 1521. (You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Decodes Base64 and returns the decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="array">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of characters that serves as the buffer to which the text contents are written. </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
        <param name="len">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write into the buffer. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance int32 ReadBinHex(class System.Byte[] array, int32 offset, int32 len)" />
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0.</para>
          <para>-or-</para>
          <para>
            <paramref name="len" /> &gt; <paramref name="array" />.<see langword="Length" /> - <paramref name="offset" />.</para>
        </exception>
        <exception cref="T:System.Xml.XmlException">The BinHex sequence is not valid.</exception>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>Like <see cref="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />, this method can be called successively to read large streams of embedded text. It decodes BinHex content and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Decodes BinHex and returns the decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to your buffer.</para>
        </returns>
        <param name="array">
          <attribution license="cc4" from="Microsoft" modified="false" />The byte array that serves as the buffer to which the decoded binary bytes are written. </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
        <param name="len">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write into the buffer. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance int32 ReadChars(class System.Char[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="count" /> &gt; <paramref name="buffer" />.<see langword="Length" /> - <paramref name="index" />.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> &lt; 0, or <paramref name="count" /> &lt; 0.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This is the most efficient way to process very large streams of text embedded in an XML document. Rather than allocating large string objects, ReadChars returns text content a buffer at a time. This method is designed to work only on element nodes. Other node types cause ReadChars to return 0.</para>
          <para>In the following XML, if the reader is positioned on the start tag, ReadChars returns test and positions the reader after the end tag.</para>
          <code>&lt;Item&gt;test&lt;/Item&gt;</code>
          <para>ReadChars has the following functionality: </para>
          <list type="bullet">
            <item>
              <para>This method is designed to work on element nodes only. Other node types cause ReadChars to return 0.</para>
            </item>
            <item>
              <para>This method returns the actual character content. There is no attempt to resolve entities, CDATA, or any other markup encountered. ReadChars returns everything between the start tag and the end tag, including markup.</para>
            </item>
            <item>
              <para>ReadChars ignores XML markup that is not well-formed. For example, when reading the following XML string &lt;A&gt;1&lt;A&gt;2&lt;/A&gt;, ReadChars returns 1&lt;A&gt;2&lt;/A&gt;. (It returns markup from the matching element pair and ignores others.) </para>
            </item>
            <item>
              <para>This method does not do any normalization.</para>
            </item>
            <item>
              <para>When ReadChars has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</para>
            </item>
            <item>
              <para>Attribute read methods are not available while using ReadChars.</para>
            </item>
          </list>
          <para>For example, using the following XML: </para>
          <code> &lt;thing&gt;
  some text
 &lt;/thing&gt;
 &lt;item&gt;
 &lt;/item&gt;</code>
          <para>The reader is positioned on the &lt;item&gt; element at the end of the while loop.</para>
          <code> if (XmlNodeType.Element == reader.NodeType &amp;&amp; "thing" == reader.Name)
 {
  while(0 != reader.ReadChars(buffer, 0, 1)
  {
  // Do something.
  // Attribute values are not available at this point.
  }
 }</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of characters read. This can be 0 if the reader is not positioned on an element or if there is no more text content to return in the current context.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of characters that serves as the buffer to which the text contents are written. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position within <paramref name="buffer" /> where the method can begin writing text contents. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write into <paramref name="buffer" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method streams the content, decodes the Base64 content, and returns the decoded binary bytes (for example, an inline Base64-encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies". You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.</para>
          <block subset="none" type="note">
            <para>You should not access any of the reader properties between calls to the <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> method until the method returns the value 0.</para>
          </block>
          <para>This method has the following behavior:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.</para>
            </item>
            <item>
              <para>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported on the following XML node types: Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, DocumentFragment.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the content and returns the Base64 decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method streams the content, decodes the BinHex content, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.</para>
          <block subset="none" type="note">
            <para>You should not access any of the reader properties between calls to the <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> method until the method returns the value 0.</para>
          </block>
          <para>This method has the following behavior:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.</para>
            </item>
            <item>
              <para>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the following XML node types: Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, DocumentFragment.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the content and returns the BinHex decoded binary bytes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies". You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.</para>
          <para>This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.</para>
          <para>This method is very similar to the <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> method except that it can only be called on element node types.</para>
          <para>If the <paramref name="count" /> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <see cref="T:System.Xml.XmlTextReader" /> reads all the remaining bytes in the document and returns the number of bytes read. The next <see cref="T:System.Xml.XmlTextReader" /> method call returns a zero and moves the reader to the node following the <see cref="F:System.Xml.XmlNodeType.EndElement" />.</para>
          <para>If you call <see cref="M:System.Xml.XmlTextReader.Read" /> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <see cref="M:System.Xml.XmlTextReader.Read" /> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the element and decodes the Base64 content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method reads the element content, decodes it using BinHex encoding, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer.</para>
          <para>This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.</para>
          <para>This method is very similar to the <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> method except that it can only be called on element node types.</para>
          <para>If the <paramref name="count" /> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <see cref="T:System.Xml.XmlTextReader" /> reads all the remaining bytes in the document and returns the number of bytes read. The next <see cref="T:System.Xml.XmlTextReader" /> method call returns a zero and moves the reader to the node following the <see cref="F:System.Xml.XmlNodeType.EndElement" />.</para>
          <para>If you call <see cref="M:System.Xml.XmlTextReader.Read" /> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <see cref="M:System.Xml.XmlTextReader.Read" /> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the element and decodes the BinHex content.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of bytes written to the buffer.</para>
        </returns>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The buffer into which to copy the resulting text. This value cannot be null.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset into the buffer where to start copying the result.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.ReadState ReadState { public hidebysig virtual specialname valuetype System.Xml.ReadState get_ReadState() }" />
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> One of the members of the <see cref="T:System.Xml.ReadState" /> enumeration.
   </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the state of the reader.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <exception cref="T:System.InvalidOperationException">An invalid operation was attempted.</exception>
        <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>If positioned on an element, ReadString concatenates all text, significant white space, white space, and CData section node types together and returns the concatenated data as the element content. It stops when any markup is encountered, including comments and processing instructions. This could occur in a mixed content model, or when an element end tag is read.</para>
          <para>If positioned on a text node, ReadString performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, ReadString has the same functionality as if the reader were position on the element start tag. It returns all the concatenated element text nodes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the contents of an element or a text node as a string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</para>
          <para>Note: The text node can be either an element or an attribute text node.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance void ResetState()" />
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">The current instance was constructed with a <see cref="T:System.Xml.XmlParserContext" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This method enables you to parse multiple XML documents in a single stream. When you reach the end of an XML document, you can call ResetState to reset the state of the reader in preparation for the next XML document.</para>
          <block subset="none" type="note">
            <para>The documents in the stream must share the same encoding. If this is not the case, when ResetState is called an <see cref="T:System.Xml.XmlException" /> is thrown. (This is a change in behavior from .NET Framework version 1.1 and earlier).</para>
          </block>
          <para>The following properties are not affected by ResetState.</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Xml.XmlTextReader.Normalization" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Xml.XmlTextReader.Namespaces" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Xml.XmlTextReader.XmlResolver" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Xml.XmlTextReader.WhitespaceHandling" /> </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resets the state of the reader to ReadState.Initial.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void ResolveEntity()" />
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.InvalidOperationException">Any call to this method.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>If the reader is positioned on an EntityReference node (XmlNodeType.EntityReference), if <see cref="M:System.Xml.XmlTextReader.Read" /> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an EndEntity node is returned to close the entity reference scope.</para>
          <block subset="none" type="note">
            <para>After calling this method, if the entity is part of an attribute value, you must call <see cref="M:System.Xml.XmlTextReader.ReadAttributeValue" /> to step into the entity.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resolves the entity reference for EntityReference nodes.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>In the following XML input if the reader is positioned on the &lt;a&gt; node or any of its attributes, calling Skip positions the reader to the &lt;b&gt; node.</para>
          <para>If the reader is positioned on a leaf node already (such as the &lt;x&gt; node or the text node abc), calling Skip is the same as calling <see cref="M:System.Xml.XmlTextReader.Read" />.</para>
          <code>&lt;a name="bob" age="123"&gt;
  &lt;x/&gt;abc&lt;y/&gt;
&lt;/a&gt;
&lt;b&gt;
 ...
&lt;/b&gt;</code>
          <para>This method checks for well-formed XML.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Skips the children of the current node.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Xml.XmlTextReader" /> instance is cast to an <see cref="T:System.Xml.IXmlLineInfo" /> interface. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, false.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Xml.XmlTextReader" /> instance is cast to an <see cref="T:System.Xml.IXmlNamespaceResolver" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</para>
        </returns>
        <param name="scope">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string ns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">To be added.</param>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="ILASM" Value=".property string Value { public hidebysig virtual specialname string get_Value() }" />
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the text value of the current node.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the text value of the current node.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.WhitespaceHandling WhitespaceHandling { public hidebysig specialname instance valuetype System.Xml.WhitespaceHandling get_WhitespaceHandling() public hidebysig specialname instance void set_WhitespaceHandling(valuetype System.Xml.WhitespaceHandling value) }" />
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>One of the members of the <see cref="T:System.Xml.WhitespaceHandling" qualify="true" /> enumeration. The default is <see cref="F:System.Xml.WhitespaceHandling.All" />
(returns both significant and insignificant white
space).</para>
        </value>
        <exception cref="T:System.ArgumentOutOfRangeException">The value to be set is not one of the members of the <see cref="T:System.Xml.WhitespaceHandling" /> enumeration.</exception>
        <exception cref="T:System.InvalidOperationException">When setting the property, the <see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see cref="F:System.Xml.ReadState.Closed" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property can be changed at any time and takes effect on the next read operation.</para>
          <para>Because the XmlTextReader does not have DTD information available to it, SignificantWhitepsace nodes are only returned within an xml:space='preserve' scope.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that specifies how white space is handled.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="ILASM" Value=".property string XmlLang { public hidebysig virtual specialname string get_XmlLang() }" />
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.String" qualify="true" /> containing the 
   current <c>xml:lang</c> scope.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>This property represents the xml:lang scope within which the current node resides. For example, here is an XML fragment with xml:lang set to US English in the root element: </para>
          <para>&lt;root xml:lang="en-us"&gt; </para>
          <para>&lt;name&gt;Fred&lt;/name&gt; </para>
          <para>&lt;/root&gt; </para>
          <para>When the reader is positioned on the name element, you can use this property to find that it is in the scope of a US English xml:lang attribute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current xml:lang scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="ILASM" Value=".property class System.Xml.XmlResolver XmlResolver { public hidebysig specialname instance void set_XmlResolver(class System.Xml.XmlResolver value) }" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> The <see cref="T:System.Xml.XmlResolver" qualify="true" /> to use for resolving DTD references.</para>
          <para> If this property is not set, the current instance uses a 
   new instance of the <see cref="T:System.Xml.XmlUrlResolver" /> class with
   default credentials. If this property is set to <see langword="null" />, any external DTD or entities encountered by
   the reader are not resolved.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
          <para>The reader uses XmlResolver to resolve the location of the file loaded into the reader and also to resolve DTD references. For example, if your XML included the DOCTYPE declaration, &lt;!DOCTYPE book SYSTEM book.dtd&gt; the reader resolves this external file and ensures that the DTD is well-formed. The reader does not use the DTD for validation.</para>
          <para>This property can be changed at any time and takes effect on the next read operation. If this property is set to null, any external DTD references encountered by the reader are not resolved. </para>
          <para>In version 1.1 of the dnprdnshort, if this property is not set, the trust level of the application determines the default behavior.</para>
          <para>Fully trusted code: The reader uses a default <see cref="T:System.Xml.XmlUrlResolver" /> with no user credentials. If authentication is required to access a network resource, use the XmlResolver property to specify an XmlResolver with the necessary credentials.</para>
          <para>Semi-trusted code: The XmlResolver property is set to null. External resources are not resolved.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Xml.XmlSpace XmlSpace { public hidebysig virtual specialname valuetype System.Xml.XmlSpace get_XmlSpace() }" />
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>One of the members of the <see cref="T:System.Xml.XmlSpace" /> enumeration. If no <c>xml:space</c> scope exists, this property defaults to
<see cref="F:System.Xml.XmlSpace.None" />.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>In the dnprdnext release, the recommended practice is to create <see cref="T:System.Xml.XmlReader" /> instances using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. This allows you to take full advantage of the new features introduced in this release. For more information, see <format type="text/html"><a href="441E5AAC-DFA9-41ED-9336-CD541B11C2D1">Creating XML Readers</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current xml:space scope.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>