//
// This file was generated by resx2sr tool
//

namespace System.Web.Services
{
partial class Res
{
	public const string WebConfigInvalidExtensionPriority = "{0} is an invalid value for the extension priority. The priority must be nonnegative.";
	public const string ConfigKeyNotFoundInElementCollection = "No elements matching the key {0} were found in the ConfigurationElementCollection.";
	public const string ConfigKeysDoNotMatch = "The key does not match the indexer key. Key on element (expected value): {0}. Key provided to indexer: {1}.";
	public const string Invalid_priority_group_value = "The Group attribute must be set to a valid PriorityGroup value.";
	public const string WebSchemaNotFound = "Schema not found.";
	public const string WebReflectionError = "Error reflecting {0}.{1}.";
	public const string WebInvalidMethodName = "{0} Web Service method name is not valid.";
	public const string WebInvalidMethodNameCase = "Invalid method name '{0}',  method names are case sensitive.   The method name '{1}' with the same name but different casing was found.";
	public const string WebInvalidRequestFormat = "Request format is invalid.";
	public const string WebInvalidRequestFormatDetails = "Request format is invalid: {0}.";
	public const string WebMethodStatic = "Web Service methods cannot be static.";
	public const string WebMethodMissingParams = "The last two parameters of method {0}.{1} must be of type {2} and {3}.";
	public const string WebBadOutParameter = "The {0} parameter of the {1}.{2} method must be an input-only parameter.";
	public const string WebInOutParameter = "The {0} parameter of the {1}.{2} method must be an output-only parameter.";
	public const string WebAsyncMissingEnd = "Asynchronous method {0}.{1} does not have a corresponding {2} method.";
	public const string WebMissingPath = "Path property must be set before calling the Send method.";
	public const string WebResponseKnownError = "The request failed with HTTP status {0}: {1}.";
	public const string WebResponseUnknownError = "The request failed with the error message:";
	public const string WebResponseUnknownErrorEmptyBody = "The request failed with an empty response.";
	public const string WebResponseContent = "Client found response content type of '{0}', but expected '{1}'.";
	public const string WebBadStreamState = "Properties and methods of the stream can't be accessed in the BeforeSerialize stage.";
	public const string WebResponseBadXml = "Response is not well-formed XML.";
	public const string WebCannotUnderstandHeader = "SOAP header {0} was not understood.";
	public const string WebMissingHeader = "Missing required header '{0}'.";
	public const string WebNoReturnValue = "There is no return value.";
	public const string WebCannotAccessValue = "The value can not be accessed because there was an exception during message processing.";
	public const string WebCannotAccessValueStage = "The value may not be accessed in message stage {0}.";
	public const string WebInvalidBindingPlacement = "The Binding property of {0} may not be specified in this context.";
	public const string WebInvalidBindingName = "The Binding property '{0}' does not match interface binding '{1}'.";
	public const string WebBothMethodAttrs = "A web service method can't have both a SoapDocumentMethodAttribute and a SoapRpcMethodAttribute. Use one or the other.";
	public const string WebBothServiceAttrs = "A web service can't have both a SoapDocumentServiceAttribute and a SoapRpcServiceAttribute. Use one or the other.";
	public const string WebOneWayOutParameters = "One-way methods cannot have out or ref parameters.";
	public const string WebOneWayReturnValue = "One-way methods cannot have return values.";
	public const string WebReflectionErrorMethod = "Method {0}.{1} can not be reflected.";
	public const string WebMultiDimArray = "Multi-dimensional arrays are not supported. Use a jagged array instead.";
	public const string WebHeaderMissing = "The header property/field {0}.{1} is missing or not public.";
	public const string WebHeaderStatic = "The header property/field {0}.{1} cannot be static.";
	public const string WebHeaderRead = "The header property/field {0}.{1} could not be  read.";
	public const string WebHeaderWrite = "The header property/field {0}.{1} could not be written to.";
	public const string WebHeaderType = "The header property/field {0}.{1} must be of type SoapHeader or a derived type, or an array of SoapHeader or SoapUnknownHeader.";
	public const string WebHeaderOneWayOut = "The header property/field {0}.{1} cannot be an out header because the method is one-way.";
	public const string WebHeaderInvalidMustUnderstand = "'{0}' is not a valid value for the field EncodedMustUnderstand. Valid values are '0', '1', 'true', and 'false'.";
	public const string WebMultiplyDeclaredHeaderTypes = "An operation can have only one in or out header of a given type. {0}.{1} conflicts with another header field of the same type and direction.";
	public const string WebHttpHeader = "Server did not recognize the value of HTTP Header {0}: {1}.";
	public const string WebRequestContent = "Server found request content type to be '{0}', but expected '{1}'.";
	public const string WebRequestUnableToRead = "Server was unable to read request.";
	public const string WebRequestUnableToProcess = "Server was unable to process request.";
	public const string WebMissingParameter = "Missing parameter: {0}.";
	public const string WebUnrecognizedRequestFormat = "Request format is unrecognized.";
	public const string WebUnrecognizedRequestFormatUrl = "Request format is unrecognized for URL unexpectedly ending in '{0}'.";
	public const string WebTimeout = "The timeout period expired before the response was received.";
	public const string WebMissingHelpContext = "HttpContext is not available.   This class can only be used in the context of an ASP.NET request.";
	public const string WebMissingCustomAttribute = "{0} must have the {1} custom attribute.";
	public const string WebMissingClientProtocol = "ClientProtocol must be set first.";
	public const string WebResolveMissingClientProtocol = "ClientProtocol property must be set before calling Resolve.";
	public const string WebPathNotFound = "Path:{0} could not be found.";
	public const string WebMissingResource = "The document at the url {0} was not recognized as a known document type.\\r\\nThe error message from each known type may help you fix the problem:";
	public const string WebContractReferenceName = "WSDL Document";
	public const string WebShemaReferenceName = "XML Schema";
	public const string WebDiscoveryDocumentReferenceName = "DISCO Document";
	public const string WebMissingDocument = "Discovery document at the URL {0} could not be found.";
	public const string WebInvalidContentType = "The document format is not recognized (the content type is '{0}').";
	public const string WebInvalidFormat = "The document format is not recognized.";
	public const string WebInvalidEnvelopeNamespace = "Possible SOAP version mismatch: Envelope namespace {0} was unexpected. Expecting {1}.";
	public const string WebResultNotXml = "Result was not XML.";
	public const string WebDescriptionMissingItem = "Element {0} named {1} from namespace {2} is missing.";
	public const string WebDescriptionMissing = "Cannot find definition for {0}.  Service Description with namespace {1} is missing.";
	public const string WebDescriptionPartElementRequired = "Part '{0}' from message '{1}' in namespace '{2}' is missing the element attribute. The element attribute is required for headers when Use=Literal.";
	public const string WebDescriptionPartTypeRequired = "Part '{0}' from message '{1}' in namespace '{2}' is missing the type attribute. The type attribute is required for headers when Use=Encoded.";
	public const string WebDescriptionPartElementWarning = "Part '{0}' from message '{1}' in namespace '{2}' defines both the element and type attributes. Only the element attribute is used for headers when Use=Literal.";
	public const string WebDescriptionPartTypeWarning = "Part '{0}' from message '{1}' in namespace '{2}' defines both the element and type attributes. Only the type attribute is used for headers when Use=Encoded.";
	public const string WebDescriptionTooManyMessages = "No more than one input and one output message may be specified.";
	public const string WebDescriptionHeaderAndBodyUseMismatch = "The value of use defined on the soap:header element must match that defined on the soap:body element.";
	public const string WebQNamePrefixUndefined = "Namespace prefix '{0}' not defined";
	public const string WebNegativeValue = "The value for '{0}' cannot be negative.";
	public const string WebEmptyRef = "Invalid empty reference of type '{0}' encountered in the document at URI '{1}'.";
	public const string WebNullRef = "Invalid null web reference encountered in the discovery document.";
	public const string WebRefInvalidAttribute = "Invalid web reference encountered. Missing required '{0}' attribute.";
	public const string WebRefInvalidAttribute2 = "Invalid empty reference of type '{0}' encountered. Missing required '{1}' attribute.";
	public const string WebInvalidDocType = "Invalid Document type. Expecting '{0}', got '{1}'.\\r\\nDocument URI is '{2}'.";
	public const string WebDiscoRefReport = "Report from '{0}' is '{1}'.";
	public const string WebTextMatchMissingPattern = "Each match element must have a pattern attribute containing a valid regular expression.";
	public const string WebTextMatchIgnoredTypeWarning = "Optional attribute 'type' was ignored because the match does not contain sub-matches.";
	public const string WebTextMatchBadCaptureIndex = "{0} is not a valid capture index for match '{1}'. The highest valid capture index for this match is {2}.";
	public const string WebTextMatchBadGroupIndex = "{0} is not a valid group index for match '{1}'. The highest valid group index for this match is {2}.";
	public const string WebServiceDescriptionIgnoredOptional = "The optional WSDL extension element '{0}' from namespace '{1}' was not handled.";
	public const string WebServiceDescriptionIgnoredRequired = "The required WSDL extension element '{0}' from namespace '{1}' was not handled.";
	public const string WebDuplicateFormatExtension = "More than one format extension named '{0}' was specified. Each format extension must have a unique name.";
	public const string WebDuplicateOperationMessage = "More than one operation message named '{0}' was specified. Each operation message must have a unique name.";
	public const string WebDuplicateImport = "More than one import named '{0}' was specified. Each import must have a unique name.";
	public const string WebDuplicateMessage = "More than one message named '{0}' was specified. Each message must have a unique name.";
	public const string WebDuplicatePort = "More than one port named '{0}' was specified. Each port must have a unique name.";
	public const string WebDuplicatePortType = "More than one port type named '{0}' was specified. Each port type must have a unique name.";
	public const string WebDuplicateBinding = "More than one binding named '{0}' was specified. Each binding must have a unique name.";
	public const string WebDuplicateService = "More than one service named '{0}' was specified. Each service must have a unique name.";
	public const string WebDuplicateMessagePart = "More than one message part named '{0}' was specified. Each message part must have a unique name.";
	public const string WebDuplicateOperationBinding = "More than one operation binding named '{0}' was specified. Each operation binding must have a unique name.";
	public const string WebDuplicateFaultBinding = "More than one fault binding named '{0}' was specified. Each fault binding must have a unique name.";
	public const string WebDuplicateOperation = "More than one operation named '{0}' was specified. Each operation must have a unique name.";
	public const string WebDuplicateOperationFault = "More than one operation fault named '{0}' was specified. Each operation fault must have a unique name.";
	public const string WebDuplicateUnknownElement = "More than one {0} named '{1}' was specified. Each {0} must have a unique name.";
	public const string WebUnknownEncodingStyle = "The encoding style '{0}' is not supported.";
	public const string WebSoap11EncodingStyleNotSupported1 = "The SOAP 1.1 encoding style is not supported for operations that use SOAP 1.2. Use the URI '{0}' to refer to the SOAP 1.2 encoding style.";
	public const string WebNullAsyncResultInBegin = "For server-side asynchronous method calls, your Begin method must return a valid IAsyncResult. Your Begin method cannot return null.";
	public const string WebNullAsyncResultInEnd = "For asynchronous method calls, you must supply a non-null IAsyncResult instance when you call the End method.";
	public const string WebAsyncTransaction = "Transactions are not supported for asynchronous method calls. Provide a synchronous version of the method or unset the TransactionOption property of the WebMethodAttribute.";
	public const string WebConfigExtensionError = "There was an exception running the extensions specified in the config file.";
	public const string WebExtensionError = "There was an exception running the extensions specified in the config file (or via an attribute).";
	public const string WebChangeTypeFailed = "Cannot convert {0} to {1}.";
	public const string WebClientBindingAttributeRequired = "WebServiceBindingAttribute is required on proxy classes.";
	public const string WebHeaderInvalidRelay = "'{0}' is not a valid value for the 'relay' attribute. Valid values are '0', '1', 'true', and 'false'.";
	public const string WebVirtualDisoRoot = "Web Directory '{0}' must be same or below to '{1}'.";
	public const string WebWsiContentTypeEncoding = "Input message does not conform to Simple SOAP Binding Profile Version 1.0. Requirement R1012: A MESSAGE MUST serialize the envelope using either UTF-8 or UTF-16 character encoding.";
	public const string WebWsiViolation = "Service '{0}' does not conform to WS-I Basic Profile v1.1. Please examine each of the normative statement violations below. To turn off conformance check set the ConformanceClaims property on corresponding WebServiceBinding attribute to WsiClaims.None.\\r\\n{1}";
	public const string WebNullReaderForMessage = "The GetReaderForMessage method cannot return null.";
	public const string WebNullWriterForMessage = "The GetWriterForMessage method cannot return null.";
	public const string NeedConcreteType = "Cannot create an instance of an interface {0}. Please specify a concrete implementation of the interface instead.";
	public const string WebUnknownElement = "The element was not expected in this context: {0}.";
	public const string WebUnknownElement1 = "An unexpected element was encountered: {0}. No elements were expected in this scope.";
	public const string WebUnknownElement2 = "The element was not expected in this context: {0}. Expected elements: {1}.";
	public const string WebUnknownAttribute = "An unexpected attribute was encountered: {0}='{1}'.";
	public const string WebUnknownAttribute2 = "An unexpected attribute was encountered: {0}='{1}'. No attributes were expected in this scope.";
	public const string WebUnknownAttribute3 = "The attribute was not expected in this context: {0}='{1}'. Expected attributes: {2}.";
	public const string WebSuppressedExceptionMessage = "An error occurred on the server.";
	public const string CannotRunInPartialTrustOutsideAspNet = "Cannot run in partial trust outside the ASP.NET environment.";
	public const string WebServiceContext = "The ASP.NET context object for the current request.";
	public const string WebServiceSession = "The ASP.NET session object for the current request.";
	public const string WebServiceServer = "The ASP.NET utility object for the current request.";
	public const string WebServiceUser = "The ASP.NET user object for the current request.  The object is used for authorization.";
	public const string WebServiceSoapVersion = "The version of the SOAP protocol used for the request.";
	public const string ClientProtocolAllowAutoRedirect = "Enable automatic handling of server redirects.";
	public const string ClientProtocolCookieContainer = "A container for all cookies received from servers in the current session.";
	public const string ClientProtocolPreAuthenticate = "Enables pre authentication of the request.";
	public const string ClientProtocolClientCertificates = "The client certificates that will be sent to the server, if the server requests them.";
	public const string ClientProtocolUrl = "The base URL to the server to use for requests.";
	public const string ClientProtocolEncoding = "The encoding to use for requests.";
	public const string ClientProtocolTimeout = "Sets the timeout in milliseconds to be used for synchronous calls.  The default of -1 means infinite.";
	public const string ClientProtocolUserAgent = "Sets the user agent http header for the request.";
	public const string ClientProtocolSoapVersion = "The version of the SOAP protocol to use for requests. By default, SOAP 1.1 will be used.";
	public const string ClientProtocolEnableDecompression = "This allows user to easily leverage HTTP compression that's built into IIS 6.";
	public const string XmlLang = "en";
	public const string Rxxxx = "SOAP 1.1 binding was not found";
	public const string BindingMissingAttribute = "Binding '{0}' from namespace '{1}' missing required '{2}' attribute.";
	public const string BindingInvalidAttribute = "Binding '{0}' from namespace '{1}' has invalid attribute: {2}='{3}'.";
	public const string OperationFlowNotification = "Operation '{0}' on portType '{1}' from namespace '{2}' defined as Notification.";
	public const string OperationFlowSolicitResponse = "Operation '{0}' on portType '{1}' from namespace '{2}' defined as Solicit-Response.";
	public const string PortTypeOperationMissing = "Operation '{0}' on binding '{1}' from namespace '{2}' has no matching operation on portType '{3}' from namespace '{4}'.";
	public const string BindingMultipleParts = "One of the extensibility elements on Binding '{0}' from namespace '{1}' has more then one part listed in the '{2}' attribute.";
	public const string InputElement = "Input element {0} of operation '{1}' on portType '{2}' from namespace '{3}'. {4}";
	public const string OutputElement = "Output element {0} of operation '{1}' on portType '{2}' from namespace '{3}'. {4}";
	public const string Fault = "soapbind:fault '{0}' on operation '{1}' on portType '{2}' from namespace '{3}'. {4}";
	public const string HeaderFault = "{0} on operation '{1}' on portType '{2}' from namespace '{3}'. {4}";
	public const string Binding = "Binding '{0}' from namespace '{1}'.";
	public const string Operation = "Operation '{0}' on portType '{1}' from namespace '{2}'.";
	public const string OperationBinding = "Operation '{0}' on binding '{1}' from namespace '{2}'.";
	public const string FaultBinding = "Fault '{0}' on operation '{1}' on binding '{2}' from namespace '{3}'.";
	public const string Description = "Service description with targetNamespace='{0}'.";
	public const string Element = "{0} from service description with targetNamespace='{1}'.";
	public const string Port = "Port '{0}' on service {1} from namespace='{2}'.";
	public const string Part = "Part '{0}' of message '{1}' from service description with targetNamespace='{2}'.";
	public const string OperationMissingBinding = "Operation '{0}' on portType '{1}' from namespace '{2}' has no matching binding.";
	public const string UriValueRelative = "Value '{0}' is not an absolute URI.";
	public const string HelpGeneratorInternalError = "The XML Web service help page encountered an internal error.";
	public const string OperationOverload = "Binding '{0}' from namespace '{1}' contains operations with matching wire signatures. Wire signature of message '{2}' matches message '{3}'.";
	public const string WireSignature = "Input message '{0}' from namespace '{1}' has wire signature '{2}:{3}'.";
	public const string WireSignatureEmpty = "Input message '{0}' from namespace '{1}' has no elements (empty wire signature)";
	public const string WsdlInstanceValidationDetails = "Warning: {0} Line {1}, position {2}.";
	public const string WhenUsingAMessageStyleOfParametersAsDocument0 = "When using a Bare parameter style and a service RoutingStyle of RequestElement, the method must have exactly one parameter.";
	public const string TheMethodsAndUseTheSameSoapActionWhenTheService3 = "The methods {0} and {1} use the same SOAPAction '{2}'. When the RoutingStyle of the XML Web service is SoapAction, SOAPAction values must be unique across methods on the XML Web service. You can change the SOAPAction with the Action parameter to the SoapDocumentMethod or SoapRpcMethod attributes, or you can specify a RoutingStyle of RequestElement on the XML Web service.";
	public const string TheMethodDoesNotHaveARequestElementEither1 = "The method {0} does not have a request element. You can use a RoutingStyle of SoapAction on the XML Web service, use the Wrapped parameter style on the method, or add a parameter to the method.";
	public const string TheMethodsAndUseTheSameRequestElementXmlns4 = "The methods {0} and {1} use the same request element <{2} xmlns='{3}'>. When the RoutingStyle of the XML Web service is RequestElement, request elements must be unique across methods on the XML Web service. If you are using the Rpc style, you can change the message name with the RequestElementName and RequestElementNamespace parameters to SoapRpcMethodAttribute. For document style using wrapped parameter style, use the RequestElementName and RequestElementNamespace parameters to SoapDocumentMethodAttribute. For the bare parameter style, you must change the element that represents the parameter. Alternatively, you can specify a RoutingStyle of SoapAction on the XML Web service.";
	public const string TheMethodsAndUseTheSameRequestElementAndSoapActionXmlns6 = "The methods {0} and {1} use the same request element <{2} xmlns='{3}'> and the methods {0} and {4} use the same SOAPAction '{5}'. Each method on the XML Web service must have a unique SOAPAction or request element. If you are using the Rpc style, you can change the message name with the RequestElementName and RequestElementNamespace parameters to SoapRpcMethodAttribute. For document style using wrapped parameter style, use the RequestElementName and RequestElementNamespace parameters to SoapDocumentMethodAttribute. For the bare parameter style, you must change the element that represents the parameter. Alternatively, you can specify a unique SoapAction for each method using the Action parameter to SoapRpcMethodAttribute or SoapDocumentMethodAttribute.";
	public const string TheRootElementForTheRequestCouldNotBeDetermined0 = "The root element for the request could not be determined. When RoutingStyle is set to RequestElement, SoapExtensions configured via an attribute on the method cannot modify the request stream before it is read. The extension must be configured via the SoapExtensionTypes element in web.config, or the request must arrive at the server as clear text.";
	public const string TheRequestElementXmlnsWasNotRecognized2 = "The request element <{0} xmlns='{1}'> was not recognized.";
	public const string ServiceDescriptionWasNotFound0 = "XML Web service description was not found.";
	public const string internalError0 = "An internal error occurred.";
	public const string DiscoveryIsNotPossibleBecauseTypeIsMissing1 = "Discovery is not possible because type '{0}' is missing a WebServiceBinding attribute.";
	public const string TheBindingNamedFromNamespaceWasNotFoundIn3 = "The binding named '{0}' from namespace '{1}' was not found in the discovery document found at '{2}'.";
	public const string Missing2 = "Missing {0}.{1}";
	public const string MissingHttpOperationElement0 = "Missing http:operation element.";
	public const string MessageHasNoParts1 = "Message '{0}' has no parts.";
	public const string DuplicateInputOutputNames0 = "Duplicate input/output names.";
	public const string MissingBinding0 = "The operation has no matching binding. Check if the operation, input and output names in the Binding section match with the corresponding names in the PortType section.";
	public const string MissingInputBinding0 = "Missing input binding.";
	public const string MissingOutputBinding0 = "Missing output binding.";
	public const string UnableToImportOperation1 = "Unable to import operation '{0}'.";
	public const string UnableToImportBindingFromNamespace2 = "Unable to import binding '{0}' from namespace '{1}'.";
	public const string TheOperationFromNamespaceHadInvalidSyntax3 = "The operation '{0}' on portType '{1}' from namespace '{2}' had the following syntax error:  {3}";
	public const string TheOperationBindingFromNamespaceHadInvalid3 = "The operation binding '{0}' from namespace '{1}' had invalid syntax.  {2}";
	public const string IfAppSettingBaseUrlArgumentIsSpecifiedThen0 = "If 'appSettingBaseUrl' argument is specified then 'url' argument must also be specified.";
	public const string MissingMessagePartForMessageFromNamespace3 = "Missing message part '{0}' for message '{1}' from namespace '{2}'.";
	public const string MissingMessage2 = "Missing message '{0}' from namespace '{1}'.";
	public const string OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0 = "Only XmlElements or types deriving from ServiceDescriptionFormatExtension may be added.";
	public const string OnlyOperationInputOrOperationOutputTypes = "Only objects of type OperationInput or OperationOutput may be added.";
	public const string ProtocolWithNameIsNotRecognized1 = "Protocol with name '{0}' is not recognized.";
	public const string BothAndUseTheMessageNameUseTheMessageName3 = "Both {0} and {1} use the message name '{2}'.  Use the MessageName property of the WebMethod custom attribute to specify unique message names for the methods.";
	public const string MissingSoapOperationBinding0 = "Missing soap:operation binding.";
	public const string OnlyOneWebServiceBindingAttributeMayBeSpecified1 = "Only one WebServiceBinding attribute may be specified on type '{0}'.";
	public const string ContractOverride = "Method {0} on type {1} is an implementation of the service contract interface {2}. Service Description altering attributes cannot be specified on service implementation.  Please place custom attribute on the interface declaration: interface: {2}, method: {3}, attribute: {4}.";
	public const string TypeIsMissingWebServiceBindingAttributeThat2 = "Type '{0}' is missing WebServiceBinding attribute that defines a binding named '{1}'.";
	public const string MultipleBindingsWithSameName2 = "Type '{0}' has multiple WebServiceBinding attributes that define a binding named '{1}'.";
	public const string RequiredXmlFormatExtensionAttributeIsMissing1 = "Required XmlFormatExtension attribute is missing on class {0}.";
	public const string TheSyntaxOfTypeMayNotBeExtended1 = "The syntax of type {0} may not be extended.";
	public const string ThereIsNoSoapTransportImporterThatUnderstands1 = "There is no SoapTransportImporter that understands the transport '{0}'.";
	public const string MissingSoapBodyInputBinding0 = "Missing soap:body input binding.";
	public const string MissingSoapBodyOutputBinding0 = "Missing soap:body output binding.";
	public const string TheEncodingIsNotSupported1 = "The encoding '{0}' is not supported.";
	public const string SpecifyingAnElementForUseEncodedMessageParts0 = "Specifying an element for use=encoded message parts is not supported.";
	public const string EachMessagePartInAnUseEncodedMessageMustSpecify0 = "Each message part in an use=encoded message must specify a type.";
	public const string SpecifyingATypeForUseLiteralMessagesIs0 = "Specifying a type for use=literal messages is not supported.";
	public const string SpecifyingATypeForUseLiteralMessagesIsAny = "Specifying a type for use=literal messages is not supported. Type name='{0}' from targetNamespace='{1}' cannot be used as top-level any element.";
	public const string EachMessagePartInAUseLiteralMessageMustSpecify0 = "Each message part in a use=literal message must specify an element.";
	public const string EachMessagePartInRpcUseLiteralMessageMustSpecify0 = "Each message part in a use=literal style=rpc message must specify a type.";
	public const string NoInputMIMEFormatsWereRecognized0 = "No input MIME formats were recognized.";
	public const string NoInputHTTPFormatsWereRecognized0 = "No input HTTP formats were recognized.";
	public const string NoOutputMIMEFormatsWereRecognized0 = "No output MIME formats were recognized.";
	public const string MissingMatchElement0 = "Missing match element.";
	public const string SolicitResponseIsNotSupported0 = "SolicitResponse is not supported.";
	public const string RequestResponseIsNotSupported0 = "RequestResponse is not supported.";
	public const string OneWayIsNotSupported0 = "OneWay is not supported.";
	public const string NotificationIsNotSupported0 = "Notification is not supported.";
	public const string WebMissingBodyElement = "Request format is invalid: Missing required soap:Body element.";
	public const string WebMissingEnvelopeElement = "Request format is invalid: Missing required soap:Envelope element.";
	public const string UnableToHandleRequestActionNotRecognized1 = "Unable to handle request. The action '{0}' was not recognized.";
	public const string UnableToHandleRequestActionRequired0 = "Unable to handle request without a valid action parameter. Please supply a valid soap action.";
	public const string UnableToHandleRequest0 = "Unable to handle request.";
	public const string FailedToHandleRequest0 = "Failed to handle request.";
	public const string CodeGenSupportReferenceParameters = "Declaring parameters to be 'out' or 'ref' is not supported by {0}.";
	public const string CodeGenSupportParameterAttributes = "Custom attributes on parameter declarations are not supported by {0}.";
	public const string CodeGenSupportReturnTypeAttributes = "Custom attributes on return value are not supported by {0}.";
	public const string TheBinding0FromNamespace1WasIgnored2 = "The binding '{0}' from namespace '{1}' was ignored.  {2}";
	public const string TheOperation0FromNamespace1WasIgnored2 = "The operation '{0}' from namespace '{1}' was ignored.  {2}";
	public const string TheOperationBinding0FromNamespace1WasIgnored = "The operation binding '{0}' from namespace '{1}' was ignored.  {2}";
	public const string NoMethodsWereFoundInTheWSDLForThisProtocol = "No methods were found in the WSDL for this protocol.";
	public const string ThereWasAnErrorDuringAsyncProcessing = "There was an error during async processing.";
	public const string CanTCallTheEndMethodOfAnAsyncCallMoreThan = "Can't call the end method of an async call more than once.";
	public const string AsyncDuplicateUserState = "There was an error during asynchronous processing. Unique state object is required for multiple asynchronous simultaneous operations to be outstanding.";
	public const string StreamDoesNotSeek = "This stream does not support seeking operations.";
	public const string StreamDoesNotRead = "This stream does not support read operations.";
	public const string ElementTypeMustBeObjectOrSoapReflectedException = "The elementType must be one of SoapReflectedExtension or Object.";
	public const string ElementTypeMustBeObjectOrSoapExtensionOrSoapReflectedException = "The elementType must be one of SoapExtension, SoapReflectedExtension, or Object.";
	public const string ProtocolDoesNotAsyncSerialize = "The protocol does not support async serialization.";
	public const string ThereWasAnErrorDownloading0 = "There was an error downloading '{0}'.";
	public const string TheHTMLDocumentDoesNotContainDiscoveryInformation = "The HTML document does not contain Web service discovery information.";
	public const string TheDocumentWasNotRecognizedAsAKnownDocumentType = "The document was not recognized as a known document type (WSDL, XML Schema, or Discovery document) for the following reason: \\n  - {0}";
	public const string TheDocumentWasUnderstoodButContainsErrors = "The document was understood, but it could not be processed.";
	public const string TheWSDLDocumentContainsLinksThatCouldNotBeResolved = "The WSDL document contains links that could not be resolved.";
	public const string TheSchemaDocumentContainsLinksThatCouldNotBeResolved = "The XML schema document contains links that could not be resolved.";
	public const string CanTSpecifyElementOnEncodedMessagePartsPart = "The element attribute is not allowed on encoded message parts. The erroneous part is named '{0}' in message '{1}'.";
	public const string indexMustBeBetweenAnd0Inclusive = "index must be between 0 and {0}, inclusive.";
	public const string BPConformanceHeaderFault = "WebMethod {0} on WebService {1} claims conformance. Using SOAP header with {2}={3}.{4} is not allowed on conformant methods. ";
	public const string WsdlGenRpcLitAnonimousType = "Method {0}.{1} can not be reflected. Parameter '{2}' may not be used with Rpc\\\\Literal SOAP messages because it is declared using an anonymous schema type, only top-level named types can be used with rpc\\\\literal SOAP messages.";
	public const string StackTraceEnd = "--- End of inner exception stack trace ---";
	public const string CodeRemarks = "<remarks/>";
	public const string CodegenWarningDetails = "CODEGEN: {0}";
	public const string SchemaValidationError = "Schema validation error: {0}";
	public const string SchemaValidationWarning = "Schema validation warning: {0}";
	public const string SchemaSyntaxErrorDetails = "Schema with targetNamespace='{0}' has invalid syntax. {1} Line {2}, position {3}.";
	public const string InitFailed = "Initialization failure. Please review input options and documents for validity.";
	public const string XmlSchemaElementReference = "Element reference '{0}' declared in schema type '{1}' from namespace '{2}'.";
	public const string XmlSchemaAttributeReference = "Attribute reference '{0}' declared in schema type '{1}' from namespace '{2}'.";
	public const string XmlSchemaItem = "Schema item '{1}' from namespace '{0}'. {2}";
	public const string XmlSchemaNamedItem = "Schema item '{1}' named '{2}' from namespace '{0}' is invalid. {3}";
	public const string XmlSchemaContentDef = "Check content definition of schema type '{0}' from namespace '{1}'. {2}";
	public const string XmlSchema = "Schema with targetNamespace='{0}' has invalid syntax. {1}";
	public const string TraceCallEnter = "Calling {0}\\r\\n    Caller: {1}";
	public const string TraceCallEnterDetails = "Calling {0}\\r\\n    Method: {2}\\r\\n    Caller: {1}";
	public const string TraceCallExit = "Return from {0}\\r\\n    Caller: {1}";
	public const string TraceExceptionThrown = "Exception thrown in {0}.\\r\\n    {1}: {2}";
	public const string TraceExceptionCought = "Exception caught in {0}.\\r\\n    {1}: {2}";
	public const string TraceExceptionIgnored = "Exception ignored in {0}.\\r\\n    {1}: {2}";
	public const string TraceExceptionDetails = "Exception Details:\\r\\n{0}";
	public const string TracePostWorkItemIn = "Calling WorkItem.Post({0})";
	public const string TracePostWorkItemOut = "Return from WorkItem.Post({0})";
	public const string TraceUserHostName = "Request Host Name: {0}";
	public const string TraceUserHostAddress = "Request Host Address: {0}";
	public const string TraceUrl = "Request Url: [{0}] {1}";
	public const string TraceUrlReferrer = "Http referrer: {0}";
	public const string TraceCreateSerializer = "XmlSerializer [Create XmlSerializer]";
	public const string TraceWriteRequest = "XmlSerializer [Write Request]";
	public const string TraceWriteResponse = "XmlSerializer [Write Response]";
	public const string TraceWriteHeaders = "XmlSerializer [Write SOAP Headers]";
	public const string TraceReadRequest = "XmlSerializer [Read Request]";
	public const string TraceReadResponse = "XmlSerializer [Read Response]";
	public const string TraceReadHeaders = "XmlSerializer [Read SOAP Headers]";
}
}
