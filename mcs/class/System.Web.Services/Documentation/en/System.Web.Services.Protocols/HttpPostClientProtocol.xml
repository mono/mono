<?xml version="1.0" encoding="utf-8"?>
<Type Name="HttpPostClientProtocol" FullName="System.Web.Services.Protocols.HttpPostClientProtocol">
  <TypeSignature Language="C#" Maintainer="auto" Value="public class HttpPostClientProtocol : System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpSimpleClientProtocol</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>When an XML Web service client uses the HTTP-POST protocol, by default parameters are encoded within the HTTP body using URL encoding rules and uses plain XML for the response. This protocol uses classes that derive from <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> to encode parameters and return values into standard MIME formats. The encoders to use are specified in the service description.</para>
      <para>If you are building an XML Web service client using ASP.NET, then a proxy class deriving indirectly or directly from <see cref="T:System.Web.Services.Protocols.WebClientProtocol" /> needs to be created for the XML Web service you want to call. When the XML Web service client is calling using HTTP, derive the proxy class <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />, which in turn derives from <see cref="T:System.Web.Services.Protocols.WebClientProtocol" />.</para>
      <para>
        <see cref="T:System.Web.Services.Protocols.HttpGetClientProtocol" /> and <see cref="T:System.Web.Services.Protocols.HttpPostClientProtocol" /> derive from <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />, providing the support for calling an XML Web service method using HTTP-GET and HTTP-POST respectively. Clients calling an XML Web service using SOAP should derive from <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />.</para>
      <para>For details on building a proxy class, see <format type="text/html"><a href="142D91F5-3249-4CFC-A431-1F3ACB76D756">[&lt;topic://cpconcreatingwebserviceproxy&gt;]</a></format>.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The base class for XML Web service client proxies that use the HTTP-POST protocol.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpPostClientProtocol ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HttpPostClientProtocol" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method overrides the base version of <see cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" /> to specify that the HTTP request to the XML Web service is made using HTTP-POST. By overriding this method, you can customize the <see cref="T:System.Net.WebRequest" /> object before the XML Web service request is made. For example, you can add a custom header to the request.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Net.WebRequest" /> instance for the specified URI.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Net.WebRequest" /> instance.</para>
        </returns>
        <param name="uri">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Uri" /> to use when creating the <see cref="T:System.Net.WebRequest" />. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>