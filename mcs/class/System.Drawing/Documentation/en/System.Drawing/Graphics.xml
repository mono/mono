<?xml version="1.0" encoding="utf-8"?>
<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <TypeSignature Language="C#" Maintainer="auto" Value="public sealed class Graphics : MarshalByRefObject, System.Drawing.IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 D1 FA 57 C4 AE D9 F0 A3 2E 84 AA 0F AE FD 0D E9 E8 FD 6A EC 8F 87 FB 03 76 6C 83 4C 99 92 1E B2 3B E7 9A D9 D5 DC C1 DD 9A D2 36 13 21 02 90 0B 72 3C F9 80 95 7F C4 E1 77 10 8F C6 07 77 4F 29 E8 32 0E 92 EA 05 EC E4 E8 21 C0 A5 EF E8 F1 64 5C 4C 0C 93 C1 AB 99 28 5D 62 2C AA 65 2C 1D FA D6 3D 74 5D 6F 2D E5 F1 7E 5E AF 0F C4 96 3D 26 1C 8A 12 43 65 18 20 6D C0 93 34 4D 5A D2 93]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Drawing.Graphics" /> class provides methods for drawing objects to the display device. A <see cref="T:System.Drawing.Graphics" /> is associated with a specific device context.</para>
      <para>You can obtain a <see cref="T:System.Drawing.Graphics" /> object by calling the <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> method on an object that inherits from <see cref="T:System.Windows.Forms.Control" />, or by handling a control's <see cref="E:System.Windows.Forms.Control.Paint" /> event and accessing the <see cref="P:System.Windows.Forms.PaintEventArgs.Graphics" /> property of the <see cref="T:System.Windows.Forms.PaintEventArgs" /> class. You can also create a <see cref="T:System.Drawing.Graphics" /> object from an image by using the <see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" /> method. For more information about creating a <see cref="T:System.Drawing.Graphics" /> object, see <format type="text/html"><a href="162861f9-f050-445e-8abb-b2c43a918b8b">How to: Create Graphics Objects for Drawing</a></format>. </para>
      <para>You can draw many different shapes and lines by using a <see cref="T:System.Drawing.Graphics" /> object. For more information about how to draw lines and shapes, see the specific DrawGraphicalElement method for the line or shape you want to draw. These methods include <see cref="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />, <see cref="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />, <see cref="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />, <see cref="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />, and <see cref="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />. For more information about how to draw lines and shapes, see <format type="text/html"><a href="8a7542ab-3e9e-443f-8405-2d6053528e20">Using a Pen to Draw Lines and Shapes</a></format> and <format type="text/html"><a href="bf8f7fff-5a90-41e8-9051-494449fb2844">Using a Brush to Fill Shapes</a></format>. </para>
      <para>You can also draw images and icons by using the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> and <see cref="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" /> methods, respectively. To perform a bit-block transfer of color data from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" /> object, see <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />. For more information about how to draw images with a <see cref="T:System.Drawing.Graphics" /> object, see <format type="text/html"><a href="a626d701-bd99-4fd8-b92f-7b8f794e042b">Working with Images, Bitmaps, Icons, and Metafiles</a></format>.</para>
      <para>In addition, you can manipulate the coordinate system used by the <see cref="T:System.Drawing.Graphics" /> object. For more information on the coordinate system and how to manipulate it, see <format type="text/html"><a href="9fef7451-bddf-4c68-9350-400d1f1f25a3">Coordinate Systems and Transformations</a></format>.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Encapsulates a ndptecgdiplus drawing surface. This class cannot be inherited.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is valid only if this <see cref="T:System.Drawing.Graphics" /> is associated with a <see cref="T:System.Drawing.Imaging.Metafile" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a comment to the current <see cref="T:System.Drawing.Imaging.Metafile" />.</para>
        </summary>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of bytes that contains the comment. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method with the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method of a <see cref="T:System.Drawing.Graphics" />, an information block that holds the state of the <see cref="T:System.Drawing.Graphics" /> is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer" /> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics" /> to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call.</para>
          <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the <see cref="T:System.Drawing.Graphics" /> is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call are also removed.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.Save" /> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call, a <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />  method call is paired with a <see cref="M:System.Drawing.Graphics.Save" /> method call.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method are removed from the stack. Likewise, when you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.Save" /> method are removed from the stack.</para>
          <para>The graphics state established by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics" /> and opens and uses a new graphics container.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that represents the state of this <see cref="T:System.Drawing.Graphics" /> at the time of the method call.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method with the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method of a <see cref="T:System.Drawing.Graphics" />, an information block that holds the state of the <see cref="T:System.Drawing.Graphics" /> is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer" /> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics" /> to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call.</para>
          <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the <see cref="T:System.Drawing.Graphics" /> is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call are also removed.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.Save" /> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call, a <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />  method call is paired with a <see cref="M:System.Drawing.Graphics.Save" /> method call.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method are removed from the stack. Likewise, when you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.Save" /> method are removed from the stack.</para>
          <para>This method specifies a scale transformation for the new graphics container with the <paramref name="dstrect" /> and <paramref name="srcrect" /> parameters. The scale is equal to the transformation that, when applied to <paramref name="srcrect" />, results in <paramref name="dstrect" />.</para>
          <para>The graphics state established by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics" /> and opens and uses a new graphics container with the specified scale transformation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that represents the state of this <see cref="T:System.Drawing.Graphics" /> at the time of the method call.</para>
        </returns>
        <param name="dstrect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that, together with the <paramref name="srcrect" /> parameter, specifies a scale transformation for the container. </param>
        <param name="srcrect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that, together with the <paramref name="dstrect" /> parameter, specifies a scale transformation for the container. </param>
        <param name="unit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the unit of measure for the container. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method with the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method of a <see cref="T:System.Drawing.Graphics" />, an information block that holds the state of the <see cref="T:System.Drawing.Graphics" /> is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer" /> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics" /> to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call.</para>
          <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the <see cref="T:System.Drawing.Graphics" /> is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call are also removed.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.Save" /> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call, a <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />  method call is paired with a <see cref="M:System.Drawing.Graphics.Save" />  method call.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, all information blocks placed on the stack (by the Save method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method are removed from the stack. Likewise, when you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.Save" /> method are removed from the stack.</para>
          <para>This method specifies a scale transformation for the new graphics container with the <paramref name="dstrect" /> and <paramref name="srcrect" /> parameters. The scale is equal to the transformation that, when applied to <paramref name="srcrect" />, results in <paramref name="dstrect" />.</para>
          <para>The graphics state established by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method includes the rendering qualities of the default graphics state; any rendering-quality state changes existing when the method is called are reset to the default values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics" /> and opens and uses a new graphics container with the specified scale transformation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that represents the state of this <see cref="T:System.Drawing.Graphics" /> at the time of the method call.</para>
        </returns>
        <param name="dstrect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that, together with the <paramref name="srcrect" /> parameter, specifies a scale transformation for the new graphics container. </param>
        <param name="srcrect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that, together with the <paramref name="dstrect" /> parameter, specifies a scale transformation for the new graphics container. </param>
        <param name="unit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the unit of measure for the container. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" /> method clears the state of the graphics object and should not be called when the graphics object cannot be updated. For example, if the <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" /> method is called on a secure desktop in a terminal server session, an <see cref="T:System.Runtime.InteropServices.ExternalException" /> may occur, leaving the <see cref="T:System.Drawing.Graphics" /> object in an inconsistent state.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears the entire drawing surface and fills it with the specified background color.</para>
        </summary>
        <param name="color">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Color" /> structure that represents the background color of the drawing surface. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current clipping region, represented as a Region.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Modifying the <see cref="T:System.Drawing.Region" /> object returned by the <see cref="P:System.Drawing.Graphics.Clip" /> property does not affect subsequent drawing with the <see cref="T:System.Drawing.Graphics" /> object. To change the clip region, replace the <see cref="P:System.Drawing.Graphics.Clip" /> property value with a new <see cref="T:System.Drawing.Region" /> object. To determine whether the clipping region is infinite, retrieve the <see cref="P:System.Drawing.Graphics.Clip" /> property and call its <see cref="M:System.Drawing.Region.IsInfinite(System.Drawing.Graphics)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a <see cref="T:System.Drawing.Region" /> that limits the drawing region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <value>The current bounding box for the clipping region.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The unit for resulting rectangle is designated by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property. The default unit is pixels. A <see cref="T:System.Drawing.Graphics" /> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.</para>
          <para>If the clipping region is infinite, the <see cref="P:System.Drawing.Graphics.ClipBounds" /> property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <see cref="P:System.Drawing.Graphics.Clip" /> property and call its <see cref="M:System.Drawing.Region.IsInfinite(System.Drawing.Graphics)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.Drawing.RectangleF" /> structure that bounds the clipping region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Drawing2D.CompositingMode'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.</para>
          <block subset="none" type="note">
            <para>You should not use a <see cref="P:System.Drawing.Graphics.CompositingMode" /> property value of <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceCopy" /> when the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> property is set to <see cref="F:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit" />. An exception could occur or the image may not render correctly.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that specifies how composited images are drawn to this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Drawing2D.CompositingQuality'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The compositing quality determines the rendering quality level of composited images.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the rendering quality of composited images drawn to this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" /> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" /> methods that takes a <see cref="T:System.Drawing.CopyPixelOperation" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="upperLeftSource">
          <attribution license="cc4" from="Microsoft" modified="false" />The point at the upper-left corner of the source rectangle.</param>
        <param name="upperLeftDestination">
          <attribution license="cc4" from="Microsoft" modified="false" />The point at the upper-left corner of the destination rectangle.</param>
        <param name="blockRegionSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The size of the area to be transferred.</param>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" /> methods are useful for layering one image on top of another. The <paramref name="copyPixelOperation" /> parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="upperLeftSource">
          <attribution license="cc4" from="Microsoft" modified="false" />The point at the upper-left corner of the source rectangle.</param>
        <param name="upperLeftDestination">
          <attribution license="cc4" from="Microsoft" modified="false" />The point at the upper-left corner of the destination rectangle.</param>
        <param name="blockRegionSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The size of the area to be transferred.</param>
        <param name="copyPixelOperation">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Drawing.CopyPixelOperation" /> values.</param>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" /> methods are useful for layering one image on top of another. To specify how the source and destination colors are blended, use one of the <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" /> methods that takes a <see cref="T:System.Drawing.CopyPixelOperation" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="sourceX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the point at the upper-left corner of the source rectangle.</param>
        <param name="sourceY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the point at the upper-left corner of the source rectangle.</param>
        <param name="destinationX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the point at the upper-left corner of the destination rectangle.</param>
        <param name="destinationY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the point at the upper-left corner of the destination rectangle.</param>
        <param name="blockRegionSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The size of the area to be transferred.</param>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" /> methods are useful for layering one image on top of another. The <paramref name="copyPixelOperation" /> parameter allows you to specify if and how the source colors should be blended with the colors in the destination area.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="sourceX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the point at the upper-left corner of the source rectangle.</param>
        <param name="sourceY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the point at the upper-left corner of the source rectangle</param>
        <param name="destinationX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the point at the upper-left corner of the destination rectangle.</param>
        <param name="destinationY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the point at the upper-left corner of the destination rectangle.</param>
        <param name="blockRegionSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The size of the area to be transferred.</param>
        <param name="copyPixelOperation">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Drawing.CopyPixelOperation" /> values.</param>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling <see cref="M:System.Drawing.Graphics.Dispose" /> allows the resources used by this <see cref="T:System.Drawing.Graphics" /> to be reallocated for other purposes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases all resources used by this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not return a value.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'float'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about creating high-resolution applications, see</para>
          <para>
            <see cref="http://go.microsoft.com/fwlink/?LinkId=159804">High DPI</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the horizontal resolution of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'float'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about creating high-resolution applications, see</para>
          <para>
            <see cref="http://go.microsoft.com/fwlink/?LinkId=159804">High DPI</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the vertical resolution of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle" /> parameter and the <paramref name="startAngle" /> + <paramref name="sweepAngle" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the arc. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that defines the boundaries of the ellipse. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to ending point of the arc. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle" /> parameter and the <paramref name="startAngle" /> + <paramref name="sweepAngle" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the arc. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that defines the boundaries of the ellipse. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to ending point of the arc. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle" /> parameter and the <paramref name="startAngle" /> + <paramref name="sweepAngle" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the arc. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle that defines the ellipse. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle that defines the ellipse. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to ending point of the arc. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the <paramref name="startAngle" /> parameter and the <paramref name="startAngle" /> + <paramref name="sweepAngle" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the arc. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle that defines the ellipse. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle that defines the ellipse. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to ending point of the arc. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Bézier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a Bézier spline defined by four <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> structure that determines the color, width, and style of the curve. </param>
        <param name="pt1">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the starting point of the curve. </param>
        <param name="pt2">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the first control point for the curve. </param>
        <param name="pt3">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the second control point for the curve. </param>
        <param name="pt4">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the ending point of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a Bézier spline defined by four <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="pt1">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the starting point of the curve. </param>
        <param name="pt2">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the first control point for the curve. </param>
        <param name="pt3">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the second control point for the curve. </param>
        <param name="pt4">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the ending point of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a Bézier spline defined by four ordered pairs of coordinates that represent points.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="x1">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the starting point of the curve. </param>
        <param name="y1">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the starting point of the curve. </param>
        <param name="x2">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the first control point of the curve. </param>
        <param name="y2">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the first control point of the curve. </param>
        <param name="x3">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the second control point of the curve. </param>
        <param name="y3">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the second control point of the curve. </param>
        <param name="x4">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the ending point of the curve. </param>
        <param name="y4">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the ending point of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a series of Bézier splines from an array of <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a series of Bézier splines from an array of <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and height of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF" /> structures.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and height of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point" /> structures using a specified tension.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and height of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
        <param name="fillmode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the curve is filled. This parameter is required but ignored. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF" /> structures.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.PointF" /> structures using a specified tension.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and height of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
        <param name="fillmode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the curve is filled. This parameter is required but is ignored. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.Point" /> structures for a curve to be drawn.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and height of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.PointF" /> structures for a curve to be drawn.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.Point" /> structures for a curve to be drawn.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point" /> structures using a specified tension.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.PointF" /> structures for a curve to be drawn.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" /> structures using a specified tension.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points that define the curve. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.PointF" /> structures for a curve to be drawn.</para>
          <para>The value of the <paramref name="offset" /> parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.</para>
          <para>The value of the <paramref name="numberOfSegments" /> parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the <paramref name="numberOfSegments" /> parameter must be at least 1. The value of the <paramref name="offset" /> parameter plus the value of the <paramref name="numberOfSegments" /> parameter must be less than the number of elements in the array of the <paramref name="points" /> parameter.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" /> structures. The drawing begins offset from the beginning of the array.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />Offset from the first element in the array of the <paramref name="points" /> parameter to the starting point in the curve. </param>
        <param name="numberOfSegments">
          <attribution license="cc4" from="Microsoft" modified="false" />Number of segments after the starting point to include in the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.Point" /> structures for a curve to be drawn.</para>
          <para>The value of the <paramref name="offset" /> parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.</para>
          <para>The value of the <paramref name="numberOfSegments" /> parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the <paramref name="numberOfSegments" /> parameter must be at least 1. The value of the <paramref name="offset" /> parameter plus the value of the <paramref name="numberOfSegments" /> parameter must be less than the number of elements in the array of the <paramref name="points" /> parameter.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point" /> structures using a specified tension.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />Offset from the first element in the array of the <paramref name="points" /> parameter to the starting point in the curve. </param>
        <param name="numberOfSegments">
          <attribution license="cc4" from="Microsoft" modified="false" />Number of segments after the starting point to include in the curve. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a cardinal spline that passes through each point in the array.</para>
          <para>The array of points must contain at least three <see cref="T:System.Drawing.PointF" /> structures for curve to be drawn.</para>
          <para>The value of the <paramref name="offset" /> parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.</para>
          <para>The value of the <paramref name="numberOfSegments" /> parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the <paramref name="numberOfSegments" /> parameter must be at least 1. The value of the <paramref name="offset" /> parameter plus the value of the <paramref name="numberOfSegments" /> parameter must be less than the number of elements in the array of the <paramref name="points" /> parameter.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" /> structures using a specified tension. The drawing begins offset from the beginning of the array.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the curve. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />Offset from the first element in the array of the <paramref name="points" /> parameter to the starting point in the curve. </param>
        <param name="numberOfSegments">
          <attribution license="cc4" from="Microsoft" modified="false" />Number of segments after the starting point to include in the curve. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an ellipse that is defined by the bounding rectangle specified by the <paramref name="rect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an ellipse specified by a bounding <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the ellipse. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that defines the boundaries of the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an ellipse that is defined by the bounding rectangle specified by the <paramref name="rect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF" />.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the ellipse. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that defines the boundaries of the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an ellipse that is defined by the bounding rectangle described by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the ellipse. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws an ellipse that is defined by the bounding rectangle described by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the ellipse. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the image represented by the specified <see cref="T:System.Drawing.Icon" /> within the area specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="icon">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Icon" /> to draw. </param>
        <param name="targetRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the resulting image on the display surface. The image contained in the <paramref name="icon" /> parameter is scaled to the dimensions of this rectangular area. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the image represented by the specified <see cref="T:System.Drawing.Icon" /> at the specified coordinates.</para>
        </summary>
        <param name="icon">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Icon" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the image represented by the specified <see cref="T:System.Drawing.Icon" /> without scaling the image.</para>
        </summary>
        <param name="icon">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Icon" /> to draw. </param>
        <param name="targetRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the resulting image. The image is not scaled to fit this rectangle, but retains its original size. If the image is larger than the rectangle, it is clipped to fit inside it. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" />, using its original physical size, at the specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the location of the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="destPoints" /> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point" /> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
          <para>The image represented by the <paramref name="image" /> parameter is scaled and sheared to fit the shape of the parallelogram specified by the <paramref name="destPoints" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified shape and size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destPoints">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of three <see cref="T:System.Drawing.Point" /> structures that define a parallelogram. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" />, using its original physical size, at the specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="destPoints" /> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF" /> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
          <para>The image represented by the <paramref name="image" /> object is scaled and sheared to fit the shape of the parallelogram specified by the <paramref name="destPoints" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified shape and size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destPoints">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of three <see cref="T:System.Drawing.PointF" /> structures that define a parallelogram. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The image represented by the <paramref name="image" /> object is scaled to the dimensions of the <paramref name="rect" /> rectangle.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The image represented by the <paramref name="image" /> object is scaled to the dimensions of the <paramref name="rect" /> rectangle.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>The <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" /> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" /> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified image, using its original physical size, at the location specified by a coordinate pair.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" />, using its original physical size, at the specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="destPoints" /> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point" /> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
          <para>The <paramref name="srcRect" /> parameter specifies a rectangular portion of the <paramref name="image" /> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destPoints">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of three <see cref="T:System.Drawing.Point" /> structures that define a parallelogram. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="destPoints" /> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF" /> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
          <para>The <paramref name="srcRect" /> parameter specifies a rectangular portion of the <paramref name="image" /> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destPoints">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of three <see cref="T:System.Drawing.PointF" /> structures that define a parallelogram. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="srcRect" /> parameter specifies a rectangular portion of the <paramref name="image" /> object to draw. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="srcRect" /> parameter specifies a rectangular portion of the <paramref name="image" /> object to draw. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="destPoints" /> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.Point" /> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
          <para>The <paramref name="srcRect" /> parameter specifies a rectangular portion of the <paramref name="image" /> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destPoints">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of three <see cref="T:System.Drawing.Point" /> structures that define a parallelogram. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
        <param name="imageAttr">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> that specifies recoloring and gamma information for the <paramref name="image" /> object. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="destPoints" /> parameter specifies three points of a parallelogram. The three <see cref="T:System.Drawing.PointF" /> structures represent the upper-left, upper-right, and lower-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.</para>
          <para>The <paramref name="srcRect" /> parameter specifies a rectangular portion of the <paramref name="image" /> object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the <paramref name="destPoints" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destPoints">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of three <see cref="T:System.Drawing.PointF" /> structures that define a parallelogram. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
        <param name="imageAttr">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> that specifies recoloring and gamma information for the <paramref name="image" /> object. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a portion of an image at a specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the portion of the <paramref name="image" /> object to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The rectangle defined by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters determines the position and size of the drawn image.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the drawn image. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a portion of an image at a specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
        <param name="srcRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the portion of the <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used by the <paramref name="srcRect" /> parameter. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The rectangle defined by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters determines the position and size of the drawn image.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the drawn image. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <param name="callbackData">To be added: an object of type 'int'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <param name="callbackData">To be added: an object of type 'int'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="srcX" />, <paramref name="srcY" />, <paramref name="srcWidth" />, and <paramref name="srcHeight" /> parameters specify a rectangular portion, of the <paramref name="image" /> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
        <param name="srcX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcWidth">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the portion of the source image to draw. </param>
        <param name="srcHeight">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the portion of the source image to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used to determine the source rectangle. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="srcX" />, <paramref name="srcY" />, <paramref name="srcWidth" />, and <paramref name="srcHeight" /> parameters specify a rectangular portion, of the <paramref name="image" /> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
        <param name="srcX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcWidth">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the portion of the source image to draw. </param>
        <param name="srcHeight">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the portion of the source image to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used to determine the source rectangle. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="srcX" />, <paramref name="srcY" />, <paramref name="srcWidth" />, and <paramref name="srcHeight" /> parameters specify a rectangular portion, of the <paramref name="image" /> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
        <param name="srcX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcWidth">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the portion of the source image to draw. </param>
        <param name="srcHeight">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the portion of the source image to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used to determine the source rectangle. </param>
        <param name="imageAttr">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> that specifies recoloring and gamma information for the <paramref name="image" /> object. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="srcX" />, <paramref name="srcY" />, <paramref name="srcWidth" />, and <paramref name="srcHeight" /> parameters specify a rectangular portion, of the <paramref name="image" /> object to draw. The rectangle is relative to the upper-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the <paramref name="destRect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" /> at the specified location and with the specified size.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="destRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
        <param name="srcX">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcY">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
        <param name="srcWidth">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the portion of the source image to draw. </param>
        <param name="srcHeight">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the portion of the source image to draw. </param>
        <param name="srcUnit">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.GraphicsUnit" /> enumeration that specifies the units of measure used to determine the source rectangle. </param>
        <param name="imageAttrs">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> that specifies recoloring and gamma information for the <paramref name="image" /> object. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcX">To be added: an object of type 'int'</param>
        <param name="srcY">To be added: an object of type 'int'</param>
        <param name="srcWidth">To be added: an object of type 'int'</param>
        <param name="srcHeight">To be added: an object of type 'int'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcX">To be added: an object of type 'float'</param>
        <param name="srcY">To be added: an object of type 'float'</param>
        <param name="srcWidth">To be added: an object of type 'float'</param>
        <param name="srcHeight">To be added: an object of type 'float'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttrs">To be added.</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcX">To be added: an object of type 'int'</param>
        <param name="srcY">To be added: an object of type 'int'</param>
        <param name="srcWidth">To be added: an object of type 'int'</param>
        <param name="srcHeight">To be added: an object of type 'int'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttrs">To be added.</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">To be added: an object of type 'Image'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcX">To be added: an object of type 'float'</param>
        <param name="srcY">To be added: an object of type 'float'</param>
        <param name="srcWidth">To be added: an object of type 'float'</param>
        <param name="srcHeight">To be added: an object of type 'float'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="imageAttrs">To be added.</param>
        <param name="callback">To be added: an object of type 'Graphics+DrawImageAbort'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>The <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" /> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" /> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a specified image using its original physical size at a specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that specifies the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>The <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" /> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" /> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a specified image using its original physical size at a specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> that specifies the upper-left corner of the drawn image. The X and Y properties of the rectangle specify the upper-left corner. The Width and Height properties are ignored. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>The <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" /> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" /> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified image using its original physical size at the location specified by a coordinate pair.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Drawing.Image" /> stores a value for pixel width and a value for horizontal resolution (dots per inch). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.</para>
          <para>The <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" /> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution (dots per inch) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <see cref="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" /> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be (216/72)*96 = 288.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a specified image using its original physical size at a specified location.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> to draw. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn image. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn image. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Not used. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Not used. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.</para>
        </summary>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Drawing.Image" /> to draw.</param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Drawing.Rectangle" /> in which to draw the image.</param>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <para>Draws a line between points p1 and p2 using the given pen.</para>
          <para>
The pen must be non-null, or an ArgumentNullException is raised.
</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a line connecting two <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the line. </param>
        <param name="pt1">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the first point to connect. </param>
        <param name="pt2">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure that represents the second point to connect. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a line connecting the two points specified by the <paramref name="pt1" /> and p<paramref name="2" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a line connecting two <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the line. </param>
        <param name="pt1">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the first point to connect. </param>
        <param name="pt2">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the second point to connect. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a line connecting the two points specified by the <paramref name="x1" />, <paramref name="y1" />, <paramref name="x2" />, and <paramref name="y2" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a line connecting the two points specified by the coordinate pairs.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the line. </param>
        <param name="x1">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the first point. </param>
        <param name="y1">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the first point. </param>
        <param name="x2">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the second point. </param>
        <param name="y2">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the second point. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a line connecting the two points specified by the <paramref name="x1" />, <paramref name="y1" />, <paramref name="x2" />, and <paramref name="y2" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a line connecting the two points specified by the coordinate pairs.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the line. </param>
        <param name="x1">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the first point. </param>
        <param name="y1">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the first point. </param>
        <param name="x2">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the second point. </param>
        <param name="y2">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the second point. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the line segments. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that represent the points to connect. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the line segments. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points to connect. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current transformation in the graphic context is applied to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> before it is drawn.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the path. </param>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" /> structure and two radial lines.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the pie shape. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie shape. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the pie shape. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie shape. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters. The pie shape consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the pie shape. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie shape. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters. The pie shape consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the pie shape. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle measured in degrees clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie shape. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a polygon defined by an array of <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the polygon. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the polygon. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For information about how to draw a <see cref="T:System.Drawing.RectangleF" />, see <see cref="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the rectangle. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to draw. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For information about how to draw a <see cref="T:System.Drawing.RectangleF" />, see <see cref="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a rectangle specified by a coordinate pair, a width, and a height.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the rectangle. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle to draw. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle to draw. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle to draw. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle to draw. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For information about how to draw a <see cref="T:System.Drawing.RectangleF" />, see <see cref="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a rectangle specified by a coordinate pair, a width, and a height.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the rectangle. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle to draw. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle to draw. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />The width of the rectangle to draw. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />The height of the rectangle to draw. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the outlines of the rectangles. </param>
        <param name="rects">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Rectangle" /> structures that represent the rectangles to draw. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws a series of rectangles specified by <see cref="T:System.Drawing.RectangleF" /> structures.</para>
        </summary>
        <param name="pen">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Pen" /> that determines the color, width, and style of the outlines of the rectangles. </param>
        <param name="rects">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.RectangleF" /> structures that represent the rectangles to draw. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />String to draw. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the color and texture of the drawn text. </param>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that specifies the upper-left corner of the drawn text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text represented by the <paramref name="s" /> parameter is drawn inside the rectangle represented by the <paramref name="layoutRectangle" /> parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word. To further manipulate how the string is drawn inside the rectangle use the <see cref="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> overload that takes a <see cref="T:System.Drawing.StringFormat" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />String to draw. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the color and texture of the drawn text. </param>
        <param name="layoutRectangle">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" />.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />String to draw. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the color and texture of the drawn text. </param>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that specifies the upper-left corner of the drawn text. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text represented by the <paramref name="s" /> parameter is drawn inside the rectangle represented by the <paramref name="layoutRectangle" /> parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the <paramref name="format" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" />.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />String to draw. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the color and texture of the drawn text. </param>
        <param name="layoutRectangle">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location of the drawn text. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />String to draw. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the color and texture of the drawn text. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn text. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" /> and <see cref="T:System.Drawing.Font" /> objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" />.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />String to draw. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the color and texture of the drawn text. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the drawn text. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the drawn text. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method with the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method to create nested graphics containers. Graphics containers retain graphics state, such as transformation, clipping region, and rendering properties.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method of a <see cref="T:System.Drawing.Graphics" />, an information block that holds the state of the <see cref="T:System.Drawing.Graphics" /> is put on a stack. The <see cref="M:System.Drawing.Graphics.BeginContainer" /> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that identifies that information block. When you pass the identifying object to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics" /> to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call.</para>
          <para>Containers can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method several times before you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method. Each time you call the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, the <see cref="T:System.Drawing.Graphics" /> is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call are also removed.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.Save" /> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method. Just as an <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call, a <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.Save" /> method call.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method are removed from the stack. Likewise, when you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.Save" /> method are removed from the stack.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Closes the current graphics container and restores the state of this <see cref="T:System.Drawing.Graphics" /> to the state saved by a call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method.</para>
        </summary>
        <param name="container">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> that represents the container this method restores. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'Point'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'PointF'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'RectangleF'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'Point'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'PointF'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'RectangleF'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'Point'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'Point'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'PointF'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'PointF'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'RectangleF'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'Point'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'PointF'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcUnit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'Point'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="unit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'Point []'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="unit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoint">To be added: an object of type 'PointF'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="unit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destPoints">To be added: an object of type 'PointF []'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="unit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'Rectangle'</param>
        <param name="srcRect">To be added: an object of type 'Rectangle'</param>
        <param name="unit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">To be added: an object of type 'Imaging.Metafile'</param>
        <param name="destRect">To be added: an object of type 'RectangleF'</param>
        <param name="srcRect">To be added: an object of type 'RectangleF'</param>
        <param name="unit">To be added: an object of type 'GraphicsUnit'</param>
        <param name="callback">To be added: an object of type 'Graphics+EnumerateMetafileProc'</param>
        <param name="callbackData">To be added: an object of type 'IntPtr'</param>
        <param name="imageAttr">To be added: an object of type 'Imaging.ImageAttributes'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method excludes the area specified by the <paramref name="rect" /> parameter from the current clip region and assigns the resulting area to the <see cref="P:System.Drawing.Graphics.Clip" /> property of this <see cref="T:System.Drawing.Graphics" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics" /> to exclude the area specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that specifies the rectangle to exclude from the clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method excludes the area specified by the <paramref name="region" /> parameter from the current clip region and assigns the resulting area to the <see cref="P:System.Drawing.Graphics.Clip" /> property of this <see cref="T:System.Drawing.Graphics" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics" /> to exclude the area specified by a <see cref="T:System.Drawing.Region" />.</para>
        </summary>
        <param name="region">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Region" /> that specifies the region to exclude from the clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.PointF" /> structures.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point" /> structures using the specified fill mode.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
        <param name="fillmode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the curve is filled. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>This method uses a default tension of 0.5.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF" /> structures using the specified fill mode.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
        <param name="fillmode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the curve is filled. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point" /> structures using the specified fill mode and tension.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that define the spline. </param>
        <param name="fillmode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the curve is filled. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.</para>
          <para>The array of points must contain at least four <see cref="T:System.Drawing.Point" /> structures.</para>
          <para>The <paramref name="tension" /> parameter determines the shape of the spline. If the value of the <paramref name="tension" /> parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the <paramref name="tension" /> parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF" /> structures using the specified fill mode and tension.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that define the spline. </param>
        <param name="fillmode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the curve is filled. </param>
        <param name="tension">
          <attribution license="cc4" from="Microsoft" modified="false" />Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush" />. The ellipse is defined by the bounding rectangle represented by the <paramref name="rect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush" />. The ellipse is defined by the bounding rectangle represented by the <paramref name="rect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that represents the bounding rectangle that defines the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush" />. The ellipse is defined by the bounding rectangle represented by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of an ellipse with a <see cref="T:System.Drawing.Brush" />. The ellipse is defined by the bounding rectangle represented by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> consists of a series of line and curve segments. If the path represented by the <paramref name="path" /> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that represents the path to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a pie section defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that represents the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie section. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie section. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of a pie section defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie section consists of the two radial lines defined by the <paramref name="startAngle" /> and <paramref name="sweepAngle" /> parameters, and the arc between the intersections of those radial lines with the ellipse.</para>
          <para>If the <paramref name="sweepAngle" /> parameter is greater than 360 degrees or less than -360 degrees, it is treated as if it were 360 degrees or -360 degrees, respectively.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
        <param name="startAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
        <param name="sweepAngle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle in degrees measured clockwise from the <paramref name="startAngle" /> parameter to the second side of the pie section. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" /> structures.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.PointF" /> structures.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" /> structures using the specified fill mode.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that represent the vertices of the polygon to fill. </param>
        <param name="fillMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines the style of the fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Every two consecutive points in the array specify a side of the polygon. In addition, if the last point and the first point do not coincide, they specify the closing side of the polygon.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.PointF" /> structures using the specified fill mode.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="points">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the vertices of the polygon to fill. </param>
        <param name="fillMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines the style of the fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of the rectangle defined by the <paramref name="rect" /> parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that represents the rectangle to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of the rectangle defined by the <paramref name="rect" /> parameter, including the specified upper-left corner and up to the calculated lower and bottom edges.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that represents the rectangle to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of the rectangle defined by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle to fill. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle to fill. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle to fill. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method fills the interior of the rectangle defined by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters, including the specified upper-left corner and up to the calculated lower and bottom edges.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle to fill. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle to fill. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle to fill. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" /> structures.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rects">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Rectangle" /> structures that represent the rectangles to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.RectangleF" /> structures.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="rects">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.RectangleF" /> structures that represent the rectangles to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Region" /> is composed of rectangles and paths. If the region is not closed, an additional segment is added from the last point to the first point to close it.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the interior of a <see cref="T:System.Drawing.Region" />.</para>
        </summary>
        <param name="brush">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Brush" /> that determines the characteristics of the fill. </param>
        <param name="region">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Region" /> that represents the area to fill. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method starts a flush and returns immediately without waiting for any currently executing graphics operation to finish.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A value of <see cref="F:System.Drawing.Drawing2D.FlushIntention.Flush" /> for the <paramref name="intention" /> parameter specifies that the method return immediately after beginning the flush, while a value of <see cref="F:System.Drawing.Drawing2D.FlushIntention.Sync" /> specifies that the method wait before returning until any existing operations finish.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.</para>
        </summary>
        <param name="intention">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> enumeration that specifies whether the method returns immediately or waits for any existing operations to finish. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You should always call the <see cref="M:System.Drawing.Graphics.Dispose" /> method to release the <see cref="T:System.Drawing.Graphics" /> and related resources created by the <see cref="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" /> method.</para>
          <para>Even if the display device has an associated ICM color profile, ndptecgdiplus will not use that profile by default. To enable ICM for a <see cref="T:System.Drawing.Graphics" />, construct the <see cref="T:System.Drawing.Graphics" /> from an HDC after you pass the HDC (and ICM_ON) to the SetICMMode function. Then any drawing done by the <see cref="T:System.Drawing.Graphics" /> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.</para>
          <para>The state of the device context (mapping mode, logical unit, and the like) at the time you call <see cref="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" /> can affect rendering done by the <see cref="T:System.Drawing.Graphics" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Drawing.Graphics" /> from the specified handle to a device context.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a new <see cref="T:System.Drawing.Graphics" /> for the specified device context.</para>
        </returns>
        <param name="hdc">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a device context. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You should always call the <see cref="M:System.Drawing.Graphics.Dispose" /> method to release the <see cref="T:System.Drawing.Graphics" /> and related resources created by the <see cref="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" /> method.</para>
          <para>Even if the display device has an associated ICM color profile, ndptecgdiplus will not use that profile by default. To enable ICM for a <see cref="T:System.Drawing.Graphics" />, construct the <see cref="T:System.Drawing.Graphics" /> from an HDC after you pass the HDC (and ICM_ON) to the SetICMMode function. Then any drawing done by the <see cref="T:System.Drawing.Graphics" /> will be adjusted according to the ICM profile associated with the display device. Enabling ICM will result in slower performance.</para>
          <para>The state of the device context (mapping mode, logical unit, and the like) at the time you call <see cref="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" /> can affect rendering done by the <see cref="T:System.Drawing.Graphics" />.</para>
          <para>The device handle is typically used to query specific printer capabilities.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Drawing.Graphics" /> from the specified handle to a device context and handle to a device.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a new <see cref="T:System.Drawing.Graphics" /> for the specified device context and device.</para>
        </returns>
        <param name="hdc">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a device context. </param>
        <param name="hdevice">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a device. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method should not be used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a <see cref="T:System.Drawing.Graphics" /> for the specified device context.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Graphics" /> for the specified device context.</para>
        </returns>
        <param name="hdc">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a device context. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You should always call the <see cref="M:System.Drawing.Graphics.Dispose" /> method to release the <see cref="T:System.Drawing.Graphics" /> and related resources created by the <see cref="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Drawing.Graphics" /> from the specified handle to a window.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a new <see cref="T:System.Drawing.Graphics" /> for the specified window handle.</para>
        </returns>
        <param name="hwnd">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a window. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method should not be used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Drawing.Graphics" /> for the specified windows handle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Graphics" /> for the specified window handle.</para>
        </returns>
        <param name="hwnd">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a window. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the image has an indexed pixel format, this method throws an exception with the message, "A Graphics object cannot be created from an image that has an indexed pixel format." The indexed pixel formats are shown in the following list.</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed" />
              </para>
            </item>
          </list>
          <para>You can save the indexed image as another format by using the <see cref="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageFormat)" /> method and then retrieve a <see cref="T:System.Drawing.Graphics" /> object for the new image.</para>
          <para>This method also throws an exception if the image has any of the following pixel formats.</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.Undefined" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.DontCare" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale" />
              </para>
            </item>
          </list>
          <para>You should always call the <see cref="M:System.Drawing.Graphics.Dispose" /> method to release the <see cref="T:System.Drawing.Graphics" /> and related resources created by the <see cref="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.Drawing.Graphics" /> from the specified <see cref="T:System.Drawing.Image" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a new <see cref="T:System.Drawing.Graphics" /> for the specified <see cref="T:System.Drawing.Image" />.</para>
        </returns>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Image" /> from which to create the new <see cref="T:System.Drawing.Graphics" />. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is an object array where the first element contains the cumulative clip region and the second element contains the cumulative translate/transform matrix.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the cumulative graphics context.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Object" /> representing the cumulative graphics context.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The purpose of the <see cref="M:System.Drawing.Graphics.GetHalftonePalette" /> method is to enable ndptecgdiplus to produce a better quality halftone when the display uses 8 bits per pixel. To display an image using the halftone palette, use the following procedure.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a handle to the current Windows halftone palette.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Internal pointer that specifies the handle to the palette.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The device context is a Windows structure based on ndptecgdi that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output. This method returns that device context with the exception of a font. Because a font is not selected, calls to the <see cref="M:System.Drawing.Font.FromHdc(System.IntPtr)" /> method using a handle returned from the <see cref="M:System.Drawing.Graphics.GetHdc" /> method will fail.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.GetHdc" /> and <see cref="Overload:System.Drawing.Graphics.ReleaseHdc" /> methods must appear in pairs. During the scope of a <see cref="M:System.Drawing.Graphics.GetHdc" /> and <see cref="Overload:System.Drawing.Graphics.ReleaseHdc" /> method pair, you usually make only calls to ndptecgdi functions. Calls in that scope made to ndptecgdiplus methods of the <see cref="T:System.Drawing.Graphics" /> that produced the <paramref name="hdc" /> parameter fail with an ObjectBusy error. Also, ndptecgdiplus ignores any state changes made to the <see cref="T:System.Drawing.Graphics" /> of the <paramref name="hdc" /> parameter in subsequent operations.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the handle to the device context associated with this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Handle to the device context associated with this <see cref="T:System.Drawing.Graphics" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the nearest color to the specified <see cref="T:System.Drawing.Color" /> structure.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Color" /> structure that represents the nearest color to the one specified with the <paramref name="color" /> parameter.</para>
        </returns>
        <param name="color">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Color" /> structure for which to find a match. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Drawing2D.InterpolationMode'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The interpolation mode determines how intermediate values between two endpoints are calculated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the interpolation mode associated with this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method assigns to the <see cref="P:System.Drawing.Graphics.Clip" /> property of this <see cref="T:System.Drawing.Graphics" /> the area represented by the intersection of the current clip region and the rectangle specified by the <paramref name="rect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics" /> to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure to intersect with the current clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method assigns to the <see cref="P:System.Drawing.Graphics.Clip" /> property of this <see cref="T:System.Drawing.Graphics" /> the area represented by the intersection of the current clip region and the rectangle specified by the <paramref name="rect" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics" /> to the intersection of the current clip region and the specified <see cref="T:System.Drawing.RectangleF" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure to intersect with the current clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method assigns to the <see cref="P:System.Drawing.Graphics.Clip" /> property of this <see cref="T:System.Drawing.Graphics" /> the area represented by the intersection of the current clip region and the region specified by the <paramref name="region" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the clip region of this <see cref="T:System.Drawing.Graphics" /> to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Region" />.</para>
        </summary>
        <param name="region">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Region" /> to intersect with the current region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'bool'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the clipping region of this <see cref="T:System.Drawing.Graphics" /> is empty.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified <see cref="T:System.Drawing.Point" /> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the point specified by the <paramref name="point" /> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Point" /> structure to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified <see cref="T:System.Drawing.PointF" /> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the point specified by the <paramref name="point" /> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the rectangle specified by the <paramref name="rect" /> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the rectangle specified by the <paramref name="rect" /> parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the point defined by the <paramref name="x" /> and <paramref name="y" /> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the point to test for visibility. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the point to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the point defined by the <paramref name="x" /> and <paramref name="y" /> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the point to test for visibility. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the point to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the rectangle defined by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle to test for visibility. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the rectangle defined by the <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />; otherwise, false.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Width of the rectangle to test for visibility. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />Height of the rectangle to test for visibility. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'bool'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The visible clipping region is the intersection of the clipping region of this Graphics and the clipping region of the window.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the visible clipping region of this <see cref="T:System.Drawing.Graphics" /> is empty.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The regions returned by this method are resolution-dependent, so there might be a slight loss of accuracy if strings are recorded in a metafile at one resolution and later played back at a different resolution.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an array of <see cref="T:System.Drawing.Region" /> objects, each of which bounds a range of character positions within the specified string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns an array of <see cref="T:System.Drawing.Region" /> objects, each of which bounds a range of character positions within the specified string.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="layoutRect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that specifies the layout rectangle for the string. </param>
        <param name="stringFormat">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that represents formatting information, such as line spacing, for the string. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Drawing.Graphics.MeasureString" /> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="Overload:System.Drawing.Graphics.DrawString" /> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see cref="Overload:System.Drawing.Graphics.MeasureString" />. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method or one of the <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" /> methods that takes a <see cref="T:System.Drawing.StringFormat" />, and pass <see cref="P:System.Drawing.StringFormat.GenericTypographic" />. Also, ensure the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> for the <see cref="T:System.Drawing.Graphics" /> is <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.SizeF" /> structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property, of the string specified by the <paramref name="text" /> parameter as drawn with the <paramref name="font" /> parameter.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Drawing.Graphics.MeasureString" /> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="Overload:System.Drawing.Graphics.DrawString" /> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see cref="Overload:System.Drawing.Graphics.MeasureString" />. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method or one of the <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" /> methods that takes a <see cref="T:System.Drawing.StringFormat" />, and pass <see cref="P:System.Drawing.StringFormat.GenericTypographic" />. Also, ensure the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> for the <see cref="T:System.Drawing.Graphics" /> is <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> within the specified layout area.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.SizeF" /> structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property, of the string specified by the <paramref name="text" /> parameter as drawn with the <paramref name="font" /> parameter.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> defines the text format of the string. </param>
        <param name="layoutArea">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.SizeF" /> structure that specifies the maximum layout area for the text. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="width" /> parameter specifies the maximum value of the width component of the returned <see cref="T:System.Drawing.SizeF" /> structure (<see cref="P:System.Drawing.SizeF.Width" />). If the <paramref name="width" /> parameter is less than the actual width of the string, the returned <see cref="P:System.Drawing.SizeF.Width" /> component is truncated to a value representing the maximum number of characters that will fit within the specified width. To accommodate the entire string, the returned <see cref="P:System.Drawing.SizeF.Height" /> component is adjusted to a value that allows displaying the string with character wrap.</para>
          <para>The <see cref="Overload:System.Drawing.Graphics.MeasureString" /> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="Overload:System.Drawing.Graphics.DrawString" /> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see cref="Overload:System.Drawing.Graphics.MeasureString" />. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method or one of the <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" /> methods that takes a <see cref="T:System.Drawing.StringFormat" />, and pass <see cref="P:System.Drawing.StringFormat.GenericTypographic" />. Also, ensure the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> for the <see cref="T:System.Drawing.Graphics" /> is <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.SizeF" /> structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property, of the string specified in the <paramref name="text" /> parameter as drawn with the <paramref name="font" /> parameter.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the format of the string. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Maximum width of the string in pixels. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Drawing.Graphics.MeasureString" /> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="Overload:System.Drawing.Graphics.DrawString" /> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see cref="Overload:System.Drawing.Graphics.MeasureString" />. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method or one of the <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" /> methods that takes a <see cref="T:System.Drawing.StringFormat" />, and pass <see cref="P:System.Drawing.StringFormat.GenericTypographic" />. Also, ensure the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> for the <see cref="T:System.Drawing.Graphics" /> is <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> and formatted with the specified <see cref="T:System.Drawing.StringFormat" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.SizeF" /> structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property, of the string specified by the <paramref name="text" /> parameter as drawn with the <paramref name="font" /> parameter and the <paramref name="stringFormat" /> parameter.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> defines the text format of the string. </param>
        <param name="origin">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.PointF" /> structure that represents the upper-left corner of the string. </param>
        <param name="stringFormat">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that represents formatting information, such as line spacing, for the string. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Drawing.Graphics.MeasureString" /> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="Overload:System.Drawing.Graphics.DrawString" /> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see cref="Overload:System.Drawing.Graphics.MeasureString" />. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method or one of the <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" /> methods that takes a <see cref="T:System.Drawing.StringFormat" />, and pass <see cref="P:System.Drawing.StringFormat.GenericTypographic" />. Also, ensure the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> for the <see cref="T:System.Drawing.Graphics" /> is <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> and formatted with the specified <see cref="T:System.Drawing.StringFormat" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.SizeF" /> structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property, of the string specified in the <paramref name="text" /> parameter as drawn with the <paramref name="font" /> parameter and the <paramref name="stringFormat" /> parameter.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> defines the text format of the string. </param>
        <param name="layoutArea">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.SizeF" /> structure that specifies the maximum layout area for the text. </param>
        <param name="stringFormat">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that represents formatting information, such as line spacing, for the string. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Drawing.Graphics.MeasureString" /> method is designed for use with individual strings and includes a small amount of extra space before and after the string to allow for overhanging glyphs. Also, the <see cref="Overload:System.Drawing.Graphics.DrawString" /> method adjusts glyph points to optimize display quality and might display a string narrower than reported by <see cref="Overload:System.Drawing.Graphics.MeasureString" />. To obtain metrics suitable for adjacent strings in layout (for example, when implementing formatted text), use the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" /> method or one of the <see cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" /> methods that takes a <see cref="T:System.Drawing.StringFormat" />, and pass <see cref="P:System.Drawing.StringFormat.GenericTypographic" />. Also, ensure the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> for the <see cref="T:System.Drawing.Graphics" /> is <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" /> and formatted with the specified <see cref="T:System.Drawing.StringFormat" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.SizeF" /> structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property, of the string specified in the <paramref name="text" /> parameter as drawn with the <paramref name="font" /> parameter and the <paramref name="stringFormat" /> parameter.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />String to measure. </param>
        <param name="font">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Font" /> that defines the text format of the string. </param>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />Maximum width of the string. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.StringFormat" /> that represents formatting information, such as line spacing, for the string. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">To be added: an object of type 'string'</param>
        <param name="font">To be added: an object of type 'Font'</param>
        <param name="layoutArea">To be added: an object of type 'SizeF'</param>
        <param name="stringFormat">To be added: an object of type 'StringFormat'</param>
        <param name="charactersFitted">To be added: an object of type 'int&amp;'</param>
        <param name="linesFilled">To be added: an object of type 'int&amp;'</param>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'SizeF'</returns>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method prepends the matrix specified by the <paramref name="matrix" /> parameter, so that the result is <paramref name="matrix" /> x world transformation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics" /> and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" />.</para>
        </summary>
        <param name="matrix">
          <attribution license="cc4" from="Microsoft" modified="false" />4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> that multiplies the world transformation. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A value of <see cref="F:System.Drawing.Drawing2D.MatrixOrder.Prepend" /> for the <paramref name="order" /> parameter specifies that the order of the multiplication is <paramref name="matrix" /> x world transformation. A value of <see cref="F:System.Drawing.Drawing2D.MatrixOrder.Append" /> for <paramref name="order" /> specifies that the order of the multiplication is world transformation x <paramref name="matrix" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics" /> and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" /> in the specified order.</para>
        </summary>
        <param name="matrix">
          <attribution license="cc4" from="Microsoft" modified="false" />4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" /> that multiplies the world transformation. </param>
        <param name="order">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that determines the order of the multiplication. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'float'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the scaling between world units and page units for this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'GraphicsUnit'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The graphics unit is the unit of measure used for page coordinates in this <see cref="T:System.Drawing.Graphics" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the unit of measure used for page coordinates in this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Drawing2D.PixelOffsetMode'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this property to specify either higher quality, slower rendering, or lower quality, faster rendering of the contents of this <see cref="T:System.Drawing.Graphics" /> object. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or set a value specifying how pixels are offset during rendering of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Drawing.Graphics.GetHdc" /> and <see cref="Overload:System.Drawing.Graphics.ReleaseHdc" /> are two methods that allow you to get and release the handle for a Windows device. You should always follow a call to <see cref="M:System.Drawing.Graphics.GetHdc" /> with a call to <see cref="Overload:System.Drawing.Graphics.ReleaseHdc" /> when you are finished with the Windows handle.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases a device context handle obtained by a previous call to the <see cref="M:System.Drawing.Graphics.GetHdc" /> method of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The device context is a Windows structure based on ndptecgdi that defines a set of graphical objects and their associated attributes, as well as the graphical modes that affect output.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.GetHdc" /> and <see cref="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" /> methods must appear in pairs. During the scope of a <see cref="M:System.Drawing.Graphics.GetHdc" /> and <see cref="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" /> method pair, you usually make calls only to ndptecgdi functions. Calls in that scope made to ndptecgdiplus methods of the <see cref="T:System.Drawing.Graphics" /> that produced the <paramref name="hdc" /> parameter fail with an ObjectBusy error. Also, ndptecgdiplus ignores any state changes made to the <see cref="T:System.Drawing.Graphics" /> of the <paramref name="hdc" /> parameter in subsequent operations.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases a device context handle obtained by a previous call to the <see cref="M:System.Drawing.Graphics.GetHdc" /> method of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="hdc">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a device context obtained by a previous call to the <see cref="M:System.Drawing.Graphics.GetHdc" /> method of this <see cref="T:System.Drawing.Graphics" />. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases a handle to a device context.</para>
        </summary>
        <param name="hdc">
          <attribution license="cc4" from="Microsoft" modified="false" />Handle to a device context. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Point'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the rendering origin of this <see cref="T:System.Drawing.Graphics" /> for dithering and for hatch brushes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the clipping region of a <see cref="T:System.Drawing.Graphics" /> is infinite, items that this <see cref="T:System.Drawing.Graphics" /> draws are not clipped.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resets the clip region of this <see cref="T:System.Drawing.Graphics" /> to an infinite region.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The identity matrix represents a transformation with no scaling, rotation, or translation. Resetting the world transformation of this <see cref="T:System.Drawing.Graphics" /> to the identity matrix means that its world transformation does not change the geometry of transformed items.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resets the world transformation matrix of this <see cref="T:System.Drawing.Graphics" /> to the identity matrix.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you call the <see cref="M:System.Drawing.Graphics.Save" /> method of a <see cref="T:System.Drawing.Graphics" />, an information block that holds the state of the <see cref="T:System.Drawing.Graphics" /> is put on a stack. The <see cref="M:System.Drawing.Graphics.Save" /> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> that identifies that information block. When you pass the identifying <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> to the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics" /> to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.Save" /> method call. Note that the <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> returned by a given call to the <see cref="M:System.Drawing.Graphics.Save" /> method can be passed only once to the Restore method.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.Save" /> method can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.Save" /> method several times before you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method. Each time you call the <see cref="M:System.Drawing.Graphics.Save" /> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, the <see cref="T:System.Drawing.Graphics" /> is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.Save" /> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsState" />. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.Save" /> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.Save" /> method call are also removed.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.Save" /> method. Just as a <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> call is paired with a <see cref="M:System.Drawing.Graphics.Save" /> call, a <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.Save" /> method are removed from the stack. Likewise, when you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method are removed from the stack.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Restores the state of this <see cref="T:System.Drawing.Graphics" /> to the state represented by a <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</para>
        </summary>
        <param name="gstate">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> that represents the state to which to restore this <see cref="T:System.Drawing.Graphics" />. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <paramref name="angle" /> parameter. This method applies the rotation by prepending it to the transformation matrix.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="angle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle of rotation in degrees. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The rotation operation consists of multiplying the transformation matrix by a matrix whose elements are derived from the <paramref name="angle" /> parameter. This method prepends or appends the transformation matrix of the <see cref="T:System.Drawing.Graphics" /> by the rotation matrix according to the <paramref name="order" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" /> in the specified order.</para>
        </summary>
        <param name="angle">
          <attribution license="cc4" from="Microsoft" modified="false" />Angle of rotation in degrees. </param>
        <param name="order">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that specifies whether the rotation is appended or prepended to the matrix transformation. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you call the <see cref="M:System.Drawing.Graphics.Save" /> method of a <see cref="T:System.Drawing.Graphics" />, an information block that holds the state of the <see cref="T:System.Drawing.Graphics" /> is put on a stack. The <see cref="M:System.Drawing.Graphics.Save" /> method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> that identifies that information block. When you pass the identifying <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> to the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, the information block is removed from the stack and is used to restore the <see cref="T:System.Drawing.Graphics" /> to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.Save" /> method call. Note that the <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> returned by a given call to the <see cref="M:System.Drawing.Graphics.Save" /> method can be passed only once to the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.Save" /> method can be nested; that is, you can call the <see cref="M:System.Drawing.Graphics.Save" /> method several times before you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method. Each time you call the <see cref="M:System.Drawing.Graphics.Save" /> method, an information block is put on the stack, and you receive a <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> for the information block. When you pass one of those objects to the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, the <see cref="T:System.Drawing.Graphics" /> is returned to the state it was in at the time of the <see cref="M:System.Drawing.Graphics.Save" /> method call that returned that particular <see cref="T:System.Drawing.Drawing2D.GraphicsState" />. The information block placed on the stack by that <see cref="M:System.Drawing.Graphics.Save" /> method call is removed from the stack, and all information blocks placed on that stack after that <see cref="M:System.Drawing.Graphics.Save" /> method call are also removed.</para>
          <para>Calls to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method place information blocks on the same stack as calls to the <see cref="M:System.Drawing.Graphics.Save" /> method. Just as a <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> call is paired with a <see cref="M:System.Drawing.Graphics.Save" /> call, a <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method call is paired with a <see cref="M:System.Drawing.Graphics.BeginContainer" /> method call.</para>
          <para>When you call the <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.Save" /> method are removed from the stack. Likewise, When you call the <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" /> method, all information blocks placed on the stack (by the <see cref="M:System.Drawing.Graphics.Save" /> method or by the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method) after the corresponding call to the <see cref="M:System.Drawing.Graphics.BeginContainer" /> method are removed from the stack.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the current state of this <see cref="T:System.Drawing.Graphics" /> and identifies the saved state with a <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> that represents the saved state of this <see cref="T:System.Drawing.Graphics" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<paramref name="sx" />, <paramref name="sy" />, 1). This method prepends the transformation matrix of the <see cref="T:System.Drawing.Graphics" /> by the scaling matrix.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" /> by prepending it to the object's transformation matrix.</para>
        </summary>
        <param name="sx">
          <attribution license="cc4" from="Microsoft" modified="false" />Scale factor in the x direction. </param>
        <param name="sy">
          <attribution license="cc4" from="Microsoft" modified="false" />Scale factor in the y direction. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The scaling operation consists of multiplying the transformation matrix by a diagonal matrix whose elements are (<paramref name="sx" />, <paramref name="sy" />, 1). This method prepends or appends the transformation matrix of the <see cref="T:System.Drawing.Graphics" /> by the scaling matrix according to the <paramref name="order" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" /> in the specified order.</para>
        </summary>
        <param name="sx">
          <attribution license="cc4" from="Microsoft" modified="false" />Scale factor in the x direction. </param>
        <param name="sy">
          <attribution license="cc4" from="Microsoft" modified="false" />Scale factor in the y direction. </param>
        <param name="order">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the graphics path represented by the <paramref name="path" /> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</para>
        </summary>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that represents the new clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the Clip property of the specified <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="g">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Graphics" /> from which to take the new clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure that represents the new clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure that represents the new clip region. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the graphics path represented by the <paramref name="path" /> parameter is not closed, an additional segment is added from the last point to the first point to close the path.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</para>
        </summary>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to combine. </param>
        <param name="combineMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the result of the specified combining operation of the current clip region and the <see cref="P:System.Drawing.Graphics.Clip" /> property of the specified <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="g">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Graphics" /> that specifies the clip region to combine. </param>
        <param name="combineMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.Rectangle" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Rectangle" /> structure to combine. </param>
        <param name="combineMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure.</para>
        </summary>
        <param name="rect">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.RectangleF" /> structure to combine. </param>
        <param name="combineMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" /> to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Region" />.</para>
        </summary>
        <param name="region">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Drawing.Region" /> to combine. </param>
        <param name="combineMode">
          <attribution license="cc4" from="Microsoft" modified="false" />Member from the <see cref="T:System.Drawing.Drawing2D.CombineMode" /> enumeration that specifies the combining operation to use. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Drawing2D.SmoothingMode'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The smoothing mode specifies whether lines, curves, and the edges of filled areas use smoothing (also called antialiasing). One exception is that path gradient brushes do not obey the smoothing mode. Areas filled using a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" /> are rendered the same way (aliased) regardless of the <see cref="P:System.Drawing.Graphics.SmoothingMode" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the rendering quality for this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'int'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The gamma correction value must be between 0 and 12. The default value is 4.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the gamma correction value for rendering text.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Text.TextRenderingHint'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text rendering hint specifies whether text renders with antialiasing.</para>
          <block subset="none" type="note">
            <para>You should not use a <see cref="P:System.Drawing.Graphics.CompositingMode" /> property value of <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceCopy" /> when the <see cref="P:System.Drawing.Graphics.TextRenderingHint" /> property is set to <see cref="F:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit" />. An exception could occur or the image may not render correctly.</para>
            <para />
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the rendering mode for text associated with this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'Drawing2D.Matrix'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>GDI+ uses three coordinate spaces: world, page, and device. World coordinates are the coordinates used to model a particular graphic world and are the coordinates you pass to methods in the .NET Framework. Page coordinates refer to the coordinate system used by a drawing surface, such as a form or a control. Device coordinates are the coordinates used by the physical device being drawn on, such as a screen or a printer. The <see cref="P:System.Drawing.Graphics.Transform" /> property represents the world transformation, which maps world coordinates to page coordinates.</para>
          <para>Because the matrix returned and by the <see cref="P:System.Drawing.Graphics.Transform" /> property is a copy of the geometric transform, you should dispose of the matrix when you no longer need it. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a copy of the geometric world transformation for this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="destSpace">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> enumeration that specifies the destination coordinate space. </param>
        <param name="srcSpace">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> enumeration that specifies the source coordinate space. </param>
        <param name="pts">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.Point" /> structures that represents the points to transformation. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="destSpace">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> enumeration that specifies the destination coordinate space. </param>
        <param name="srcSpace">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> enumeration that specifies the source coordinate space. </param>
        <param name="pts">
          <attribution license="cc4" from="Microsoft" modified="false" />Array of <see cref="T:System.Drawing.PointF" /> structures that represent the points to transform. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Translates the clipping region of this <see cref="T:System.Drawing.Graphics" /> by specified amounts in the horizontal and vertical directions.</para>
        </summary>
        <param name="dx">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the translation. </param>
        <param name="dy">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the translation. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Translates the clipping region of this <see cref="T:System.Drawing.Graphics" /> by specified amounts in the horizontal and vertical directions.</para>
        </summary>
        <param name="dx">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the translation. </param>
        <param name="dy">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the translation. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The origin is typically the upper-left-hand corner of the drawing surface.  The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <paramref name="dx" /> and <paramref name="dy" /> parameters. This method applies the translation by prepending the translation matrix to the transformation matrix.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
        <param name="dx">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the translation. </param>
        <param name="dy">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the translation. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The translation operation consists of multiplying the transformation matrix by a matrix whose translation part is the <paramref name="dx" /> and <paramref name="dy" /> parameters. This method prepends or appends the transformation matrix of the <see cref="T:System.Drawing.Graphics" /> by the translation matrix according to the <paramref name="order" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" /> in the specified order.</para>
        </summary>
        <param name="dx">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the translation. </param>
        <param name="dy">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the translation. </param>
        <param name="order">
          <attribution license="cc4" from="Microsoft" modified="false" />Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> enumeration that specifies whether the translation is prepended or appended to the transformation matrix. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'RectangleF'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The unit for resulting rectangle is designated by the <see cref="P:System.Drawing.Graphics.PageUnit" /> property. The default unit is pixels. A <see cref="T:System.Drawing.Graphics" /> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.</para>
          <para>The visible clipping region is the intersection of the clipping region of this <see cref="T:System.Drawing.Graphics" /> and the clipping region of the window.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the bounding rectangle of the visible clipping region of this <see cref="T:System.Drawing.Graphics" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>