<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="argumentInteger" xml:space="preserve">
    <value>Value must be an integer.</value>
  </data>
  <data name="invokeCalledTwice" xml:space="preserve">
    <value>Cannot call invoke more than once.</value>
  </data>
  <data name="webServiceFailed" xml:space="preserve">
    <value>The server method '{0}' failed with the following error: {1}</value>
  </data>
  <data name="argumentType" xml:space="preserve">
    <value>Object cannot be converted to the required type.</value>
  </data>
  <data name="argumentNull" xml:space="preserve">
    <value>Value cannot be null.</value>
  </data>
  <data name="scriptAlreadyLoaded" xml:space="preserve">
    <value>The script '{0}' has been referenced multiple times. If referencing Microsoft AJAX scripts explicitly, set the MicrosoftAjaxMode property of the ScriptManager to Explicit.</value>
  </data>
  <data name="scriptDependencyNotFound" xml:space="preserve">
    <value>The script '{0}' failed to load because it is dependent on script '{1}'.</value>
  </data>
  <data name="formatBadFormatSpecifier" xml:space="preserve">
    <value>Format specifier was invalid.</value>
  </data>
  <data name="requiredScriptReferenceNotIncluded" xml:space="preserve">
    <value>'{0}' requires that you have included a script reference to '{1}'.</value>
  </data>
  <data name="webServiceFailedNoMsg" xml:space="preserve">
    <value>The server method '{0}' failed.</value>
  </data>
  <data name="argumentDomElement" xml:space="preserve">
    <value>Value must be a DOM element.</value>
  </data>
  <data name="invalidExecutorType" xml:space="preserve">
    <value>Could not create a valid Sys.Net.WebRequestExecutor from: {0}.</value>
  </data>
  <data name="cannotCallBeforeResponse" xml:space="preserve">
    <value>Cannot call {0} when responseAvailable is false.</value>
  </data>
  <data name="actualValue" xml:space="preserve">
    <value>Actual value was {0}.</value>
  </data>
  <data name="enumInvalidValue" xml:space="preserve">
    <value>'{0}' is not a valid value for enum {1}.</value>
  </data>
  <data name="scriptLoadFailed" xml:space="preserve">
    <value>The script '{0}' could not be loaded.</value>
  </data>
  <data name="parameterCount" xml:space="preserve">
    <value>Parameter count mismatch.</value>
  </data>
  <data name="cannotDeserializeEmptyString" xml:space="preserve">
    <value>Cannot deserialize empty string.</value>
  </data>
  <data name="formatInvalidString" xml:space="preserve">
    <value>Input string was not in a correct format.</value>
  </data>
  <data name="invalidTimeout" xml:space="preserve">
    <value>Value must be greater than or equal to zero.</value>
  </data>
  <data name="cannotAbortBeforeStart" xml:space="preserve">
    <value>Cannot abort when executor has not started.</value>
  </data>
  <data name="argument" xml:space="preserve">
    <value>Value does not fall within the expected range.</value>
  </data>
  <data name="cannotDeserializeInvalidJson" xml:space="preserve">
    <value>Cannot deserialize. The data does not correspond to valid JSON.</value>
  </data>
  <data name="invalidHttpVerb" xml:space="preserve">
    <value>httpVerb cannot be set to an empty or null string.</value>
  </data>
  <data name="nullWebRequest" xml:space="preserve">
    <value>Cannot call executeRequest with a null webRequest.</value>
  </data>
  <data name="eventHandlerInvalid" xml:space="preserve">
    <value>Handler was not added through the Sys.UI.DomEvent.addHandler method.</value>
  </data>
  <data name="cannotSerializeNonFiniteNumbers" xml:space="preserve">
    <value>Cannot serialize non finite numbers.</value>
  </data>
  <data name="argumentUndefined" xml:space="preserve">
    <value>Value cannot be undefined.</value>
  </data>
  <data name="webServiceInvalidReturnType" xml:space="preserve">
    <value>The server method '{0}' returned an invalid type. Expected type: {1}</value>
  </data>
  <data name="servicePathNotSet" xml:space="preserve">
    <value>The path to the web service has not been set.</value>
  </data>
  <data name="argumentTypeWithTypes" xml:space="preserve">
    <value>Object of type '{0}' cannot be converted to type '{1}'.</value>
  </data>
  <data name="cannotCallOnceStarted" xml:space="preserve">
    <value>Cannot call {0} once started.</value>
  </data>
  <data name="badBaseUrl1" xml:space="preserve">
    <value>Base URL does not contain ://.</value>
  </data>
  <data name="badBaseUrl2" xml:space="preserve">
    <value>Base URL does not contain another /.</value>
  </data>
  <data name="badBaseUrl3" xml:space="preserve">
    <value>Cannot find last / in base URL.</value>
  </data>
  <data name="setExecutorAfterActive" xml:space="preserve">
    <value>Cannot set executor after it has become active.</value>
  </data>
  <data name="paramName" xml:space="preserve">
    <value>Parameter name: {0}</value>
  </data>
  <data name="nullReferenceInPath" xml:space="preserve">
    <value>Null reference while evaluating data path: '{0}'.</value>
  </data>
  <data name="cannotCallOutsideHandler" xml:space="preserve">
    <value>Cannot call {0} outside of a completed event handler.</value>
  </data>
  <data name="cannotSerializeObjectWithCycle" xml:space="preserve">
    <value>Cannot serialize object with cyclic reference within child properties.</value>
  </data>
  <data name="format" xml:space="preserve">
    <value>One of the identified items was in an invalid format.</value>
  </data>
  <data name="assertFailedCaller" xml:space="preserve">
    <value>Assertion Failed: {0}
at {1}</value>
  </data>
  <data name="argumentOutOfRange" xml:space="preserve">
    <value>Specified argument was out of the range of valid values.</value>
  </data>
  <data name="webServiceTimedOut" xml:space="preserve">
    <value>The server method '{0}' timed out.</value>
  </data>
  <data name="notImplemented" xml:space="preserve">
    <value>The method or operation is not implemented.</value>
  </data>
  <data name="assertFailed" xml:space="preserve">
    <value>Assertion Failed: {0}</value>
  </data>
  <data name="invalidOperation" xml:space="preserve">
    <value>Operation is not valid due to the current state of the object.</value>
  </data>
  <data name="breakIntoDebugger" xml:space="preserve">
    <value>{0}

Break into debugger?</value>
  </data>
</root>