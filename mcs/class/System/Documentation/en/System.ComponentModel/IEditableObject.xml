<?xml version="1.0" encoding="utf-8"?>
<Type Name="IEditableObject" FullName="System.ComponentModel.IEditableObject">
  <TypeSignature Language="C#" Maintainer="auto" Value="public interface IEditableObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEditableObject" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>This interface is typically used to capture the <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" />, <see cref="M:System.ComponentModel.IEditableObject.EndEdit" />, and <see cref="M:System.ComponentModel.IEditableObject.CancelEdit" /> semantics of a <see cref="T:System.Data.DataRowView" />.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides functionality to commit or rollback changes to an object that is used as a data source.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public void BeginEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is typically used to capture the <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> semantics of a <see cref="T:System.Data.DataRowView" />.</para>
          <para>If <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> is called on an object that is already being edited, the second and subsequent calls are ignored.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Begins an edit on an object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is typically used to capture the <see cref="M:System.ComponentModel.IEditableObject.CancelEdit" /> semantics of a <see cref="T:System.Data.DataRowView" />.</para>
          <para>This method will be ignored if called on an object that is not being edited.</para>
          <block subset="none" type="note">
            <para>If the owning list implements <see cref="T:System.ComponentModel.IBindingList" />, calling <see cref="M:System.ComponentModel.IEditableObject.CancelEdit" /> on an object created using <see cref="M:System.ComponentModel.IBindingList.AddNew" /> discards the object.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> call.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public void EndEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is typically used to capture the <see cref="M:System.ComponentModel.IEditableObject.EndEdit" /> semantics of a <see cref="T:System.Data.DataRowView" />.</para>
          <para>This method will be ignored if called on an object that is not being edited.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> or <see cref="M:System.ComponentModel.IBindingList.AddNew" /> call into the underlying object.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>