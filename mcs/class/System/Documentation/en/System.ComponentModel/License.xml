<?xml version="1.0" encoding="utf-8"?>
<Type Name="License" FullName="System.ComponentModel.License">
  <TypeSignature Language="C#" Value="public abstract class License : IDisposable" Maintainer="auto" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit License extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>All components must call <see cref="M:System.ComponentModel.License.Dispose" /> for the licenses they grant when the component is disposed or finalized.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides the abstract base class for all licenses. A license is granted to a specific instance of a component.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected License ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.License" /> class. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public abstract void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All components must call <see cref="M:System.ComponentModel.License.Dispose" /> for the licenses that they grant when the component is disposed of or finalized.</para>
          <para>A <see cref="T:System.ComponentModel.LicenseProvider" /> can use the licenses it grants to track its usage.</para>
          <para>Call <see cref="M:System.ComponentModel.License.Dispose" /> when you are finished using the <see cref="T:System.ComponentModel.License" />. The <see cref="M:System.ComponentModel.License.Dispose" /> method leaves the <see cref="T:System.ComponentModel.License" /> in an unusable state. After calling <see cref="M:System.ComponentModel.License.Dispose" />, you must release all references to the <see cref="T:System.ComponentModel.License" /> so the memory it was occupying can be reclaimed by garbage collection.</para>
          <block subset="none" type="note">
            <para>Always call <see cref="M:System.ComponentModel.License.Dispose" /> before you release your last reference to the <see cref="T:System.ComponentModel.License" />. Otherwise, the resources the <see cref="T:System.ComponentModel.License" /> is using will not be freed until garbage collection calls the <see cref="T:System.ComponentModel.License" /> object's destructor.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, disposes of the resources used by the license.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LicenseKey">
      <MemberSignature Language="C#" Value="public abstract string LicenseKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LicenseKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.ComponentModel.LicenseProvider" /> can use any Unicode character string as a license key. The <see cref="P:System.ComponentModel.License.LicenseKey" /> should be treated as an opaque cookie, that is, a cookie with a deliberately hidden internal structure.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the license key granted to this component.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>