<?xml version="1.0" encoding="utf-8"?>
<Type Name="MaskedTextProvider" FullName="System.ComponentModel.MaskedTextProvider">
  <TypeSignature Language="C#" Value="public class MaskedTextProvider : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi MaskedTextProvider extends System.Object implements class System.ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Windows.Forms.MaskedTextBox" /> control contains a mask, composed of literal characters and formatting elements, that it tests all user input against. Instead of permanently associating a specific mask-parsing engine with <see cref="T:System.Windows.Forms.MaskedTextBox" />, Windows Forms provides it as a separate service, represented by the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class, which defines the syntax of the masking language discussed in the documentation for the <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> property.</para>
      <para>Many of the members of the <see cref="T:System.Windows.Forms.MaskedTextBox" /> class refer their implementation to similarly named members of the associated <see cref="T:System.ComponentModel.MaskedTextProvider" />. For example, the <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> property of the <see cref="T:System.Windows.Forms.MaskedTextBox" /> class refers all access to the <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class.</para>
      <para>The mask-parsing engine used by <see cref="T:System.ComponentModel.MaskedTextProvider" /> is modeled after the Masked Edit control included in Microsoft Visual Basic version 6. Its masking language is described in the documentation for the <see cref="P:System.ComponentModel.MaskedTextProvider.Mask" /> property.</para>
      <para>The following three distinct strings are involved with the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>String name</para>
            </term>
            <description>
              <para>Description</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>Input character or string</para>
          </term>
          <description>
            <para>Represents the characters used as input that the mask is applied against. In actuality, the input string may be composed of multiple input operations, including <see cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />, and <see cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />. Therefore, the input string cannot be accessed directly. However, aspects of the input string handling are available though the <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" />, <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />, and <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" /> properties.</para>
          </description>
        </item>
        <item>
          <term>
            <para>Mask</para>
          </term>
          <description>
            <para>Represents the input formatting mask used to transform the input string into the formatted string. This string is set in the <see cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" /> and accessed primarily though the <see cref="P:System.ComponentModel.MaskedTextProvider.Mask" /> property. Characteristics of the mask are also available through other members, such as the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />, and <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> properties.</para>
          </description>
        </item>
        <item>
          <term>
            <para>Formatted string</para>
          </term>
          <description>
            <para>Represents the string that results when the full mask is applied to the input string. The formatted string can be queried with many members of the class, including <see cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />, <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />, <see cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />, <see cref="P:System.ComponentModel.MaskedTextProvider.MaskFull" />, <see cref="P:System.ComponentModel.MaskedTextProvider.MaskCompleted" />, <see cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />, and so on. The full value of the formatted string is available from the <see cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" /> and <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> methods.</para>
          </description>
        </item>
      </list>
      <block subset="none" type="note">
        <para>The input string may represent direct user input, as in the case of the <see cref="T:System.Windows.Forms.MaskedTextBox" />, or may be generated by other processes not directly associated with user input/output operations.</para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a mask-parsing service that can be used by any number of controls that support masking, such as the <see cref="T:System.Windows.Forms.MaskedTextBox" /> control.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use of this constructor is exactly equivalent to the following call to the <see cref="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" /> constructor:</para>
          <para>MaskedTextProvider(mask , null, true, '_', '\0', false) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, bool restrictToAscii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, bool restrictToAscii) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="restrictToAscii" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use of this constructor is exactly equivalent to the following call to the <see cref="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" /> constructor:</para>
          <para>MaskedTextProvider(mask , null, true, '_', '\0', restrictToASCII) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask and ASCII restriction value.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
        <param name="restrictToAscii">
          <attribution license="cc4" from="Microsoft" modified="false" />true to restrict input to ASCII-compatible characters; otherwise false to allow the entire Unicode set. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use of this constructor is exactly equivalent to the following call to the <see cref="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" /> constructor:</para>
          <para>MaskedTextProvider(mask , culture, true, '_', '\0', false) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask and culture.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Globalization.CultureInfo" /> that is used to set region-sensitive separator characters.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, char passwordChar, bool allowPromptAsInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, char passwordChar, bool allowPromptAsInput) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="passwordChar" Type="System.Char" />
        <Parameter Name="allowPromptAsInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use of this constructor is exactly equivalent to the following call to the <see cref="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" /> constructor:</para>
          <para>MaskedTextProvider(mask , null, allowPromptAsInput, '_', passwordChar, false) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask, password character, and prompt usage value.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
        <param name="passwordChar">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Char" /> that will be displayed for characters entered into a password string.</param>
        <param name="allowPromptAsInput">
          <attribution license="cc4" from="Microsoft" modified="false" />true to allow the prompt character as input; otherwise false. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, bool restrictToAscii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture, bool restrictToAscii) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="restrictToAscii" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use of this constructor is exactly equivalent to the following call to the <see cref="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" /> constructor:</para>
          <para>MaskedTextProvider(mask , culture, true, '_', '\0', restrictToAscii) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask, culture, and ASCII restriction value.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Globalization.CultureInfo" /> that is used to set region-sensitive separator characters.</param>
        <param name="restrictToAscii">
          <attribution license="cc4" from="Microsoft" modified="false" />true to restrict input to ASCII-compatible characters; otherwise false to allow the entire Unicode set. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, char passwordChar, bool allowPromptAsInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture, char passwordChar, bool allowPromptAsInput) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="passwordChar" Type="System.Char" />
        <Parameter Name="allowPromptAsInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use of this constructor is exactly equivalent to the following call to the <see cref="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" /> constructor:</para>
          <para>MaskedTextProvider(mask , culture, allowPromptAsInput, '_', passwordChar, false) </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask, culture, password character, and prompt usage value.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Globalization.CultureInfo" /> that is used to set region-sensitive separator characters.</param>
        <param name="passwordChar">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Char" /> that will be displayed for characters entered into a password string.</param>
        <param name="allowPromptAsInput">
          <attribution license="cc4" from="Microsoft" modified="false" />true to allow the prompt character as input; otherwise false. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="allowPromptAsInput" Type="System.Boolean" />
        <Parameter Name="promptChar" Type="System.Char" />
        <Parameter Name="passwordChar" Type="System.Char" />
        <Parameter Name="restrictToAscii" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor represents the most general overloaded form. The <paramref name="mask" /> parameter must conform to the masking language defined by the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class, which is detailed in the <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> property of the <see cref="T:System.Windows.Forms.MaskedTextBox" /> class.</para>
          <para>Because neutral cultures cannot be queried for culture-specific information, the <see cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" /> constructor will use the <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> method to search for the first non-neutral culture to use to determine the proper separator characters. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.</para>
        </summary>
        <param name="mask">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> that represents the input mask. </param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Globalization.CultureInfo" /> that is used to set region-sensitive separator characters.</param>
        <param name="allowPromptAsInput">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> value that specifies whether the prompt character should be allowed as a valid input character. </param>
        <param name="promptChar">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Char" /> that will be displayed as a placeholder for user input.</param>
        <param name="passwordChar">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Char" /> that will be displayed for characters entered into a password string.</param>
        <param name="restrictToAscii">
          <attribution license="cc4" from="Microsoft" modified="false" />true to restrict input to ASCII-compatible characters; otherwise false to allow the entire Unicode set. </param>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (char input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(char input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)" /> method adds the <paramref name="input" /> character value to the first available position in the formatted string after the position that was last assigned, which is represented by the <see cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" /> property. This method will fail for any of the following reasons:</para>
          <list type="bullet">
            <item>
              <para>The input value, <paramref name="input" />, is not printable, or it does not match its corresponding mask element.</para>
            </item>
            <item>
              <para>There are zero available edit positions in the formatted string, or there are no available edit positions after the last assigned position.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds the specified input character to the end of the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the input character was added successfully; otherwise false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Char" /> value to be appended to the formatted string. </param>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.Add(System.String)" /> method adds the characters from the <paramref name="input" /> string to the formatted string, starting with the first available position after <see cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />. This method will fail for any of the following reasons:</para>
          <list type="bullet">
            <item>
              <para>Any of the characters in the input value, <paramref name="input" />, are not printable, or the input value does not match its corresponding mask element.</para>
            </item>
            <item>
              <para>There are not enough available edit positions in the formatted string after the last assigned position.</para>
            </item>
          </list>
          <para>If this method fails, no additions are made and the method returns false. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds the characters in the specified input string to the end of the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if all the characters from the input string were added successfully; otherwise false to indicate that no characters were added.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> containing character values to be appended to the formatted string. </param>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (char input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(char input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(string input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> property's value is set in the <see cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" /> constructor.</para>
          <para>Even when <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> is true, the prompt character must be valid for the current location in the mask in order to be accepted.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the prompt character should be treated as a valid input character or not.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" /> property's value is set in the <see cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" /> constructor.</para>
          <para>If true, <see cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" /> restricts user input to the ASCII character set.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the mask accepts characters outside of the ASCII character set.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AssignedEditPositionCount">
      <MemberSignature Language="C#" Value="public int AssignedEditPositionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AssignedEditPositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The total number of editable character positions, represented by the <see cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" /> property, should equal the sum of the <see cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" /> and the <see cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" /> properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of editable character positions that have already been successfully assigned an input value.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AvailableEditPositionCount">
      <MemberSignature Language="C#" Value="public int AvailableEditPositionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AvailableEditPositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The total number of editable character positions, represented by the <see cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" /> property, should equal the sum of the <see cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" /> and the <see cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" /> properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of editable character positions in the input mask that have not yet been assigned an input value.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.Clear" /> method reinitializes the formatted string, inserting the prompt character into all editable positions.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears all the editable input characters from the formatted string, replacing them with prompt characters.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.Clone" /> method returns a new copy of the current <see cref="T:System.ComponentModel.MaskedTextProvider" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a copy of the current <see cref="T:System.ComponentModel.MaskedTextProvider" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.ComponentModel.MaskedTextProvider" /> object this method creates, cast as an object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.Culture" /> property is set in the <see cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the culture that determines the value of the localizable separators and placeholders in the input mask.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultPasswordChar">
      <MemberSignature Language="C#" Value="public static char DefaultPasswordChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property char DefaultPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar" /> property is defined in the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class to be the asterisk character (*).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default password character used obscure user input. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EditPositionCount">
      <MemberSignature Language="C#" Value="public int EditPositionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditPositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The total number of editable character positions, represented by the <see cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" /> property, must equal the sum of the <see cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" /> and the <see cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" /> properties. This value includes both the required and the optional editable characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of editable positions in the formatted string.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EditPositions">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator EditPositions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator EditPositions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>On every access of the <see cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" /> property, a temporary collection of editable positions is created that the retrieved <see cref="T:System.Collections.IEnumerator" /> operates on. </para>
          <para>This collection is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a newly created enumerator for the editable positions in the formatted string. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="FindAssignedEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindAssignedEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindAssignedEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" /> method is used to search for the first assigned character after a specified position and search direction. The result can subsequently be passed as a parameter to the <see cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" /> indexer to obtain the assigned value at this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" /> and <see cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" /> methods are complements of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first assigned editable position after the specified position using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first assigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string to start the search.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindAssignedEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindAssignedEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindAssignedEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> method is used to search for the first assigned character between two specified positions, inclusive, using the specified search direction. The result can subsequently be passed as a parameter to the <see cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" /> indexer to obtain the assigned value at this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> methods are complements of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first assigned editable position between the specified positions using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first assigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search starts.</param>
        <param name="endPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search ends.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" /> method is used to search for the next assigned or unassigned editable position in the formatted string after the specified position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" /> method is the complement of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first editable position after the specified position using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string to start the search.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> method is used to search for the first editable character between two specified positions, inclusive, using the specified search direction. The result can subsequently be passed as a parameter to the <see cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" /> indexer to obtain the assigned value at this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> method is the complement of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first editable position between the specified positions using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search starts.</param>
        <param name="endPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search ends.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindNonEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindNonEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindNonEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" /> method is used to search for the next literal character in the formatted string after the specified position. The result can subsequently be passed as a parameter to the <see cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" /> indexer to obtain the literal value at this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" /> method is the complement of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first non-editable position after the specified position using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first literal position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string to start the search.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindNonEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindNonEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindNonEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> method is used to search for the first literal character between two specified positions, inclusive, using the specified search direction. The result can subsequently be passed as a parameter to the <see cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" /> indexer to obtain the literal value at this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> method is the complement of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first non-editable position between the specified positions using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first literal position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search starts.</param>
        <param name="endPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search ends.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindUnassignedEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindUnassignedEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindUnassignedEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" /> method is used to search for the first unassigned character after a specified position and search direction. The prompt character should occupy this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" /> and <see cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" /> methods are complements of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first unassigned editable position after the specified position using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first unassigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string to start the search.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="FindUnassignedEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindUnassignedEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindUnassignedEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> method is used to search for the first unassigned character between two specified positions, inclusive, using the specified search direction. The prompt character should occupy this position.</para>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> and <see cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" /> methods are complements of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the position of the first unassigned editable position between the specified positions using the specified search direction.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, an <see cref="T:System.Int32" /> representing the zero-based position of the first unassigned editable position encountered; otherwise <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</para>
        </returns>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search starts.</param>
        <param name="endPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the search ends.</param>
        <param name="direction">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Boolean" /> indicating the search direction; either true to search forward or false to search backward.</param>
      </Docs>
    </Member>
    <Member MemberName="GetOperationResultFromHint">
      <MemberSignature Language="C#" Value="public static bool GetOperationResultFromHint (System.ComponentModel.MaskedTextResultHint hint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetOperationResultFromHint(valuetype System.ComponentModel.MaskedTextResultHint hint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hint" Type="System.ComponentModel.MaskedTextResultHint" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following methods of the <see cref="T:System.ComponentModel.MaskedTextProvider" /> class contain a parameter of type <see cref="T:System.ComponentModel.MaskedTextResultHint" /> that is used to output information about the operation of the method: <see cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />, <see cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />, <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />, and <see cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />. The <see cref="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)" /> method interprets this value and returns a Boolean value that indicates whether the <see cref="T:System.ComponentModel.MaskedTextResultHint" /> has signaled that the operation was a success or failure.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified <see cref="T:System.ComponentModel.MaskedTextResultHint" /> denotes success or failure.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified <see cref="T:System.ComponentModel.MaskedTextResultHint" /> value represents a success; otherwise, false if it represents failure.</para>
        </returns>
        <param name="hint">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> value typically obtained as an output parameter from a previous operation. </param>
      </Docs>
    </Member>
    <Member MemberName="IncludeLiterals">
      <MemberSignature Language="C#" Value="public bool IncludeLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties will determine whether prompt and literal characters appear when calling the <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method. By setting both of these properties to false, the parsed string will represent only the characters entered by the user.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IncludePrompt">
      <MemberSignature Language="C#" Value="public bool IncludePrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludePrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties will determine whether prompt and literal characters appear when calling the <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method. By setting both of these properties to false, the parsed string will represent only the characters entered by the user.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> is used to represent the absence of user input when displaying the formatted string. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (char input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(char input, int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)" /> method inserts a character into the first edit position at or beyond that specified by the <paramref name="pos" /> parameter. This method will shift all existing characters after the insertion point over by one position to make room for the inserted <paramref name="input" /> character. If one of the following errors occurs, the insertion is not performed, and the method returns false.</para>
          <list type="bullet">
            <item>
              <para>The <paramref name="pos" /> parameter is less than zero or greater than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string.</para>
            </item>
            <item>
              <para>An editable character was not found in the formatted string at or beyond the specified position, <paramref name="pos" />.</para>
            </item>
            <item>
              <para>The insertion character, <paramref name="input" />, is not a valid input character because it is not printable or does not match its corresponding mask element.</para>
            </item>
            <item>
              <para>There are no available positions to the right of the insertion point, so that existing characters cannot be shifted.</para>
            </item>
            <item>
              <para>Shifting the existing characters would produce a violation of the mask.</para>
            </item>
          </list>
          <para>An empty <paramref name="input" /> string will cause no change in the formatted string, but will return true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the specified character at the specified position within the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the insertion was successful; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Char" /> to be inserted. </param>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string to insert the character.</param>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (string input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(string input, int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)" /> method inserts each character from the <paramref name="input" /> string into the edit positions located at position <paramref name="pos" /> and beyond. This method will shift all existing characters after the insertion point over by one position for each inserted character. If one of the following errors occurs, no insertion is performed, and the method returns false.</para>
          <list type="bullet">
            <item>
              <para>The <paramref name="pos" /> parameter is less than zero or greater than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string.</para>
            </item>
            <item>
              <para>Not enough editable characters exist in the formatted string at or beyond the specified position, <paramref name="pos" />, to insert all of the characters from the <paramref name="input" /> string.</para>
            </item>
            <item>
              <para>One or more of the insertion characters are not a valid input character because they are not printable or do not match their corresponding mask element.</para>
            </item>
            <item>
              <para>There are not enough available positions to the right of the insertion point, so that existing characters cannot be shifted.</para>
            </item>
            <item>
              <para>Shifting the existing characters would produce a violation of the mask. Note that this shifting occurs during the insertion of each individual character.</para>
            </item>
          </list>
          <para>An empty <paramref name="input" /> string will cause no change in the formatted string, but will return true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the specified string at a specified position within the formatted string. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the insertion was successful; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.String" /> to be inserted. </param>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string to insert the input string.</param>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(char input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="position">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(string input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="position">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidIndex">
      <MemberSignature Language="C#" Value="public static int InvalidIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 InvalidIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" /> property is used to represent a result that is not valid for indexing operations, such as the <see cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" /> method. </para>
          <para>When you use the provider or implement your own, you should use this property to decide if an index is invalid, rather than hard-coding knowledge of invalid values. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the upper bound of the range of invalid indexes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsAvailablePosition">
      <MemberSignature Language="C#" Value="public bool IsAvailablePosition (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAvailablePosition(int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)" /> method returns true only if all of the following conditions are true:</para>
          <list type="bullet">
            <item>
              <para>The <paramref name="pos" /> parameter is within the bounds of the formatted string; that is, its value is greater than or equal to zero and less than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string.</para>
            </item>
            <item>
              <para>The specified position is an editable character.</para>
            </item>
            <item>
              <para>A character has not already been assigned to this position.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified position is available for assignment.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified position in the formatted string is editable and has not been assigned to yet; otherwise false.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the mask to test.</param>
      </Docs>
    </Member>
    <Member MemberName="IsEditPosition">
      <MemberSignature Language="C#" Value="public bool IsEditPosition (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEditPosition(int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" /> method returns true only if both of the following conditions are true:</para>
          <list type="bullet">
            <item>
              <para>The <paramref name="pos" /> parameter is within the bounds of the formatted string; that is, its value is greater than or equal to zero and less than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string.</para>
            </item>
            <item>
              <para>The specified position is an editable character.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified position is editable. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified position in the formatted string is editable; otherwise false.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the mask to test.</param>
      </Docs>
    </Member>
    <Member MemberName="IsPassword">
      <MemberSignature Language="C#" Value="public bool IsPassword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Password protection can be initiated using one of the following two ways:</para>
          <list type="bullet">
            <item>
              <para>Setting the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property to a non-null value. </para>
            </item>
            <item>
              <para>Setting the <see cref="P:System.ComponentModel.MaskedTextProvider.IsPassword" /> property to true., which also sets the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property to the <see cref="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar" /> value.</para>
            </item>
          </list>
          <para>
            <see cref="P:System.ComponentModel.MaskedTextProvider.IsPassword" /> is used by the <see cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" /> and <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> methods to determine whether to reveal the actual input characters or obscure them with <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that determines whether password protection should be applied to the formatted string.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsValidInputChar">
      <MemberSignature Language="C#" Value="public static bool IsValidInputChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidInputChar(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid input characters include all printable characters, which include letters, digits, punctuation, symbols and the space character.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified character is a valid input character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified character contains a valid input value; otherwise false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Char" /> value to test.</param>
      </Docs>
    </Member>
    <Member MemberName="IsValidMaskChar">
      <MemberSignature Language="C#" Value="public static bool IsValidMaskChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidMaskChar(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid mask characters include all printable characters, which include letters, digits, punctuation, symbols and the space character.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified character is a valid mask character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified character contains a valid mask value; otherwise false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Char" /> value to test.</param>
      </Docs>
    </Member>
    <Member MemberName="IsValidPasswordChar">
      <MemberSignature Language="C#" Value="public static bool IsValidPasswordChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidPasswordChar(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid password characters include all printable characters and the null character, which is used to disable password functionality. Printable characters include letters, digits, punctuation, symbols and the space character.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified character is a valid password character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified character contains a valid password value; otherwise false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Char" /> value to test.</param>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastAssignedPosition">
      <MemberSignature Language="C#" Value="public int LastAssignedPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastAssignedPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" /> property represents the farthest edit position in the mask, relative to the origin, that has been assigned an input character. For languages read left-to-right (LTR), such as English, this is the rightmost assigned position; for languages read right-to-left (RTL), this would be the leftmost position.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the index in the mask of the rightmost input character that has been assigned to the mask.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> property represents the total number of characters in the mask, including both the literal and editable characters. The number of literal characters can be determined by subtracting the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" /> from the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />.</para>
          <para>
            <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> also describes the length of the formatted string, including input characters, literals, and prompt characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the length of the mask, absent any mask modifier characters.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.Mask" /> property is set in the <see cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" /> constructor. This mask must contain only valid characters as defined by the masking language.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the input mask.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.MaskCompleted" /> property checks only required input elements. To determine whether all required and optional input elements have been entered, use the <see cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" /> property of the <see cref="T:System.Windows.Forms.MaskedTextBox" /> class instead. </para>
          <para>The current value of the <see cref="P:System.ComponentModel.MaskedTextProvider.Mask" /> property determines which formatting elements are considered required and which are optional.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether all required inputs have been entered into the formatted string.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To verify if only required input elements have been entered, use the <see cref="P:System.ComponentModel.MaskedTextProvider.MaskCompleted" /> property instead. The current value of the <see cref="P:System.ComponentModel.MaskedTextProvider.Mask" /> property determines which formatting elements are considered required and which are optional.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether all required and optional inputs have been entered into the formatted string. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For sensitive user input, it is common practice to conceal the actual information entered by the user during output operations. If the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is set to a non-null character, output methods such as <see cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" /> and <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> will obscure the input characters with the specified password character. Setting this property to null will disable password protection functionality.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the character to be substituted for the actual input characters.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> property represents the prompt character that is used by the <see cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" /> and <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> methods to represent the current state of the formatted input string. A prompt character is placed in editable positions that have not yet been assigned an input value. Some versions of the <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method also depend on the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the character used to represent the absence of user input for all available edit positions.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" /> method has no effect if there are no characters assigned to the mask yet.</para>
          <para>When the last assigned character is removed from the formatted string, the editable mask character is reset for that position, allowing subsequent input.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes the last assigned character from the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character was successfully removed; otherwise, false.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public bool RemoveAt (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAt(int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> method has no effect if there are no assigned characters at the removal position specified. Literal characters are not affected by this method.</para>
          <para>When a character is removed, the remaining higher-positioned characters in the mask will shift to the left to fill in the gap created by the removal. Vacated positions are reset for input. If movement of the characters is prevented by the mask definition, no removal occurs, and <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> returns false.</para>
          <para>This method call is exactly equivalent to the following call to the overloaded <see cref="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)" /> version:</para>
          <para>RemoveAt(pos, pos);</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes the assigned character at the specified position from the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character was successfully removed; otherwise, false.</para>
        </returns>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position of the assigned character to remove.</param>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public bool RemoveAt (int startPosition, int endPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAt(int32 startPosition, int32 endPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> method has no effect if there are no assigned characters at the removal positions specified. </para>
          <para>When a character is removed, the remaining higher-positioned characters in the mask will shift to the left to fill in the gap created by the removal. Vacated positions are reset for input. If movement of the characters is prevented by the mask definition, no removal occurs, and <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> returns false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes the assigned characters between the specified positions from the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character was successfully removed; otherwise, false.</para>
        </returns>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the first assigned character to remove.</param>
        <param name="endPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the last assigned character to remove.</param>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public bool RemoveAt (int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAt(int32 startPosition, int32 endPosition, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startPosition">To be added.</param>
        <param name="endPosition">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (char input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(char input, int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)" /> method searches for the first editable position in the formatted string at or beyond the specified position, <paramref name="pos" />. If one is found, the value of the editable position is changed to the specified character, <paramref name="input" />. Any of the following conditions will result in an error that causes no replacement to be performed and a value of false to be returned:</para>
          <list type="bullet">
            <item>
              <para>The <paramref name="pos" /> parameter is less than zero or greater than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string.</para>
            </item>
            <item>
              <para>An editable character was not found in the formatted string at or beyond the specified position, <paramref name="pos" />.</para>
            </item>
            <item>
              <para>The replacement character, <paramref name="input" />, is not a valid input character because it is not printable or does not match its corresponding mask element.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Replaces a single character at or beyond the specified position with the specified character value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character was successfully replaced; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Char" /> value that replaces the existing value.</param>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position to search for the first editable character to replace.</param>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (string input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(string input, int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)" /> method searches for the first editable position at or beyond the specified position, <paramref name="pos" />. Operating under the assumption that there are enough editable positions after this point, the existing character values are replaced one-by-one with the contents of the replacement string parameter, <paramref name="input" />. </para>
          <para>The following conditions are considered errors. When an error occurs, no replacement occurs and <see cref="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)" /> returns false.</para>
          <list type="bullet">
            <item>
              <para>The <paramref name="pos" /> parameter is less than zero or greater than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string.</para>
            </item>
            <item>
              <para>There are not enough editable positions in the formatted string to hold the contents of the replacement string.</para>
            </item>
            <item>
              <para>One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Replaces a range of editable characters starting at the specified position with the specified string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if all the characters were successfully replaced; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.String" /> value used to replace the existing editable characters.</param>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position to search for the first editable character to replace.</param>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(char input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="position">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(string input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="position">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (char input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(char input, int32 startPosition, int32 endPosition, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="startPosition">To be added.</param>
        <param name="endPosition">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (string input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(string input, int32 startPosition, int32 endPosition, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="startPosition">To be added.</param>
        <param name="endPosition">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="T:System.ComponentModel.MaskedTextProvider" /> can treat two categories of characters, paces and prompt characters, in a special manner. Normally, each input character will be tested against the mask and either accepted or rejected. Operating on the assumption that the <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> property is set to a value other than null, then setting the <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" /> property to true will result in special processing for the prompt character. When a prompt character is added, it causes the current mask character position to be cleared and the current position to be advanced to the next editable character.</para>
          <para>
            <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" /> takes precedence over the <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> property as described in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />
                  </para>
                </term>
                <description>
                  <para>
                    <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
                  </para>
                </description>
                <description>
                  <para>Resulting behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>true</para>
              </term>
              <description>
                <para>true</para>
              </description>
              <description>
                <para>The prompt character can be added and it causes the current mask position to be reset. The default.</para>
              </description>
            </item>
            <item>
              <term>
                <para>true</para>
              </term>
              <description>
                <para>false</para>
              </description>
              <description>
                <para>The prompt character can be added and it causes the current mask position to be reset. </para>
              </description>
            </item>
            <item>
              <term>
                <para>false</para>
              </term>
              <description>
                <para>true</para>
              </description>
              <description>
                <para>The prompt character is processed as a normal input character.</para>
              </description>
            </item>
            <item>
              <term>
                <para>false</para>
              </term>
              <description>
                <para>false</para>
              </description>
              <description>
                <para>The prompt character is not valid and methods attempting to add the character will fail. </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that determines how an input character that matches the prompt character should be handled.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="T:System.ComponentModel.MaskedTextProvider" /> can treat two categories of characters, spaces and prompt characters, in a special manner. Normally, each input character will be tested against the mask and either accepted or rejected. Setting the <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" /> property to true will result in the current mask character position being cleared and the current position being advanced to the next editable character.</para>
          <para>
            <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" /> is useful when assigning text that was saved excluding the prompt, where the prompt is replaced with a space. Before restoring such a string, setting <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" /> to true will reset the prompt characters at the positions occupied by spaces in the input string.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that determines how a space input character should be handled.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.ComponentModel.MaskedTextProvider.Set" /> method clears the existing contents of the formatted string and then applies the mask against the <paramref name="input" /> string to update the contents of the formatted string. </para>
          <para>The following conditions are considered errors. When an error occurs, the formatted string remains unaltered and <see cref="Overload:System.ComponentModel.MaskedTextProvider.Set" /> returns false.</para>
          <list type="bullet">
            <item>
              <para>There are not enough editable positions in the formatted string to hold the contents of the replacement string.</para>
            </item>
            <item>
              <para>One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the formatted string to the specified input string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if all the characters were successfully set; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.String" /> value used to set the formatted string.</param>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set(string input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Input masks can contain literal and editable characters. If an attempt is made to add an input character to the position in a mask occupied by a literal, the value of the <see cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" /> property determines the result.</para>
          <list type="bullet">
            <item>
              <para>If this property is true, it is valid to overwrite a literal with the same value when adding input characters. For example, a forward slash character value, '/', could be added to the third position of the mask "00/00/000".</para>
            </item>
            <item>
              <para>If this property is false, it is not valid to assign any value to a mask position occupied by a literal character.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ToDisplayString">
      <MemberSignature Language="C#" Value="public string ToDisplayString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToDisplayString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" /> method will always include prompt and literal characters in the return value, regardless of the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> or <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties. This method will always display password characters if the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is set to a character value other than null. </para>
          <para>
            <see cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" /> is commonly used to obtain the string to display in associated user interface elements, such as <see cref="T:System.Windows.Forms.MaskedTextBox" />. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the formatted string in a displayable form.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted <see cref="T:System.String" /> that includes prompts and mask literals.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method includes prompts and literals according to the current values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties, respectively. It will always return the original input characters, ignoring the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property.</para>
          <block subset="none" type="note">
            <para>Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the formatted string that includes all the assigned character values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted <see cref="T:System.String" /> that includes all the assigned character values.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool ignorePasswordChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool ignorePasswordChar) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignorePasswordChar" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method includes prompts and literals according to the current values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties, respectively. If the <paramref name="ignorePasswordChar" /> parameter is true, it will return the original input characters, ignoring the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property. If this parameter is false, it will use the password character to obscure editable user input if the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is set to a value other than null.</para>
          <block subset="none" type="note">
            <para>Because this method potentially reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the formatted string, optionally including password characters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted <see cref="T:System.String" /> that includes literals, prompts, and optionally password characters.</para>
        </returns>
        <param name="ignorePasswordChar">
          <attribution license="cc4" from="Microsoft" modified="false" />true to return the actual editable characters; otherwise, false to indicate that the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is to be honored.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool includePrompt, bool includeLiterals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool includePrompt, bool includeLiterals) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrompt" Type="System.Boolean" />
        <Parameter Name="includeLiterals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method includes prompts and literals according to the values of the <paramref name="IncludePrompt" /> and <paramref name="IncludeLiterals" /> parameters, respectively. Notice that these parameters override the values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties. This method will always return the original input characters, ignoring the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property.</para>
          <block subset="none" type="note">
            <para>Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the formatted string, optionally including prompt and literal characters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The formatted <see cref="T:System.String" /> that includes all the assigned character values and optionally includes literals and prompts.</para>
        </returns>
        <param name="includePrompt">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include prompt characters in the return string; otherwise, false.</param>
        <param name="includeLiterals">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include literal characters in the return string; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(int32 startPosition, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method returns a substring of the formatted string, starting at the position <paramref name="startPos" /> and including the subsequent number of characters specified by the <paramref name="length" /> parameter. The returned string includes prompts and literals according to the current values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties, respectively. The return string will contain the original input characters; the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is always ignored.</para>
          <block subset="none" type="note">
            <para>Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
          <para>
            <see cref="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)" /> performs the following actions when there are discrepancies in the input parameters:</para>
          <list type="bullet">
            <item>
              <para>If <paramref name="startPos" /> is less than zero, the starting position is set to zero. </para>
            </item>
            <item>
              <para>If <paramref name="startPos" /> is greater than or equal to the actual <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is greater than the remaining number of characters past the starting position, only the remaining characters are returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is less than or equal to zero, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a substring of the formatted string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, a substring of the formatted <see cref="T:System.String" />, which includes all the assigned character values; otherwise the <see cref="F:System.String.Empty" /> string.</para>
        </returns>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the output begins. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to return.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool ignorePasswordChar, int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool ignorePasswordChar, int32 startPosition, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignorePasswordChar" Type="System.Boolean" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method returns a substring of the formatted string, starting at the position <paramref name="startPos" /> and including the subsequent number of characters specified by the <paramref name="length" /> parameter. The returned string includes prompts and literals according to the current values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties, respectively. If the <paramref name="ignorePasswordChar" /> parameter is true, it will return the original input characters, ignoring the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property. If this parameter is false, it will use the password character to obscure editable user input if the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is set to a value other than null.</para>
          <block subset="none" type="note">
            <para>Because this method potentially reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
          <para>
            <see cref="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)" /> performs the following actions when there are discrepancies in the input parameters:</para>
          <list type="bullet">
            <item>
              <para>If <paramref name="startPos" /> is less than zero, the starting position is set to zero. </para>
            </item>
            <item>
              <para>If <paramref name="startPos" /> is greater than or equal to the actual <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is greater than the remaining number of characters past the starting position, only the remaining characters are returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is less than or equal to zero, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a substring of the formatted string, optionally including password characters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, a substring of the formatted <see cref="T:System.String" />, which includes literals, prompts, and optionally password characters; otherwise the <see cref="F:System.String.Empty" /> string.</para>
        </returns>
        <param name="ignorePasswordChar">
          <attribution license="cc4" from="Microsoft" modified="false" />true to return the actual editable characters; otherwise, false to indicate that the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is to be honored.</param>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the output begins. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to return.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool includePrompt, bool includeLiterals, int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool includePrompt, bool includeLiterals, int32 startPosition, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrompt" Type="System.Boolean" />
        <Parameter Name="includeLiterals" Type="System.Boolean" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method returns a substring of the formatted string, starting at the position <paramref name="startPos" /> and including the subsequent number of characters specified by the <paramref name="length" /> parameter. The return string includes prompts and literals according to the values of the <paramref name="IncludePrompt" /> and <paramref name="IncludeLiterals" /> parameters, respectively. Notice that these parameters override the values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties. This method will always return the original input characters, ignoring the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property.</para>
          <block subset="none" type="note">
            <para>Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
          <para>
            <see cref="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)" /> performs the following actions when there are discrepancies in the input parameters:</para>
          <list type="bullet">
            <item>
              <para>If <paramref name="startPos" /> is less than zero, the starting position is set to zero. </para>
            </item>
            <item>
              <para>If <paramref name="startPos" /> is greater than or equal to the actual <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is greater than the remaining number of characters past the starting position, only the remaining characters are returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is less than or equal to zero, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a substring of the formatted string, optionally including prompt and literal characters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, a substring of the formatted <see cref="T:System.String" />, which includes all the assigned character values and optionally includes literals and prompts; otherwise the <see cref="F:System.String.Empty" /> string.</para>
        </returns>
        <param name="includePrompt">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include prompt characters in the return string; otherwise, false.</param>
        <param name="includeLiterals">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include literal characters in the return string; otherwise, false.</param>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the output begins. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to return.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int32 startPosition, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignorePasswordChar" Type="System.Boolean" />
        <Parameter Name="includePrompt" Type="System.Boolean" />
        <Parameter Name="includeLiterals" Type="System.Boolean" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This version of the overloaded <see cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" /> method returns a substring of the formatted string, starting at the position <paramref name="startPos" /> and including the subsequent number of characters specified by the <paramref name="length" /> parameter. The return string includes prompts and literals according to the values of the <paramref name="IncludePrompt" /> and <paramref name="IncludeLiterals" /> parameters, respectively. Notice that these parameters override the values of the <see cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" /> and  <see cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" /> properties. If the <paramref name="ignorePasswordChar" /> parameter is true, it will return the original input characters, ignoring the value of the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property. If this parameter is false, it will use the password character to obscure editable user input if the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is set to a value other than null.</para>
          <block subset="none" type="note">
            <para>Because this method potentially reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data. </para>
          </block>
          <para>
            <see cref="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)" /> performs the following actions when there are discrepancies in the input parameters:</para>
          <list type="bullet">
            <item>
              <para>If <paramref name="startPos" /> is less than zero, the starting position is set to zero. </para>
            </item>
            <item>
              <para>If <paramref name="startPos" /> is greater than or equal to the actual <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the formatted string, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is greater than the remaining number of characters past the starting position, only the remaining characters are returned.</para>
            </item>
            <item>
              <para>If <paramref name="length" /> is less than or equal to zero, the <see cref="F:System.String.Empty" /> string is returned.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a substring of the formatted string, optionally including prompt, literal, and password characters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If successful, a substring of the formatted <see cref="T:System.String" />, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the <see cref="F:System.String.Empty" /> string.</para>
        </returns>
        <param name="ignorePasswordChar">
          <attribution license="cc4" from="Microsoft" modified="false" />true to return the actual editable characters; otherwise, false to indicate that the <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> property is to be honored.</param>
        <param name="includePrompt">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include prompt characters in the return string; otherwise, false.</param>
        <param name="includeLiterals">
          <attribution license="cc4" from="Microsoft" modified="false" />true to return literal characters in the return string; otherwise, false.</param>
        <param name="startPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in the formatted string where the output begins. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to return.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyChar">
      <MemberSignature Language="C#" Value="public bool VerifyChar (char input, int position, out System.ComponentModel.MaskedTextResultHint hint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyChar(char input, int32 position, valuetype System.ComponentModel.MaskedTextResultHint hint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="hint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="position">To be added.</param>
        <param name="hint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyEscapeChar">
      <MemberSignature Language="C#" Value="public bool VerifyEscapeChar (char input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyEscapeChar(char input, int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A character is said to be <newTerm>escaped</newTerm> if it is valid input, but is not assigned to that position in the formatted string. Escaped characters fall into the following three categories:</para>
          <list type="bullet">
            <item>
              <para>Prompt characters are escaped if the <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> property is true. </para>
            </item>
            <item>
              <para>Input characters are escaped if they have the same value as the literal in the mask, and if the <see cref="P:System.ComponentModel.MaskedTextProvider.SkipLiterals" /> property is true.</para>
            </item>
            <item>
              <para>Space characters are escaped if the <see cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" /> property is true. </para>
            </item>
          </list>
          <para>The <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> method will also return false if the <paramref name="pos" /> parameter is less than zero or greater than the <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> of the <see cref="P:System.ComponentModel.MaskedTextProvider.Mask" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Tests whether the specified character would be escaped at the specified position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified character would be escaped at the specified position; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Char" /> value to test.</param>
        <param name="position">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the mask to test the input character against.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyString">
      <MemberSignature Language="C#" Value="public bool VerifyString (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyString(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" /> applies the <paramref name="input" /> string against the mask, without actually changing the formatted string, to test whether <paramref name="input" /> would be valid in a corresponding <see cref="Overload:System.ComponentModel.MaskedTextProvider.Set" /> operation. This method also returns true if input is null or has zero length.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Tests whether the specified string could be set successfully.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified string represents valid input; otherwise, false.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.String" /> value to test.</param>
      </Docs>
    </Member>
    <Member MemberName="VerifyString">
      <MemberSignature Language="C#" Value="public bool VerifyString (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyString(string input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="testPosition">To be added.</param>
        <param name="resultHint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>