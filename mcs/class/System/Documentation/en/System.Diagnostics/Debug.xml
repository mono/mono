<?xml version="1.0" encoding="utf-8"?>
<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <TypeSignature Language="C#" Value="public static class Debug" Maintainer="auto" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>
    All public static members members of this type are safe for multithreaded
    operations.  No instance members are guaranteed to be thread safe.
  </ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>If you use methods in the <see cref="T:System.Diagnostics.Debug" /> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.</para>
      <para>This class provides methods to display an <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean)" /> dialog box, and to emit an assertion that will always fail. This class provides write methods in the following variations: <see cref="M:System.Diagnostics.Debug.Write(System.String)" />, <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />, <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> and <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />.</para>
      <para>The <see cref="T:System.Diagnostics.BooleanSwitch" /> and <see cref="T:System.Diagnostics.TraceSwitch" /> classes provide means to dynamically control the tracing output. You can modify the values of these switches without recompiling your application. For information on using the configuration file to set a switch, see the <see cref="T:System.Diagnostics.Switch" /> class and the <format type="text/html"><a href="8ab913aa-f400-4406-9436-f45bc6e54fbe">Trace Switches</a></format> topic.</para>
      <para>You can customize the tracing output's target by adding <see cref="T:System.Diagnostics.TraceListener" /> instances to or removing instances from the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. The <see cref="P:System.Diagnostics.Debug.Listeners" /> collection is shared by both the <see cref="T:System.Diagnostics.Debug" /> and the <see cref="T:System.Diagnostics.Trace" /> classes; adding a trace listener to either class adds the listener to both. By default, the <see cref="T:System.Diagnostics.DefaultTraceListener" /> class emits trace output.</para>
      <block subset="none" type="note">
        <para>Adding a trace listener to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available. The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic. It may be useful to place calls to the <see cref="T:System.Diagnostics.Debug" /> methods in try/catch blocks to detect and handle any exceptions from trace listeners.</para>
      </block>
      <para>You can modify the level of indentation using the <see cref="M:System.Diagnostics.Debug.Indent" /> method or the <see cref="P:System.Diagnostics.Debug.IndentLevel" /> property. To modify the indent spacing, use the <see cref="P:System.Diagnostics.Debug.IndentSize" /> property. You can specify whether to automatically flush the output buffer after each write by setting the <see cref="P:System.Diagnostics.Debug.AutoFlush" /> property to true.</para>
      <para>To set the <see cref="P:System.Diagnostics.Debug.AutoFlush" /> and <see cref="P:System.Diagnostics.Debug.IndentSize" /> for <see cref="T:System.Diagnostics.Debug" />, you can edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example. </para>
      <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;trace autoflush="true" indentsize="7" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
      <para>The <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute is applied to the methods of <see cref="T:System.Diagnostics.Debug" />. Compilers that support <see cref="T:System.Diagnostics.ConditionalAttribute" /> ignore calls to these methods unless "DEBUG" is defined as a conditional compilation symbol. Refer to a compiler's documentation to determine whether <see cref="T:System.Diagnostics.ConditionalAttribute" /> is supported and the syntax for defining a conditional compilation symbol.</para>
      <block subset="none" type="note">
        <para>In Visual Studio C# and Visual Basic projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds. For information about how to disable this behavior, see the Visual Studio documentation. For information about conditional debugging in Visual C++, see <format type="text/html"><a href="076bd528-1b6f-4e8a-a372-eb5849cf969a">Debug Class in Visual C++</a></format>.</para>
      </block>
      <para>To define the "DEBUG" conditional compilation symbol in C#, add the /d:DEBUG option to the compiler command line when you compile your code using a command line, or add #define DEBUG to the top of your file. In Visual Basic, add the /d:DEBUG=True option to the compiler command line or add #Const DEBUG=True to the file. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides a set of methods and properties that help debug your code. This class cannot be inherited.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the <see cref="Overload:System.Diagnostics.Debug.Assert" /> method works only in debug builds. Use the <see cref="Overload:System.Diagnostics.Trace.Assert" /> method if you want to do assertions in release builds. For more information, see <format type="text/html"><a href="70ab2522-6486-4076-a1a9-e0f11cd0f3a1">Assertions in Managed Code</a></format>.</para>
          <block subset="none" type="note">
            <para>The Assert methods are not available for win8_appstore_long apps. </para>
          </block>
          <para>Typically, the <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean)" /> method is used to identify logic errors during program development. <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean)" /> evaluates the condition. If the result is false, it sends a failure message to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. You can customize this behavior by adding a <see cref="T:System.Diagnostics.TraceListener" /> to, or removing one from, the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. </para>
          <para>When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <ui>Abort</ui>, <ui>Retry</ui>, and <ui>Ignore</ui>. Clicking the <ui>Abort</ui> button terminates the application. Clicking <ui>Retry</ui> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <ui>Ignore</ui> continues with the next instruction in the code. </para>
          <block subset="none" type="note">
            <para>win8_appname_long apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode. The message is written to the active trace listeners in debugging mode, or no message is written in release mode.</para>
          </block>
          <block subset="none" type="note">
            <para>The display of the message box depends on the presence of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. If the <see cref="T:System.Diagnostics.DefaultTraceListener" /> is not in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection, the message box is not displayed. The <see cref="T:System.Diagnostics.DefaultTraceListener" /> can be removed by the <format type="text/html"><a href="b44732a8-271f-4a06-ba9e-fe3298d6f192">&lt;clear&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, the <format type="text/html"><a href="9a5cd1b5-be1a-485f-8f0c-2890ad3ef3e0">&lt;remove&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, or by calling the <see cref="M:System.Diagnostics.TraceListenerCollection.Clear" /> method on the <see cref="P:System.Diagnostics.Trace.Listeners" /> property (System.Diagnostics.Trace.Listeners.Clear()).</para>
          </block>
          <para>You can change the behavior of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <see cref="P:System.Diagnostics.DefaultTraceListener.LogFileName" /> property. The configuration file should be formatted as follows: </para>
          <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks for a condition; if the condition is false, displays a message box that shows the call stack.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, a failure message is not sent and the message box is not displayed.</param>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the <see cref="Overload:System.Diagnostics.Debug.Assert" /> method works only in debug builds. Use the <see cref="Overload:System.Diagnostics.Trace.Assert" /> method if you want to do assertions in release builds. For more information, see <format type="text/html"><a href="70ab2522-6486-4076-a1a9-e0f11cd0f3a1">Assertions in Managed Code</a></format>.</para>
          <para>Typically, the <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" /> method is used to identify logic errors during program development. <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" /> evaluates the condition. If the result is false, it sends the specified diagnostic message to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. You can customize this behavior by adding a <see cref="T:System.Diagnostics.TraceListener" /> to, or removing one from, the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
          <para>When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <ui>Abort</ui>, <ui>Retry</ui>, and <ui>Ignore</ui>. Clicking the <ui>Abort</ui> button terminates the application. Clicking <ui>Retry</ui> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <ui>Ignore</ui> continues with the next instruction in the code.</para>
          <block subset="none" type="note">
            <para>The display of the message box depends on the presence of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. If the <see cref="T:System.Diagnostics.DefaultTraceListener" /> is not in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection, the message box is not displayed. The <see cref="T:System.Diagnostics.DefaultTraceListener" /> can be removed by the <format type="text/html"><a href="b44732a8-271f-4a06-ba9e-fe3298d6f192">&lt;clear&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, the <format type="text/html"><a href="9a5cd1b5-be1a-485f-8f0c-2890ad3ef3e0">&lt;remove&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, or by calling the <see cref="M:System.Diagnostics.TraceListenerCollection.Clear" /> method on the <see cref="P:System.Diagnostics.Trace.Listeners" /> property (System.Diagnostics.Trace.Listeners.Clear()).</para>
          </block>
          <para>You can change the behavior of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <see cref="P:System.Diagnostics.DefaultTraceListener.LogFileName" /> property. The configuration file should be formatted as follows: </para>
          <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the specified message is not sent and the message box is not displayed.  </param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the <see cref="Overload:System.Diagnostics.Debug.Assert" /> method works only in debug builds. Use the <see cref="Overload:System.Diagnostics.Trace.Assert" /> method if you want to do assertions in release builds. For more information, see <format type="text/html"><a href="70ab2522-6486-4076-a1a9-e0f11cd0f3a1">Assertions in Managed Code</a></format>.</para>
          <para>Typically, the <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" /> method is used to identify logic errors during program development. <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" /> evaluates the condition. If the result is false, it sends the specified diagnostic message and detailed message to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. You can customize this behavior by adding a <see cref="T:System.Diagnostics.TraceListener" /> to, or removing one from, the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
          <para>When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <ui>Abort</ui>, <ui>Retry</ui>, and <ui>Ignore</ui>. Clicking the <ui>Abort</ui> button terminates the application. Clicking <ui>Retry</ui> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <ui>Ignore</ui> continues with the next instruction in the code.</para>
          <block subset="none" type="note">
            <para>The display of the message box depends on the presence of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. If the <see cref="T:System.Diagnostics.DefaultTraceListener" /> is not in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection, the message box is not displayed. The <see cref="T:System.Diagnostics.DefaultTraceListener" /> can be removed by the <format type="text/html"><a href="b44732a8-271f-4a06-ba9e-fe3298d6f192">&lt;clear&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, the <format type="text/html"><a href="9a5cd1b5-be1a-485f-8f0c-2890ad3ef3e0">&lt;remove&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, or by calling the <see cref="M:System.Diagnostics.TraceListenerCollection.Clear" /> method on the <see cref="P:System.Diagnostics.Trace.Listeners" /> property (System.Diagnostics.Trace.Listeners.Clear()).</para>
          </block>
          <para>You can change the behavior of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <see cref="P:System.Diagnostics.DefaultTraceListener.LogFileName" /> property. The configuration file should be formatted as follows: </para>
          <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks for a condition; if the condition is false, outputs two specified messages and displays a message box that shows the call stack.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.  </param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
        <param name="detailMessage">
          <attribution license="cc4" from="Microsoft" modified="false" />The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.  </para>
          <para>By default, the <see cref="Overload:System.Diagnostics.Debug.Assert" /> method works only in debug builds. Use the <see cref="Overload:System.Diagnostics.Trace.Assert" /> method if you want to do assertions in release builds. For more information, see <format type="text/html"><a href="70ab2522-6486-4076-a1a9-e0f11cd0f3a1">Assertions in Managed Code</a></format>.</para>
          <para>Typically, the <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" /> method is used to identify logic errors during program development. <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" /> evaluates the condition. If the result is false, The <see cref="M:System.String.Format(System.String,System.Object[])" /> method is called and the <paramref name="detailMessageFormat" /> string and <paramref name="args" /> array are passed in as parameters. <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" /> then sends the specified text message and the formatted text message to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. You can customize this behavior by adding a <see cref="T:System.Diagnostics.TraceListener" /> to, or removing one from, the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
          <para>When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <ui>Abort</ui>, <ui>Retry</ui>, and <ui>Ignore</ui>. Clicking the <ui>Abort</ui> button terminates the application. Clicking <ui>Retry</ui> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <ui>Ignore</ui> continues with the next instruction in the code.</para>
          <block subset="none" type="note">
            <para>The display of the message box is dependent on the presence of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. If the <see cref="T:System.Diagnostics.DefaultTraceListener" /> is not in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection, the message box is not displayed. The <see cref="T:System.Diagnostics.DefaultTraceListener" /> can be removed by the <format type="text/html"><a href="b44732a8-271f-4a06-ba9e-fe3298d6f192">&lt;clear&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, the <format type="text/html"><a href="9a5cd1b5-be1a-485f-8f0c-2890ad3ef3e0">&lt;remove&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, or by calling the <see cref="M:System.Diagnostics.TraceListenerCollection.Clear" /> method on the <see cref="P:System.Diagnostics.Trace.Listeners" /> property (System.Diagnostics.Trace.Listeners.Clear()).</para>
          </block>
          <para>You can change the behavior of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <see cref="P:System.Diagnostics.DefaultTraceListener.LogFileName" /> property. The configuration file should be formatted as follows: </para>
          <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;assert assertuienabled="true" logfilename="c:\\myFile.log" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Checks for a condition; if the condition is false, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the specified messages are not sent and the message box is not displayed.  </param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. </param>
        <param name="detailMessageFormat">
          <attribution license="cc4" from="Microsoft" modified="false" />The composite format string (see Remarks) to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. This message contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />An object array that contains zero or more objects to format.</param>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>
          Whether or not the <see cref="T:System.Diagnostics.TraceListener" />
          objects should be 
          <see cref="M:System.Diagnostics.TraceListener.Flush" />ed after each
          write.
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default is false.</para>
          <para>Flushing the stream will not flush its underlying encoder unless you explicitly call <see cref="M:System.Diagnostics.Debug.Flush" /> or <see cref="M:System.Diagnostics.Debug.Close" />. Setting <see cref="P:System.Diagnostics.Debug.AutoFlush" /> to true means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</para>
          <para>To set the <see cref="P:System.Diagnostics.Debug.AutoFlush" /> and <see cref="P:System.Diagnostics.Debug.IndentSize" /> for <see cref="T:System.Diagnostics.Debug" />, you can also edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example. </para>
          <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;trace autoflush="true" indentsize="7" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method when the output goes to a file, such as to the <see cref="T:System.Diagnostics.TextWriterTraceListener" />.</para>
          <para>Flushing the stream will not flush its underlying encoder unless you explicitly call <see cref="M:System.Diagnostics.Debug.Flush" /> or <see cref="M:System.Diagnostics.Debug.Close" />. Setting <see cref="P:System.Diagnostics.Debug.AutoFlush" /> to true means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Flushes the output buffer and then calls the Close method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default behavior is that the <see cref="T:System.Diagnostics.DefaultTraceListener" /> outputs the message to a message box when the application is running in user interface mode and to the <see cref="T:System.Diagnostics.TraceListener" /> instances in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. </para>
          <block subset="none" type="note">
            <para>The display of the message box is dependent on the presence of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. If the <see cref="T:System.Diagnostics.DefaultTraceListener" /> is not in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection, the message box is not displayed. The <see cref="T:System.Diagnostics.DefaultTraceListener" /> can be removed by the <format type="text/html"><a href="b44732a8-271f-4a06-ba9e-fe3298d6f192">&lt;clear&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, the <format type="text/html"><a href="9a5cd1b5-be1a-485f-8f0c-2890ad3ef3e0">&lt;remove&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, or by calling the <see cref="M:System.Diagnostics.TraceListenerCollection.Clear" /> method on the <see cref="P:System.Diagnostics.Trace.Listeners" /> property (System.Diagnostics.Trace.Listeners.Clear()).</para>
          </block>
          <para>You can customize this behavior by adding a <see cref="T:System.Diagnostics.TraceListener" /> to, or removing one from, the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Emits the specified error message.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to emit. </param>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default behavior is that the <see cref="T:System.Diagnostics.DefaultTraceListener" /> outputs the message to a message box when the application is running in user interface mode and to the <see cref="T:System.Diagnostics.TraceListener" /> instances in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection. </para>
          <block subset="none" type="note">
            <para>The display of the message box is dependent on the presence of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. If the <see cref="T:System.Diagnostics.DefaultTraceListener" /> is not in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection, the message box is not displayed. The <see cref="T:System.Diagnostics.DefaultTraceListener" /> can be removed by the <format type="text/html"><a href="b44732a8-271f-4a06-ba9e-fe3298d6f192">&lt;clear&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, the <format type="text/html"><a href="9a5cd1b5-be1a-485f-8f0c-2890ad3ef3e0">&lt;remove&gt; Element for &lt;listeners&gt; for &lt;trace&gt;</a></format>, or by calling the <see cref="M:System.Diagnostics.TraceListenerCollection.Clear" /> method on the <see cref="P:System.Diagnostics.Trace.Listeners" /> property (System.Diagnostics.Trace.Listeners.Clear()).</para>
          </block>
          <para>You can customize this behavior by adding a <see cref="T:System.Diagnostics.TraceListener" /> to, or removing one from, the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Emits an error message and a detailed error message.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to emit. </param>
        <param name="detailMessage">
          <attribution license="cc4" from="Microsoft" modified="false" />A detailed message to emit. </param>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Flushing the stream will not flush its underlying encoder unless you explicitly call <see cref="M:System.Diagnostics.Debug.Flush" /> or <see cref="M:System.Diagnostics.Debug.Close" />. Setting <see cref="P:System.Diagnostics.Debug.AutoFlush" /> to true means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>
            This is equivalent to incrementing 
            <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The indent level.</value>
        <altmember name="T:System.Diagnostics.Debug" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Diagnostics.Debug.IndentLevel" /> property represents the number of times the indent of size <see cref="P:System.Diagnostics.Debug.IndentSize" /> is applied. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the indent level.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The indent size.</value>
        <altmember name="T:System.Diagnostics.Debug" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Diagnostics.TextWriterTraceListener" /> interprets this number as spaces. An <see cref="T:System.Diagnostics.EventLogTraceListener" /> ignores this value.</para>
          <para>To set the <see cref="P:System.Diagnostics.Debug.AutoFlush" /> and <see cref="P:System.Diagnostics.Debug.IndentSize" /> for <see cref="T:System.Diagnostics.Debug" />, you can also edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example. </para>
          <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;trace autoflush="true" indentsize="7" /&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the number of spaces in an indent.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>
          The list of <see cref="T:System.Diagnostics.TraceListener" /> objects
          to forward messages to.
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The listeners produce formatted output from the debug output. By default, the collection contains an instance of the <see cref="T:System.Diagnostics.DefaultTraceListener" /> class. To remove the default listener, call the <see cref="M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)" /> method, and pass it the instance of the <see cref="T:System.Diagnostics.DefaultTraceListener" />. To redirect output to the console window, add an instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" />. To redirect output to a file or stream, add an instance of the <see cref="T:System.Diagnostics.TextWriterTraceListener" />.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Diagnostics.Debug.Listeners" /> collection is shared by both the <see cref="T:System.Diagnostics.Debug" /> and the <see cref="T:System.Diagnostics.Trace" /> classes; adding a trace listener to either class adds the listener to both.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the collection of listeners that is monitoring the debug output.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default line terminator is a carriage return followed by a line feed. By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The message to write.</param>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />An object array containing zero or more objects to format. </param>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>
            This is equivalent to decrementing 
            <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>Use the <paramref name="category" /> parameter to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>Use the <paramref name="category" /> parameter to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the message is written to the trace listeners in the collection.</param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>The <paramref name="category" /> parameter can be used to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the category name and value are written to the trace listeners in the collection.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>The <paramref name="category" /> parameter can be used to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the category name and message are written to the trace listeners in the collection.</param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>The <paramref name="category" /> parameter can be used to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.  </para>
          <para>The <format type="text/html"><a href="1690815e-b52b-4967-8380-5780aff08012">params [.NET Framework]</a></format> keyword in the syntax for this method implies that the object array can be a single value. The exception to this is the <see cref="T:System.String" /> object. Explicit overloads take precedence, so an <paramref name="arg" /> value of a single string will default to the <see cref="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" /> overload.</para>
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />An object array that contains zero or more objects to format. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>The <paramref name="category" /> parameter can be used to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the message is written to the trace listeners in the collection.</param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>The <paramref name="category" /> parameter can be used to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />The conditional expression to evaluate. If the condition is true, the category name and value are written to the trace listeners in the collection.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the output is written to an instance of <see cref="T:System.Diagnostics.DefaultTraceListener" />.</para>
          <para>The <paramref name="category" /> parameter can be used to group output messages.</para>
          <para>This method calls the <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.String)" /> method of the trace listener.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is true.</para>
        </summary>
        <param name="condition">
          <attribution license="cc4" from="Microsoft" modified="false" />true to cause a message to be written; otherwise, false. </param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A message to write. </param>
        <param name="category">
          <attribution license="cc4" from="Microsoft" modified="false" />A category name used to organize the output. </param>
      </Docs>
    </Member>
  </Members>
</Type>