<?xml version="1.0" encoding="utf-8"?>
<Type Name="EventLogTraceListener" FullName="System.Diagnostics.EventLogTraceListener">
  <TypeSignature Language="C#" Maintainer="auto" Value="public sealed class EventLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventLogTraceListener extends System.Diagnostics.TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>An instance of this <see cref="T:System.Diagnostics.EventLogTraceListener" /> can be added to the <see cref="P:System.Diagnostics.Debug.Listeners" />, <see cref="P:System.Diagnostics.Trace.Listeners" />, or <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collections to send output from tracing or debugging to an <see cref="T:System.Diagnostics.EventLog" />. You can add the instance in your code or specify it in the application configuration file. To add an <see cref="T:System.Diagnostics.EventLogTraceListener" /> using an application configuration file, edit the file that corresponds to the name of your application or the app.config file in a vsprvslong project. In this file, insert an element for a <see cref="T:System.Diagnostics.EventLogTraceListener" />Â type.</para>
      <para>The following example adds a <see cref="T:System.Diagnostics.EventLogTraceListener" /> object named myListener to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection. The <paramref name="initializeData" /> parameter specifies the name of the event log source that is to be passed to the <see cref="M:System.Diagnostics.EventLogTraceListener.#ctor(System.String)" /> constructor.</para>
      <code>&lt;configuration&gt;
  &lt;system.diagnostics&gt;
    &lt;trace autoflush="false" indentsize="4"&gt;
      &lt;listeners&gt;
        &lt;add name="myListener"
          type="System.Diagnostics.EventLogTraceListener"
          initializeData="TraceListenerLog" /&gt;
      &lt;/listeners&gt;
    &lt;/trace&gt;
  &lt;/system.diagnostics&gt;
&lt;/configuration&gt;</code>
      <para>For more information about how to add trace listeners in the application configuration file, see <format type="text/html"><a href="1394c2c3-6304-46db-87c1-8e8b16f5ad5b">&lt;listeners&gt; element</a></format> or <format type="text/html"><a href="a2991f43-b4d3-4614-a8e7-da392de9697f">&lt;listeners&gt; element for &lt;source&gt;</a></format>.</para>
      <block subset="none" type="note">
        <para>If the <see cref="P:System.Diagnostics.EventLog.Source" /> for the event log that is associated with the <see cref="T:System.Diagnostics.EventLogTraceListener" /> instance does not exist, a new event source is created. To create an event source in Windows Vista, Windows XP Professional, or Windows Server 2003, you must have administrative privileges. </para>
        <para>The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. In Windows Vista, users do not have permission to access the security log; therefore, a <see cref="T:System.Security.SecurityException" /> is thrown.</para>
        <para>In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.</para>
      </block>
      <para>The class provides the <see cref="P:System.Diagnostics.EventLogTraceListener.EventLog" /> property to get or set the event log that receives the tracing or debugging output, and the <see cref="P:System.Diagnostics.EventLogTraceListener.Name" /> property to hold the name of the <see cref="T:System.Diagnostics.EventLogTraceListener" />.</para>
      <para>The <see cref="M:System.Diagnostics.EventLogTraceListener.Close" /> method closes the event log so it no longer receives tracing or debugging output. The <see cref="M:System.Diagnostics.EventLogTraceListener.Write(System.String)" /> and <see cref="M:System.Diagnostics.EventLogTraceListener.WriteLine(System.String)" /> methods write a message to the event log.</para>
      <block subset="none" type="note">
        <para>To avoid the possibility of writing large amounts of data to the event log, the <see cref="T:System.Diagnostics.EventLogTraceListener" /> does not output the optional trace data specified by the <see cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" /> property.</para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides a simple listener that directs tracing or debugging output to an <see cref="T:System.Diagnostics.EventLog" />.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogTraceListener" /> class without a trace listener.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogTraceListener (System.Diagnostics.EventLog eventLog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.EventLog eventLog) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="eventLog" Type="System.Diagnostics.EventLog" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogTraceListener" /> class using the specified event log.</para>
        </summary>
        <param name="eventLog">
          <attribution license="cc4" from="Microsoft" modified="false" />The event log to write to. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogTraceListener (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogTraceListener" /> class using the specified source.</para>
        </summary>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of an existing event log source. </param>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Closes the event log so that it no longer receives tracing or debugging output.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added: an object of type 'bool'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLog EventLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'EventLog'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the event log to write to.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property defaults to the source name of the event log.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the name of this <see cref="T:System.Diagnostics.EventLogTraceListener" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceData" /> methods are not intended to be called by application code. They are called by methods of the <see cref="T:System.Diagnostics.Debug" />, <see cref="T:System.Diagnostics.Trace" />, and <see cref="T:System.Diagnostics.TraceSource" /> classes to output trace data.</para>
          </block>
          <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceData" /> method, like the <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceEvent" /> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.</para>
          <para>The <paramref name="eventCache" /> and <paramref name="source" /> parameters are used to determine if the event should be traced. <paramref name="id" /> is used to create an <see cref="T:System.Diagnostics.EventInstance" /> object and the <see cref="T:System.Diagnostics.TraceEventType" />  is equated to an <see cref="T:System.Diagnostics.EventLogEntryType" /> for the <see cref="P:System.Diagnostics.EventInstance.EntryType" /> property. The <see cref="T:System.Diagnostics.EventInstance" /> is written to the event log with the <paramref name="data" /> object, formatted as a string, using the <see cref="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])" /> method.</para>
          <block subset="none" type="note">
            <para>The maximum value of the <paramref name="id" /> parameter is 65,535. If the <paramref name="id" /> value specified is greater than 65,535, the maximum value is used.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes trace information, a data object, and event information to the event log.</para>
        </summary>
        <param name="eventCache">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that contains the current process ID, thread ID, and stack trace information.</param>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />A name used to identify the output; typically the name of the application that generated the trace event.</param>
        <param name="id">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric identifier for the event. The combination of <paramref name="source" /> and <paramref name="id" /> uniquely identifies an event.</param>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />A data object to write to the output file or stream.</param>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceData" /> methods are not intended to be called by application code. They are called by methods of the <see cref="T:System.Diagnostics.Debug" />, <see cref="T:System.Diagnostics.Trace" />, and <see cref="T:System.Diagnostics.TraceSource" /> classes to output trace data.</para>
          </block>
          <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceData" /> method, like the <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceEvent" /> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.</para>
          <para>The <paramref name="severity" /> and <paramref name="id" /> parameter data is used to create an <see cref="T:System.Diagnostics.EventInstance" /> object, which is written to the event log with the data from the array of data objects.</para>
          <para>The <paramref name="eventCache" /> and <paramref name="source" /> parameters are used to determine if the event should be traced. <paramref name="id" /> is used to create an <see cref="T:System.Diagnostics.EventInstance" /> object and the <see cref="T:System.Diagnostics.TraceEventType" />  is equated to an <see cref="T:System.Diagnostics.EventLogEntryType" /> for the <see cref="P:System.Diagnostics.EventInstance.EntryType" /> property. The <see cref="T:System.Diagnostics.EventInstance" /> is written to the event log with the <paramref name="data" /> object array, formatted as a string array, using the <see cref="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])" /> method.</para>
          <block subset="none" type="note">
            <para>The maximum value of the <paramref name="id" /> parameter is 65,535. If the <paramref name="id" /> value specified is greater than 65,535, the maximum value is used.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes trace information, an array of data objects, and event information to the event log.</para>
        </summary>
        <param name="eventCache">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that contains the current process ID, thread ID, and stack trace information.</param>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />A name used to identify the output; typically the name of the application that generated the trace event.</param>
        <param name="id">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric identifier for the event. The combination of <paramref name="source" /> and <paramref name="id" /> uniquely identifies an event.</param>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of data objects.</param>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceEvent" /> methods are not intended to be called by application code. These methods are called by methods of the <see cref="T:System.Diagnostics.Debug" />, <see cref="T:System.Diagnostics.Trace" />, and <see cref="T:System.Diagnostics.TraceSource" /> classes to write trace data. </para>
          </block>
          <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceEvent" /> method is intended to trace events that can be processed automatically by tools. For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.</para>
          <para>The <paramref name="eventCache" /> and <paramref name="source" /> parameters are used to determine if the event should be traced. <paramref name="id" /> is used to create an <see cref="T:System.Diagnostics.EventInstance" /> object and the <see cref="T:System.Diagnostics.TraceEventType" />  is equated to an <see cref="T:System.Diagnostics.EventLogEntryType" /> for the <see cref="P:System.Diagnostics.EventInstance.EntryType" /> property. The <see cref="T:System.Diagnostics.EventInstance" /> is written to the event log with the <paramref name="message" /> data using the <see cref="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])" /> method.</para>
          <block subset="none" type="note">
            <para>The maximum value of the <paramref name="id" /> parameter is 65,535. If the <paramref name="id" /> value specified is greater than 65,535, the maximum value is used.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes trace information, a message, and event information to the event log.</para>
        </summary>
        <param name="eventCache">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that contains the current process ID, thread ID, and stack trace information.</param>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />A name used to identify the output; typically the name of the application that generated the trace event.</param>
        <param name="id">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric identifier for the event. The combination of <paramref name="source" /> and <paramref name="id" /> uniquely identifies an event.</param>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The trace message.</param>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceEvent" /> methods are not intended to be called by application code. These methods are called by methods of the <see cref="T:System.Diagnostics.Debug" />, <see cref="T:System.Diagnostics.Trace" />, and <see cref="T:System.Diagnostics.TraceSource" /> classes to write trace data.</para>
          </block>
          <para>The <see cref="Overload:System.Diagnostics.EventLogTraceListener.TraceEvent" /> method is intended to trace events that can be processed automatically by tools. For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.</para>
          <para>The <paramref name="eventCache" /> and <paramref name="source" /> parameters are used to determine if the event should be traced. <paramref name="id" /> is used to create an <see cref="T:System.Diagnostics.EventInstance" /> object and the <see cref="T:System.Diagnostics.TraceEventType" />  is equated to an <see cref="T:System.Diagnostics.EventLogEntryType" /> for the <see cref="P:System.Diagnostics.EventInstance.EntryType" /> property. The <see cref="T:System.Diagnostics.EventInstance" /> is written to the event log, using the <see cref="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])" /> method, with the message obtained from the <paramref name="format" /> and <paramref name="args" /> parameters. The <paramref name="args" /> object array is converted to a string using the <see cref="M:System.String.Format(System.String,System.Object[])" /> method, passing the <paramref name="format" /> string and <paramref name="args" /> array to format the string as the message for the event log.</para>
          <block subset="none" type="note">
            <para>The maximum value of the <paramref name="id" /> parameter is 65,535. If the <paramref name="id" /> value specified is greater than 65,535, the maximum value is used.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes trace information, a formatted array of objects, and event information to the event log.</para>
        </summary>
        <param name="eventCache">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that contains the current process ID, thread ID, and stack trace information.</param>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />A name used to identify the output; typically the name of the application that generated the trace event.</param>
        <param name="id">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric identifier for the event. The combination of <paramref name="source" /> and <paramref name="id" /> uniquely identifies an event.</param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format string that contains zero or more format items that correspond to objects in the <paramref name="args" /> array.</param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />An object array containing zero or more objects to format.</param>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message to the event log for this instance.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The message to write. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a message to the event log for this instance.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />The message to write. </param>
      </Docs>
    </Member>
  </Members>
</Type>