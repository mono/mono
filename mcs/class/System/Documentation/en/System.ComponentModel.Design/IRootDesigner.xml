<?xml version="1.0" encoding="utf-8"?>
<Type Name="IRootDesigner" FullName="System.ComponentModel.Design.IRootDesigner">
  <TypeSignature Language="C#" Maintainer="auto" Value="public interface IRootDesigner : IDisposable, System.ComponentModel.Design.IDesigner" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRootDesigner implements class System.ComponentModel.Design.IDesigner, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IDesigner</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>A root designer is the designer that is in the top position, or root, of the current design-time document object hierarchy. A root designer must implement the <see cref="T:System.ComponentModel.Design.IRootDesigner" /> interface. A root designer typically manages the background view in designer view mode, and usually displays the controls within the base container of the current design time project.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides support for root-level designer view technologies.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="public object GetView (System.ComponentModel.Design.ViewTechnology technology);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetView(valuetype System.ComponentModel.Design.ViewTechnology technology) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="technology" Type="System.ComponentModel.Design.ViewTechnology" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a view object that can present a user interface to the user. The returned data type is an <see cref="T:System.Object" />, because there can be a variety of different user interface technologies. Development environments typically support more than one technology.</para>
          <block subset="none" type="note">
            <para>The <see cref="F:System.ComponentModel.Design.ViewTechnology.Passthrough" /> and <see cref="F:System.ComponentModel.Design.ViewTechnology.WindowsForms" /> fields are obsolete. Use <see cref="F:System.ComponentModel.Design.ViewTechnology.Default" /> for new designer implementations.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a view object for the specified view technology.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the view for this designer.</para>
        </returns>
        <param name="technology">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.ComponentModel.Design.ViewTechnology" /> that indicates a particular view technology.</param>
      </Docs>
    </Member>
    <Member MemberName="SupportedTechnologies">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.ViewTechnology[] SupportedTechnologies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.Design.ViewTechnology[] SupportedTechnologies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'ViewTechnology []'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.ComponentModel.Design.ViewTechnology" /> enumeration indicates the supported view technologies.</para>
          <block subset="none" type="note">
            <para>The <see cref="F:System.ComponentModel.Design.ViewTechnology.Passthrough" /> and <see cref="F:System.ComponentModel.Design.ViewTechnology.WindowsForms" /> fields are obsolete. Use <see cref="F:System.ComponentModel.Design.ViewTechnology.Default" /> for new designer implementations.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the set of technologies that this designer can support for its display.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>