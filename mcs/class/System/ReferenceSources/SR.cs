//
// This file was generated by txt2sr tool
//

//
// This file was generated by txt2sr tool
//

partial class SR
{
	public const string RTL = "RTL_False";
	public const string ContinueButtonText = "Continue";
	public const string DebugAssertBanner = "---- DEBUG ASSERTION FAILED ----";
	public const string DebugAssertShortMessage = "---- Assert Short Message ----";
	public const string DebugAssertLongMessage = "---- Assert Long Message ----";
	public const string DebugMessageTruncated = "{0}...\n<truncated>";
	public const string DebugAssertTitleShort = "Assertion Failed";
	public const string DebugAssertTitle = "Assertion Failed: Cancel=Debug, OK=Continue";
	public const string NotSupported = "This operation is not supported.";
	public const string DebugLaunchFailed = "Cannot launch the debugger.  Make sure that a Microsoft (R) .NET Framework debugger is properly installed.";
	public const string DebugLaunchFailedTitle = "Microsoft .NET Framework Debug Launch Failure";
	public const string ObjectDisposed = "Object {0} has been disposed and can no longer be used.";
	public const string ExceptionOccurred = "An exception occurred writing trace output to log file '{0}'. {1}";
	public const string MustAddListener = "Only TraceListeners can be added to a TraceListenerCollection.";
	public const string ToStringNull = "(null)";
	public const string EnumConverterInvalidValue = "The value '{0}' is not a valid value for the enum '{1}'.";
	public const string ConvertFromException = "{0} cannot convert from {1}.";
	public const string ConvertToException = "'{0}' is unable to convert '{1}' to '{2}'.";
	public const string ConvertInvalidPrimitive = "{0} is not a valid value for {1}.";
	public const string ErrorMissingPropertyAccessors = "Accessor methods for the {0} property are missing.";
	public const string ErrorInvalidPropertyType = "Invalid type for the {0} property.";
	public const string ErrorMissingEventAccessors = "Accessor methods for the {0} event are missing.";
	public const string ErrorInvalidEventHandler = "Invalid event handler for the {0} event.";
	public const string ErrorInvalidEventType = "Invalid type for the {0} event.";
	public const string InvalidMemberName = "Invalid member name.";
	public const string ErrorBadExtenderType = "The {0} extender provider is not compatible with the {1} type.";
	public const string NullableConverterBadCtorArg = "The specified type is not a nullable type.";
	public const string TypeDescriptorExpectedElementType = "Expected types in the collection to be of type {0}.";
	public const string TypeDescriptorSameAssociation = "Cannot create an association when the primary and secondary objects are the same.";
	public const string TypeDescriptorAlreadyAssociated = "The primary and secondary objects are already associated with each other.";
	public const string TypeDescriptorProviderError = "The type description provider {0} has returned null from {1} which is illegal.";
	public const string TypeDescriptorUnsupportedRemoteObject = "The object {0} is being remoted by a proxy that does not support interface discovery.  This type of remoted object is not supported.";
	public const string TypeDescriptorArgsCountMismatch = "The number of elements in the Type and Object arrays must match.";
	public const string ErrorCreateSystemEvents = "Failed to create system events window thread.";
	public const string ErrorCreateTimer = "Cannot create timer.";
	public const string ErrorKillTimer = "Cannot end timer.";
	public const string ErrorSystemEventsNotSupported = "System event notifications are not supported under the current context. Server processes, for example, may not support global system event notifications.";
	public const string ErrorGetTempPath = "Cannot get temporary file name";
	public const string CHECKOUTCanceled = "The checkout was canceled by the user.";
	public const string ErrorInvalidServiceInstance = "The service instance must derive from or implement {0}.";
	public const string ErrorServiceExists = "The service {0} already exists in the service container.";
	public const string Argument_InvalidNumberStyles = "An undefined NumberStyles value is being used.";
	public const string Argument_InvalidHexStyle = "With the AllowHexSpecifier bit set in the enum bit field, the only other valid bits that can be combined into the enum value must be a subset of those in HexNumber.";
	public const string Argument_ByteArrayLengthMustBeAMultipleOf4 = "The Byte[] length must be a multiple of 4.";
	public const string Argument_InvalidCharactersInString = "The string contained an invalid character.";
	public const string Argument_ParsedStringWasInvalid = "The parsed string was invalid.";
	public const string Argument_MustBeBigInt = "The parameter must be a BigInteger.";
	public const string Format_InvalidFormatSpecifier = "Format specifier was invalid.";
	public const string Format_TooLarge = "The value is too large to be represented by this format specifier.";
	public const string ArgumentOutOfRange_MustBeLessThanUInt32MaxValue = "The value must be less than UInt32.MaxValue (2^32).";
	public const string ArgumentOutOfRange_MustBeNonNeg = "The number must be greater than or equal to zero.";
	public const string NotSupported_NumberStyle = "The NumberStyle option is not supported.";
	public const string Overflow_BigIntInfinity = "BigInteger cannot represent infinity.";
	public const string Overflow_NotANumber = "The value is not a number.";
	public const string Overflow_ParseBigInteger = "The value could not be parsed.";
	public const string Overflow_Int32 = "Value was either too large or too small for an Int32.";
	public const string Overflow_Int64 = "Value was either too large or too small for an Int64.";
	public const string Overflow_UInt32 = "Value was either too large or too small for a UInt32.";
	public const string Overflow_UInt64 = "Value was either too large or too small for a UInt64.";
	public const string Overflow_Decimal = "Value was either too large or too small for a Decimal.";
	public const string Argument_FrameworkNameTooShort = "FrameworkName cannot have less than two components or more than three components.";
	public const string Argument_FrameworkNameInvalid = "FrameworkName is invalid.";
	public const string Argument_FrameworkNameInvalidVersion = "FrameworkName version component is invalid.";
	public const string Argument_FrameworkNameMissingVersion = "FrameworkName version component is missing.";
	public const string ArgumentNull_Key = "Key cannot be null.";
	public const string Argument_InvalidValue = "Argument {0} should be larger than {1}.";
	public const string Arg_MultiRank = "Multi dimension array is not supported on this operation.";
	public const string Barrier_ctor_ArgumentOutOfRange = "The participantCount argument must be non-negative and less than or equal to 32767.";
	public const string Barrier_AddParticipants_NonPositive_ArgumentOutOfRange = "The participantCount argument must be a positive value.";
	public const string Barrier_AddParticipants_Overflow_ArgumentOutOfRange = "Adding participantCount participants would result in the number of participants exceeding the maximum number allowed.";
	public const string Barrier_InvalidOperation_CalledFromPHA = "This method may not be called from within the postPhaseAction.";
	public const string Barrier_RemoveParticipants_NonPositive_ArgumentOutOfRange = "The participantCount argument must be a positive value.";
	public const string Barrier_RemoveParticipants_ArgumentOutOfRange = "The participantCount argument must be less than or equal the number of participants.";
	public const string Barrier_RemoveParticipants_InvalidOperation = "The participantCount argument is greater than the number of participants that haven't yet arrived at the barrier in this phase.";
	public const string Barrier_SignalAndWait_ArgumentOutOfRange = "The specified timeout must represent a value between -1 and Int32.MaxValue, inclusive.";
	public const string Barrier_SignalAndWait_InvalidOperation_ZeroTotal = "The barrier has no registered participants.";
	public const string Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded = "The number of threads using the barrier exceeded the total number of registered participants.";
	public const string Barrier_Dispose = "The barrier has been disposed.";
	public const string BarrierPostPhaseException = "The postPhaseAction failed with an exception.";
	public const string UriTypeConverter_ConvertFrom_CannotConvert = "{0} cannot convert from {1}.";
	public const string UriTypeConverter_ConvertTo_CannotConvert = "{0} cannot convert {1} to {2}.";
	public const string ISupportInitializeDescr = "Specifies support for transacted initialization.";
	public const string CantModifyListSortDescriptionCollection = "Once a ListSortDescriptionCollection has been created it can't be modified.";
	public const string Argument_NullComment = "The 'Comment' property of the CodeCommentStatement '{0}' cannot be null.";
	public const string InvalidPrimitiveType = "Invalid Primitive Type: {0}. Consider using CodeObjectCreateExpression.";
	public const string Cannot_Specify_Both_Compiler_Path_And_Version = "Cannot specify both the '{0}' and '{1}' CodeDom provider options to choose a compiler. Please remove one of them.";
	public const string CodeGenOutputWriter = "The output writer for code generation and the writer supplied don't match and cannot be used. This is generally caused by a bad implementation of a CodeGenerator derived class.";
	public const string CodeGenReentrance = "This code generation API cannot be called while the generator is being used to generate something else.";
	public const string InvalidLanguageIdentifier = "The identifier:\"{0}\" on the property:\"{1}\" of type:\"{2}\" is not a valid language-independent identifier name. Check to see if CodeGenerator.IsValidLanguageIndependentIdentifier allows the identifier name.";
	public const string InvalidTypeName = "The type name:\"{0}\" on the property:\"{1}\" of type:\"{2}\" is not a valid language-independent type name.";
	public const string Empty_attribute = "The '{0}' attribute cannot be an empty string.";
	public const string Invalid_nonnegative_integer_attribute = "The '{0}' attribute must be a non-negative integer.";
	public const string CodeDomProvider_NotDefined = "There is no CodeDom provider defined for the language.";
	public const string Language_Names_Cannot_Be_Empty = "You need to specify a non-empty String for a language name in the CodeDom configuration section.";
	public const string Extension_Names_Cannot_Be_Empty_Or_Non_Period_Based = "An extension name in the CodeDom configuration section must be a non-empty string which starts with a period.";
	public const string Unable_To_Locate_Type = "The CodeDom provider type \"{0}\" could not be located.";
	public const string NotSupported_CodeDomAPI = "This CodeDomProvider does not support this method.";
	public const string ArityDoesntMatch = "The total arity specified in '{0}' does not match the number of TypeArguments supplied.  There were '{1}' TypeArguments supplied.";
	public const string PartialTrustErrorTextReplacement = "<The original value of this property potentially contains file system information and has been suppressed.>";
	public const string PartialTrustIllegalProvider = "When used in partial trust, langID must be C#, VB, J#, or JScript, and the language provider must be in the global assembly cache.";
	public const string IllegalAssemblyReference = "Assembly references cannot begin with '-', or contain a '/' or '\\'.";
	public const string NullOrEmpty_Value_in_Property = "The '{0}' property cannot contain null or empty strings.";
	public const string AutoGen_Comment_Line1 = "auto-generated>";
	public const string AutoGen_Comment_Line2 = "This code was generated by a tool.";
	public const string AutoGen_Comment_Line3 = "Runtime Version:";
	public const string AutoGen_Comment_Line4 = "Changes to this file may cause incorrect behavior and will be lost if";
	public const string AutoGen_Comment_Line5 = "the code is regenerated.";
	public const string CantContainNullEntries = "Array '{0}' cannot contain null entries.";
	public const string InvalidPathCharsInChecksum = "The CodeChecksumPragma file name '{0}' contains invalid path characters.";
	public const string InvalidRegion = "The region directive '{0}' contains invalid characters.  RegionText cannot contain any new line characters.";
	public const string Provider_does_not_support_options = "This CodeDomProvider type does not have a constructor that takes providerOptions - \"{0}\"";
	public const string MetaExtenderName = "{0} on {1}";
	public const string InvalidEnumArgument = "The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.";
	public const string InvalidArgument = "'{1}' is not a valid value for '{0}'.";
	public const string InvalidNullArgument = "Null is not a valid value for {0}.";
	public const string InvalidNullEmptyArgument = "Argument {0} cannot be null or zero-length.";
	public const string LicExceptionTypeOnly = "A valid license cannot be granted for the type {0}. Contact the manufacturer of the component for more information.";
	public const string LicExceptionTypeAndInstance = "An instance of type '{1}' was being created, and a valid license could not be granted for the type '{0}'. Please,  contact the manufacturer of the component for more information.";
	public const string LicMgrContextCannotBeChanged = "The CurrentContext property of the LicenseManager is currently locked and cannot be changed.";
	public const string LicMgrAlreadyLocked = "The CurrentContext property of the LicenseManager is already locked by another user.";
	public const string LicMgrDifferentUser = "The CurrentContext property of the LicenseManager can only be unlocked with the same contextUser.";
	public const string InvalidElementType = "Element type {0} is not supported.";
	public const string InvalidIdentifier = "Identifier '{0}' is not valid.";
	public const string ExecFailedToCreate = "Failed to create file {0}.";
	public const string ExecTimeout = "Timed out waiting for a program to execute. The command being executed was {0}.";
	public const string ExecBadreturn = "An invalid return code was encountered waiting for a program to execute. The command being executed was {0}.";
	public const string ExecCantGetRetCode = "Unable to get the return code for a program being executed. The command that was being executed was '{0}'.";
	public const string ExecCantExec = "Cannot execute a program. The command being executed was {0}.";
	public const string ExecCantRevert = "Cannot execute a program. Impersonation failed.";
	public const string CompilerNotFound = "Compiler executable file {0} cannot be found.";
	public const string DuplicateFileName = "The file name '{0}' was already in the collection.";
	public const string CollectionReadOnly = "Collection is read-only.";
	public const string BitVectorFull = "Bit vector is full.";
	public const string ArrayConverterText = "{0} Array";
	public const string CollectionConverterText = "(Collection)";
	public const string MultilineStringConverterText = "(Text)";
	public const string CultureInfoConverterDefaultCultureString = "(Default)";
	public const string CultureInfoConverterInvalidCulture = "The {0} culture cannot be converted to a CultureInfo object on this computer.";
	public const string InvalidPrimitive = "The text {0} is not a valid {1}.";
	public const string TimerInvalidInterval = "'{0}' is not a valid value for 'Interval'. 'Interval' must be greater than {1}.";
	public const string TraceSwitchLevelTooHigh = "Attempted to set {0} to a value that is too high.  Setting level to TraceLevel.Verbose";
	public const string TraceSwitchLevelTooLow = "Attempted to set {0} to a value that is too low.  Setting level to TraceLevel.Off";
	public const string TraceSwitchInvalidLevel = "The Level must be set to a value in the enumeration TraceLevel.";
	public const string TraceListenerIndentSize = "The IndentSize property must be non-negative.";
	public const string TraceListenerFail = "Fail:";
	public const string TraceAsTraceSource = "Trace";
	public const string InvalidLowBoundArgument = "'{1}' is not a valid value for '{0}'. '{0}' must be greater than {2}.";
	public const string DuplicateComponentName = "Duplicate component name '{0}'.  Component names must be unique and case-insensitive.";
	public const string NotImplemented = "{0}: Not implemented";
	public const string OutOfMemory = "Could not allocate needed memory.";
	public const string EOF = "End of data stream encountered.";
	public const string IOError = "Unknown input/output failure.";
	public const string BadChar = "Unexpected Character: '{0}'.";
	public const string toStringNone = "(none)";
	public const string toStringUnknown = "(unknown)";
	public const string InvalidEnum = "{0} is not a valid {1} value.";
	public const string IndexOutOfRange = "Index {0} is out of range.";
	public const string ErrorPropertyAccessorException = "Property accessor '{0}' on object '{1}' threw the following exception:'{2}'";
	public const string InvalidOperation = "Invalid operation.";
	public const string EmptyStack = "Stack has no items in it.";
	public const string PerformanceCounterDesc = "Represents a Windows performance counter component.";
	public const string PCCategoryName = "Category name of the performance counter object.";
	public const string PCCounterName = "Counter name of the performance counter object.";
	public const string PCInstanceName = "Instance name of the performance counter object.";
	public const string PCMachineName = "Specifies the machine from where to read the performance data.";
	public const string PCInstanceLifetime = "Specifies the lifetime of the instance.";
	public const string PropertyCategoryAction = "Action";
	public const string PropertyCategoryAppearance = "Appearance";
	public const string PropertyCategoryAsynchronous = "Asynchronous";
	public const string PropertyCategoryBehavior = "Behavior";
	public const string PropertyCategoryData = "Data";
	public const string PropertyCategoryDDE = "DDE";
	public const string PropertyCategoryDesign = "Design";
	public const string PropertyCategoryDragDrop = "Drag Drop";
	public const string PropertyCategoryFocus = "Focus";
	public const string PropertyCategoryFont = "Font";
	public const string PropertyCategoryFormat = "Format";
	public const string PropertyCategoryKey = "Key";
	public const string PropertyCategoryList = "List";
	public const string PropertyCategoryLayout = "Layout";
	public const string PropertyCategoryDefault = "Misc";
	public const string PropertyCategoryMouse = "Mouse";
	public const string PropertyCategoryPosition = "Position";
	public const string PropertyCategoryText = "Text";
	public const string PropertyCategoryScale = "Scale";
	public const string PropertyCategoryWindowStyle = "Window Style";
	public const string PropertyCategoryConfig = "Configurations";
	public const string ArgumentNull_ArrayWithNullElements = "The array cannot contain null elements.";
	public const string OnlyAllowedOnce = "This operation is only allowed once per object.";
	public const string BeginIndexNotNegative = "Start index cannot be less than 0 or greater than input length.";
	public const string LengthNotNegative = "Length cannot be less than 0 or exceed input length.";
	public const string UnimplementedState = "Unimplemented state.";
	public const string UnexpectedOpcode = "Unexpected opcode in regular expression generation: {0}.";
	public const string NoResultOnFailed = "Result cannot be called on a failed Match.";
	public const string UnterminatedBracket = "Unterminated [] set.";
	public const string TooManyParens = "Too many )'s.";
	public const string NestedQuantify = "Nested quantifier {0}.";
	public const string QuantifyAfterNothing = "Quantifier {x,y} following nothing.";
	public const string InternalError = "Internal error in ScanRegex.";
	public const string IllegalRange = "Illegal {x,y} with x > y.";
	public const string NotEnoughParens = "Not enough )'s.";
	public const string BadClassInCharRange = "Cannot include class \\{0} in character range.";
	public const string ReversedCharRange = "[x-y] range in reverse order.";
	public const string UndefinedReference = "(?({0}) ) reference to undefined group.";
	public const string MalformedReference = "(?({0}) ) malformed.";
	public const string UnrecognizedGrouping = "Unrecognized grouping construct.";
	public const string UnterminatedComment = "Unterminated (?#...) comment.";
	public const string IllegalEndEscape = "Illegal \\ at end of pattern.";
	public const string MalformedNameRef = "Malformed \\k<...> named back reference.";
	public const string UndefinedBackref = "Reference to undefined group number {0}.";
	public const string UndefinedNameRef = "Reference to undefined group name {0}.";
	public const string TooFewHex = "Insufficient hexadecimal digits.";
	public const string MissingControl = "Missing control character.";
	public const string UnrecognizedControl = "Unrecognized control character.";
	public const string UnrecognizedEscape = "Unrecognized escape sequence \\{0}.";
	public const string IllegalCondition = "Illegal conditional (?(...)) expression.";
	public const string TooManyAlternates = "Too many | in (?()|).";
	public const string MakeException = "parsing \"{0}\" - {1}";
	public const string IncompleteSlashP = "Incomplete \\p{X} character escape.";
	public const string MalformedSlashP = "Malformed \\p{X} character escape.";
	public const string InvalidGroupName = "Invalid group name: Group names must begin with a word character.";
	public const string CapnumNotZero = "Capture number cannot be zero.";
	public const string AlternationCantCapture = "Alternation conditions do not capture and cannot be named.";
	public const string AlternationCantHaveComment = "Alternation conditions cannot be comments.";
	public const string CaptureGroupOutOfRange = "Capture group numbers must be less than or equal to Int32.MaxValue.";
	public const string SubtractionMustBeLast = "A subtraction must be the last element in a character class.";
	public const string UnknownProperty = "Unknown property '{0}'.";
	public const string ReplacementError = "Replacement pattern error.";
	public const string CountTooSmall = "Count cannot be less than -1.";
	public const string EnumNotStarted = "Enumeration has either not started or has already finished.";
	public const string Arg_InvalidArrayType = "Target array type is not compatible with the type of items in the collection.";
	public const string RegexMatchTimeoutException_Occurred = "The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.";
	public const string IllegalDefaultRegexMatchTimeoutInAppDomain = "AppDomain data '{0}' contains an invalid value or object for specifying a default matching timeout for System.Text.RegularExpressions.Regex.";
	public const string FileObject_AlreadyOpen = "The file is already open.  Call Close before trying to open the FileObject again.";
	public const string FileObject_Closed = "The FileObject is currently closed.  Try opening it.";
	public const string FileObject_NotWhileWriting = "File information cannot be queried while open for writing.";
	public const string FileObject_FileDoesNotExist = "File information cannot be queried if the file does not exist.";
	public const string FileObject_MustBeClosed = "This operation can only be done when the FileObject is closed.";
	public const string FileObject_MustBeFileName = "You must specify a file name, not a relative or absolute path.";
	public const string FileObject_InvalidInternalState = "FileObject's open mode wasn't set to a valid value.  This FileObject is corrupt.";
	public const string FileObject_PathNotSet = "The path has not been set, or is an empty string.  Please ensure you specify some path.";
	public const string FileObject_Reading = "The file is currently open for reading.  Close the file and reopen it before attempting this.";
	public const string FileObject_Writing = "The file is currently open for writing.  Close the file and reopen it before attempting this.";
	public const string FileObject_InvalidEnumeration = "Enumerator is positioned before the first line or after the last line of the file.";
	public const string FileObject_NoReset = "Reset is not supported on a FileLineEnumerator.";
	public const string DirectoryObject_MustBeDirName = "You must specify a directory name, not a relative or absolute path.";
	public const string DirectoryObjectPathDescr = "The fully qualified, or relative path to the directory you wish to read from. E.g., \"c:\\temp\".";
	public const string FileObjectDetectEncodingDescr = "Determines whether the file will be parsed to see if it has a byte order mark indicating its encoding.  If it does, this will be used rather than the current specified encoding.";
	public const string FileObjectEncodingDescr = "The encoding to use when reading the file. UTF-8 is the default.";
	public const string FileObjectPathDescr = "The fully qualified, or relative path to the file you wish to read from. E.g., \"myfile.txt\".";
	public const string Arg_EnumIllegalVal = "Illegal enum value: {0}.";
	public const string Arg_OutOfRange_NeedNonNegNum = "Non-negative number required.";
	public const string Argument_InvalidPermissionState = "Invalid permission state.";
	public const string Argument_InvalidOidValue = "The OID value was invalid.";
	public const string Argument_WrongType = "Operation on type '{0}' attempted with target of incorrect type.";
	public const string Arg_EmptyOrNullString = "String cannot be empty or null.";
	public const string Arg_EmptyOrNullArray = "Array cannot be empty or null.";
	public const string Argument_InvalidClassAttribute = "The value of \"class\" attribute is invalid.";
	public const string Argument_InvalidNameType = "The value of \"nameType\" is invalid.";
	public const string InvalidOperation_DuplicateItemNotAllowed = "Duplicate items are not allowed in the collection.";
	public const string Cryptography_Asn_MismatchedOidInCollection = "The AsnEncodedData object does not have the same OID for the collection.";
	public const string Cryptography_Cms_Envelope_Empty_Content = "Cannot create CMS enveloped for empty content.";
	public const string Cryptography_Cms_Invalid_Recipient_Info_Type = "The recipient info type {0} is not valid.";
	public const string Cryptography_Cms_Invalid_Subject_Identifier_Type = "The subject identifier type {0} is not valid.";
	public const string Cryptography_Cms_Invalid_Subject_Identifier_Type_Value_Mismatch = "The subject identifier type {0} does not match the value data type {1}.";
	public const string Cryptography_Cms_Key_Agree_Date_Not_Available = "The Date property is not available for none KID key agree recipient.";
	public const string Cryptography_Cms_Key_Agree_Other_Key_Attribute_Not_Available = "The OtherKeyAttribute property is not available for none KID key agree recipient.";
	public const string Cryptography_Cms_MessageNotSigned = "The CMS message is not signed.";
	public const string Cryptography_Cms_MessageNotSignedByNoSignature = "The CMS message is not signed by NoSignature.";
	public const string Cryptography_Cms_MessageNotEncrypted = "The CMS message is not encrypted.";
	public const string Cryptography_Cms_Not_Supported = "The Cryptographic Message Standard (CMS) is not supported on this platform.";
	public const string Cryptography_Cms_RecipientCertificateNotFound = "The recipient certificate is not specified.";
	public const string Cryptography_Cms_Sign_Empty_Content = "Cannot create CMS signature for empty content.";
	public const string Cryptography_Cms_Sign_No_Signature_First_Signer = "CmsSigner has to be the first signer with NoSignature.";
	public const string Cryptography_DpApi_InvalidMemoryLength = "The length of the data should be a multiple of 16 bytes.";
	public const string Cryptography_InvalidHandle = "{0} is an invalid handle.";
	public const string Cryptography_InvalidContextHandle = "The chain context handle is invalid.";
	public const string Cryptography_InvalidStoreHandle = "The store handle is invalid.";
	public const string Cryptography_Oid_InvalidValue = "The OID value is invalid.";
	public const string Cryptography_Pkcs9_ExplicitAddNotAllowed = "The PKCS 9 attribute cannot be explicitly added to the collection.";
	public const string Cryptography_Pkcs9_InvalidOid = "The OID does not represent a valid PKCS 9 attribute.";
	public const string Cryptography_Pkcs9_MultipleSigningTimeNotAllowed = "Cannot add multiple PKCS 9 signing time attributes.";
	public const string Cryptography_Pkcs9_AttributeMismatch = "The parameter should be a PKCS 9 attribute.";
	public const string Cryptography_X509_AddFailed = "Adding certificate with index '{0}' failed.";
	public const string Cryptography_X509_BadEncoding = "Input data cannot be coded as a valid certificate.";
	public const string Cryptography_X509_ExportFailed = "The certificate export operation failed.";
	public const string Cryptography_X509_ExtensionMismatch = "The parameter should be an X509Extension.";
	public const string Cryptography_X509_InvalidFindType = "Invalid find type.";
	public const string Cryptography_X509_InvalidFindValue = "Invalid find value.";
	public const string Cryptography_X509_InvalidEncodingFormat = "Invalid encoding format.";
	public const string Cryptography_X509_InvalidContentType = "Invalid content type.";
	public const string Cryptography_X509_KeyMismatch = "The public key of the certificate does not match the value specified.";
	public const string Cryptography_X509_RemoveFailed = "Removing certificate with index '{0}' failed.";
	public const string Cryptography_X509_StoreNotOpen = "The X509 certificate store has not been opened.";
	public const string Environment_NotInteractive = "The current session is not interactive.";
	public const string NotSupported_InvalidKeyImpl = "Only asymmetric keys that implement ICspAsymmetricAlgorithm are supported.";
	public const string NotSupported_KeyAlgorithm = "The certificate key algorithm is not supported.";
	public const string NotSupported_PlatformRequiresNT = "This operation is only supported on Windows 2000, Windows XP, and higher.";
	public const string NotSupported_UnreadableStream = "Stream does not support reading.";
	public const string Security_InvalidValue = "The {0} value was invalid.";
	public const string Unknown_Error = "Unknown error.";
	public const string security_ServiceNameCollection_EmptyServiceName = "A service name must not be null or empty.";
	public const string security_ExtendedProtectionPolicy_UseDifferentConstructorForNever = "To construct a policy with PolicyEnforcement.Never, the single-parameter constructor must be used.";
	public const string security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection = "The ServiceNameCollection must contain at least one service name.";
	public const string security_ExtendedProtection_NoOSSupport = "This operation requires OS support for extended protection.";
	public const string net_nonClsCompliantException = "A non-CLS Compliant Exception (i.e. an object that does not derive from System.Exception) was thrown.";
	public const string net_illegalConfigWith = "The '{0}' attribute cannot appear when '{1}' is present.";
	public const string net_illegalConfigWithout = "The '{0}' attribute can only appear when '{1}' is present.";
	public const string net_baddate = "The value of the date string in the header is invalid.";
	public const string net_writestarted = "This property cannot be set after writing has started.";
	public const string net_clsmall = "The Content-Length value must be greater than or equal to zero.";
	public const string net_reqsubmitted = "This operation cannot be performed after the request has been submitted.";
	public const string net_rspsubmitted = "This operation cannot be performed after the response has been submitted.";
	public const string net_ftp_no_http_cmd = "The requested FTP command is not supported when using HTTP proxy.";
	public const string net_ftp_invalid_method_name = "FTP Method names cannot be null or empty.";
	public const string net_ftp_invalid_renameto = "The RenameTo filename cannot be null or empty.";
	public const string net_ftp_no_defaultcreds = "Default credentials are not supported on an FTP request.";
	public const string net_ftpnoresponse = "This type of FTP request does not return a response stream.";
	public const string net_ftp_response_invalid_format = "The response string '{0}' has invalid format.";
	public const string net_ftp_no_offsetforhttp = "Offsets are not supported when sending an FTP request over an HTTP proxy.";
	public const string net_ftp_invalid_uri = "The requested URI is invalid for this FTP command.";
	public const string net_ftp_invalid_status_response = "The status response ({0}) is not expected in response to '{1}' command.";
	public const string net_ftp_server_failed_passive = "The server failed the passive mode request with status response ({0}).";
	public const string net_ftp_active_address_different = "The data connection was made from an address that is different than the address to which the FTP connection was made.";
	public const string net_ftp_proxy_does_not_support_ssl = "SSL cannot be enabled when using a proxy.";
	public const string net_ftp_invalid_response_filename = "The server returned the filename ({0}) which is not valid.";
	public const string net_ftp_unsupported_method = "This method is not supported.";
	public const string net_resubmitcanceled = "An error occurred on an automatic resubmission of the request.";
	public const string net_redirect_perm = "WebPermission demand failed for redirect URI.";
	public const string net_resubmitprotofailed = "Cannot handle redirect from HTTP/HTTPS protocols to other dissimilar ones.";
	public const string net_needchunked = "TransferEncoding requires the SendChunked property to be set to true.";
	public const string net_nochunked = "Chunked encoding must be set via the SendChunked property.";
	public const string net_nochunkuploadonhttp10 = "Chunked encoding upload is not supported on the HTTP/1.0 protocol.";
	public const string net_connarg = "Keep-Alive and Close may not be set using this property.";
	public const string net_no100 = "100-Continue may not be set using this property.";
	public const string net_fromto = "The From parameter cannot be less than To.";
	public const string net_rangetoosmall = "The From or To parameter cannot be less than 0.";
	public const string net_entitytoobig = "Bytes to be written to the stream exceed the Content-Length bytes size specified.";
	public const string net_invalidversion = "This protocol version is not supported.";
	public const string net_invalidstatus = "The status code must be exactly three digits.";
	public const string net_toosmall = "The specified value must be greater than 0.";
	public const string net_toolong = "The size of {0} is too long. It cannot be longer than {1} characters.";
	public const string net_connclosed = "The underlying connection was closed: {0}.";
	public const string net_noseek = "This stream does not support seek operations.";
	public const string net_servererror = "The remote server returned an error: {0}.";
	public const string net_nouploadonget = "Cannot send a content-body with this verb-type.";
	public const string net_mutualauthfailed = "The requirement for mutual authentication was not met by the remote server.";
	public const string net_invasync = "Cannot block a call on this socket while an earlier asynchronous call is in progress.";
	public const string net_inasync = "An asynchronous call is already in progress. It must be completed or canceled before you can call this method.";
	public const string net_mustbeuri = "The {0} parameter must represent a valid Uri (see inner exception).";
	public const string net_format_shexp = "The shell expression '{0}' could not be parsed because it is formatted incorrectly.";
	public const string net_cannot_load_proxy_helper = "Failed to load the proxy script runtime environment from the Microsoft.JScript assembly.";
	public const string net_invalid_host = "The specified value is not a valid Host header string.";
	public const string net_repcall = "Cannot re-call BeginGetRequestStream/BeginGetResponse while a previous call is still in progress.";
	public const string net_wrongversion = "Only HTTP/1.0 and HTTP/1.1 version requests are currently supported.";
	public const string net_badmethod = "Cannot set null or blank methods on request.";
	public const string net_io_notenoughbyteswritten = "Cannot close stream until all bytes are written.";
	public const string net_io_timeout_use_ge_zero = "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value >= 0.";
	public const string net_io_timeout_use_gt_zero = "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value > 0.";
	public const string net_io_no_0timeouts = "NetworkStream does not support a 0 millisecond timeout, use a value greater than zero for the timeout instead.";
	public const string net_requestaborted = "The request was aborted: {0}.";
	public const string net_tooManyRedirections = "Too many automatic redirections were attempted.";
	public const string net_authmodulenotregistered = "The supplied authentication module is not registered.";
	public const string net_authschemenotregistered = "There is no registered module for this authentication scheme.";
	public const string net_proxyschemenotsupported = "The ServicePointManager does not support proxies with the {0} scheme.";
	public const string net_maxsrvpoints = "The maximum number of service points was exceeded.";
	public const string net_unknown_prefix = "The URI prefix is not recognized.";
	public const string net_notconnected = "The operation is not allowed on non-connected sockets.";
	public const string net_notstream = "The operation is not allowed on non-stream oriented sockets.";
	public const string net_timeout = "The operation has timed out.";
	public const string net_nocontentlengthonget = "Content-Length or Chunked Encoding cannot be set for an operation that does not write data.";
	public const string net_contentlengthmissing = "When performing a write operation with AllowWriteStreamBuffering set to false, you must either set ContentLength to a non-negative number or set SendChunked to true.";
	public const string net_nonhttpproxynotallowed = "The URI scheme for the supplied IWebProxy has the illegal value '{0}'. Only 'http' is supported.";
	public const string net_nottoken = "The supplied string is not a valid HTTP token.";
	public const string net_rangetype = "A different range specifier has already been added to this request.";
	public const string net_need_writebuffering = "This request requires buffering data to succeed.";
	public const string net_securitypackagesupport = "The requested security package is not supported.";
	public const string net_securityprotocolnotsupported = "The requested security protocol is not supported.";
	public const string net_nodefaultcreds = "Default credentials cannot be supplied for the {0} authentication scheme.";
	public const string net_stopped = "Not listening. You must call the Start() method before calling this method.";
	public const string net_udpconnected = "Cannot send packets to an arbitrary host while connected.";
	public const string net_readonlystream = "The stream does not support writing.";
	public const string net_writeonlystream = "The stream does not support reading.";
	public const string net_no_concurrent_io_allowed = "The stream does not support concurrent IO read or write operations.";
	public const string net_needmorethreads = "There were not enough free threads in the ThreadPool to complete the operation.";
	public const string net_MethodNotImplementedException = "This method is not implemented by this class.";
	public const string net_PropertyNotImplementedException = "This property is not implemented by this class.";
	public const string net_MethodNotSupportedException = "This method is not supported by this class.";
	public const string net_PropertyNotSupportedException = "This property is not supported by this class.";
	public const string net_ProtocolNotSupportedException = "The '{0}' protocol is not supported by this class.";
	public const string net_SelectModeNotSupportedException = "The '{0}' select mode is not supported by this class.";
	public const string net_InvalidSocketHandle = "The socket handle is not valid.";
	public const string net_InvalidAddressFamily = "The AddressFamily {0} is not valid for the {1} end point, use {2} instead.";
	public const string net_InvalidEndPointAddressFamily = "The supplied EndPoint of AddressFamily {0} is not valid for this Socket, use {1} instead.";
	public const string net_InvalidSocketAddressSize = "The supplied {0} is an invalid size for the {1} end point.";
	public const string net_invalidAddressList = "None of the discovered or specified addresses match the socket address family.";
	public const string net_invalidPingBufferSize = "The buffer length must not exceed 65500 bytes.";
	public const string net_cant_perform_during_shutdown = "This operation cannot be performed while the AppDomain is shutting down.";
	public const string net_cant_create_environment = "Unable to create another web proxy script environment at this time.";
	public const string net_completed_result = "This operation cannot be performed on a completed asynchronous result object.";
	public const string net_protocol_invalid_family = "'{0}' Client can only accept InterNetwork or InterNetworkV6 addresses.";
	public const string net_protocol_invalid_multicast_family = "Multicast family is not the same as the family of the '{0}' Client.";
	public const string net_empty_osinstalltype = "The Registry value '{0}' was either empty or not a string type.";
	public const string net_unknown_osinstalltype = "Unknown Windows installation type '{0}'.";
	public const string net_cant_determine_osinstalltype = "Can't determine OS installation type: Can't read key '{0}'. Exception message: {1}";
	public const string net_osinstalltype = "Current OS installation type is '{0}'.";
	public const string net_entire_body_not_written = "You must write ContentLength bytes to the request stream before calling [Begin]GetResponse.";
	public const string net_must_provide_request_body = "You must provide a request body if you set ContentLength>0 or SendChunked==true.  Do this by calling [Begin]GetRequestStream before [Begin]GetResponse.";
	public const string net_ssp_dont_support_cbt = "The Security Service Providers don't support extended protection. Please install the latest Security Service Providers update.";
	public const string net_sockets_zerolist = "The parameter {0} must contain one or more elements.";
	public const string net_sockets_blocking = "The operation is not allowed on a non-blocking Socket.";
	public const string net_sockets_useblocking = "Use the Blocking property to change the status of the Socket.";
	public const string net_sockets_select = "The operation is not allowed on objects of type {0}. Use only objects of type {1}.";
	public const string net_sockets_toolarge_select = "The {0} list contains too many items; a maximum of {1} is allowed.";
	public const string net_sockets_empty_select = "All lists are either null or empty.";
	public const string net_sockets_mustbind = "You must call the Bind method before performing this operation.";
	public const string net_sockets_mustlisten = "You must call the Listen method before performing this operation.";
	public const string net_sockets_mustnotlisten = "You may not perform this operation after calling the Listen method.";
	public const string net_sockets_mustnotbebound = "The socket must not be bound or connected.";
	public const string net_sockets_namedmustnotbebound = "{0}: The socket must not be bound or connected.";
	public const string net_sockets_invalid_socketinformation = "The specified value for the socket information is invalid.";
	public const string net_sockets_invalid_ipaddress_length = "The number of specified IP addresses has to be greater than 0.";
	public const string net_sockets_invalid_optionValue = "The specified value is not a valid '{0}'.";
	public const string net_sockets_invalid_optionValue_all = "The specified value is not valid.";
	public const string net_sockets_invalid_dnsendpoint = "The parameter {0} must not be of type DnsEndPoint.";
	public const string net_sockets_disconnectedConnect = "Once the socket has been disconnected, you can only reconnect again asynchronously, and only to a different EndPoint.  BeginConnect must be called on a thread that won't exit until the operation has been completed.";
	public const string net_sockets_disconnectedAccept = "Once the socket has been disconnected, you can only accept again asynchronously.  BeginAccept must be called on a thread that won't exit until the operation has been completed.";
	public const string net_tcplistener_mustbestopped = "The TcpListener must not be listening before performing this operation.";
	public const string net_sockets_no_duplicate_async = "BeginConnect cannot be called while another asynchronous operation is in progress on the same Socket.";
	public const string net_socketopinprogress = "An asynchronous socket operation is already in progress using this SocketAsyncEventArgs instance.";
	public const string net_buffercounttoosmall = "The Buffer space specified by the Count property is insufficient for the AcceptAsync method.";
	public const string net_multibuffernotsupported = "Multiple buffers cannot be used with this method.";
	public const string net_ambiguousbuffers = "Buffer and BufferList properties cannot both be non-null.";
	public const string net_sockets_ipv6only = "This operation is only valid for IPv6 Sockets.";
	public const string net_perfcounter_initialized_success = "System.Net performance counters initialization completed successful.";
	public const string net_perfcounter_initialized_error = "System.Net performance counters initialization completed with errors. See System.Net trace file for more information.";
	public const string net_perfcounter_nocategory = "Performance counter category '{0}' doesn't exist. No System.Net performance counter values available.";
	public const string net_perfcounter_initialization_started = "System.Net performance counter initialization started.";
	public const string net_perfcounter_cant_queue_workitem = "Can't queue counter initialization logic on a thread pool thread. System.Net performance counters will not be available.";
	public const string net_config_proxy = "Error creating the Web Proxy specified in the 'system.net/defaultProxy' configuration section.";
	public const string net_config_proxy_module_not_public = "The specified proxy module type is not public.";
	public const string net_config_authenticationmodules = "Error creating the modules specified in the 'system.net/authenticationModules' configuration section.";
	public const string net_config_webrequestmodules = "Error creating the modules specified in the 'system.net/webRequestModules' configuration section.";
	public const string net_config_requestcaching = "Error creating the Web Request caching policy specified in the 'system.net/requestCaching' configuration section.";
	public const string net_config_section_permission = "Insufficient permissions for setting the configuration section '{0}'.";
	public const string net_config_element_permission = "Insufficient permissions for setting the configuration element '{0}'.";
	public const string net_config_property_permission = "Insufficient permissions for setting the configuration property '{0}'.";
	public const string net_WebResponseParseError_InvalidHeaderName = "Header name is invalid";
	public const string net_WebResponseParseError_InvalidContentLength = "'Content-Length' header value is invalid";
	public const string net_WebResponseParseError_IncompleteHeaderLine = "Invalid header name";
	public const string net_WebResponseParseError_CrLfError = "CR must be followed by LF";
	public const string net_WebResponseParseError_InvalidChunkFormat = "Response chunk format is invalid";
	public const string net_WebResponseParseError_UnexpectedServerResponse = "Unexpected server response received";
	public const string net_webstatus_Success = "Status success";
	public const string net_webstatus_NameResolutionFailure = "The remote name could not be resolved";
	public const string net_webstatus_ConnectFailure = "Unable to connect to the remote server";
	public const string net_webstatus_ReceiveFailure = "An unexpected error occurred on a receive";
	public const string net_webstatus_SendFailure = "An unexpected error occurred on a send";
	public const string net_webstatus_PipelineFailure = "A pipeline failure occurred";
	public const string net_webstatus_RequestCanceled = "The request was canceled";
	public const string net_webstatus_ConnectionClosed = "The connection was closed unexpectedly";
	public const string net_webstatus_TrustFailure = "Could not establish trust relationship for the SSL/TLS secure channel";
	public const string net_webstatus_SecureChannelFailure = "Could not create SSL/TLS secure channel";
	public const string net_webstatus_ServerProtocolViolation = "The server committed a protocol violation";
	public const string net_webstatus_KeepAliveFailure = "A connection that was expected to be kept alive was closed by the server";
	public const string net_webstatus_ProxyNameResolutionFailure = "The proxy name could not be resolved";
	public const string net_webstatus_MessageLengthLimitExceeded = "The message length limit was exceeded";
	public const string net_webstatus_CacheEntryNotFound = "The request cache-only policy does not allow a network request and the response is not found in cache";
	public const string net_webstatus_RequestProhibitedByCachePolicy = "The request could not be satisfied using a cache-only policy";
	public const string net_webstatus_Timeout = "The operation has timed out";
	public const string net_webstatus_RequestProhibitedByProxy = "The IWebProxy object associated with the request did not allow the request to proceed";
	public const string net_InvalidStatusCode = "The server returned a status code outside the valid range of 100-599.";
	public const string net_ftpstatuscode_ServiceNotAvailable = "Service not available, closing control connection";
	public const string net_ftpstatuscode_CantOpenData = "Can't open data connection";
	public const string net_ftpstatuscode_ConnectionClosed = "Connection closed; transfer aborted";
	public const string net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy = "File unavailable (e.g., file busy)";
	public const string net_ftpstatuscode_ActionAbortedLocalProcessingError = "Local error in processing";
	public const string net_ftpstatuscode_ActionNotTakenInsufficentSpace = "Insufficient storage space in system";
	public const string net_ftpstatuscode_CommandSyntaxError = "Syntax error, command unrecognized";
	public const string net_ftpstatuscode_ArgumentSyntaxError = "Syntax error in parameters or arguments";
	public const string net_ftpstatuscode_CommandNotImplemented = "Command not implemented";
	public const string net_ftpstatuscode_BadCommandSequence = "Bad sequence of commands";
	public const string net_ftpstatuscode_NotLoggedIn = "Not logged in";
	public const string net_ftpstatuscode_AccountNeeded = "Need account for storing files";
	public const string net_ftpstatuscode_ActionNotTakenFileUnavailable = "File unavailable (e.g., file not found, no access)";
	public const string net_ftpstatuscode_ActionAbortedUnknownPageType = "Page type unknown";
	public const string net_ftpstatuscode_FileActionAborted = "Exceeded storage allocation (for current directory or data set)";
	public const string net_ftpstatuscode_ActionNotTakenFilenameNotAllowed = "File name not allowed";
	public const string net_httpstatuscode_NoContent = "No Content";
	public const string net_httpstatuscode_NonAuthoritativeInformation = "Non Authoritative Information";
	public const string net_httpstatuscode_ResetContent = "Reset Content";
	public const string net_httpstatuscode_PartialContent = "Partial Content";
	public const string net_httpstatuscode_MultipleChoices = "Multiple Choices Redirect";
	public const string net_httpstatuscode_Ambiguous = "Ambiguous Redirect";
	public const string net_httpstatuscode_MovedPermanently = "Moved Permanently Redirect";
	public const string net_httpstatuscode_Moved = "Moved Redirect";
	public const string net_httpstatuscode_Found = "Found Redirect";
	public const string net_httpstatuscode_Redirect = "Redirect";
	public const string net_httpstatuscode_SeeOther = "See Other";
	public const string net_httpstatuscode_RedirectMethod = "Redirect Method";
	public const string net_httpstatuscode_NotModified = "Not Modified";
	public const string net_httpstatuscode_UseProxy = "Use Proxy Redirect";
	public const string net_httpstatuscode_TemporaryRedirect = "Temporary Redirect";
	public const string net_httpstatuscode_RedirectKeepVerb = "Redirect Keep Verb";
	public const string net_httpstatuscode_BadRequest = "Bad Request";
	public const string net_httpstatuscode_Unauthorized = "Unauthorized";
	public const string net_httpstatuscode_PaymentRequired = "Payment Required";
	public const string net_httpstatuscode_Forbidden = "Forbidden";
	public const string net_httpstatuscode_NotFound = "Not Found";
	public const string net_httpstatuscode_MethodNotAllowed = "Method Not Allowed";
	public const string net_httpstatuscode_NotAcceptable = "Not Acceptable";
	public const string net_httpstatuscode_ProxyAuthenticationRequired = "Proxy Authentication Required";
	public const string net_httpstatuscode_RequestTimeout = "Request Timeout";
	public const string net_httpstatuscode_Conflict = "Conflict";
	public const string net_httpstatuscode_Gone = "Gone";
	public const string net_httpstatuscode_LengthRequired = "Length Required";
	public const string net_httpstatuscode_InternalServerError = "Internal Server Error";
	public const string net_httpstatuscode_NotImplemented = "Not Implemented";
	public const string net_httpstatuscode_BadGateway = "Bad Gateway";
	public const string net_httpstatuscode_ServiceUnavailable = "Server Unavailable";
	public const string net_httpstatuscode_GatewayTimeout = "Gateway Timeout";
	public const string net_httpstatuscode_HttpVersionNotSupported = "Http Version Not Supported";
	public const string net_uri_BadScheme = "Invalid URI: The URI scheme is not valid.";
	public const string net_uri_BadFormat = "Invalid URI: The format of the URI could not be determined.";
	public const string net_uri_BadUserPassword = "Invalid URI: The username:password construct is badly formed.";
	public const string net_uri_BadHostName = "Invalid URI: The hostname could not be parsed.";
	public const string net_uri_BadAuthority = "Invalid URI: The Authority/Host could not be parsed.";
	public const string net_uri_BadAuthorityTerminator = "Invalid URI: The Authority/Host cannot end with a backslash character ('\\').";
	public const string net_uri_EmptyUri = "Invalid URI: The URI is empty.";
	public const string net_uri_BadString = "Invalid URI: There is an invalid sequence in the string.";
	public const string net_uri_MustRootedPath = "Invalid URI: A Dos path must be rooted, for example, 'c:\\'.";
	public const string net_uri_BadPort = "Invalid URI: Invalid port specified.";
	public const string net_uri_SizeLimit = "Invalid URI: The Uri string is too long.";
	public const string net_uri_SchemeLimit = "Invalid URI: The Uri scheme is too long.";
	public const string net_uri_NotAbsolute = "This operation is not supported for a relative URI.";
	public const string net_uri_PortOutOfRange = "A derived type '{0}' has reported an invalid value for the Uri port '{1}'.";
	public const string net_uri_UserDrivenParsing = "A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.";
	public const string net_uri_AlreadyRegistered = "A URI scheme name '{0}' already has a registered custom parser.";
	public const string net_uri_NeedFreshParser = "The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.";
	public const string net_uri_CannotCreateRelative = "A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.";
	public const string net_uri_InvalidUriKind = "The value '{0}' passed for the UriKind parameter is invalid.";
	public const string net_uri_BadUnicodeHostForIdn = "An invalid Unicode character by IDN standards was specified in the host.";
	public const string net_uri_GenericAuthorityNotDnsSafe = "The generic authority '{0}' is not a valid dns name.";
	public const string net_uri_NotJustSerialization = "UriComponents.SerializationInfoString must not be combined with other UriComponents.";
	public const string net_emptystringset = "This property cannot be set to an empty string.";
	public const string net_emptystringcall = "The parameter '{0}' cannot be an empty string.";
	public const string net_headers_req = "This collection holds response headers and cannot contain the specified request header.";
	public const string net_headers_rsp = "This collection holds request headers and cannot contain the specified response header.";
	public const string net_headers_toolong = "Header values cannot be longer than {0} characters.";
	public const string net_WebHeaderInvalidControlChars = "Specified value has invalid Control characters.";
	public const string net_WebHeaderInvalidCRLFChars = "Specified value has invalid CRLF characters.";
	public const string net_WebHeaderInvalidHeaderChars = "Specified value has invalid HTTP Header characters.";
	public const string net_WebHeaderInvalidNonAsciiChars = "Specified value has invalid non-ASCII characters.";
	public const string net_WebHeaderMissingColon = "Specified value does not have a ':' separator.";
	public const string net_headerrestrict = "The '{0}' header must be modified using the appropriate property or method.";
	public const string net_io_completionportwasbound = "The socket has already been bound to an io completion port.";
	public const string net_io_writefailure = "Unable to write data to the transport connection: {0}.";
	public const string net_io_readfailure = "Unable to read data from the transport connection: {0}.";
	public const string net_io_connectionclosed = "The connection was closed";
	public const string net_io_transportfailure = "Unable to create a transport connection.";
	public const string net_io_internal_bind = "Internal Error: A socket handle could not be bound to a completion port.";
	public const string net_io_invalidasyncresult = "The IAsyncResult object was not returned from the corresponding asynchronous method on this class.";
	public const string net_io_invalidnestedcall = "The {0} method cannot be called when another {1} operation is pending.";
	public const string net_io_invalidendcall = "{0} can only be called once for each asynchronous operation.";
	public const string net_io_must_be_rw_stream = "The stream has to be read/write.";
	public const string net_io_header_id = "Found a wrong header field {0} read = {1}, expected = {2}.";
	public const string net_io_out_range = "The byte count must not exceed {0} bytes for this stream type.";
	public const string net_io_encrypt = "The encryption operation failed, see inner exception.";
	public const string net_io_decrypt = "The decryption operation failed, see inner exception.";
	public const string net_io_read = "The read operation failed, see inner exception.";
	public const string net_io_write = "The write operation failed, see inner exception.";
	public const string net_io_eof = "Received an unexpected EOF or 0 bytes from the transport stream.";
	public const string net_io_async_result = "The parameter: {0} is not valid. Use the object returned from corresponding Begin async call.";
	public const string net_listener_mustcall = "Please call the {0} method before calling this method.";
	public const string net_listener_mustcompletecall = "The in-progress method {0} must be completed first.";
	public const string net_listener_callinprogress = "Cannot re-call {0} while a previous call is still in progress.";
	public const string net_listener_scheme = "Only Uri prefixes starting with 'http://' or 'https://' are supported.";
	public const string net_listener_host = "Only Uri prefixes with a valid hostname are supported.";
	public const string net_listener_slash = "Only Uri prefixes ending in '/' are allowed.";
	public const string net_listener_repcall = "This method cannot be called twice.";
	public const string net_listener_invalid_cbt_type = "Querying the {0} Channel Binding is not supported.";
	public const string net_listener_no_spns = "No service names could be determined from the registered prefixes. Either add prefixes from which default service names can be derived or specify an ExtendedProtectionPolicy object which contains an explicit list of service names.";
	public const string net_listener_cannot_set_custom_cbt = "Custom channel bindings are not supported.";
	public const string net_listener_cbt_not_supported = "HTTP.SYS doesn't support extended protection. Please install the latest HTTP.SYS update.";
	public const string net_listener_detach_error = "Can't detach Url group from request queue. Status code: {0}.";
	public const string net_listener_close_urlgroup_error = "Can't close Url group. Status code: {0}.";
	public const string net_tls_version = "The SSL version is not supported.";
	public const string net_perm_target = "Cannot cast target permission type.";
	public const string net_perm_both_regex = "Cannot subset Regex. Only support if both patterns are identical.";
	public const string net_perm_none = "There are no permissions to check.";
	public const string net_perm_attrib_count = "The value for '{0}' must be specified.";
	public const string net_perm_invalid_val = "The parameter value '{0}={1}' is invalid.";
	public const string net_perm_attrib_multi = "The permission '{0}={1}' cannot be added. Add a separate Attribute statement.";
	public const string net_perm_epname = "The argument value '{0}' is invalid for creating a SocketPermission object.";
	public const string net_perm_invalid_val_in_element = "The '{0}' element contains one or more invalid values.";
	public const string net_invalid_ip_addr = "IPv4 address 0.0.0.0 and IPv6 address ::0 are unspecified addresses that cannot be used as a target address.";
	public const string dns_bad_ip_address = "An invalid IP address was specified.";
	public const string net_bad_mac_address = "An invalid physical address was specified.";
	public const string net_ping = "An exception occurred during a Ping request.";
	public const string net_bad_ip_address_prefix = "An invalid IP address prefix was specified.";
	public const string net_max_ip_address_list_length_exceeded = "Too many addresses to sort. The maximum number of addresses allowed are {0}.";
	public const string net_ipv4_not_installed = "IPv4 is not installed.";
	public const string net_ipv6_not_installed = "IPv6 is not installed.";
	public const string net_webclient = "An exception occurred during a WebClient request.";
	public const string net_webclient_ContentType = "The Content-Type header cannot be changed from its default value for this request.";
	public const string net_webclient_Multipart = "The Content-Type header cannot be set to a multipart type for this request.";
	public const string net_webclient_no_concurrent_io_allowed = "WebClient does not support concurrent I/O operations.";
	public const string net_webclient_invalid_baseaddress = "The specified value is not a valid base address.";
	public const string net_container_add_cookie = "An error occurred when adding a cookie to the container.";
	public const string net_cookie_invalid = "Invalid contents for cookie = '{0}'.";
	public const string net_cookie_size = "The value size of the cookie is '{0}'. This exceeds the configured maximum size, which is '{1}'.";
	public const string net_cookie_parse_header = "An error occurred when parsing the Cookie header for Uri '{0}'.";
	public const string net_cookie_attribute = "The '{0}'='{1}' part of the cookie is invalid.";
	public const string net_cookie_format = "Cookie format error.";
	public const string net_cookie_exists = "Cookie already exists.";
	public const string net_cookie_capacity_range = "'{0}' has to be greater than '{1}' and less than '{2}'.";
	public const string net_set_token = "Failed to impersonate a thread doing authentication of a Web Request.";
	public const string net_revert_token = "Failed to revert the thread token after authenticating a Web Request.";
	public const string net_ssl_io_async_context = "Async context creation failed.";
	public const string net_ssl_io_encrypt = "The encryption operation failed, see inner exception.";
	public const string net_ssl_io_decrypt = "The decryption operation failed, see inner exception.";
	public const string net_ssl_io_context_expired = "The security context has expired.";
	public const string net_ssl_io_handshake_start = "The handshake failed. The remote side has dropped the stream.";
	public const string net_ssl_io_handshake = "The handshake failed, see inner exception.";
	public const string net_ssl_io_frame = "The handshake failed due to an unexpected packet format.";
	public const string net_ssl_io_corrupted = "The stream is corrupted due to an invalid SSL version number in the SSL protocol header.";
	public const string net_ssl_io_cert_validation = "The remote certificate is invalid according to the validation procedure.";
	public const string net_ssl_io_invalid_end_call = "{0} can only be called once for each asynchronous operation.";
	public const string net_ssl_io_invalid_begin_call = "{0} cannot be called when another {1} operation is pending.";
	public const string net_ssl_io_no_server_cert = "The server mode SSL must use a certificate with the associated private key.";
	public const string net_auth_bad_client_creds = "The server has rejected the client credentials.";
	public const string net_auth_bad_client_creds_or_target_mismatch = "Either the target name is incorrect or the server has rejected the client credentials.";
	public const string net_auth_context_expectation = "A security requirement was not fulfilled during authentication. Required: {0}, negotiated: {1}.";
	public const string net_auth_context_expectation_remote = "A remote side security requirement was not fulfilled during authentication. Try increasing the ProtectionLevel and/or ImpersonationLevel.";
	public const string net_auth_supported_impl_levels = "The supported values are Identification, Impersonation or Delegation.";
	public const string net_auth_no_anonymous_support = "The TokenImpersonationLevel.Anonymous level is not supported for authentication.";
	public const string net_auth_reauth = "This operation is not allowed on a security context that has already been authenticated.";
	public const string net_auth_noauth = "This operation is only allowed using a successfully authenticated context.";
	public const string net_auth_client_server = "Once authentication is attempted as the client or server, additional authentication attempts must use the same client or server role.";
	public const string net_auth_noencryption = "This authenticated context does not support data encryption.";
	public const string net_auth_SSPI = "A call to SSPI failed, see inner exception.";
	public const string net_auth_failure = "Authentication failed, see inner exception.";
	public const string net_auth_eof = "Authentication failed because the remote party has closed the transport stream.";
	public const string net_auth_alert = "Authentication failed on the remote side (the stream might still be available for additional authentication attempts).";
	public const string net_auth_ignored_reauth = "Re-authentication failed because the remote party continued to encrypt more than {0} bytes before answering re-authentication.";
	public const string net_auth_empty_read = "Protocol error: cannot proceed with SSPI handshake because an empty blob was received.";
	public const string net_auth_message_not_encrypted = "Protocol error: A received message contains a valid signature but it was not encrypted as required by the effective Protection Level.";
	public const string net_auth_must_specify_extended_protection_scheme = "An extended protection policy must specify either a custom channel binding or a custom service name collection.";
	public const string net_frame_size = "Received an invalid authentication frame. The message size is limited to {0} bytes, attempted to read {1} bytes.";
	public const string net_frame_read_io = "Received incomplete authentication message. Remote party has probably closed the connection.";
	public const string net_frame_read_size = "Cannot determine the frame size or a corrupted frame was received.";
	public const string net_frame_max_size = "The payload size is limited to {0}, attempted set it to {1}.";
	public const string net_jscript_load = "The proxy JScript file threw an exception while being initialized: {0}.";
	public const string net_proxy_not_gmt = "The specified value is not a valid GMT time.";
	public const string net_proxy_invalid_dayofweek = "The specified value is not a valid day of the week.";
	public const string net_proxy_invalid_url_format = "The system proxy settings contain an invalid proxy server setting: '{0}'.";
	public const string net_param_not_string = "Argument must be a string instead of {0}.";
	public const string net_value_cannot_be_negative = "The specified value cannot be negative.";
	public const string net_invalid_offset = "Value of offset cannot be negative or greater than the length of the buffer.";
	public const string net_offset_plus_count = "Sum of offset and count cannot be greater than the length of the buffer.";
	public const string net_cannot_be_false = "The specified value cannot be false.";
	public const string net_invalid_enum = "The specified value is not valid in the '{0}' enumeration.";
	public const string net_listener_already = "Failed to listen on prefix '{0}' because it conflicts with an existing registration on the machine.";
	public const string net_cache_shadowstream_not_writable = "Shadow stream must be writable.";
	public const string net_cache_validator_fail = "The validation method {0}() returned a failure for this request.";
	public const string net_cache_access_denied = "For this RequestCache object, {0} access is denied.";
	public const string net_cache_validator_result = "The validation method {0}() returned the unexpected status: {1}.";
	public const string net_cache_retrieve_failure = "Cache retrieve failed: {0}.";
	public const string net_cache_not_supported_body = "The cached response is not supported for a request with a content body.";
	public const string net_cache_not_supported_command = "The cached response is not supported for a request with the specified request method.";
	public const string net_cache_not_accept_response = "The cache protocol refused the server response. To allow automatic request retrying, set request.AllowAutoRedirect to true.";
	public const string net_cache_method_failed = "The request (Method = {0}) cannot be served from the cache and will fail because of the effective CachePolicy: {1}.";
	public const string net_cache_key_failed = "The request failed because no cache entry (CacheKey = {0}) was found and the effective CachePolicy is {1}.";
	public const string net_cache_no_stream = "The cache protocol returned a cached response but the cache entry is invalid because it has a null stream. (Cache Key = {0}).";
	public const string net_cache_unsupported_partial_stream = "A partial content stream does not support this operation or some method argument is out of range.";
	public const string net_cache_not_configured = "No cache protocol is available for this request.";
	public const string net_cache_non_seekable_stream_not_supported = "The transport stream instance passed in the RangeStream constructor is not seekable and therefore is not supported.";
	public const string net_invalid_cast = "Invalid cast from {0} to {1}.";
	public const string net_collection_readonly = "The collection is read-only.";
	public const string net_not_ipermission = "Specified value does not contain 'IPermission' as its tag.";
	public const string net_no_classname = "Specified value does not contain a 'class' attribute.";
	public const string net_no_typename = "The value class attribute is not valid.";
	public const string net_array_too_small = "The target array is too small.";
	public const string net_servicePointAddressNotSupportedInHostMode = "This property is not supported for protocols that do not use URI.";
	public const string net_Websockets_AlreadyOneOutstandingOperation = "There is already one outstanding '{0}' call for this WebSocket instance. ReceiveAsync and SendAsync can be called simultaneously, but at most one outstanding operation for each of them is allowed at the same time.";
	public const string net_Websockets_WebSocketBaseFaulted = "An exception caused the WebSocket to enter the Aborted state. Please see the InnerException, if present, for more details.";
	public const string net_WebSockets_NativeSendResponseHeaders = "An error occurred when sending the WebSocket HTTP upgrade response during the {0} operation. The HRESULT returned is '{1}'";
	public const string net_WebSockets_Generic = "An internal WebSocket error occurred. Please see the innerException, if present, for more details.";
	public const string net_WebSockets_NotAWebSocket_Generic = "A WebSocket operation was called on a request or response that is not a WebSocket.";
	public const string net_WebSockets_UnsupportedWebSocketVersion_Generic = "Unsupported WebSocket version.";
	public const string net_WebSockets_HeaderError_Generic = "The WebSocket request or response contained unsupported header(s).";
	public const string net_WebSockets_UnsupportedProtocol_Generic = "The WebSocket request or response operation was called with unsupported protocol(s).";
	public const string net_WebSockets_UnsupportedPlatform = "The WebSocket protocol is not supported on this platform.";
	public const string net_WebSockets_AcceptNotAWebSocket = "The {0} operation was called on an incoming request that did not specify a '{1}: {2}' header or the {2} header not contain '{3}'. {2} specified by the client was '{4}'.";
	public const string net_WebSockets_AcceptUnsupportedWebSocketVersion = "The {0} operation was called on an incoming request with WebSocket version '{1}', expected '{2}'.";
	public const string net_WebSockets_AcceptHeaderNotFound = "The {0} operation was called on an incoming WebSocket request without required '{1}' header.";
	public const string net_WebSockets_AcceptUnsupportedProtocol = "The WebSocket client request requested '{0}' protocol(s), but server is only accepting '{1}' protocol(s).";
	public const string net_WebSockets_ClientAcceptingNoProtocols = "The WebSocket client did not request any protocols, but server attempted to accept '{0}' protocol(s).";
	public const string net_WebSockets_ClientSecWebSocketProtocolsBlank = "The WebSocket client sent a blank '{0}' header; this is not allowed by the WebSocket protocol specification. The client should omit the header if the client is not negotiating any sub-protocols.";
	public const string net_WebSockets_ArgumentOutOfRange_TooSmall = "The argument must be a value greater than {0}.";
	public const string net_WebSockets_ArgumentOutOfRange_InternalBuffer = "The byte array must have a length of at least '{0}' bytes.";
	public const string net_WebSockets_ArgumentOutOfRange_TooBig = "The value of the '{0}' parameter ({1}) must be less than or equal to {2}.";
	public const string net_WebSockets_InvalidState_Generic = "The WebSocket instance cannot be used for communication because it has been transitioned into an invalid state.";
	public const string net_WebSockets_InvalidState_ClosedOrAborted = "The '{0}' instance cannot be used for communication because it has been transitioned into the '{1}' state.";
	public const string net_WebSockets_InvalidState = "The WebSocket is in an invalid state ('{0}') for this operation. Valid states are: '{1}'";
	public const string net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync = "The WebSocket is in an invalid state for this operation. The '{0}' method has already been called before on this instance. Use '{1}' instead to keep being able to receive data but close the output channel.";
	public const string net_WebSockets_InvalidMessageType = "The received message type '{2}' is invalid after calling {0}. {0} should only be used if no more data is expected from the remote endpoint. Use '{1}' instead to keep being able to receive data but close the output channel.";
	public const string net_WebSockets_InvalidBufferType = "The buffer type '{0}' is invalid. Valid buffer types are: '{1}', '{2}', '{3}', '{4}', '{5}'.";
	public const string net_WebSockets_InvalidMessageType_Generic = "The received  message type is invalid after calling {0}. {0} should only be used if no more data is expected from the remote endpoint. Use '{1}' instead to keep being able to receive data but close the output channel.";
	public const string net_WebSockets_Argument_InvalidMessageType = "The message type '{0}' is not allowed for the '{1}' operation. Valid message types are: '{2}, {3}'. To close the WebSocket, use the '{4}' operation instead.";
	public const string net_WebSockets_ConnectionClosedPrematurely_Generic = "The remote party closed the WebSocket connection without completing the close handshake.";
	public const string net_WebSockets_InvalidCharInProtocolString = "The WebSocket protocol '{0}' is invalid because it contains the invalid character '{1}'.";
	public const string net_WebSockets_InvalidEmptySubProtocol = "Empty string is not a valid subprotocol value. Please use \"null\" to specify no value.";
	public const string net_WebSockets_ReasonNotNull = "The close status description '{0}' is invalid. When using close status code '{1}' the description must be null.";
	public const string net_WebSockets_InvalidCloseStatusCode = "The close status code '{0}' is reserved for system use only and cannot be specified when calling this method.";
	public const string net_WebSockets_InvalidCloseStatusDescription = "The close status description '{0}' is too long. The UTF8-representation of the status description must not be longer than {1} bytes.";
	public const string net_WebSockets_Scheme = "Only Uris starting with 'ws://' or 'wss://' are supported.";
	public const string net_WebSockets_AlreadyStarted = "The WebSocket has already been started.";
	public const string net_WebSockets_Connect101Expected = "The server returned status code '{0}' when status code '101' was expected.";
	public const string net_WebSockets_InvalidResponseHeader = "The '{0}' header value '{1}' is invalid.";
	public const string net_WebSockets_NotConnected = "The WebSocket is not connected.";
	public const string net_WebSockets_InvalidRegistration = "The WebSocket schemes must be registered with the HttpWebRequest class.";
	public const string net_WebSockets_NoDuplicateProtocol = "Duplicate protocols are not allowed: '{0}'.";
	public const string net_log_exception = "Exception in {0}::{1} - {2}.";
	public const string net_log_listener_delegate_exception = "Sending 500 response, AuthenticationSchemeSelectorDelegate threw an exception: {0}.";
	public const string net_log_listener_unsupported_authentication_scheme = "Received a request with an unsupported authentication scheme, Authorization:{0} SupportedSchemes:{1}.";
	public const string net_log_listener_unmatched_authentication_scheme = "Received a request with an unmatched or no authentication scheme. AuthenticationSchemes:{0}, Authorization:{1}.";
	public const string net_log_listener_create_valid_identity_failed = "Failed to create a valid Identity for an incoming request.";
	public const string net_log_listener_httpsys_registry_null = "Can't open Registry key '{0}'.";
	public const string net_log_listener_httpsys_registry_error = "Exception thrown while reading Registry key '{0}': {1}";
	public const string net_log_listener_cant_convert_raw_path = "Can't convert Uri path '{0}' using encoding '{1}'.";
	public const string net_log_listener_cant_convert_percent_value = "Can't convert percent encoded value '{0}'.";
	public const string net_log_listener_cant_convert_bytes = "Can't convert bytes '{0}' into UTF-16 characters: {1}";
	public const string net_log_listener_cant_convert_to_utf8 = "Can't convert string '{0}' into UTF-8 bytes: {1}";
	public const string net_log_listener_cant_create_uri = "Can't create Uri from string '{0}://{1}{2}{3}'.";
	public const string net_log_listener_no_cbt_disabled = "No channel binding check because extended protection is disabled.";
	public const string net_log_listener_no_cbt_http = "No channel binding check for requests without a secure channel.";
	public const string net_log_listener_no_cbt_platform = "No channel binding check because the underlying platform does not support extended protection.";
	public const string net_log_listener_no_cbt_trustedproxy = "No channel binding check for the trusted proxy scenario.";
	public const string net_log_listener_cbt = "Channel binding check enabled.";
	public const string net_log_listener_no_spn_kerberos = "No explicit service name check because Kerberos authentication already validates the service name.";
	public const string net_log_listener_no_spn_disabled = "No service name check because extended protection is disabled.";
	public const string net_log_listener_no_spn_cbt = "No service name check because the channel binding was already checked.";
	public const string net_log_listener_no_spn_platform = "No service name check because the underlying platform does not support extended protection.";
	public const string net_log_listener_no_spn_whensupported = "No service name check because the client did not provide a service name and the server was configured for PolicyEnforcement.WhenSupported.";
	public const string net_log_listener_no_spn_loopback = "No service name check because the authentication was from a client on the local machine.";
	public const string net_log_listener_spn = "Client provided service name '{0}'.";
	public const string net_log_listener_spn_passed = "Service name check succeeded.";
	public const string net_log_listener_spn_failed = "Service name check failed.";
	public const string net_log_listener_spn_failed_always = "Service name check failed because the client did not provide a service name and the server was configured for PolicyEnforcement.Always.";
	public const string net_log_listener_spn_failed_empty = "No acceptable service names were configured!";
	public const string net_log_listener_spn_failed_dump = "Dumping acceptable service names:";
	public const string net_log_listener_spn_add = "Adding default service name '{0}' from prefix '{1}'.";
	public const string net_log_listener_spn_not_add = "No default service name added for prefix '{0}'.";
	public const string net_log_listener_spn_remove = "Removing default service name '{0}' from prefix '{1}'.";
	public const string net_log_listener_spn_not_remove = "No default service name removed for prefix '{0}'.";
	public const string net_log_sspi_enumerating_security_packages = "Enumerating security packages:";
	public const string net_log_sspi_security_package_not_found = "Security package '{0}' was not found.";
	public const string net_log_sspi_security_context_input_buffer = "{0}(In-Buffer length={1}, Out-Buffer length={2}, returned code={3}).";
	public const string net_log_sspi_security_context_input_buffers = "{0}(In-Buffers count={1}, Out-Buffer length={2}, returned code={3}).";
	public const string net_log_sspi_selected_cipher_suite = "{0}(Protocol={1}, Cipher={2} {3} bit strength, Hash={4} {5} bit strength, Key Exchange={6} {7} bit strength).";
	public const string net_log_remote_certificate = "Remote certificate: {0}.";
	public const string net_log_locating_private_key_for_certificate = "Locating the private key for the certificate: {0}.";
	public const string net_log_cert_is_of_type_2 = "Certificate is of type X509Certificate2 and contains the private key.";
	public const string net_log_found_cert_in_store = "Found the certificate in the {0} store.";
	public const string net_log_did_not_find_cert_in_store = "Cannot find the certificate in either the LocalMachine store or the CurrentUser store.";
	public const string net_log_open_store_failed = "Opening Certificate store {0} failed, exception: {1}.";
	public const string net_log_got_certificate_from_delegate = "Got a certificate from the client delegate.";
	public const string net_log_no_delegate_and_have_no_client_cert = "Client delegate did not provide a certificate; and there are not other user-provided certificates. Need to attempt a session restart.";
	public const string net_log_no_delegate_but_have_client_cert = "Client delegate did not provide a certificate; but there are other user-provided certificates\".";
	public const string net_log_attempting_restart_using_cert = "Attempting to restart the session using the user-provided certificate: {0}.";
	public const string net_log_no_issuers_try_all_certs = "We have user-provided certificates. The server has not specified any issuers, so try all the certificates.";
	public const string net_log_server_issuers_look_for_matching_certs = "We have user-provided certificates. The server has specified {0} issuer(s). Looking for certificates that match any of the issuers.";
	public const string net_log_selected_cert = "Selected certificate: {0}.";
	public const string net_log_n_certs_after_filtering = "Left with {0} client certificates to choose from.";
	public const string net_log_finding_matching_certs = "Trying to find a matching certificate in the certificate store.";
	public const string net_log_using_cached_credential = "Using the cached credential handle.";
	public const string net_log_remote_cert_user_declared_valid = "Remote certificate was verified as valid by the user.";
	public const string net_log_remote_cert_user_declared_invalid = "Remote certificate was verified as invalid by the user.";
	public const string net_log_remote_cert_has_no_errors = "Remote certificate has no errors.";
	public const string net_log_remote_cert_has_errors = "Remote certificate has errors:";
	public const string net_log_remote_cert_not_available = "The remote server did not provide a certificate.";
	public const string net_log_remote_cert_name_mismatch = "Certificate name mismatch.";
	public const string net_log_proxy_autodetect_script_location_parse_error = "WebProxy failed to parse the auto-detected location of a proxy script:\"{0}\" into a Uri.";
	public const string net_log_proxy_autodetect_failed = "WebProxy failed to autodetect a Uri for a proxy script.";
	public const string net_log_proxy_script_execution_error = "WebProxy caught an exception while executing the ScriptReturn script: {0}.";
	public const string net_log_proxy_script_download_compile_error = "WebProxy caught an exception while  downloading/compiling the proxy script: {0}.";
	public const string net_log_proxy_system_setting_update = "ScriptEngine was notified of a potential change in the system's proxy settings and will update WebProxy settings.";
	public const string net_log_proxy_update_due_to_ip_config_change = "ScriptEngine was notified of a change in the IP configuration and will update WebProxy settings.";
	public const string net_log_proxy_called_with_null_parameter = "{0} was called with a null '{1}' parameter.";
	public const string net_log_proxy_called_with_invalid_parameter = "{0} was called with an invalid parameter.";
	public const string net_log_proxy_ras_supported = "RAS supported: {0}";
	public const string net_log_proxy_ras_notsupported_exception = "RAS is not supported. Can't create RasHelper instance.";
	public const string net_log_proxy_winhttp_cant_open_session = "Can't open WinHttp session. Error code: {0}.";
	public const string net_log_proxy_winhttp_getproxy_failed = "Can't retrieve proxy settings for Uri '{0}'. Error code: {1}.";
	public const string net_log_proxy_winhttp_timeout_error = "Can't specify proxy discovery timeout. Error code: {0}.";
	public const string net_log_cache_validation_failed_resubmit = "Resubmitting this request because cache cannot validate the response.";
	public const string net_log_cache_refused_server_response = "Caching protocol has refused the server response. To allow automatic request retrying set request.AllowAutoRedirect=true.";
	public const string net_log_cache_ftp_proxy_doesnt_support_partial = "This FTP request is configured to use a proxy through HTTP protocol. Cache revalidation and partially cached responses are not supported.";
	public const string net_log_cache_ftp_method = "FTP request method={0}.";
	public const string net_log_cache_ftp_supports_bin_only = "Caching is not supported for non-binary FTP request mode.";
	public const string net_log_cache_replacing_entry_with_HTTP_200 = "Replacing cache entry metadata with 'HTTP/1.1 200 OK' status line to satisfy HTTP cache protocol logic.";
	public const string net_log_cache_now_time = "[Now Time (UTC)] = {0}.";
	public const string net_log_cache_max_age_absolute = "[MaxAge] Absolute time expiration check (sensitive to clock skew), cache Expires: {0}.";
	public const string net_log_cache_age1 = "[Age1] Now - LastSynchronized = [Age1] Now - LastSynchronized = {0}, Last Synchronized: {1}.";
	public const string net_log_cache_age1_date_header = "[Age1] NowTime-Date Header = {0}, Date Header: {1}.";
	public const string net_log_cache_age1_last_synchronized = "[Age1] Now - LastSynchronized + AgeHeader = {0}, Last Synchronized: {1}.";
	public const string net_log_cache_age1_last_synchronized_age_header = "[Age1] Now - LastSynchronized + AgeHeader = {0}, Last Synchronized: {1}, Age Header: {2}.";
	public const string net_log_cache_age2 = "[Age2] AgeHeader = {0}.";
	public const string net_log_cache_max_age_cache_s_max_age = "[MaxAge] Cache s_MaxAge = {0}.";
	public const string net_log_cache_max_age_expires_date = "[MaxAge] Cache Expires - Date = {0}, Expires: {1}.";
	public const string net_log_cache_max_age_cache_max_age = "[MaxAge] Cache MaxAge = {0}.";
	public const string net_log_cache_no_max_age_use_10_percent = "[MaxAge] Cannot compute Cache MaxAge, use 10% since LastModified: {0}, LastModified: {1}.";
	public const string net_log_cache_no_max_age_use_default = "[MaxAge] Cannot compute Cache MaxAge, using default RequestCacheValidator.UnspecifiedMaxAge: {0}.";
	public const string net_log_cache_validator_invalid_for_policy = "This validator should not be called for policy : {0}.";
	public const string net_log_cache_response_last_modified = "Response LastModified={0},  ContentLength= {1}.";
	public const string net_log_cache_cache_last_modified = "Cache    LastModified={0},  ContentLength= {1}.";
	public const string net_log_cache_partial_and_non_zero_content_offset = "A Cache Entry is partial and the user request has non zero ContentOffset = {0}. A restart from cache is not supported for partial cache entries.";
	public const string net_log_cache_response_valid_based_on_policy = "Response is valid based on Policy = {0}.";
	public const string net_log_cache_null_response_failure = "Response is null so this Request should fail.";
	public const string net_log_cache_ftp_response_status = "FTP Response Status={0}, {1}.";
	public const string net_log_cache_resp_valid_based_on_retry = "Accept this response as valid based on the retry count = {0}.";
	public const string net_log_cache_no_update_based_on_method = "Cache is not updated based on the request Method = {0}.";
	public const string net_log_cache_removed_existing_invalid_entry = "Existing entry is removed because it was found invalid.";
	public const string net_log_cache_not_updated_based_on_policy = "Cache is not updated based on Policy = {0}.";
	public const string net_log_cache_not_updated_because_no_response = "Cache is not updated because there is no response associated with the request.";
	public const string net_log_cache_removed_existing_based_on_method = "Existing cache entry is removed based on the request Method = {0}.";
	public const string net_log_cache_existing_not_removed_because_unexpected_response_status = "Existing cache entry should but cannot be removed due to unexpected response Status = ({0}) {1}.";
	public const string net_log_cache_removed_existing_based_on_policy = "Existing cache entry is removed based on Policy = {0}.";
	public const string net_log_cache_not_updated_based_on_ftp_response_status = "Cache is not updated based on the FTP response status. Expected = {0}, actual = {1}.";
	public const string net_log_cache_update_not_supported_for_ftp_restart = "Cache update is not supported for restarted FTP responses. Restart offset = {0}.";
	public const string net_log_cache_removed_entry_because_ftp_restart_response_changed = "Existing cache entry is removed since a restarted response was changed on the server, cache LastModified date = {0}, new LastModified date = {1}.";
	public const string net_log_cache_last_synchronized = "The cache entry last synchronized time = {0}.";
	public const string net_log_cache_suppress_update_because_synched_last_minute = "Suppressing cache update since the entry was synchronized within the last minute.";
	public const string net_log_cache_updating_last_synchronized = "Updating cache entry last synchronized time = {0}.";
	public const string net_log_cache_cannot_remove = "{0} Cannot Remove (throw): Key = {1}, Error = {2}.";
	public const string net_log_cache_key_status = "{0}, Key = {1}, -> Status = {2}.";
	public const string net_log_cache_key_remove_failed_status = "{0}, Key = {1}, Remove operation failed -> Status = {2}.";
	public const string net_log_cache_usecount_file = "{0}, UseCount = {1}, File = {2}.";
	public const string net_log_cache_stream = "{0}, stream = {1}.";
	public const string net_log_cache_filename = "{0} -> Filename = {1}, Status = {2}.";
	public const string net_log_cache_lookup_failed = "{0}, Lookup operation failed -> {1}.";
	public const string net_log_cache_exception = "{0}, Exception = {1}.";
	public const string net_log_cache_expected_length = "Expected length (0=none)= {0}.";
	public const string net_log_cache_last_modified = "LastModified    (0=none)= {0}.";
	public const string net_log_cache_expires = "Expires         (0=none)= {0}.";
	public const string net_log_cache_max_stale = "MaxStale (sec)          = {0}.";
	public const string net_log_cache_dumping_metadata = "...Dumping Metadata...";
	public const string net_log_cache_create_failed = "Create operation failed -> {0}.";
	public const string net_log_cache_set_expires = "Set Expires               ={0}.";
	public const string net_log_cache_set_last_modified = "Set LastModified          ={0}.";
	public const string net_log_cache_set_last_synchronized = "Set LastSynchronized      ={0}.";
	public const string net_log_cache_enable_max_stale = "Enable MaxStale (sec) ={0}.";
	public const string net_log_cache_disable_max_stale = "Disable MaxStale (set to 0).";
	public const string net_log_cache_set_new_metadata = "Set new Metadata.";
	public const string net_log_cache_dumping = "...Dumping...";
	public const string net_log_cache_key = "{0}, Key = {1}.";
	public const string net_log_cache_no_commit = "{0}, Nothing was written to the stream, do not commit that cache entry.";
	public const string net_log_cache_error_deleting_filename = "{0}, Error deleting a Filename = {1}.";
	public const string net_log_cache_update_failed = "{0}, Key = {1}, Update operation failed -> {2}.";
	public const string net_log_cache_delete_failed = "{0}, Key = {1}, Delete operation failed -> {2}.";
	public const string net_log_cache_commit_failed = "{0}, Key = {1}, Commit operation failed -> {2}.";
	public const string net_log_cache_committed_as_partial = "{0}, Key = {1}, Committed entry as partial, not cached bytes count = {2}.";
	public const string net_log_cache_max_stale_and_update_status = "{0}, MaxStale = {1}, Update Status = {2}.";
	public const string net_log_cache_failing_request_with_exception = "Failing request with the WebExceptionStatus = {0}.";
	public const string net_log_cache_request_method = "Request Method = {0}.";
	public const string net_log_cache_http_status_parse_failure = "Cannot Parse Cache HTTP Status Line: {0}.";
	public const string net_log_cache_http_status_line = "Entry Status Line = HTTP/{0} {1} {2}.";
	public const string net_log_cache_cache_control = "Cache Cache-Control = {0}.";
	public const string net_log_cache_invalid_http_version = "The cached version is invalid, assuming HTTP 1.0.";
	public const string net_log_cache_no_http_response_header = "This Cache Entry does not carry HTTP response headers.";
	public const string net_log_cache_http_header_parse_error = "Cannot parse HTTP headers in entry metadata, offending string: {0}.";
	public const string net_log_cache_metadata_name_value_parse_error = "Cannot parse all strings in system metadata as \"name:value\", offending string: {0}.";
	public const string net_log_cache_content_range_error = "Invalid format of Response Content-Range:{0}.";
	public const string net_log_cache_cache_control_error = "Invalid CacheControl header = {0}.";
	public const string net_log_cache_unexpected_status = "The cache protocol method {0} has returned unexpected status: {1}.";
	public const string net_log_cache_object_and_exception = "{0} exception: {1}.";
	public const string net_log_cache_revalidation_not_needed = "{0}, No cache entry revalidation is needed.";
	public const string net_log_cache_not_updated_based_on_cache_protocol_status = "{0}, Cache is not updated based on the current cache protocol status = {1}.";
	public const string net_log_cache_closing_cache_stream = "{0}: {1} Closing effective cache stream, type = {2}, cache entry key = {3}.";
	public const string net_log_cache_exception_ignored = "{0}: an exception (ignored) on {1} = {2}.";
	public const string net_log_cache_no_cache_entry = "{0} has requested a cache response but the entry does not exist (Stream.Null).";
	public const string net_log_cache_null_cached_stream = "{0} has requested a cache response but the cached stream is null.";
	public const string net_log_cache_requested_combined_but_null_cached_stream = "{0} has requested a combined response but the cached stream is null.";
	public const string net_log_cache_returned_range_cache = "{0} has returned a range cache stream, Offset = {1}, Length = {2}.";
	public const string net_log_cache_entry_not_found_freshness_undefined = "{0}, Cache Entry not found, freshness result = Undefined.";
	public const string net_log_cache_dumping_cache_context = "...Dumping Cache Context...";
	public const string net_log_cache_result = "{0}, result = {1}.";
	public const string net_log_cache_uri_with_query_has_no_expiration = "Request Uri has a Query, and no explicit expiration time is provided.";
	public const string net_log_cache_uri_with_query_and_cached_resp_from_http_10 = "Request Uri has a Query, and cached response is from HTTP 1.0 server.";
	public const string net_log_cache_valid_as_fresh_or_because_policy = "Valid as fresh or because of Cache Policy = {0}.";
	public const string net_log_cache_accept_based_on_retry_count = "Accept this response base on the retry count = {0}.";
	public const string net_log_cache_date_header_older_than_cache_entry = "Response Date header value is older than that of the cache entry.";
	public const string net_log_cache_server_didnt_satisfy_range = "Server did not satisfy the range: {0}.";
	public const string net_log_cache_304_received_on_unconditional_request = "304 response was received on an unconditional request.";
	public const string net_log_cache_304_received_on_unconditional_request_expected_200_206 = "304 response was received on an unconditional request, but expected response code is 200 or 206.";
	public const string net_log_cache_last_modified_header_older_than_cache_entry = "HTTP 1.0 Response Last-Modified header value is older than that of the cache entry.";
	public const string net_log_cache_freshness_outside_policy_limits = "Response freshness is not within the specified policy limits.";
	public const string net_log_cache_need_to_remove_invalid_cache_entry_304 = "Need to remove an invalid cache entry with status code == 304(NotModified).";
	public const string net_log_cache_resp_status = "Response Status = {0}.";
	public const string net_log_cache_resp_304_or_request_head = "Response==304 or Request was HEAD, updating cache entry.";
	public const string net_log_cache_dont_update_cached_headers = "Do not update Cached Headers.";
	public const string net_log_cache_update_cached_headers = "Update Cached Headers.";
	public const string net_log_cache_partial_resp_not_combined_with_existing_entry = "A partial response is not combined with existing cache entry, Cache Stream Size = {0}, response Range Start = {1}.";
	public const string net_log_cache_request_contains_conditional_header = "User Request contains a conditional header.";
	public const string net_log_cache_not_a_get_head_post = "This was Not a GET, HEAD or POST request.";
	public const string net_log_cache_cannot_update_cache_if_304 = "Cannot update cache if Response status == 304 and a cache entry was not found.";
	public const string net_log_cache_cannot_update_cache_with_head_resp = "Cannot update cache with HEAD response if the cache entry does not exist.";
	public const string net_log_cache_http_resp_is_null = "HttpWebResponse is null.";
	public const string net_log_cache_resp_cache_control_is_no_store = "Response Cache-Control = no-store.";
	public const string net_log_cache_resp_cache_control_is_public = "Response Cache-Control = public.";
	public const string net_log_cache_resp_cache_control_is_private = "Response Cache-Control = private, and Cache is public.";
	public const string net_log_cache_resp_cache_control_is_private_plus_headers = "Response Cache-Control = private+Headers, removing those headers.";
	public const string net_log_cache_resp_older_than_cache = "HttpWebResponse date is older than of the cached one.";
	public const string net_log_cache_revalidation_required = "Response revalidation is always required but neither Last-Modified nor ETag header is set on the response.";
	public const string net_log_cache_needs_revalidation = "Response can be cached although it will always require revalidation.";
	public const string net_log_cache_resp_allows_caching = "Response explicitly allows caching = Cache-Control: {0}.";
	public const string net_log_cache_auth_header_and_no_s_max_age = "Request carries Authorization Header and no s-maxage, proxy-revalidate or public directive found.";
	public const string net_log_cache_post_resp_without_cache_control_or_expires = "POST Response without Cache-Control or Expires headers.";
	public const string net_log_cache_valid_based_on_status_code = "Valid based on Status Code: {0}.";
	public const string net_log_cache_resp_no_cache_control = "Response with no CacheControl and Status Code = {0}.";
	public const string net_log_cache_age = "Cache Age = {0}, Cache MaxAge = {1}.";
	public const string net_log_cache_policy_min_fresh = "Client Policy MinFresh = {0}.";
	public const string net_log_cache_policy_max_age = "Client Policy MaxAge = {0}.";
	public const string net_log_cache_policy_cache_sync_date = "Client Policy CacheSyncDate (UTC) = {0}, Cache LastSynchronizedUtc = {1}.";
	public const string net_log_cache_policy_max_stale = "Client Policy MaxStale = {0}.";
	public const string net_log_cache_control_no_cache = "Cached CacheControl = no-cache.";
	public const string net_log_cache_control_no_cache_removing_some_headers = "Cached CacheControl = no-cache, Removing some headers.";
	public const string net_log_cache_control_must_revalidate = "Cached CacheControl = must-revalidate and Cache is not fresh.";
	public const string net_log_cache_cached_auth_header = "The cached entry has Authorization Header and cache is not fresh.";
	public const string net_log_cache_cached_auth_header_no_control_directive = "The cached entry has Authorization Header and no Cache-Control directive present that would allow to use that entry.";
	public const string net_log_cache_after_validation = "After Response Cache Validation.";
	public const string net_log_cache_resp_status_304 = "Response status == 304 but the cache entry does not exist.";
	public const string net_log_cache_head_resp_has_different_content_length = "A response resulted from a HEAD request has different Content-Length header.";
	public const string net_log_cache_head_resp_has_different_content_md5 = "A response resulted from a HEAD request has different Content-MD5 header.";
	public const string net_log_cache_head_resp_has_different_etag = "A response resulted from a HEAD request has different ETag header.";
	public const string net_log_cache_304_head_resp_has_different_last_modified = "A 304 response resulted from a HEAD request has different Last-Modified header.";
	public const string net_log_cache_existing_entry_has_to_be_discarded = "An existing cache entry has to be discarded.";
	public const string net_log_cache_existing_entry_should_be_discarded = "An existing cache entry should be discarded.";
	public const string net_log_cache_206_resp_non_matching_entry = "A 206 Response has been received and either ETag or Last-Modified header value does not match cache entry.";
	public const string net_log_cache_206_resp_starting_position_not_adjusted = "The starting position for 206 Response is not adjusted to the end of cache entry.";
	public const string net_log_cache_combined_resp_requested = "Creation of a combined response has been requested from the cache protocol.";
	public const string net_log_cache_updating_headers_on_304 = "Updating headers on 304 response.";
	public const string net_log_cache_suppressing_headers_update_on_304 = "Suppressing cache headers update on 304, new headers don't add anything.";
	public const string net_log_cache_status_code_not_304_206 = "A Response Status Code is not 304 or 206.";
	public const string net_log_cache_sxx_resp_cache_only = "A 5XX Response and Cache-Only like policy, serving from cache.";
	public const string net_log_cache_sxx_resp_can_be_replaced = "A 5XX Response that can be replaced by existing cache entry.";
	public const string net_log_cache_vary_header_empty = "Cache entry Vary header is empty.";
	public const string net_log_cache_vary_header_contains_asterisks = "Cache entry Vary header contains '*'.";
	public const string net_log_cache_no_headers_in_metadata = "No request headers are found in cached metadata to test based on the cached response Vary header.";
	public const string net_log_cache_vary_header_mismatched_count = "Vary header: Request and cache header fields count does not match, header name = {0}.";
	public const string net_log_cache_vary_header_mismatched_field = "Vary header: A Cache header field mismatch the request one, header name = {0}, cache field = {1}, request field = {2}.";
	public const string net_log_cache_vary_header_match = "All required Request headers match based on cached Vary response header.";
	public const string net_log_cache_range = "Request Range (not in Cache yet) = Range:{0}.";
	public const string net_log_cache_range_invalid_format = "Invalid format of Request Range:{0}.";
	public const string net_log_cache_range_not_in_cache = "Cannot serve from Cache, Range:{0}.";
	public const string net_log_cache_range_in_cache = "Serving Request Range from cache, Range:{0}.";
	public const string net_log_cache_partial_resp = "Serving Partial Response (206) from cache, Content-Range:{0}.";
	public const string net_log_cache_range_request_range = "Range Request (user specified), Range: {0}.";
	public const string net_log_cache_could_be_partial = "Could be a Partial Cached Response, Size = {0}, Response Content Length = {1}.";
	public const string net_log_cache_condition_if_none_match = "Request Condition = If-None-Match:{0}.";
	public const string net_log_cache_condition_if_modified_since = "Request Condition = If-Modified-Since:{0}.";
	public const string net_log_cache_cannot_construct_conditional_request = "A Conditional Request cannot be constructed.";
	public const string net_log_cache_cannot_construct_conditional_range_request = "A Conditional Range request cannot be constructed.";
	public const string net_log_cache_entry_size_too_big = "Cached Entry Size = {0} is too big, cannot do a range request.";
	public const string net_log_cache_condition_if_range = "Request Condition = If-Range:{0}.";
	public const string net_log_cache_conditional_range_not_implemented_on_http_10 = "A Conditional Range request on Http <= 1.0 is not implemented.";
	public const string net_log_cache_saving_request_headers = "Saving Request Headers, Vary: {0}.";
	public const string net_log_cache_only_byte_range_implemented = "Ranges other than bytes are not implemented.";
	public const string net_log_cache_multiple_complex_range_not_implemented = "Multiple/complexe ranges are not implemented.";
	public const string net_log_digest_hash_algorithm_not_supported = "The hash algorithm is not supported by Digest authentication: {0}.";
	public const string net_log_digest_qop_not_supported = "The Quality of Protection value is not supported by Digest authentication: {0}.";
	public const string net_log_digest_requires_nonce = "A nonce parameter required for Digest authentication was not found or was preceded by an invalid parameter.";
	public const string net_log_auth_invalid_challenge = "The challenge string is not valid for this authentication module: {0}";
	public const string net_log_unknown = "unknown";
	public const string net_log_operation_returned_something = "{0} returned {1}.";
	public const string net_log_operation_failed_with_error = "{0} failed with error {1}.";
	public const string net_log_buffered_n_bytes = "Buffered {0} bytes.";
	public const string net_log_method_equal = "Method={0}.";
	public const string net_log_releasing_connection = "Releasing FTP connection#{0}.";
	public const string net_log_unexpected_exception = "Unexpected exception in {0}.";
	public const string net_log_server_response_error_code = "Error code {0} was received from server response.";
	public const string net_log_resubmitting_request = "Resubmitting request.";
	public const string net_log_retrieving_localhost_exception = "An unexpected exception while retrieving the local address list: {0}.";
	public const string net_log_resolved_servicepoint_may_not_be_remote_server = "A resolved ServicePoint host could be wrongly considered as a remote server.";
	public const string net_log_closed_idle = "{0}#{1} - Closed as idle.";
	public const string net_log_received_status_line = "Received status line: Version={0}, StatusCode={1}, StatusDescription={2}.";
	public const string net_log_sending_headers = "Sending headers\r\n{{\r\n{0}}}.";
	public const string net_log_received_headers = "Received headers\r\n{{\r\n{0}}}.";
	public const string net_log_shell_expression_pattern_format_warning = "ShellServices.ShellExpression.Parse() was called with a badly formatted 'pattern':{0}.";
	public const string net_log_exception_in_callback = "Exception in callback: {0}.";
	public const string net_log_sending_command = "Sending command [{0}]";
	public const string net_log_received_response = "Received response [{0}]";
	public const string net_log_socket_connected = "Created connection from {0} to {1}.";
	public const string net_log_socket_accepted = "Accepted connection from {0} to {1}.";
	public const string net_log_socket_not_logged_file = "Not logging data from file: {0}.";
	public const string net_log_socket_connect_dnsendpoint = "Connecting to a DnsEndPoint.";
	public const string MailAddressInvalidFormat = "The specified string is not in the form required for an e-mail address.";
	public const string MailSubjectInvalidFormat = "The specified string is not in the form required for a subject.";
	public const string MailBase64InvalidCharacter = "An invalid character was found in the Base-64 stream.";
	public const string MailCollectionIsReadOnly = "The collection is read-only.";
	public const string MailDateInvalidFormat = "The date is in an invalid format.";
	public const string MailHeaderFieldAlreadyExists = "The specified singleton field already exists in the collection and cannot be added.";
	public const string MailHeaderFieldInvalidCharacter = "An invalid character was found in the mail header: '{0}'.";
	public const string MailHeaderFieldMalformedHeader = "The mail header is malformed.";
	public const string MailHeaderFieldMismatchedName = "The header name does not match this property.";
	public const string MailHeaderIndexOutOfBounds = "The index value is outside the bounds of the array.";
	public const string MailHeaderItemAccessorOnlySingleton = "The Item property can only be used with singleton fields.";
	public const string MailHeaderListHasChanged = "The underlying list has been changed and the enumeration is out of date.";
	public const string MailHeaderResetCalledBeforeEOF = "The stream should have been consumed before resetting.";
	public const string MailHeaderTargetArrayTooSmall = "The target array is too small to contain all the headers.";
	public const string MailHeaderInvalidCID = "The ContentID cannot contain a '<' or '>' character.";
	public const string MailHostNotFound = "The SMTP host was not found.";
	public const string MailReaderGetContentStreamAlreadyCalled = "GetContentStream() can only be called once.";
	public const string MailReaderTruncated = "Premature end of stream.";
	public const string MailWriterIsInContent = "This operation cannot be performed while in content.";
	public const string MailServerDoesNotSupportStartTls = "Server does not support secure connections.";
	public const string MailServerResponse = "The server response was: {0}";
	public const string SSPIAuthenticationOrSPNNull = "AuthenticationType and ServicePrincipalName cannot be specified as null for server's SSPI Negotiation module.";
	public const string SSPIPInvokeError = "{0} failed with error {1}.";
	public const string SSPIInvalidHandleType = "'{0}' is not a supported handle type.";
	public const string SmtpAlreadyConnected = "Already connected.";
	public const string SmtpAuthenticationFailed = "Authentication failed.";
	public const string SmtpAuthenticationFailedNoCreds = "Authentication failed due to lack of credentials.";
	public const string SmtpDataStreamOpen = "Data stream is still open.";
	public const string SmtpDefaultMimePreamble = "This is a multi-part MIME message.";
	public const string SmtpDefaultSubject = "@@SOAP Application Message";
	public const string SmtpInvalidResponse = "Smtp server returned an invalid response.";
	public const string SmtpNotConnected = "Not connected.";
	public const string SmtpSystemStatus = "System status, or system help reply.";
	public const string SmtpHelpMessage = "Help message.";
	public const string SmtpServiceReady = "Service ready.";
	public const string SmtpServiceClosingTransmissionChannel = "Service closing transmission channel.";
	public const string SmtpOK = "Completed.";
	public const string SmtpUserNotLocalWillForward = "User not local; will forward to specified path.";
	public const string SmtpStartMailInput = "Start mail input; end with <CRLF>.<CRLF>.";
	public const string SmtpServiceNotAvailable = "Service not available, closing transmission channel.";
	public const string SmtpMailboxBusy = "Mailbox unavailable.";
	public const string SmtpLocalErrorInProcessing = "Error in processing.";
	public const string SmtpInsufficientStorage = "Insufficient system storage.";
	public const string SmtpPermissionDenied = "Client does not have permission to Send As this sender.";
	public const string SmtpCommandUnrecognized = "Syntax error, command unrecognized.";
	public const string SmtpSyntaxError = "Syntax error in parameters or arguments.";
	public const string SmtpCommandNotImplemented = "Command not implemented.";
	public const string SmtpBadCommandSequence = "Bad sequence of commands.";
	public const string SmtpCommandParameterNotImplemented = "Command parameter not implemented.";
	public const string SmtpMailboxUnavailable = "Mailbox unavailable.";
	public const string SmtpUserNotLocalTryAlternatePath = "User not local; please try a different path.";
	public const string SmtpExceededStorageAllocation = "Exceeded storage allocation.";
	public const string SmtpMailboxNameNotAllowed = "Mailbox name not allowed.";
	public const string SmtpTransactionFailed = "Transaction failed.";
	public const string SmtpSendMailFailure = "Failure sending mail.";
	public const string SmtpRecipientFailed = "Unable to send to a recipient.";
	public const string SmtpRecipientRequired = "A recipient must be specified.";
	public const string SmtpFromRequired = "A from address must be specified.";
	public const string SmtpAllRecipientsFailed = "Unable to send to all recipients.";
	public const string SmtpClientNotPermitted = "Client does not have permission to submit mail to this server.";
	public const string SmtpMustIssueStartTlsFirst = "The SMTP server requires a secure connection or the client was not authenticated.";
	public const string SmtpNeedAbsolutePickupDirectory = "Only absolute directories are allowed for pickup directory.";
	public const string SmtpGetIisPickupDirectoryFailed = "Cannot get IIS pickup directory.";
	public const string SmtpPickupDirectoryDoesnotSupportSsl = "SSL must not be enabled for pickup-directory delivery methods.";
	public const string SmtpOperationInProgress = "Previous operation is still in progress.";
	public const string SmtpAuthResponseInvalid = "The server returned an invalid response in the authentication handshake.";
	public const string SmtpEhloResponseInvalid = "The server returned an invalid response to the EHLO command.";
	public const string SmtpNonAsciiUserNotSupported = "The client or server is only configured for E-mail addresses with ASCII local-parts: {0}.";
	public const string SmtpInvalidHostName = "The address has an invalid host name: {0}.";
	public const string MimeTransferEncodingNotSupported = "The MIME transfer encoding '{0}' is not supported.";
	public const string SeekNotSupported = "Seeking is not supported on this stream.";
	public const string WriteNotSupported = "Writing is not supported on this stream.";
	public const string InvalidHexDigit = "Invalid hex digit '{0}'.";
	public const string InvalidSSPIContext = "The SSPI context is not valid.";
	public const string InvalidSSPIContextKey = "A null session key was obtained from SSPI.";
	public const string InvalidSSPINegotiationElement = "Invalid SSPI BinaryNegotiationElement.";
	public const string InvalidHeaderName = "An invalid character was found in header name.";
	public const string InvalidHeaderValue = "An invalid character was found in header value.";
	public const string CannotGetEffectiveTimeOfSSPIContext = "Cannot get the effective time of the SSPI context.";
	public const string CannotGetExpiryTimeOfSSPIContext = "Cannot get the expiry time of the SSPI context.";
	public const string ReadNotSupported = "Reading is not supported on this stream.";
	public const string InvalidAsyncResult = "The AsyncResult is not valid.";
	public const string UnspecifiedHost = "The SMTP host was not specified.";
	public const string InvalidPort = "The specified port is invalid. The port must be greater than 0.";
	public const string SmtpInvalidOperationDuringSend = "This operation cannot be performed while a message is being sent.";
	public const string MimePartCantResetStream = "One of the streams has already been used and can't be reset to the origin.";
	public const string MediaTypeInvalid = "The specified media type is invalid.";
	public const string ContentTypeInvalid = "The specified content type is invalid.";
	public const string ContentDispositionInvalid = "The specified content disposition is invalid.";
	public const string AttributeNotSupported = "'{0}' is not a valid configuration attribute for type '{1}'.";
	public const string Cannot_remove_with_null = "Cannot remove with null name.";
	public const string Config_base_elements_only = "Only elements allowed.";
	public const string Config_base_no_child_nodes = "Child nodes not allowed.";
	public const string Config_base_required_attribute_empty = "Required attribute '{0}' cannot be empty.";
	public const string Config_base_required_attribute_missing = "Required attribute '{0}' not found.";
	public const string Config_base_time_overflow = "The time span for the property '{0}' exceeds the maximum that can be stored in the configuration.";
	public const string Config_base_type_must_be_configurationvalidation = "The ConfigurationValidation attribute must be derived from ConfigurationValidation.";
	public const string Config_base_type_must_be_typeconverter = "The ConfigurationPropertyConverter attribute must be derived from TypeConverter.";
	public const string Config_base_unknown_format = "Unknown";
	public const string Config_base_unrecognized_attribute = "Unrecognized attribute '{0}'. Note that attribute names are case-sensitive.";
	public const string Config_base_unrecognized_element = "Unrecognized element.";
	public const string Config_invalid_boolean_attribute = "The property '{0}' must have value 'true' or 'false'.";
	public const string Config_invalid_integer_attribute = "The '{0}' attribute must be set to an integer value.";
	public const string Config_invalid_positive_integer_attribute = "The '{0}' attribute must be set to a positive integer value.";
	public const string Config_invalid_type_attribute = "The '{0}' attribute must be set to a valid Type name.";
	public const string Config_missing_required_attribute = "The '{0}' attribute must be specified on the '{1}' tag.";
	public const string Config_name_value_file_section_file_invalid_root = "The root element must match the name of the section referencing the file, '{0}'";
	public const string Config_provider_must_implement_type = "Provider must implement the class '{0}'.";
	public const string Config_provider_name_null_or_empty = "Provider name cannot be null or empty.";
	public const string Config_provider_not_found = "The provider was not found in the collection.";
	public const string Config_property_name_cannot_be_empty = "Property '{0}' cannot be empty or null.";
	public const string Config_section_cannot_clear_locked_section = "Cannot clear section handlers.  Section '{0}' is locked.";
	public const string Config_section_record_not_found = "SectionRecord not found.";
	public const string Config_source_cannot_contain_file = "The 'File' property cannot be used with the ConfigSource property.";
	public const string Config_system_already_set = "The configuration system can only be set once.  Configuration system is already set";
	public const string Config_unable_to_read_security_policy = "Unable to read security policy.";
	public const string Config_write_xml_returned_null = "WriteXml returned null.";
	public const string Cannot_clear_sections_within_group = "Server cannot clear configuration sections from within section groups.  <clear/> must be a child of <configSections>.";
	public const string Cannot_exit_up_top_directory = "Cannot use a leading .. to exit above the top directory.";
	public const string Could_not_create_listener = "Couldn't create listener '{0}'.";
	public const string TL_InitializeData_NotSpecified = "initializeData needs to be valid for this TraceListener.";
	public const string Could_not_create_type_instance = "Could not create {0}.";
	public const string Could_not_find_type = "Couldn't find type for class {0}.";
	public const string Could_not_get_constructor = "Couldn't find constructor for class {0}.";
	public const string EmptyTypeName_NotAllowed = "switchType needs to be a valid class name. It can't be empty.";
	public const string Incorrect_base_type = "The specified type, '{0}' is not derived from the appropriate base type, '{1}'.";
	public const string Only_specify_one = "'switchValue' and 'switchName' cannot both be specified on source '{0}'.";
	public const string Provider_Already_Initialized = "This provider instance has already been initialized.";
	public const string Reference_listener_cant_have_properties = "A listener with no type name specified references the sharedListeners section and cannot have any attributes other than 'Name'.  Listener: '{0}'.";
	public const string Reference_to_nonexistent_listener = "Listener '{0}' does not exist in the sharedListeners section.";
	public const string SettingsPropertyNotFound = "The settings property '{0}' was not found.";
	public const string SettingsPropertyReadOnly = "The settings property '{0}' is read-only.";
	public const string SettingsPropertyWrongType = "The settings property '{0}' is of a non-compatible type.";
	public const string Type_isnt_tracelistener = "Could not add trace listener {0} because it is not a subclass of TraceListener.";
	public const string Unable_to_convert_type_from_string = "Could not find a type-converter to convert object if type '{0}' from string.";
	public const string Unable_to_convert_type_to_string = "Could not find a type-converter to convert object if type '{0}' to string.";
	public const string Value_must_be_numeric = "Error in trace switch '{0}': The value of a switch must be integral.";
	public const string Could_not_create_from_default_value = "The property '{0}' could not be created from it's default value. Error message: {1}";
	public const string Could_not_create_from_default_value_2 = "The property '{0}' could not be created from it's default value because the default value is of a different type.";
	public const string InvalidDirName = "The directory name {0} is invalid.";
	public const string FSW_IOError = "Error reading the {0} directory.";
	public const string PatternInvalidChar = "The character '{0}' in the pattern provided is not valid.";
	public const string BufferSizeTooLarge = "The specified buffer size is too large. FileSystemWatcher cannot allocate {0} bytes for the internal buffer.";
	public const string FSW_ChangedFilter = "Flag to indicate which change event to monitor.";
	public const string FSW_Enabled = "Flag to indicate whether this component is active or not.";
	public const string FSW_Filter = "The file pattern filter.";
	public const string FSW_IncludeSubdirectories = "Flag to watch subdirectories.";
	public const string FSW_Path = "The path to the directory to monitor.";
	public const string FSW_SynchronizingObject = "The object used to marshal the event handler calls issued as a result of a Directory change.";
	public const string FSW_Changed = "Occurs when a file and/or directory change matches the filter.";
	public const string FSW_Created = "Occurs when a file and/or directory creation matches the filter.";
	public const string FSW_Deleted = "Occurs when a file and/or directory deletion matches the filter.";
	public const string FSW_Renamed = "Occurs when a file and/or directory rename matches the filter.";
	public const string FSW_BufferOverflow = "Too many changes at once in directory:{0}.";
	public const string FileSystemWatcherDesc = "Monitors file system change notifications and raises events when a directory or file changes.";
	public const string NotSet = "[Not Set]";
	public const string TimerAutoReset = "Indicates whether the timer will be restarted when it is enabled.";
	public const string TimerEnabled = "Indicates whether the timer is enabled to fire events at a defined interval.";
	public const string TimerInterval = "The number of milliseconds between timer events.";
	public const string TimerIntervalElapsed = "Occurs when the Interval has elapsed.";
	public const string TimerSynchronizingObject = "The object used to marshal the event handler calls issued when an interval has elapsed.";
	public const string MismatchedCounterTypes = "Mismatched counter types.";
	public const string NoPropertyForAttribute = "Could not find a property for the attribute '{0}'.";
	public const string InvalidAttributeType = "The value of attribute '{0}' could not be converted to the proper type.";
	public const string Generic_ArgCantBeEmptyString = "'{0}' can not be empty string.";
	public const string BadLogName = "Event log names must consist of printable characters and cannot contain \\, *, ?, or spaces";
	public const string InvalidProperty = "Invalid value {1} for property {0}.";
	public const string CantMonitorEventLog = "Cannot monitor EntryWritten events for this EventLog. This might be because the EventLog is on a remote machine which is not a supported scenario.";
	public const string InitTwice = "Cannot initialize the same object twice.";
	public const string InvalidParameter = "Invalid value '{1}' for parameter '{0}'.";
	public const string MissingParameter = "Must specify value for {0}.";
	public const string ParameterTooLong = "The size of {0} is too big. It cannot be longer than {1} characters.";
	public const string LocalSourceAlreadyExists = "Source {0} already exists on the local computer.";
	public const string SourceAlreadyExists = "Source {0} already exists on the computer '{1}'.";
	public const string LocalLogAlreadyExistsAsSource = "Log {0} has already been registered as a source on the local computer.";
	public const string LogAlreadyExistsAsSource = "Log {0} has already been registered as a source on the computer '{1}'.";
	public const string DuplicateLogName = "Only the first eight characters of a custom log name are significant, and there is already another log on the system using the first eight characters of the name given. Name given: '{0}', name of existing log: '{1}'.";
	public const string RegKeyMissing = "Cannot open registry key {0}\\{1}\\{2} on computer '{3}'.";
	public const string LocalRegKeyMissing = "Cannot open registry key {0}\\{1}\\{2}.";
	public const string RegKeyMissingShort = "Cannot open registry key {0} on computer {1}.";
	public const string InvalidParameterFormat = "Invalid format for argument {0}.";
	public const string NoLogName = "Log to delete was not specified.";
	public const string RegKeyNoAccess = "Cannot open registry key {0} on computer {1}. You might not have access.";
	public const string MissingLog = "Cannot find Log {0} on computer '{1}'.";
	public const string SourceNotRegistered = "The source '{0}' is not registered on machine '{1}', or you do not have write access to the {2} registry key.";
	public const string LocalSourceNotRegistered = "Source {0} is not registered on the local computer.";
	public const string CantRetrieveEntries = "Cannot retrieve all entries.";
	public const string IndexOutOfBounds = "Index {0} is out of bounds.";
	public const string CantReadLogEntryAt = "Cannot read log entry number {0}.  The event log may be corrupt.";
	public const string MissingLogProperty = "Log property value has not been specified.";
	public const string CantOpenLog = "Cannot open log {0} on machine {1}. Windows has not provided an error code.";
	public const string NeedSourceToOpen = "Source property was not set before opening the event log in write mode.";
	public const string NeedSourceToWrite = "Source property was not set before writing to the event log.";
	public const string CantOpenLogAccess = "Cannot open log for source '{0}'. You may not have write access.";
	public const string LogEntryTooLong = "Log entry string is too long. A string written to the event log cannot exceed 32766 characters.";
	public const string TooManyReplacementStrings = "The maximum allowed number of replacement strings is 255.";
	public const string LogSourceMismatch = "The source '{0}' is not registered in log '{1}'. (It is registered in log '{2}'.) \" The Source and Log properties must be matched, or you may set Log to the empty string, and it will automatically be matched to the Source property.";
	public const string NoAccountInfo = "Cannot obtain account information.";
	public const string NoCurrentEntry = "No current EventLog entry available, cursor is located before the first or after the last element of the enumeration.";
	public const string MessageNotFormatted = "The description for Event ID '{0}' in Source '{1}' cannot be found.  The local computer may not have the necessary registry information or message DLL files to display the message, or you may not have permission to access them.  The following information is part of the event:";
	public const string EventID = "Invalid eventID value '{0}'. It must be in the range between '{1}' and '{2}'.";
	public const string LogDoesNotExists = "The event log '{0}' on computer '{1}' does not exist.";
	public const string InvalidCustomerLogName = "The log name: '{0}' is invalid for customer log creation.";
	public const string CannotDeleteEqualSource = "The event log source '{0}' cannot be deleted, because it's equal to the log name.";
	public const string RentionDaysOutOfRange = "'retentionDays' must be between 1 and 365 days.";
	public const string MaximumKilobytesOutOfRange = "MaximumKilobytes must be between 64 KB and 4 GB, and must be in 64K increments.";
	public const string SomeLogsInaccessible = "The source was not found, but some or all event logs could not be searched.  Inaccessible logs: {0}.";
	public const string SomeLogsInaccessibleToCreate = "The source was not found, but some or all event logs could not be searched.  To create the source, you need permission to read all event logs to make sure that the new source name is unique.  Inaccessible logs: {0}.";
	public const string BadConfigSwitchValue = "The config value for Switch '{0}' was invalid.";
	public const string ConfigSectionsUnique = "The '{0}' section can only appear once per config file.";
	public const string ConfigSectionsUniquePerSection = "The '{0}' tag can only appear once per section.";
	public const string SourceListenerDoesntExist = "The listener '{0}' added to source '{1}' must have a listener with the same name defined in the main Trace listeners section.";
	public const string SourceSwitchDoesntExist = "The source '{0}' must have a switch with the same name defined in the Switches section.";
	public const string CategoryHelpCorrupt = "Cannot load Category Help data because an invalid index '{0}' was read from the registry.";
	public const string CounterNameCorrupt = "Cannot load Counter Name data because an invalid index '{0}' was read from the registry.";
	public const string CounterDataCorrupt = "Cannot load Performance Counter data because an unexpected registry key value type was read from '{0}'.";
	public const string ReadOnlyCounter = "Cannot update Performance Counter, this object has been initialized as ReadOnly.";
	public const string ReadOnlyRemoveInstance = "Cannot remove Performance Counter Instance, this object as been initialized as ReadOnly.";
	public const string NotCustomCounter = "The requested Performance Counter is not a custom counter, it has to be initialized as ReadOnly.";
	public const string CategoryNameMissing = "Failed to initialize because CategoryName is missing.";
	public const string CounterNameMissing = "Failed to initialize because CounterName is missing.";
	public const string InstanceNameProhibited = "Counter is single instance, instance name '{0}' is not valid for this counter category.";
	public const string InstanceNameRequired = "Counter is not single instance, an instance name needs to be specified.";
	public const string MissingInstance = "Instance {0} does not exist in category {1}.";
	public const string PerformanceCategoryExists = "Cannot create Performance Category '{0}' because it already exists.";
	public const string InvalidCounterName = "Invalid empty or null string for counter name.";
	public const string DuplicateCounterName = "Cannot create Performance Category with counter name {0} because the name is a duplicate.";
	public const string CantChangeCategoryRegistration = "Cannot create or delete the Performance Category '{0}' because access is denied.";
	public const string CantDeleteCategory = "Cannot delete Performance Category because this category is not registered or is a system category.";
	public const string MissingCategory = "Category does not exist.";
	public const string MissingCategoryDetail = "Category {0} does not exist.";
	public const string CantReadCategory = "Cannot read Category {0}.";
	public const string MissingCounter = "Counter {0} does not exist.";
	public const string CategoryNameNotSet = "Category name property has not been set.";
	public const string CounterExists = "Could not locate Performance Counter with specified category name '{0}', counter name '{1}'.";
	public const string CantReadCategoryIndex = "Could not Read Category Index: {0}.";
	public const string CantReadCounter = "Counter '{0}' does not exist in the specified Category.";
	public const string CantReadInstance = "Instance '{0}' does not exist in the specified Category.";
	public const string RemoteWriting = "Cannot write to a Performance Counter in a remote machine.";
	public const string CounterLayout = "The Counter layout for the Category specified is invalid, a counter of the type:  AverageCount64, AverageTimer32, CounterMultiTimer, CounterMultiTimerInverse, CounterMultiTimer100Ns, CounterMultiTimer100NsInverse, RawFraction, or SampleFraction has to be immediately followed by any of the base counter types: AverageBase, CounterMultiBase, RawBase or SampleBase.";
	public const string PossibleDeadlock = "The operation couldn't be completed, potential internal deadlock.";
	public const string SharedMemoryGhosted = "Cannot access shared memory, AppDomain has been unloaded.";
	public const string HelpNotAvailable = "Help not available.";
	public const string PerfInvalidHelp = "Invalid help string. Its length must be in the range between '{0}' and '{1}'.";
	public const string PerfInvalidCounterName = "Invalid counter name. Its length must be in the range between '{0}' and '{1}'. Double quotes, control characters and leading or trailing spaces are not allowed.";
	public const string PerfInvalidCategoryName = "Invalid category name. Its length must be in the range between '{0}' and '{1}'. Double quotes, control characters and leading or trailing spaces are not allowed.";
	public const string MustAddCounterCreationData = "Only objects of type CounterCreationData can be added to a CounterCreationDataCollection.";
	public const string RemoteCounterAdmin = "Creating or Deleting Performance Counter Categories on remote machines is not supported.";
	public const string NoInstanceInformation = "The {0} category doesn't provide any instance information, no accurate data can be returned.";
	public const string PerfCounterPdhError = "There was an error calculating the PerformanceCounter value (0x{0}).";
	public const string MultiInstanceOnly = "Category '{0}' is marked as multi-instance.  Performance counters in this category can only be created with instance names.";
	public const string SingleInstanceOnly = "Category '{0}' is marked as single-instance.  Performance counters in this category can only be created without instance names.";
	public const string InstanceNameTooLong = "Instance names used for writing to custom counters must be 127 characters or less.";
	public const string CategoryNameTooLong = "Category names must be 1024 characters or less.";
	public const string InstanceLifetimeProcessonReadOnly = "InstanceLifetime is unused by ReadOnly counters.";
	public const string InstanceLifetimeProcessforSingleInstance = "Single instance categories are only valid with the Global lifetime.";
	public const string InstanceAlreadyExists = "Instance '{0}' already exists with a lifetime of Process.  It cannot be recreated or reused until it has been removed or until the process using it has exited.";
	public const string CantSetLifetimeAfterInitialized = "The InstanceLifetime cannot be set after the instance has been initialized.  You must use the default constructor and set the CategoryName, InstanceName, CounterName, InstanceLifetime and ReadOnly properties manually before setting the RawValue.";
	public const string ProcessLifetimeNotValidInGlobal = "PerformanceCounterInstanceLifetime.Process is not valid in the global shared memory.  If your performance counter category was created with an older version of the Framework, it uses the global shared memory.  Either use PerformanceCounterInstanceLifetime.Global, or if applications running on older versions of the Framework do not need to write to your category, delete and recreate it.";
	public const string CantConvertProcessToGlobal = "An instance with a lifetime of Process can only be accessed from a PerformanceCounter with the InstanceLifetime set to PerformanceCounterInstanceLifetime.Process.";
	public const string CantConvertGlobalToProcess = "An instance with a lifetime of Global can only be accessed from a PerformanceCounter with the InstanceLifetime set to PerformanceCounterInstanceLifetime.Global.";
	public const string PCNotSupportedUnderAppContainer = "Writeable performance counters are not allowed when running in AppContainer.";
	public const string PriorityClassNotSupported = "The AboveNormal and BelowNormal priority classes are not available on this platform.";
	public const string WinNTRequired = "Feature requires Windows NT.";
	public const string Win2kRequired = "Feature requires Windows 2000.";
	public const string NoAssociatedProcess = "No process is associated with this object.";
	public const string ProcessIdRequired = "Feature requires a process identifier.";
	public const string NotSupportedRemote = "Feature is not supported for remote machines.";
	public const string NoProcessInfo = "Process has exited, so the requested information is not available.";
	public const string WaitTillExit = "Process must exit before requested information can be determined.";
	public const string NoProcessHandle = "Process was not started by this object, so requested information cannot be determined.";
	public const string MissingProccess = "Process with an Id of {0} is not running.";
	public const string BadMinWorkset = "Minimum working set size is invalid. It must be less than or equal to the maximum working set size.";
	public const string BadMaxWorkset = "Maximum working set size is invalid. It must be greater than or equal to the minimum working set size.";
	public const string WinNTRequiredForRemote = "Operating system does not support accessing processes on remote computers. This feature requires Windows NT or later.";
	public const string ProcessHasExited = "Cannot process request because the process ({0}) has exited.";
	public const string ProcessHasExitedNoId = "Cannot process request because the process has exited.";
	public const string ThreadExited = "The request cannot be processed because the thread ({0}) has exited.";
	public const string Win2000Required = "Feature requires Windows 2000 or later.";
	public const string ProcessNotFound = "Thread {0} found, but no process {1} found.";
	public const string CantGetProcessId = "Cannot retrieve process identifier from the process handle.";
	public const string ProcessDisabled = "Process performance counter is disabled, so the requested operation cannot be performed.";
	public const string WaitReasonUnavailable = "WaitReason is only available if the ThreadState is Wait.";
	public const string NotSupportedRemoteThread = "Feature is not supported for threads on remote computers.";
	public const string UseShellExecuteRequiresSTA = "Current thread is not in Single Thread Apartment (STA) mode. Starting a process with UseShellExecute set to True requires the current thread be in STA mode.  Ensure that your Main function has STAThreadAttribute marked.";
	public const string CantRedirectStreams = "The Process object must have the UseShellExecute property set to false in order to redirect IO streams.";
	public const string CantUseEnvVars = "The Process object must have the UseShellExecute property set to false in order to use environment variables.";
	public const string CantStartAsUser = "The Process object must have the UseShellExecute property set to false in order to start a process as a user.";
	public const string CouldntConnectToRemoteMachine = "Couldn't connect to remote machine.";
	public const string CouldntGetProcessInfos = "Couldn't get process information from performance counter.";
	public const string InputIdleUnkownError = "WaitForInputIdle failed.  This could be because the process does not have a graphical interface.";
	public const string FileNameMissing = "Cannot start process because a file name has not been provided.";
	public const string EnvironmentBlock = "The environment block provided doesn't have the correct format.";
	public const string EnumProcessModuleFailed = "Unable to enumerate the process modules.";
	public const string EnumProcessModuleFailedDueToWow = "A 32 bit processes cannot access modules of a 64 bit process.";
	public const string PendingAsyncOperation = "An async read operation has already been started on the stream.";
	public const string NoAsyncOperation = "No async read operation is in progress on the stream.";
	public const string InvalidApplication = "The specified executable is not a valid application for this OS platform.";
	public const string StandardOutputEncodingNotAllowed = "StandardOutputEncoding is only supported when standard output is redirected.";
	public const string StandardErrorEncodingNotAllowed = "StandardErrorEncoding is only supported when standard error is redirected.";
	public const string CountersOOM = "Custom counters file view is out of memory.";
	public const string MappingCorrupted = "Cannot continue the current operation, the performance counters memory mapping has been corrupted.";
	public const string SetSecurityDescriptorFailed = "Cannot initialize security descriptor initialized.";
	public const string CantCreateFileMapping = "Cannot create file mapping.";
	public const string CantMapFileView = "Cannot map view of file.";
	public const string CantGetMappingSize = "Cannot calculate the size of the file view.";
	public const string CantGetStandardOut = "StandardOut has not been redirected or the process hasn't started yet.";
	public const string CantGetStandardIn = "StandardIn has not been redirected.";
	public const string CantGetStandardError = "StandardError has not been redirected.";
	public const string CantMixSyncAsyncOperation = "Cannot mix synchronous and asynchronous operation on process stream.";
	public const string NoFileMappingSize = "Cannot retrieve file mapping size while initializing configuration settings.";
	public const string EnvironmentBlockTooLong = "The environment block used to start a process cannot be longer than 65535 bytes.  Your environment block is {0} bytes long.  Remove some environment variables and try again.";
	public const string Arg_InvalidSerialPort = "The given port name does not start with COM/com or does not resolve to a valid serial port.";
	public const string Arg_InvalidSerialPortExtended = "The given port name is invalid.  It may be a valid port, but not a serial port.";
	public const string Arg_SecurityException = "The port name cannot start with '\\'.";
	public const string ArgumentNull_Array = "Array cannot be null.";
	public const string ArgumentNull_Buffer = "Buffer cannot be null.";
	public const string ArgumentOutOfRange_Bounds_Lower_Upper = "Argument must be between {0} and {1}.";
	public const string ArgumentOutOfRange_Enum = "Enum value was out of legal range.";
	public const string ArgumentOutOfRange_NeedNonNegNumRequired = "Non-negative number required.";
	public const string ArgumentOutOfRange_NeedPosNum = "Positive number required.";
	public const string ArgumentOutOfRange_Timeout = "The timeout must be greater than or equal to -1.";
	public const string ArgumentOutOfRange_WriteTimeout = "The timeout must be either a positive number or -1.";
	public const string ArgumentOutOfRange_OffsetOut = "Either offset did not refer to a position in the string, or there is an insufficient length of destination character array.";
	public const string IndexOutOfRange_IORaceCondition = "Probable I/O race condition detected while copying memory.  The I/O package is not thread safe by default.  In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's Synchronized methods.  This also applies to classes like StreamWriter and StreamReader.";
	public const string IO_BindHandleFailed = "BindHandle for ThreadPool failed on this handle.";
	public const string IO_OperationAborted = "The I/O operation has been aborted because of either a thread exit or an application request.";
	public const string NotSupported_UnseekableStream = "Stream does not support seeking.";
	public const string IO_EOF_ReadBeyondEOF = "Unable to read beyond the end of the stream.";
	public const string ObjectDisposed_StreamClosed = "Can not access a closed Stream.";
	public const string UnauthorizedAccess_IODenied_Path = "Access to the port '{0}' is denied.";
	public const string IO_UnknownError = "Unknown Error '{0}'.";
	public const string Arg_WrongAsyncResult = "IAsyncResult object did not come from the corresponding async method on this type.";
	public const string InvalidOperation_EndReadCalledMultiple = "EndRead can only be called once for each asynchronous operation.";
	public const string InvalidOperation_EndWriteCalledMultiple = "EndWrite can only be called once for each asynchronous operation.";
	public const string IO_PortNotFound = "The specified port does not exist.";
	public const string IO_PortNotFoundFileName = "The port '{0}' does not exist.";
	public const string UnauthorizedAccess_IODenied_NoPathName = "Access to the port is denied.";
	public const string IO_PathTooLong = "The specified port name is too long.  The port name must be less than 260 characters.";
	public const string IO_SharingViolation_NoFileName = "The process cannot access the port because it is being used by another process.";
	public const string IO_SharingViolation_File = "The process cannot access the port '{0}' because it is being used by another process.";
	public const string NotSupported_UnwritableStream = "Stream does not support writing.";
	public const string ObjectDisposed_WriterClosed = "Can not write to a closed TextWriter.";
	public const string BaseStream_Invalid_Not_Open = "The BaseStream is only available when the port is open.";
	public const string PortNameEmpty_String = "The PortName cannot be empty.";
	public const string Port_not_open = "The port is closed.";
	public const string Port_already_open = "The port is already open.";
	public const string Cant_be_set_when_open = "'{0}' cannot be set while the port is open.";
	public const string Max_Baud = "The maximum baud rate for the device is {0}.";
	public const string In_Break_State = "The port is in the break state and cannot be written to.";
	public const string Write_timed_out = "The write timed out.";
	public const string CantSetRtsWithHandshaking = "RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff.";
	public const string NotSupportedOS = "GetPortNames is not supported on Win9x platforms.";
	public const string NotSupportedEncoding = "SerialPort does not support encoding '{0}'.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation.";
	public const string BaudRate = "The baud rate to use on this serial port.";
	public const string DataBits = "The number of data bits per transmitted/received byte.";
	public const string DiscardNull = "Whether to discard null bytes received on the port before adding to serial buffer.";
	public const string DtrEnable = "Whether to enable the Data Terminal Ready (DTR) line during communications.";
	public const string EncodingMonitoringDescription = "The encoding to use when reading and writing strings.";
	public const string Handshake = "The handshaking protocol for flow control in data exchange, which can be None.";
	public const string NewLine = "The string used by ReadLine and WriteLine to denote a new line.";
	public const string Parity = "The scheme for parity checking each received byte and marking each transmitted byte.";
	public const string ParityReplace = "Byte with which to replace bytes received with parity errors.";
	public const string PortName = "The name of the communications port to open.";
	public const string ReadBufferSize = "The size of the read buffer in bytes.  This is the maximum number of read bytes which can be buffered.";
	public const string ReadTimeout = "The read timeout in Milliseconds.";
	public const string ReceivedBytesThreshold = "Number of bytes required to be available before the Read event is fired.";
	public const string RtsEnable = "Whether to enable the Request To Send (RTS) line during communications.";
	public const string SerialPortDesc = "Represents a serial port resource.";
	public const string StopBits = "The number of stop bits per transmitted/received byte.";
	public const string WriteBufferSize = "The size of the write buffer in bytes.  This is the maximum number of bytes which can be queued for write.";
	public const string WriteTimeout = "The write timeout in milliseconds.";
	public const string SerialErrorReceived = "Raised each time when an error is received from the SerialPort.";
	public const string SerialPinChanged = "Raised each time when pin is changed on the SerialPort.";
	public const string SerialDataReceived = "Raised each time when data is received from the SerialPort.";
	public const string CounterType = "The type of this counter.";
	public const string CounterName = "The name of this counter.";
	public const string CounterHelp = "Help information for this counter.";
	public const string EventLogDesc = "Provides interaction with Windows event logs.";
	public const string ErrorDataReceived = "User event handler to call for async IO with StandardError stream.";
	public const string LogEntries = "The contents of the log.";
	public const string LogLog = "Gets or sets the name of the log to read from and write to.";
	public const string LogMachineName = "The name of the machine on which to read or write events.";
	public const string LogMonitoring = "Indicates if the component monitors the event log for changes.";
	public const string LogSynchronizingObject = "The object used to marshal the event handler calls issued as a result of an EventLog change.";
	public const string LogSource = "The application name (source name) to use when writing to the event log.";
	public const string LogEntryWritten = "Raised each time any application writes an entry to the event log.";
	public const string LogEntryMachineName = "The machine on which this event log resides.";
	public const string LogEntryData = "The binary data associated with this entry in the event log.";
	public const string LogEntryIndex = "The sequence of this entry in the event log.";
	public const string LogEntryCategory = "The category for this message.";
	public const string LogEntryCategoryNumber = "An application-specific category number assigned to this entry.";
	public const string LogEntryEventID = "The number identifying the message for this source.";
	public const string LogEntryEntryType = "The type of entry - Information, Warning, etc.";
	public const string LogEntryMessage = "The text of the message for this entry";
	public const string LogEntrySource = "The name of the application that wrote this entry.";
	public const string LogEntryReplacementStrings = "The application-supplied strings used in the message.";
	public const string LogEntryResourceId = "The full number identifying the message in the event message dll.";
	public const string LogEntryTimeGenerated = "The time at which the application logged this entry.";
	public const string LogEntryTimeWritten = "The time at which the system logged this entry to the event log.";
	public const string LogEntryUserName = "The username of the account associated with this entry by the writing application.";
	public const string OutputDataReceived = "User event handler to call for async IO with StandardOutput stream.";
	public const string PC_CounterHelp = "The description message for this counter.";
	public const string PC_CounterType = "The counter type indicates how to interpret the value of the counter, for example an actual count or a rate of change.";
	public const string PC_ReadOnly = "Indicates if the counter is read only.  Remote counters and counters not created using this component are read-only.";
	public const string PC_RawValue = "Directly accesses the raw value of this counter.  The counter must have been created using this component.";
	public const string ProcessAssociated = "Indicates if the process component is associated with a real process.";
	public const string ProcessDesc = "Provides access to local and remote processes, enabling starting and stopping of local processes.";
	public const string ProcessExitCode = "The value returned from the associated process when it terminated.";
	public const string ProcessTerminated = "Indicates if the associated process has been terminated.";
	public const string ProcessExitTime = "The time that the associated process exited.";
	public const string ProcessHandle = "Returns the native handle for this process.   The handle is only available if the process was started using this component.";
	public const string ProcessHandleCount = "The number of native handles associated with this process.";
	public const string ProcessId = "The unique identifier for the process.";
	public const string ProcessMachineName = "The name of the machine the running the process.";
	public const string ProcessMainModule = "The main module for the associated process.";
	public const string ProcessModules = "The modules that have been loaded by the associated process.";
	public const string ProcessSynchronizingObject = "The object used to marshal the event handler calls issued as a result of a Process exit.";
	public const string ProcessSessionId = "The identifier for the session of the process.";
	public const string ProcessThreads = "The threads running in the associated process.";
	public const string ProcessEnableRaisingEvents = "Whether the process component should watch for the associated process to exit, and raise the Exited event.";
	public const string ProcessExited = "If the WatchForExit property is set to true, then this event is raised when the associated process exits.";
	public const string ProcessFileName = "The name of the application, document or URL to start.";
	public const string ProcessWorkingDirectory = "The initial working directory for the process.";
	public const string ProcessBasePriority = "The base priority computed based on the priority class that all threads run relative to.";
	public const string ProcessMainWindowHandle = "The handle of the main window for the process.";
	public const string ProcessMainWindowTitle = "The caption of the main window for the process.";
	public const string ProcessMaxWorkingSet = "The maximum amount of physical memory the process has required since it was started.";
	public const string ProcessMinWorkingSet = "The minimum amount of physical memory the process has required since it was started.";
	public const string ProcessNonpagedSystemMemorySize = "The number of bytes of non pageable system  memory the process is using.";
	public const string ProcessPagedMemorySize = "The current amount of memory that can be paged to disk that the process is using.";
	public const string ProcessPagedSystemMemorySize = "The number of bytes of pageable system memory the process is using.";
	public const string ProcessPeakPagedMemorySize = "The maximum amount of memory that can be paged to disk that the process has used since it was started.";
	public const string ProcessPeakWorkingSet = "The maximum amount of physical memory the process has used since it was started.";
	public const string ProcessPeakVirtualMemorySize = "The maximum amount of virtual memory the process has allocated since it was started.";
	public const string ProcessPriorityBoostEnabled = "Whether this process would like a priority boost when the user interacts with it.";
	public const string ProcessPriorityClass = "The priority that the threads in the process run relative to.";
	public const string ProcessPrivateMemorySize = "The current amount of memory that the process has allocated that cannot be shared with other processes.";
	public const string ProcessPrivilegedProcessorTime = "The amount of CPU time the process spent inside the operating system core.";
	public const string ProcessProcessName = "The name of the process.";
	public const string ProcessProcessorAffinity = "A bit mask which represents the processors that the threads within the process are allowed to run on.";
	public const string ProcessResponding = "Whether this process is currently responding.";
	public const string ProcessStandardError = "Standard error stream of the process.";
	public const string ProcessStandardInput = "Standard input stream of the process.";
	public const string ProcessStandardOutput = "Standard output stream of the process.";
	public const string ProcessStartInfo = "Specifies information used to start a process.";
	public const string ProcessStartTime = "The time at which the process was started.";
	public const string ProcessTotalProcessorTime = "The amount of CPU time the process has used.";
	public const string ProcessUserProcessorTime = "The amount of CPU time the process spent outside the operating system core.";
	public const string ProcessVirtualMemorySize = "The amount of virtual memory the process has currently allocated.";
	public const string ProcessWorkingSet = "The current amount of physical memory the process is using.";
	public const string ProcModModuleName = "The name of the module.";
	public const string ProcModFileName = "The file name of the module.";
	public const string ProcModBaseAddress = "The memory address that the module loaded at.";
	public const string ProcModModuleMemorySize = "The amount of virtual memory required by the code and data in the module file.";
	public const string ProcModEntryPointAddress = "The memory address of the function that runs when the module is loaded.";
	public const string ProcessVerb = "The verb to apply to the document specified by the FileName property.";
	public const string ProcessArguments = "Command line arguments that will be passed to the application specified by the FileName property.";
	public const string ProcessErrorDialog = "Whether to show an error dialog to the user if there is an error.";
	public const string ProcessWindowStyle = "How the main window should be created when the process starts.";
	public const string ProcessCreateNoWindow = "Whether to start the process without creating a new window to contain it.";
	public const string ProcessEnvironmentVariables = "Set of environment variables that apply to this process and child processes.";
	public const string ProcessRedirectStandardInput = "Whether the process command input is read from the Process instance's StandardInput member.";
	public const string ProcessRedirectStandardOutput = "Whether the process output is written to the Process instance's StandardOutput member.";
	public const string ProcessRedirectStandardError = "Whether the process's error output is written to the Process instance's StandardError member.";
	public const string ProcessUseShellExecute = "Whether to use the operating system shell to start the process.";
	public const string ThreadBasePriority = "The current base priority of the thread.";
	public const string ThreadCurrentPriority = "The current priority level of the thread.";
	public const string ThreadId = "The unique identifier for the thread.";
	public const string ThreadPriorityBoostEnabled = "Whether the thread would like a priority boost when the user interacts with UI associated with the thread.";
	public const string ThreadPriorityLevel = "The priority level of the thread.";
	public const string ThreadPrivilegedProcessorTime = "The amount of CPU time the thread spent inside the operating system core.";
	public const string ThreadStartAddress = "The memory address of the function that was run when the thread started.";
	public const string ThreadStartTime = "The time the thread was started.";
	public const string ThreadThreadState = "The execution state of the thread.";
	public const string ThreadTotalProcessorTime = "The amount of CPU time the thread has consumed since it was started.";
	public const string ThreadUserProcessorTime = "The amount of CPU time the thread spent outside the operating system core.";
	public const string ThreadWaitReason = "The reason the thread is waiting, if it is waiting.";
	public const string VerbEditorDefault = "(Default)";
	public const string AppSettingsReaderNoKey = "The key '{0}' does not exist in the appSettings configuration section.";
	public const string AppSettingsReaderNoParser = "Type '{0}' does not have a Parse method.";
	public const string AppSettingsReaderCantParse = "The value '{0}' was found in the appSettings configuration section for key '{1}', and this value is not a valid {2}.";
	public const string AppSettingsReaderEmptyString = "(empty string)";
	public const string InvalidPermissionState = "Invalid permission state.";
	public const string PermissionNumberOfElements = "The number of elements on the access path must be the same as the number of tag names.";
	public const string PermissionItemExists = "The item provided already exists.";
	public const string PermissionItemDoesntExist = "The requested item doesn't exist.";
	public const string PermissionBadParameterEnum = "Parameter must be of type enum.";
	public const string PermissionInvalidLength = "Length must be greater than {0}.";
	public const string PermissionTypeMismatch = "Type mismatch.";
	public const string Argument_NotAPermissionElement = "'securityElement' was not a permission element.";
	public const string Argument_InvalidXMLBadVersion = "Invalid Xml - can only parse elements of version one.";
	public const string InvalidPermissionLevel = "Invalid permission level.";
	public const string TargetNotWebBrowserPermissionLevel = "Target not WebBrowserPermissionLevel.";
	public const string WebBrowserBadXml = "Bad Xml {0}";
	public const string KeyedCollNeedNonNegativeNum = "Need a non negative number for capacity.";
	public const string KeyedCollDuplicateKey = "Cannot add item since the item with the key already exists in the collection.";
	public const string KeyedCollReferenceKeyNotFound = "The key reference with respect to which the insertion operation was to be performed was not found.";
	public const string KeyedCollKeyNotFound = "Cannot find the key {0} in the collection.";
	public const string KeyedCollInvalidKey = "Keys must be non-null non-empty Strings.";
	public const string KeyedCollCapacityOverflow = "Capacity overflowed and went negative.  Check capacity of the collection.";
	public const string OrderedDictionary_ReadOnly = "The OrderedDictionary is readonly and cannot be modified.";
	public const string OrderedDictionary_SerializationMismatch = "There was an error deserializing the OrderedDictionary.  The ArrayList does not contain DictionaryEntries.";
	public const string Async_ExceptionOccurred = "An exception occurred during the operation, making the result invalid.  Check InnerException for exception details.";
	public const string Async_QueueingFailed = "Queuing WaitCallback failed.";
	public const string Async_OperationCancelled = "Operation has been cancelled.";
	public const string Async_OperationAlreadyCompleted = "This operation has already had OperationCompleted called on it and further calls are illegal.";
	public const string Async_NullDelegate = "A non-null SendOrPostCallback must be supplied.";
	public const string BackgroundWorker_AlreadyRunning = "BackgroundWorker is already running.";
	public const string BackgroundWorker_CancellationNotSupported = "BackgroundWorker does not support cancellation.";
	public const string BackgroundWorker_OperationCompleted = "Operation has already been completed.";
	public const string BackgroundWorker_ProgressNotSupported = "BackgroundWorker does not support progress.";
	public const string BackgroundWorker_WorkerAlreadyRunning = "This BackgroundWorker is currently busy and cannot run multiple tasks concurrently.";
	public const string BackgroundWorker_WorkerDoesntReportProgress = "This BackgroundWorker states that it doesn't report progress. Modify WorkerReportsProgress to state that it does report progress.";
	public const string BackgroundWorker_WorkerDoesntSupportCancellation = "This BackgroundWorker states that it doesn't support cancellation. Modify WorkerSupportsCancellation to state that it does support cancellation.";
	public const string Async_ProgressChangedEventArgs_ProgressPercentage = "Percentage progress made in operation.";
	public const string Async_ProgressChangedEventArgs_UserState = "User-supplied state to identify operation.";
	public const string Async_AsyncEventArgs_Cancelled = "True if operation was cancelled.";
	public const string Async_AsyncEventArgs_Error = "Exception that occurred during operation.  Null if no error.";
	public const string Async_AsyncEventArgs_UserState = "User-supplied state to identify operation.";
	public const string BackgroundWorker_CancellationPending = "Has the user attempted to cancel the operation? To be accessed from DoWork event handler.";
	public const string BackgroundWorker_DoWork = "Event handler to be run on a different thread when the operation begins.";
	public const string BackgroundWorker_IsBusy = "Is the worker still currently working on a background operation?";
	public const string BackgroundWorker_ProgressChanged = "Raised when the worker thread indicates that some progress has been made.";
	public const string BackgroundWorker_RunWorkerCompleted = "Raised when the worker has completed (either through success, failure, or cancellation).";
	public const string BackgroundWorker_WorkerReportsProgress = "Whether the worker will report progress.";
	public const string BackgroundWorker_WorkerSupportsCancellation = "Whether the worker supports cancellation.";
	public const string BackgroundWorker_DoWorkEventArgs_Argument = "Argument passed into the worker handler from BackgroundWorker.RunWorkerAsync.";
	public const string BackgroundWorker_DoWorkEventArgs_Result = "Result from the worker function.";
	public const string BackgroundWorker_Desc = "Executes an operation on a separate thread.";
	public const string InstanceCreationEditorDefaultText = "(New...)";
	public const string PropertyTabAttributeBadPropertyTabScope = "Scope must be PropertyTabScope.Document or PropertyTabScope.Component";
	public const string PropertyTabAttributeTypeLoadException = "Couldn't find type {0}";
	public const string PropertyTabAttributeArrayLengthMismatch = "tabClasses must have the same number of items as tabScopes";
	public const string PropertyTabAttributeParamsBothNull = "An array of tab type names or tab types must be specified";
	public const string InstanceDescriptorCannotBeStatic = "Parameter cannot be static.";
	public const string InstanceDescriptorMustBeStatic = "Parameter must be static.";
	public const string InstanceDescriptorMustBeReadable = "Parameter must be readable.";
	public const string InstanceDescriptorLengthMismatch = "Length mismatch.";
	public const string ToolboxItemAttributeFailedGetType = "Failed to create ToolboxItem of type: {0}";
	public const string PropertyDescriptorCollectionBadValue = "Parameter must be of type PropertyDescriptor.";
	public const string PropertyDescriptorCollectionBadKey = "Parameter must be of type int or string.";
	public const string AspNetHostingPermissionBadXml = "Bad Xml {0}";
	public const string CorruptedGZipHeader = "The magic number in GZip header is not correct. Make sure you are passing in a GZip stream.";
	public const string UnknownCompressionMode = "The compression mode specified in GZip header is unknown.";
	public const string UnknownState = "Decoder is in some unknown state. This might be caused by corrupted data.";
	public const string InvalidHuffmanData = "Failed to construct a huffman tree using the length array. The stream might be corrupted.";
	public const string InvalidCRC = "The CRC in GZip footer does not match the CRC calculated from the decompressed data.";
	public const string InvalidStreamSize = "The stream size in GZip footer does not match the real stream size.";
	public const string UnknownBlockType = "Unknown block type. Stream might be corrupted.";
	public const string InvalidBlockLength = "Block length does not match with its complement.";
	public const string GenericInvalidData = "Found invalid data while decoding.";
	public const string CannotReadFromDeflateStream = "Reading from the compression stream is not supported.";
	public const string CannotWriteToDeflateStream = "Writing to the compression stream is not supported.";
	public const string NotReadableStream = "The base stream is not readable.";
	public const string NotWriteableStream = "The base stream is not writeable.";
	public const string InvalidArgumentOffsetCount = "Offset plus count is larger than the length of target array.";
	public const string InvalidBeginCall = "Only one asynchronous reader is allowed time at one time.";
	public const string InvalidEndCall = "EndRead is only callable when there is one pending asynchronous reader.";
	public const string StreamSizeOverflow = "The gzip stream can't contain more than 4GB data.";
	public const string ZLibErrorDLLLoadError = "The underlying compression routine could not be loaded correctly.";
	public const string ZLibErrorUnexpected = "The underlying compression routine returned an unexpected error code.";
	public const string ZLibErrorInconsistentStream = "The stream state of the underlying compression routine is inconsistent.";
	public const string ZLibErrorSteamFreedPrematurely = "The stream state of the underlying compression routine was freed prematurely.";
	public const string ZLibErrorNotEnoughMemory = "The underlying compression routine could not reserve sufficient memory.";
	public const string ZLibErrorIncorrectInitParameters = "The underlying compression routine received incorrect initialization parameters.";
	public const string ZLibErrorVersionMismatch = "The version of the underlying compression routine does not match expected version.";
	public const string InvalidOperation_HCCountOverflow = "Handle collector count overflows or underflows.";
	public const string Argument_InvalidThreshold = "maximumThreshold cannot be less than initialThreshold.";
	public const string Argument_SemaphoreInitialMaximum = "The initial count for the semaphore must be greater than or equal to zero and less than the maximum count.";
	public const string Argument_WaitHandleNameTooLong = "The name can be no more than 260 characters in length.";
	public const string WaitHandleCannotBeOpenedException_InvalidHandle = "A WaitHandle with system-wide name '{0}' cannot be created. A WaitHandle of a different type might have the same name.";
	public const string ArgumentNotAPermissionElement = "Argument was not a permission Element.";
	public const string ArgumentWrongType = "Argument should be of type {0}.";
	public const string BadXmlVersion = "Xml version was wrong.";
	public const string BinarySerializationNotSupported = "Binary serialization is current not supported by the LocalFileSettingsProvider.";
	public const string BothScopeAttributes = "The setting {0} has both an ApplicationScopedSettingAttribute and a UserScopedSettingAttribute.";
	public const string NoScopeAttributes = "The setting {0} does not have either an ApplicationScopedSettingAttribute or UserScopedSettingAttribute.";
	public const string PositionOutOfRange = "Position cannot be less than zero.";
	public const string ProviderInstantiationFailed = "Failed to instantiate provider: {0}.";
	public const string ProviderTypeLoadFailed = "Failed to load provider type: {0}.";
	public const string SaveAppScopedNotSupported = "Error saving {0} - The LocalFileSettingsProvider does not support saving changes to application-scoped settings.";
	public const string SettingsResetFailed = "Failed to reset settings: unable to access the configuration section.";
	public const string SettingsSaveFailed = "Failed to save settings: {0}";
	public const string SettingsSaveFailedNoSection = "Failed to save settings: unable to access the configuration section.";
	public const string StringDeserializationFailed = "Could not use String deserialization for setting: {0}.";
	public const string StringSerializationFailed = "Could not use String serialization for setting: {0}.";
	public const string UnknownSerializationFormat = "Unknown serialization format specified.";
	public const string UnknownSeekOrigin = "Unknown SeekOrigin specified.";
	public const string UnknownUserLevel = "Unknown ConfigurationUserLevel specified.";
	public const string UserSettingsNotSupported = "The current configuration system does not support user-scoped settings.";
	public const string XmlDeserializationFailed = "Could not use Xml deserialization for setting: {0}.";
	public const string XmlSerializationFailed = "Could not use Xml serialization for setting: {0}.";
	public const string MemberRelationshipService_RelationshipNotSupported = "Relationships between {0}.{1} and {2}.{3} are not supported.";
	public const string MaskedTextProviderPasswordAndPromptCharError = "The PasswordChar and PromptChar values cannot be the same.";
	public const string MaskedTextProviderInvalidCharError = "The specified character value is not allowed for this property.";
	public const string MaskedTextProviderMaskNullOrEmpty = "The Mask value cannot be null or empty.";
	public const string MaskedTextProviderMaskInvalidChar = "The specified mask contains invalid characters.";
	public const string StandardOleMarshalObjectGetMarshalerFailed = "Failed to get marshaler for IID {0}.";
	public const string SoundAPIBadSoundLocation = "Could not determine a universal resource identifier for the sound location.";
	public const string SoundAPIFileDoesNotExist = "Please be sure a sound file exists at the specified location.";
	public const string SoundAPIFormatNotSupported = "Sound API only supports playing PCM wave files.";
	public const string SoundAPIInvalidWaveFile = "The file located at {0} is not a valid wave file.";
	public const string SoundAPIInvalidWaveHeader = "The wave header is corrupt.";
	public const string SoundAPILoadTimedOut = "The request to load the wave file in memory timed out.";
	public const string SoundAPILoadTimeout = "The LoadTimeout property of a SoundPlayer cannot be negative.";
	public const string SoundAPIReadError = "There was an error reading the file located at {0}. Please make sure that a valid wave file exists at the specified location.";
	public const string WrongActionForCtor = "Constructor supports only the '{0}' action.";
	public const string MustBeResetAddOrRemoveActionForCtor = "Constructor only supports either a Reset, Add, or Remove action.";
	public const string ResetActionRequiresNullItem = "Reset action must be initialized with no changed items.";
	public const string ResetActionRequiresIndexMinus1 = "Reset action must be initialized with index -1.";
	public const string IndexCannotBeNegative = "Index cannot be negative.";
	public const string ObservableCollectionReentrancyNotAllowed = "Cannot change ObservableCollection during a CollectionChanged event.";
}

partial class SR
{
	public static object GetObject (string name)
	{
		return name;
	}
}
