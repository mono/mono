//
// This file was generated by resx2sr tool
//

partial class SR
{
	public const string ArgumentOutOfRange_Enum = "Enum value was out of legal range.";
	public const string ArgumentOutOfRange_NeedPosNum = "Positive number required.";
	public const string CannotReadFromDeflateStream = "Reading from the compression stream is not supported.";
	public const string CannotWriteToDeflateStream = "Writing to the compression stream is not supported.";
	public const string GenericInvalidData = "Found invalid data while decoding.";
	public const string InvalidArgumentOffsetCount = "Offset plus count is larger than the length of target array.";
	public const string InvalidBeginCall = "Only one asynchronous reader or writer is allowed time at one time.";
	public const string InvalidBlockLength = "Block length does not match with its complement.";
	public const string InvalidHuffmanData = "Failed to construct a huffman tree using the length array. The stream might be corrupted.";
	public const string NotSupported = "This operation is not supported.";
	public const string NotSupported_UnreadableStream = "Stream does not support reading.";
	public const string NotSupported_UnwritableStream = "Stream does not support writing.";
	public const string ObjectDisposed_StreamClosed = "Can not access a closed Stream.";
	public const string UnknownBlockType = "Unknown block type. Stream might be corrupted.";
	public const string UnknownState = "Decoder is in some unknown state. This might be caused by corrupted data.";
	public const string ZLibErrorDLLLoadError = "The underlying compression routine could not be loaded correctly.";
	public const string ZLibErrorInconsistentStream = "The stream state of the underlying compression routine is inconsistent.";
	public const string ZLibErrorIncorrectInitParameters = "The underlying compression routine received incorrect initialization parameters.";
	public const string ZLibErrorNotEnoughMemory = "The underlying compression routine could not reserve sufficient memory.";
	public const string ZLibErrorVersionMismatch = "The version of the underlying compression routine does not match expected version.";
	public const string ZLibErrorUnexpected = "The underlying compression routine returned an unexpected error code.";
	public const string ArgumentNeedNonNegative = "The argument must be non-negative.";
	public const string CannotBeEmpty = "String cannot be empty.";
	public const string CDCorrupt = "Central Directory corrupt.";
	public const string CentralDirectoryInvalid = "Central Directory is invalid.";
	public const string CreateInReadMode = "Cannot create entries on an archive opened in read mode.";
	public const string CreateModeCapabilities = "Cannot use create mode on a non-writable stream.";
	public const string CreateModeCreateEntryWhileOpen = "Entries cannot be created while previously created entries are still open.";
	public const string CreateModeWriteOnceAndOneEntryAtATime = "Entries in create mode may only be written to once, and only one entry may be held open at a time.";
	public const string DateTimeOutOfRange = "The DateTimeOffset specified cannot be converted into a Zip file timestamp.";
	public const string DeletedEntry = "Cannot modify deleted entry.";
	public const string DeleteOnlyInUpdate = "Delete can only be used when the archive is in Update mode.";
	public const string DeleteOpenEntry = "Cannot delete an entry currently open for writing.";
	public const string EntriesInCreateMode = "Cannot access entries in Create mode.";
	public const string EntryNameEncodingNotSupported = "The specified entry name encoding is not supported.";
	public const string EntryNamesTooLong = "Entry names cannot require more than 2^16 bits.";
	public const string EntryTooLarge = "Entries larger than 4GB are not supported in Update mode.";
	public const string EOCDNotFound = "End of Central Directory record could not be found.";
	public const string FieldTooBigCompressedSize = "Compressed Size cannot be held in an Int64.";
	public const string FieldTooBigLocalHeaderOffset = "Local Header Offset cannot be held in an Int64.";
	public const string FieldTooBigNumEntries = "Number of Entries cannot be held in an Int64.";
	public const string FieldTooBigOffsetToCD = "Offset to Central Directory cannot be held in an Int64.";
	public const string FieldTooBigOffsetToZip64EOCD = "Offset to Zip64 End Of Central Directory record cannot be held in an Int64.";
	public const string FieldTooBigStartDiskNumber = "Start Disk Number cannot be held in an Int64.";
	public const string FieldTooBigUncompressedSize = "Uncompressed Size cannot be held in an Int64.";
	public const string FrozenAfterWrite = "Cannot modify entry in Create mode after entry has been opened for writing.";
	public const string HiddenStreamName = "A stream from ZipArchiveEntry has been disposed.";
	public const string LengthAfterWrite = "Length properties are unavailable once an entry has been opened for writing.";
	public const string LocalFileHeaderCorrupt = "A local file header is corrupt.";
	public const string NumEntriesWrong = "Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.";
	public const string OffsetLengthInvalid = "The offset and length parameters are not valid for the array that was given.";
	public const string ReadingNotSupported = "This stream from ZipArchiveEntry does not support reading.";
	public const string ReadModeCapabilities = "Cannot use read mode on a non-readable stream.";
	public const string ReadOnlyArchive = "Cannot modify read-only archive.";
	public const string SeekingNotSupported = "This stream from ZipArchiveEntry does not support seeking.";
	public const string SetLengthRequiresSeekingAndWriting = "SetLength requires a stream that supports seeking and writing.";
	public const string SplitSpanned = "Split or spanned archives are not supported.";
	public const string UnexpectedEndOfStream = "Zip file corrupt: unexpected end of stream reached.";
	public const string UnsupportedCompression = "The archive entry was compressed using an unsupported compression method.";
	public const string UnsupportedCompressionMethod = "The archive entry was compressed using {0} and is not supported.";
	public const string UpdateModeCapabilities = "Update mode requires a stream with read, write, and seek capabilities.";
	public const string UpdateModeOneStream = "Entries cannot be opened multiple times in Update mode.";
	public const string WritingNotSupported = "This stream from ZipArchiveEntry does not support writing.";
	public const string Zip64EOCDNotWhereExpected = "Zip 64 End of Central Directory Record not where indicated.";
	public const string Argument_InvalidPathChars = "Illegal characters in path '{0}'.";
	public const string Stream_FalseCanRead = "Stream does not support reading.";
	public const string Stream_FalseCanWrite = "Stream does not support writing.";
	public const string BrotliEncoder_Create = "Failed to create BrotliEncoder instance";
	public const string BrotliEncoder_Disposed = "Can not access a closed Encoder.";
	public const string BrotliEncoder_Quality = "Provided BrotliEncoder Quality of {0} is not between the minimum value of {1} and the maximum value of {2}";
	public const string BrotliEncoder_Window = "Provided BrotliEncoder Window of {0} is not between the minimum value of {1} and the maximum value of {2}";
	public const string BrotliEncoder_InvalidSetParameter = "The BrotliEncoder {0} can not be changed at current encoder state.";
	public const string BrotliDecoder_Create = "Failed to create BrotliDecoder instance";
	public const string BrotliDecoder_Error = "Decoder threw unexpected error: {0}";
	public const string BrotliDecoder_Disposed = "Can not access a closed Decoder.";
	public const string BrotliStream_Compress_UnsupportedOperation = "Can not perform Read operations on a BrotliStream constructed with CompressionMode.Compress.";
	public const string BrotliStream_Compress_InvalidData = "Encoder ran into invalid data.";
	public const string BrotliStream_Decompress_UnsupportedOperation = "Can not perform Write operations on a BrotliStream constructed with CompressionMode.Decompress.";
	public const string BrotliStream_Decompress_InvalidData = "Decoder ran into invalid data.";
	public const string BrotliStream_Decompress_InvalidStream = "BrotliStream.BaseStream returned more bytes than requested in Read.";
}
