<?xml version="1.0" encoding="utf-8"?>
<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;T1,T2,T3,T4,TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">To be added.</typeparam>
    <typeparam name="T2">To be added.</typeparam>
    <typeparam name="T3">To be added.</typeparam>
    <typeparam name="T4">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <param name="arg1">To be added.</param>
    <param name="arg2">To be added.</param>
    <param name="arg3">To be added.</param>
    <param name="arg4">To be added.</param>
    <value>To be added.</value>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</para>
      <block subset="none" type="note">
        <para>To reference a method that has four parameters and returns void (or in Visual Basic, that is declared as a Sub rather than as a Function), use the generic <see cref="T:System.Action`4" /> delegate instead. </para>
      </block>
      <para>When you use the <see cref="T:System.Func`5" /> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters. For example, the following code explicitly declares a generic delegate named Searcher and assigns a reference to the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method to its delegate instance.</para>
      <para>code reference: System.Func~5#1</para>
      <para>The following example simplifies this code by instantiating the <see cref="T:System.Func`5" /> delegate instead of explicitly defining a new delegate and assigning a named method to it.</para>
      <para>code reference: System.Func~5#2</para>
      <para>You can use the <see cref="T:System.Func`5" /> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <format type="text/html"><a href="a62441fa-f0a3-4acb-9aa6-93762a635275">Anonymous Methods (C# Programming Guide)</a></format>.)</para>
      <para>code reference: System.Func~5#3</para>
      <para>You can also assign a lambda expression to a <see cref="T:System.Func`5" /> delegate, as the following example illustrates. (For an introduction to lambda expressions, see <format type="text/html"><a href="137064b0-3928-4bfa-ba71-c3f9cbd951e2">Lambda Expressions</a></format> and <format type="text/html"><a href="57e3ba27-9a82-4067-aca7-5ca446b7bf93">Lambda Expressions (C# Programming Guide)</a></format>.)</para>
      <para>code reference: System.Func~5#4</para>
      <para>The underlying type of a lambda expression is one of the generic Func delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <see cref="N:System.Linq" /> namespace have Func parameters, you can pass these methods a lambda expression without explicitly instantiating a Func delegate.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Encapsulates a method that has four parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</para>
    </summary>
  </Docs>
</Type>