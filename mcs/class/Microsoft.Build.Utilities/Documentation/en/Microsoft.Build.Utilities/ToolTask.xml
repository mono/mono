<?xml version="1.0" encoding="utf-8"?>
<Type Name="ToolTask" FullName="Microsoft.Build.Utilities.ToolTask">
  <TypeSignature Language="C#" Value="public abstract class ToolTask : Microsoft.Build.Utilities.Task" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Build.Utilities.Task</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <since version="2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>This abstract class provides default implementations for the methods and properties of a task that wraps a command line tool.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>When overridden in a derived form, provides functionality for a task that wraps a command line tool.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ToolTask ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:Microsoft.Build.Utilities.ToolTask" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ToolTask (System.Resources.ResourceManager taskResources);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="taskResources" Type="System.Resources.ResourceManager" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:Microsoft.Build.Utilities.ToolTask" /> class with the specified <see cref="T:System.Resources.ResourceManager" />.</para>
        </summary>
        <param name="taskResources">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Resources.ResourceManager" /> for task resources.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ToolTask (System.Resources.ResourceManager taskResources, string helpKeywordPrefix);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="taskResources" Type="System.Resources.ResourceManager" />
        <Parameter Name="helpKeywordPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:Microsoft.Build.Utilities.ToolTask" /> class with the specified <see cref="T:System.Resources.ResourceManager" /> and Help keyword prefix.</para>
        </summary>
        <param name="taskResources">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Resources.ResourceManager" /> for task resources.</param>
        <param name="helpKeywordPrefix">
          <attribution license="cc4" from="Microsoft" modified="false" />The Help keyword to use for messages raised by the task.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CallHostObjectToExecute">
      <MemberSignature Language="C#" Value="protected virtual bool CallHostObjectToExecute ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calls the host object to perform the work of the task.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the method was successfule; otherwise, false.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnvironmentOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Specialized.StringDictionary EnvironmentOverride { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The ExecuteTool method passes these environment variables to the StartInfo of the process in which the tool executes. Any environment variables not included in the EnvironmentOverride dictionary are inherited from the process in which the ExecuteTool method executes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a set of environment variable name-value pairs. Designed to be overridden in a custom task class (derived from ToolTask) to return a set of new or altered environment variables to create the execution context of the associated tool. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public override bool Execute ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Runs the exectuable file with the specified task parameters.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the task runs successfully; otherwise, false.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ExecuteTool">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteTool (string pathToTool, string responseFileCommands, string commandLineCommands);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathToTool" Type="System.String" />
        <Parameter Name="responseFileCommands" Type="System.String" />
        <Parameter Name="commandLineCommands" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a temporoary response (.rsp) file and runs the executable file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The returned exit code of the executable file. If the task logged errors, but the executable returned an exit code of 0, this method returns -1.</para>
        </returns>
        <param name="pathToTool">
          <attribution license="cc4" from="Microsoft" modified="false" />The path to the executable file.</param>
        <param name="responseFileCommands">
          <attribution license="cc4" from="Microsoft" modified="false" />The command line arguments to place in the .rsp file.</param>
        <param name="commandLineCommands">
          <attribution license="cc4" from="Microsoft" modified="false" />The command line arguments to pass directly to the executable file.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.Build.Framework.Output</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the returned exit code of the executable file.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GenerateCommandLineCommands">
      <MemberSignature Language="C#" Value="protected virtual string GenerateCommandLineCommands ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called after <see cref="M:Microsoft.Build.Utilities.ToolTask.ValidateParameters" /> and <see cref="M:Microsoft.Build.Utilities.ToolTask.SkipTaskExecution" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string value containing the command line arguments to pass directly to the executable file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string value containing the command line arguments to pass directly to the executable file.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GenerateFullPathToTool">
      <MemberSignature Language="C#" Value="protected abstract string GenerateFullPathToTool ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns the value of the <see cref="P:Microsoft.Build.Utilities.ToolTask.ToolName" /> property if the tool is located in the system path.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the fully qualified path to the executable file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The fully qualified path to the executable file.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GenerateResponseFileCommands">
      <MemberSignature Language="C#" Value="protected virtual string GenerateResponseFileCommands ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called after <see cref="M:Microsoft.Build.Utilities.ToolTask.ValidateParameters" /> and <see cref="M:Microsoft.Build.Utilities.ToolTask.SkipTaskExecution" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string value containing the command line arguments to add to the response (.rsp) file before running the executable file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>a string value containing the command line arguments to add to the response (.rsp) file before running the executable file.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetResponseFileSwitch">
      <MemberSignature Language="C#" Value="protected virtual string GetResponseFileSwitch (string responseFilePath);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is only called if <see cref="M:Microsoft.Build.Utilities.ToolTask.GenerateResponseFileCommands" /> returns a non-empty string value.</para>
          <para>This method is called after <see cref="M:Microsoft.Build.Utilities.ToolTask.ValidateParameters" />, <see cref="M:Microsoft.Build.Utilities.ToolTask.SkipTaskExecution" /> and <see cref="M:Microsoft.Build.Utilities.ToolTask.GenerateResponseFileCommands" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the command line switch used by the executable file to specifiy a response (.rsp) file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The command line switch used by the executable file to specifiy a response (.rsp) file.</para>
        </returns>
        <param name="responseFilePath">
          <attribution license="cc4" from="Microsoft" modified="false" />The full path to the temporary .rsp file.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetWorkingDirectory">
      <MemberSignature Language="C#" Value="protected virtual string GetWorkingDirectory ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This is a method rather than a property so that derived classes (like Exec) can choose to expose a public WorkingDirectory property, and it would be confusing to have two properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the directory in which to run the executable file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The directory in which to run the executable file, or a null reference (Nothing in vbprvb) if the executable file should be run in the current directory.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HandleTaskExecutionErrors">
      <MemberSignature Language="C#" Value="protected virtual bool HandleTaskExecutionErrors ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called only if the executable file returns a non-zero exit code.</para>
          <para>The return value of this method is used as the return value of the task.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Handles execution errors raised by the executable file.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the method runs successfully; otherwise, false.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InitializeHostObject">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Build.Utilities.HostObjectInitializationStatus InitializeHostObject ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Utilities.HostObjectInitializationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes the host object of the task.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:Microsoft.Build.Utilities.HostObjectInitializationStatus" /> of the host object.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LogEventsFromTextOutput">
      <MemberSignature Language="C#" Value="protected virtual void LogEventsFromTextOutput (string singleLine, Microsoft.Build.Framework.MessageImportance importance);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="singleLine" Type="System.String" />
        <Parameter Name="importance" Type="Microsoft.Build.Framework.MessageImportance" />
      </Parameters>
      <Docs>
        <param name="importance">To be added.</param>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parses a single line of text to identify any errors or warnings in canonical format.</para>
        </summary>
        <param name="singleLine">
          <attribution license="cc4" from="Microsoft" modified="false" />A single line of text for the method to parse.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LogPathToTool">
      <MemberSignature Language="C#" Value="protected virtual void LogPathToTool (string toolName, string pathToTool);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolName" Type="System.String" />
        <Parameter Name="pathToTool" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Logs the tool name and path to all registered loggers.</para>
        </summary>
        <param name="toolName">
          <attribution license="cc4" from="Microsoft" modified="false" />The executable file name.</param>
        <param name="pathToTool">
          <attribution license="cc4" from="Microsoft" modified="false" />The path to the executable file.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LogToolCommand">
      <MemberSignature Language="C#" Value="protected virtual void LogToolCommand (string message);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Logs the starting point of the run to all registered loggers.</para>
        </summary>
        <param name="message">
          <attribution license="cc4" from="Microsoft" modified="false" />A descriptive message to provide loggers, usually the command line and switches.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ResponseFileEncoding">
      <MemberSignature Language="C#" Value="protected virtual System.Text.Encoding ResponseFileEncoding { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The encoding is <see cref="P:System.Text.Encoding.UTF8" /> by default.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Text.Encoding" /> of the response file.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SkipTaskExecution">
      <MemberSignature Language="C#" Value="protected virtual bool SkipTaskExecution ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called after <see cref="M:Microsoft.Build.Utilities.ToolTask.ValidateParameters" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether task execution should be skipped.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true to skip task execution; otherwise, false.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StandardErrorEncoding">
      <MemberSignature Language="C#" Value="protected virtual System.Text.Encoding StandardErrorEncoding { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Console-based output uses the current system OEM code page by default. Note that we should not use Console.OutputEncoding here since processes we run don't really have much to do with our console window (and also Console.OutputEncoding doesn't return the OEM code page if the running application that hosts MSBuild is not a console application).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Text.Encoding" /> of the standard error stream of the task.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StandardErrorLoggingImportance">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Build.Framework.MessageImportance StandardErrorLoggingImportance { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.MessageImportance</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance" /> with which to log errors.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StandardOutputEncoding">
      <MemberSignature Language="C#" Value="protected virtual System.Text.Encoding StandardOutputEncoding { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version="2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Console-based output uses the current system OEM code page by default. Note that we should not use Console.OutputEncoding here since processes we run don't really have much to do with our console window (and also Console.OutputEncoding doesn't return the OEM code page if the running application that hosts MSBuild is not a console application).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Text.Encoding" /> of the standard output stream of the task.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StandardOutputLoggingImportance">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Build.Framework.MessageImportance StandardOutputLoggingImportance { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.MessageImportance</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance" /> with which to log errors.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public virtual int Timeout { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the amount of time after which the task executable is terminated.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ToolName">
      <MemberSignature Language="C#" Value="protected abstract string ToolName { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the name of the executable file to run.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ToolPath">
      <MemberSignature Language="C#" Value="public string ToolPath { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the path of the executable file to run.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ValidateParameters">
      <MemberSignature Language="C#" Value="protected virtual bool ValidateParameters ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version="2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether all task paratmeters are valid.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if all task parameters are valid; otherwise, false.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>