<?xml version="1.0" encoding="utf-8"?>
<Type Name="InternalMessageWrapper" FullName="System.Runtime.Remoting.Messaging.InternalMessageWrapper">
  <TypeSignature Maintainer="auto" Language="C#" Value="public class InternalMessageWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalMessageWrapper extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Runtime.Remoting.Messaging.InternalMessageWrapper" /> class is the base class for the <see cref="T:System.Runtime.Remoting.Messaging.MethodCallMessageWrapper" /> and <see cref="T:System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper" /> classes, which wrap messages for method calls on remote objects.</para>
      <para>
        <see cref="T:System.Runtime.Remoting.Messaging.InternalMessageWrapper" /> is used by the infrastructure of the .NET Framework. You do not need to create instances of the <see cref="T:System.Runtime.Remoting.Messaging.InternalMessageWrapper" />, <see cref="T:System.Runtime.Remoting.Messaging.MethodCallMessageWrapper" />, and <see cref="T:System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper" /> classes directly.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Wraps remoting data for passing between message sinks, either for requests from client to server or for the subsequent responses.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalMessageWrapper (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Runtime.Remoting.Messaging.InternalMessageWrapper" /> class is used by the remoting infrastructure of the .NET Framework. You do not need to create an <see cref="T:System.Runtime.Remoting.Messaging.InternalMessageWrapper" /> directly.</para>
          <para>The <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> parameter also implements the derived interface, <see cref="T:System.Runtime.Remoting.Messaging.IMethodMessage" />, which indicates that the message acts as a request or as a response on a remote method call. The <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> and <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interfaces, in turn, inherit from the <see cref="T:System.Runtime.Remoting.Messaging.IMethodMessage" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.InternalMessageWrapper" /> class. </para>
        </summary>
        <param name="msg">
          <attribution license="cc4" from="Microsoft" modified="false" />A message that acts either as an outgoing method call on a remote object, or as the subsequent response.</param>
      </Docs>
    </Member>
    <Member MemberName="WrappedMessage">
      <MemberSignature Language="C#" Value="protected System.Runtime.Remoting.Messaging.IMessage WrappedMessage;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Runtime.Remoting.Messaging.IMessage WrappedMessage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the request or response <see cref="T:System.Runtime.Remoting.Messaging.IMethodMessage" /> interface that is wrapped by the message wrapper. </para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>