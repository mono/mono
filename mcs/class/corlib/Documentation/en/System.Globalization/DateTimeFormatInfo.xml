<?xml version="1.0" encoding="utf-8"?>
<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo" FullNameSP="System_Globalization_DateTimeFormatInfo" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed serializable DateTimeFormatInfo extends System.Object implements System.ICloneable, System.IFormatProvider" />
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class contain culture-specific information for formatting or parsing date and time values such as the following: </para>
      <list type="bullet">
        <item>
          <para>The patterns used to format date values.</para>
        </item>
        <item>
          <para>The patterns used to format time values.</para>
        </item>
        <item>
          <para>The names of the days of the week.</para>
        </item>
        <item>
          <para>The names of the months of the year.</para>
        </item>
        <item>
          <para>The A.M. and P.M. designators used in time values.</para>
        </item>
        <item>
          <para>The calendar in which dates are expressed.</para>
        </item>
      </list>
      <para>In this section: </para>
      <list type="bullet">
        <item>
          <para>
            <format type="text/html">
              <a href="#instantiating">Instantiating a DateTimeFormatInfo object</a>
            </format>
          </para>
          <list type="bullet">
            <item>
              <para>
                <format type="text/html">
                  <a href="#instantiating_Invariant">For the Invariant Culture</a>
                </format>
              </para>
            </item>
            <item>
              <para>
                <format type="text/html">
                  <a href="#instantiating_Specific">For a Specific Culture</a>
                </format>
              </para>
            </item>
            <item>
              <para>
                <format type="text/html">
                  <a href="#instantiating_neutral">For a neutral culture</a>
                </format>
              </para>
            </item>
            <item>
              <para>
                <format type="text/html">
                  <a href="#instantiating_Current">For the current culture</a>
                </format>
              </para>
            </item>
          </list>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#dynamic">DateTimeFormatInfo and dynamic data</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Formatting_dates_times">Formatting dates and times</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#properties">Format strings and DateTimeFormatInfo properties</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Modifying">Modifying DateTimeFormatInfo properties</a>
            </format>
          </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#instantiating" />
      </format>
      <format type="text/html">
        <h2>Instantiating a DateTimeFormatInfo object</h2>
      </format>
      <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object can represent the formatting conventions of the invariant culture, a specific culture, a neutral culture, or the current culture. This section discusses how to instantiate each type of <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
      <format type="text/html">
        <a href="#instantiating_Invariant" />
      </format>
      <format type="text/html">
        <h2>Instantiating a DateTimeFormatInfo object for the invariant culture</h2>
      </format>
      <para>The invariant culture represents a culture that is culture-insensitive. It is based on the English language, but not on any specific English-speaking country/region. Although the data of specific cultures can be dynamic and can change to reflect new cultural conventions or user preferences, the data of the invariant culture does not change. You can instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of the invariant culture in the following ways:</para>
      <list type="bullet">
        <item>
          <para>By retrieving the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</para>
        </item>
        <item>
          <para>By calling the parameterless <see cref="M:System.Globalization.DateTimeFormatInfo.#ctor" /> constructor. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read/write.</para>
        </item>
        <item>
          <para>By retrieving the value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property from the <see cref="T:System.Globalization.CultureInfo" /> object that is returned by the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </para>
        </item>
      </list>
      <para>The following example uses each of these methods to instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the invariant culture. It then indicates whether the object is read-only.</para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#1</para>
      <format type="text/html">
        <a href="#instantiating_Specific" />
      </format>
      <format type="text/html">
        <h2>Instantiating a DateTimeFormatInfo object for a specific culture</h2>
      </format>
      <para>A specific culture represents a language that is spoken in a particular country/region. For example, en-US is a specific culture that represents the English language spoken in the United States, and en-CA is a specific culture that represents the English language spoken in Canada. You can instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of a specific culture in the following ways:</para>
      <list type="bullet">
        <item>
          <para>By calling the <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" /> method and retrieving the value of the returned <see cref="T:System.Globalization.CultureInfo" /> object's <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </para>
        </item>
        <item>
          <para>By passing the static <see cref="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" /> method a <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose <see cref="T:System.Globalization.DateTimeFormatInfo" /> object you want to retrieve. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read/write.</para>
        </item>
        <item>
          <para>By calling the static <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" /> method and retrieving the value of the returned <see cref="T:System.Globalization.CultureInfo" /> object's <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read/write. </para>
        </item>
        <item>
          <para>By calling the <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)" /> class constructor and retrieving the value of the returned <see cref="T:System.Globalization.CultureInfo" /> object's <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read/write. </para>
        </item>
      </list>
      <para>The following example illustrates each of these ways to instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object and indicates whether the resulting object is read-only.</para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#3</para>
      <format type="text/html">
        <a href="#instantiating_neutral" />
      </format>
      <format type="text/html">
        <h2>Instantiating a DateTimeFormatInfo object for a neutral culture</h2>
      </format>
      <para>A neutral culture represents a culture or language that is independent of a country/region; it is typically the parent of one or more specific cultures. For example, Fr is a neutral culture for the French language and the parent of the fr-FR culture. You can instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of a neutral culture in the same ways that you create a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of a specific culture. In addition, you can retrieve a neutral culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object by retrieving a neutral culture from a specific culture's <see cref="P:System.Globalization.CultureInfo.Parent" /> property and retrieving the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property. Unless the parent culture represents the invariant culture, the returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read/write. The following example illustrates these ways of instantiating a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents a neutral culture.</para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#2</para>
      <block subset="none" type="note">
        <para>In the .NET Framework versions 1.0 through net_v35_short, trying to retrieve a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that  reflects the formatting conventions of a neutral culture throws a <see cref="T:System.NotSupportedException" /> exception.</para>
      </block>
      <para>However, a neutral culture lacks culture-specific formatting information, because it is independent of a specific country/region. Instead of populating the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object with generic values, the .NET Framework returns a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that reflects the formatting conventions of a specific culture that is a child of the neutral culture. For example, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object for the neutral en culture reflects the formatting conventions of the en-US culture, and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object for the fr culture reflects the formatting conventions of the fr-FR culture. </para>
      <para>You can use code like the following to determine which specific culture's formatting conventions a neutral culture represents. The example uses reflection to compare the <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties of a neutral culture with the properties of a specific child culture. It considers two calendars to be equivalent if they are the same calendar type and, for Gregorian calendars, if their <see cref="P:System.Globalization.GregorianCalendar.CalendarType" /> properties have identical values. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#6</para>
      <format type="text/html">
        <a href="#instantiating_Current" />
      </format>
      <format type="text/html">
        <h2>Instantiating a DateTimeFormatInfo object for the current culture</h2>
      </format>
      <para>You can instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of the current culture in the following ways:</para>
      <list type="bullet">
        <item>
          <para>By retrieving the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</para>
        </item>
        <item>
          <para>By retrieving the value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property from the <see cref="T:System.Globalization.CultureInfo" /> object that is returned by the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> property. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. </para>
        </item>
        <item>
          <para>By calling the <see cref="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" /> method with a <see cref="T:System.Globalization.CultureInfo" /> object that represents the current culture. The returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</para>
        </item>
      </list>
      <para>The following example uses each of these methods to instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of the current culture. It then indicates whether the object is read-only.</para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#4</para>
      <para>You can create a writable <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the conventions of the current thread culture in one of these ways:</para>
      <list type="bullet">
        <item>
          <para>By retrieving a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object in any of the three previous ways and calling the <see cref="M:System.Globalization.DateTimeFormatInfo.Clone" /> method on the returned <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. This creates a copy of the original <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, except that its <see cref="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" /> property is false. </para>
        </item>
        <item>
          <para>By calling the <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" /> method to create a <see cref="T:System.Globalization.CultureInfo" /> object that represents the current culture, and then using its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property to retrieve the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. </para>
        </item>
      </list>
      <para>The following example illustrates each way of instantiating a read/write <see cref="T:System.Globalization.DateTimeFormatInfo" /> object and displays the value of its <see cref="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" /> property. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#7</para>
      <para>In Windows, the user can override some of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> property values used in formatting and parsing operations through the <ui>Region and Language</ui> application in Control Panel. For example, a user whose culture is English (United States) might choose to display long time values using a 24-hour clock (in the format HH:mm:ss) instead of the default 12-hour clock (in the format h:mm:ss tt). The <see cref="T:System.Globalization.DateTimeFormatInfo" /> objects retrieved in the ways discussed previously all reflect these user overrides. If this is undesirable, you can create a <see cref="T:System.Globalization.NumberFormatInfo" /> object that does not reflect user overrides (and is also read/write instead of read-only) by calling the <see cref="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" /> constructor and supplying a value of false for the <paramref name="useUserOverride" /> argument. The following example illustrates this for a system whose current culture is English (United States) and whose long time pattern has been changed from the default of h:mm:ss tt to HH:mm:ss. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#8</para>
      <format type="text/html">
        <a href="#dynamic" />
      </format>
      <format type="text/html">
        <h2>DateTimeFormatInfo and dynamic data</h2>
      </format>
      <para>The culture-specific data for formatting date and time values provided by the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class is dynamic, just like cultural data provided by the <see cref="T:System.Globalization.CultureInfo" /> class. You should not make any assumptions about the stability of values for <see cref="T:System.Globalization.DateTimeFormatInfo" /> objects that are associated with particular <see cref="T:System.Globalization.CultureInfo" /> objects. Only the data provided by the invariant culture and its associated <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is stable. Other data can change between application sessions or even while your application is running. There are four major sources of change:</para>
      <list type="bullet">
        <item>
          <para>System updates. Cultural preferences such as the preferred calendar or customary date and time formats change over time. When this happens, Windows Update includes changes to the <see cref="T:System.Globalization.DateTimeFormatInfo" /> property value for a particular culture. </para>
        </item>
        <item>
          <para>Replacement cultures. The <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> class can be used to replace the data of an existing culture.</para>
        </item>
        <item>
          <para>Cascading changes to property values. A number of culture-related properties can change at run time, which, in turn, causes <see cref="T:System.Globalization.DateTimeFormatInfo" /> data to change. For example, the current culture can be changed either programmatically or through user action. When this happens, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> property changes to an object associated with the current culture. Similarly, a culture's calendar can change, which can result in changes to numerous <see cref="T:System.Globalization.DateTimeFormatInfo" /> property values.</para>
        </item>
        <item>
          <para>User preferences. Users of your application might choose to override some of the values associated with the current system culture through the regional and language options in Control Panel. For example, users might choose to display the date in a different format. If the <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property is set to true, the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is also retrieved from the user settings. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" /> object (for example, if the selected calendar is not one of the calendars indicated by the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" /> property), the results of the methods and the values of the properties are undefined.</para>
        </item>
      </list>
      <para>To minimize the possibility of inconsistent data, all user-overridable properties of a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object are initialized when the object is created. There is still a possibility of inconsistency, because neither object creation nor the user override process is atomic and the relevant values can change during object creation. However, this situation should be extremely rare.</para>
      <para>You can control whether user overrides are reflected in <see cref="T:System.Globalization.DateTimeFormatInfo" /> objects that represent the same culture as the system culture. The following table lists the ways in which a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object can be retrieved and indicates whether the resulting object reflects user overrides. </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Source of CultureInfo and DateTimeFormatInfo object</para>
            </term>
            <description>
              <para>Reflects user overrides</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>CultureInfo.CurrentCulture.DateTimeFormat property</para>
          </term>
          <description>
            <para>Yes</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> property</para>
          </term>
          <description>
            <para>Yes</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" /> method</para>
          </term>
          <description>
            <para>Yes</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" /> method</para>
          </term>
          <description>
            <para>No</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)" /> constructor</para>
          </term>
          <description>
            <para>Yes</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" /> constructor</para>
          </term>
          <description>
            <para>Depends on value of <paramref name="useUserOverride" /> parameter</para>
          </description>
        </item>
      </list>
      <para>   </para>
      <para>Unless there is a compelling reason to do otherwise, you should respect user overrides when you use the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object in client applications to format and parse user input or to display data. For server applications or unattended applications, you should not. However, if you are using the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object either explicitly or implicitly to persist date and time data in string form, you should either use a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that reflects the formatting conventions of the invariant culture, or you should specify a custom date and time format string that you use regardless of culture.</para>
      <para />
      <format type="text/html">
        <a href="#Formatting_dates_times" />
      </format>
      <format type="text/html">
        <h2>Formatting dates and times</h2>
      </format>
      <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is used implicitly or explicitly in all date and time formatting operations. These include calls to the following methods:</para>
      <list type="bullet">
        <item>
          <para>All date and time formatting methods, such as <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString(System.String)" />. </para>
        </item>
        <item>
          <para>The major composite formatting method, which is <see cref="M:System.String.Format(System.String,System.Object[])" />. </para>
        </item>
        <item>
          <para>Other composite formatting methods, such as <see cref="M:System.Console.WriteLine(System.String,System.Object[])" /> and <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])" />. </para>
        </item>
      </list>
      <para>All date and time formatting operations make use of an <see cref="T:System.IFormatProvider" /> implementation. The <see cref="T:System.IFormatProvider" /> interface includes a single method, <see cref="M:System.IFormatProvider.GetFormat(System.Type)" />. This callback method is passed a <see cref="T:System.Type" /> object that represents the type needed to provide formatting information. The method returns either an instance of that type or null if it cannot provide an instance of the type. The .NET Framework includes two <see cref="T:System.IFormatProvider" /> implementations for formatting dates and times: </para>
      <list type="bullet">
        <item>
          <para>The <see cref="T:System.Globalization.CultureInfo" /> class,  which represents a specific culture (or a specific language in a specific country/region). In a date and time formatting operation, the <see cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" /> method returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property. </para>
        </item>
        <item>
          <para>The <see cref="T:System.Globalization.DateTimeFormatInfo" /> class, which provides information about the formatting conventions of its associated culture. The <see cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" /> method returns an instance of itself. </para>
        </item>
      </list>
      <para>If an <see cref="T:System.IFormatProvider" /> implementation is not provided to a formatting method explicitly, the <see cref="T:System.Globalization.CultureInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> property that represents the current thread culture is used.  </para>
      <para>The following example illustrates the relationship between the <see cref="T:System.IFormatProvider" /> interface and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class in formatting operations. It defines a custom <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method displays the type of the object requested by the formatting operation. If it is requesting a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, the method provides the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object for the current thread culture. As the output from the example shows, the <see cref="M:System.Decimal.ToString(System.IFormatProvider)" /> method requests a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object to provide formatting information, whereas the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method requests <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> objects as well as an <see cref="T:System.ICustomFormatter" /> implementation.</para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#9</para>
      <format type="text/html">
        <a href="#properties" />
      </format>
      <format type="text/html">
        <h2>Format strings and DateTimeFormatInfo properties</h2>
      </format>
      <para> The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object includes three kinds of properties that are used in formatting operations with date and time values: </para>
      <list type="bullet">
        <item>
          <para>Calendar-related properties. Properties such as <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />, <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />, <see cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />, and <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />, are associated with the calendar used by the culture, which is defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. These properties are used for long date and time formats.</para>
        </item>
        <item>
          <para>Properties that produce a standards-defined result string. The <see cref="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />, <see cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />, and <see cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" /> properties contain custom format strings that produce result strings defined by international standards. These properties are  read-only and cannot be modified.</para>
        </item>
        <item>
          <para>Properties that define culture-sensitive result strings. Some properties, such as <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" /> and <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />, contain <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">custom format strings</a></format> that specify the format of the result string. Others, such as <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />, <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />, <see cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />, and <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />, define culture-sensitive symbols or substrings that can be included in a result string.  </para>
        </item>
      </list>
      <para>The <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard date and time format strings</a></format>, such as "d", "D", "f", and "F", are aliases that correspond to particular <see cref="T:System.Globalization.DateTimeFormatInfo" /> format pattern properties. Most of the <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">custom date and time format specifiers</a></format> are related to strings or substrings that a formatting operation inserts into the result stream. The following table lists the standard and custom date and time format specifiers and their associated <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties. For details about how to use these format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>. Note that each standard format string corresponds to a <see cref="T:System.Globalization.DateTimeFormatInfo" /> property whose value is a custom date and time format string. The individual specifiers in this custom format string in turn correspond to other <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties. The table lists only the <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties for which the standard format strings are aliases, and does not list properties that may be accessed by custom format strings assigned to those aliased properties. In addition, the table lists only custom format specifiers that correspond to <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties. </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Format specifier</para>
            </term>
            <description>
              <para>Associated properties</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>"d" (short date; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />, to define the overall format of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"D" (long date; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />, to define the overall format of the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"f" (full date / short time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />, to define the format of the date component of the result string. </para>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />, to define the format of the time component of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"F" (full date / long time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />, to define the format of the date component of the result string. </para>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />, to define the format of the time component of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"g" (general date / short time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />, to define the format of the date component of the result string. </para>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />, to define the format of the time component of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"G" (general date / long time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />, to define the format of the date component of the result string.</para>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />, to define the format of the time component of the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"M", "m" (month/day; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />, to define the overall format of the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"O", "o" (round-trip date/time; standard format string)</para>
          </term>
          <description>
            <para>None.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"R", "r" (RFC1123; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />, to define a result string that conforms to the RFC 1123 standard. The property is read-only. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"s" (sortable date/time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />, to define a result string that conforms to the ISO 8601 standard. The property is read-only.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"t" (short time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />, to define the overall format of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"T" (long time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />, to define the overall format of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"u" (universal sortable date/time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />, to define a result string that conforms to the ISO 8601 standard for coordinated universal time. The property is read-only.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"U" (universal full date/time; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />, to define the overall format of the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"Y", "y" (year month; standard format string)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />, to define the overall format of the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"ddd" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />, to include the abbreviated name of the day of the week in the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"g", "gg" (custom format specifier)</para>
          </term>
          <description>
            <para>Calls the <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> method to insert the era name in the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"MMM" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />, to include the abbreviated month name in the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"MMMM" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" /> or <see cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />, to include the full month name in the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>"t" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> or <see cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />, to include the first character of the AM/PM designator in the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"tt" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> or <see cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />, to include the full AM/PM designator in the result string.</para>
          </description>
        </item>
        <item>
          <term>
            <para>":" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />, to include the time separator in the result string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>"/" (custom format specifier)</para>
          </term>
          <description>
            <para>
              <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />, to include the date separator in the result string.</para>
          </description>
        </item>
      </list>
      <para>   </para>
      <format type="text/html">
        <a href="#Modifying" />
      </format>
      <format type="text/html">
        <h2>Modifying DateTimeFormatInfo properties</h2>
      </format>
      <para>You can change the result string produced by date and time format strings by modifying the associated properties of a writable <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. To determine if a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is writable, use the <see cref="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" /> property. To customize a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object in this way:</para>
      <list type="ordered">
        <item>
          <para>Create a read/write copy of a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object whose formatting conventions you want to modify. (See the <format type="text/html"><a href="#instantiating">Instantiating a DateTimeFormatInfo object</a></format> section.) </para>
        </item>
        <item>
          <para>Modify the property or properties that are used to produce the desired result string. (For information about how formatting methods use <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties to define result strings, see the previous section, <format type="text/html"><a href="#properties">Format strings and DateTimeFormatInfo properties</a></format>.)  </para>
        </item>
        <item>
          <para>Use the custom <see cref="T:System.Globalization.DateTimeFormatInfo" /> object you created as the <see cref="T:System.IFormatProvider" /> argument in calls to formatting methods. </para>
        </item>
      </list>
      <para>There are two other ways to change the fomat of a result string:</para>
      <list type="bullet">
        <item>
          <para>You can use the <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> class to define either a custom culture (a culture that has a unique name and that supplements existing cultures) or a replacement culture (one that is used instead of a specific culture). You can save and access this culture programmatically as you would any <see cref="T:System.Globalization.CultureInfo" /> object supported by the .NET Framework. </para>
        </item>
        <item>
          <para>If the result string is not culture-sensitive and doesn't follow a predefined format, you can use a custom date and time format string. For example, if you are serializing date and time data in the format YYYYMMDDHHmmss, you can generate the result string by passing the custom format string to the <see cref="M:System.DateTime.ToString(System.String)" /> method, and you can  convert the result string back to a <see cref="T:System.DateTime" /> value by calling the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> method.</para>
        </item>
      </list>
      <format type="text/html">
        <h2>Changing the short date pattern</h2>
      </format>
      <para>The following example changes the format of a result string produced by the "d" (short date) standard format string. It changes the associated <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" /> property for the en-US or English (United States) culture from its default of "M/d/yyyy" to "yyyy'-"MM"-"dd" and uses the "d" standard format string to display the date both before and after the <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" /> property is changed. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#10</para>
      <format type="text/html">
        <h2>Changing the date separator character</h2>
      </format>
      <para>The following example changes the date separator character in a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the formatting conventions of the fr-FR culture. The example uses the "g" standard format string to display the date both before and after the <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> property is changed. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#12</para>
      <format type="text/html">
        <h2>Changing day name abbreviations and the long date pattern</h2>
      </format>
      <para>In some cases, the long date pattern, which typically displays the full day and month name along with the number of the day of the month and the year, may be too long. The following example shortens the long date pattern for the en-US culture to return a one-character or two-character day name abbreviation followed by the day number, the month name abbreviation, and the year. It does this by assigning shorter day name abbreviations to the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" /> array, and by modifying the custom format string assigned to the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property. This affects the result strings returned by the "D" and "f" standard format strings. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#13</para>
      <para>Ordinarily, the change to the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property also affects the <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" /> property, which in turn defines the result string returned by the "F" standard format string. To preserve the original full date and time pattern, the example reassigns the original custom format string assigned to the <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" /> property after the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property is modified. </para>
      <format type="text/html">
        <h2>Changing from a 12-hour clock to a 24-hour clock</h2>
      </format>
      <para>For many cultures in the .NET Framework, the time is expressed by using a 12-hour clock and an AM/PM designator. The following example defines a ReplaceWith24HourClock method that replaces any time format that uses a 12-hour clock with a format that uses a 24-hour clock. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#14</para>
      <para>The example uses a regular expression to modify the format string. The regular expression pattern @"^(?&lt;openAMPM&gt;\s*t+\s*)? (?(openAMPM) h+(?&lt;nonHours&gt;[^ht]+)$ | \s*h+(?&lt;nonHours&gt;[^ht]+)\s*t+) is defined as follows: </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Pattern</para>
            </term>
            <description>
              <para>Description</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>^</para>
          </term>
          <description>
            <para>Begin the match at the beginning of the string. </para>
          </description>
        </item>
        <item>
          <term>
            <para>(?&lt;openAMPM&gt;\s*t+\s*)?</para>
          </term>
          <description>
            <para>Match zero or one occurrence of zero or more white-space characters, followed by the letter "t" one or more times, followed by zero or more white-space characters. This capturing group is named openAMPM. </para>
          </description>
        </item>
        <item>
          <term>
            <para>(?(openAMPM) h+(?&lt;nonHours&gt;[^ht]+)$</para>
          </term>
          <description>
            <para>If the openAMPM group has a match, match the letter "h" one or more times, followed by one or more characters that are neither "h" nor "t". The match ends at the end of the string. All characters captured after "h" are included in a capturing group named nonHours. </para>
          </description>
        </item>
        <item>
          <term>
            <para>| \s*h+(?&lt;nonHours&gt;[^ht]+)\s*t+)</para>
          </term>
          <description>
            <para>If the openAMPM group does not have a match, match the letter "h" one or more times, followed by one or more characters that are neither "h" nor "t", followed by zero or more white-space characters. Finally, match one or more occurrences of the letter "t". All characters captured after "h" and before the white-spaces and "t" are included in a capturing group named nonHours.</para>
          </description>
        </item>
      </list>
      <para>The nonHours capturing group contains the minute and possibly the second component of a custom date and time format string, along with any time separator symbols. The replacement pattern HH${nonHours} prepends the substring "HH" to these elements. </para>
      <format type="text/html">
        <h2>Displaying and changing the era in a date</h2>
      </format>
      <para>The following example adds the "g" custom format specifier to the  <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property of an object that represents the formatting conventions of the en-US culture. This addition affects the following three standard format strings:  </para>
      <list type="bullet">
        <item>
          <para>The "D" (long date) standard format string, which maps directly to the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property. </para>
        </item>
        <item>
          <para>The "f" (full date / short time) standard format string, which produces a result string that concatenates the substrings produced by the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> and <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" /> properties. </para>
        </item>
        <item>
          <para>The "F" (full date / long time) standard format string, which maps directly to the <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" /> property. Because we have not explicitly set this property value, it is generated dynamically by concatenating the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> and <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> properties.</para>
        </item>
      </list>
      <para>The example also shows how to change the era name for a culture whose calendar has a single era. In this case, the en-US culture uses the Gregorian calendar, which is represented by a <see cref="T:System.Globalization.GregorianCalendar" /> object. The <see cref="T:System.Globalization.GregorianCalendar" /> class supports a single era, which it names A.D. (Anno Domini). The example changes the era name to C.E. (Common Era) by replacing the "g" custom format specifier in the format string assigned to the <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />property with a literal string. The use of a literal string is necessary, because the era name is typically returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> method from private data in the culture tables supplied by either the .NET Framework or the Windows operating system. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#11</para>
      <format type="text/html">
        <h2>Parsing date and time strings</h2>
      </format>
      <para>Parsing involves converting the string representation of a date and time to a <see cref="T:System.DateTime" /> or <see cref="T:System.DateTimeOffset" /> value. Both of these types include the Parse, TryParse, ParseExact, and TryParseExact methods to support parsing operations. The Parse and TryParse methods convert a string that can have a variety of formats, whereas ParseExact and TryParseExact require that the string have a defined format or formats. If the parsing operation fails, Parse and ParseExact throw an exception, whereas TryParse and TryParseExact return false. </para>
      <para>The parsing methods implicitly or explicitly use a <see cref="T:System.Globalization.DateTimeStyles" /> enumeration value to determine which style elements (such as leading, trailing, or inner white space) can be present in the string to be parsed, and how to interpret the parsed string or any missing elements. If you don't provide a <see cref="T:System.Globalization.DateTimeStyles" /> value when you call the Parse or TryParse method, the default is <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />, which is a composite style that includes the <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> flags. For the ParseExact and TryParseExact methods, the default is <see cref="F:System.Globalization.DateTimeStyles.None" />; the input string must correspond precisely to a particular custom date and time format string. </para>
      <para>The parsing methods also implicitly or explicitly use a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the specific symbols and patterns that can occur in the string to be parsed. If you don't provide a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object for the current thread culture is used by default. For more information about parsing date and time strings, see the individual parsing methods, such as <see cref="M:System.DateTime.Parse(System.String)" />, <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" />, <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />, and <see cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />. </para>
      <para>The following example illustrates the culture-sensitive nature of parsing date and time strings. It tries to parse two date strings by using the conventions of the en-US, en-GB, fr-FR, and fi-FI cultures. The date that is interpreted as 8/18/2014 in the en-US culture throws a <see cref="T:System.FormatException" /> exception in the other three cultures because 18 is interpreted as the month number. 1/2/2015 is parsed as the second day of the first month in the en-US culture, but as the first day of the second month in the remaining cultures. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#15</para>
      <para>Date and time strings are typically parsed for two reasons:</para>
      <list type="bullet">
        <item>
          <para>To convert user input into a date and time value. </para>
        </item>
        <item>
          <para>To round-trip a date and time value; that is, to deserialize a date and time value that was previously serialized as a string. </para>
        </item>
      </list>
      <para>The following sections discuss these two operations in greater detail. </para>
      <format type="text/html">
        <h2>Parsing user strings</h2>
      </format>
      <para>When you parse date and time strings input by the user, you should always instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that reflects the user's cultural settings, including any customizations the user may have made. Otherwise, the  date and time object may have incorrect values. For information about how to instantiate a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that reflects user cultural customizations, see the <format type="text/html"><a href="#dynamic">DateTimeFormatInfo and dynamic data</a></format>  section. </para>
      <para>The following example illustrates the difference between a parsing operation that reflects user cultural settings and one that does not. In this case, the default system culture is en-US, but the user has used Control Panel, <ui>Region and Language</ui> to change the short date pattern from its default of "M/d/yyyy" to "yy/MM/dd". When the user enters a string that reflects user settings, and the string is parsed by a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that also reflects user settings (overrides), the parsing operation returns a correct result. However, when the string is parsed by a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that reflects standard en-US cultural settings, the parsing method throws a <see cref="T:System.FormatException" /> exception because it interprets 14 as the number of the month, not the last two digits of the year. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#16</para>
      <format type="text/html">
        <h2>Serializing and deserializing date and time data</h2>
      </format>
      <para>Serialized date and time data are expected to round-trip; that is, all serialized and deserialized values should be identical. If a date and time value represents a single moment in time, the deserialized value should represent the same moment in time regardless of the culture or time zone of the system on which it was restored. To round-trip date and time data successfully, you must use the conventions of the invariant culture, which is returned by the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> property, to generate and parse the data. The formatting and parsing operations should never reflect the conventions of the default culture. If you use default cultural settings, the portability of the data is strictly limited; it can be successfully deserialized only on a thread whose cultural-specific settings are identical to those of the thread on which it was serialized. In some cases, this means that the data cannot even be successfully serialized and deserialized on the same system. </para>
      <para>If the time component of a date and time value is significant, it should also be converted to UTC and serialized by using the "o" or "r" <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard format string</a></format>. The time data can then be restored by calling a parsing method and passing it the appropriate format string along with the invariant culture as the <paramref name="provider" /> argument.</para>
      <para>The following example illustrates the process of round-tripping a date and time value. It serializes a date and time on a system that observes U.S. Pacific time and whose current culture is en-US. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#17</para>
      <para>It deserializes the data on a system in the Brussels, Copenhagen, Madrid and Paris time zone and whose current culture is fr-FR. The restored date is nine hours later than the original date, which reflects the time zone adjustment from eight hours behind UTC to one hour ahead of UTC. Both the original date and the restored date represent the same moment in time. </para>
      <para>code reference: System.Globalization.DateTimeFormatInfo.Class#18</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides culture-specific information about the format of date and time values.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor creates a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that represents the date and time information of the invariant culture. To create a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object for a specific culture, create a <see cref="T:System.Globalization.CultureInfo" /> object for that culture and retrieve the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property.</para>
          <para>The properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object created by this constructor can be modified. However, you cannot modify the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property, because the invariant culture supports only a localized version of the Gregorian calendar. To create a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that uses a specific calendar, you must instantiate a <see cref="T:System.Globalization.CultureInfo" /> object that supports that calendar and assign the calendar to the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new writable instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class that is culture-independent (invariant).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="ILASM" Value=".property class System.String[] AbbreviatedDayNames { public hidebysig specialname instance class System.String[] get_AbbreviatedDayNames() public hidebysig specialname instance void set_AbbreviatedDayNames(class System.String[] value) }" />
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A one-dimensional array of type <see cref="T:System.String" />
containing the culture-specific abbreviated names of the days of the week.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is not an array with exactly 7 elements.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If setting this property, the array must be one-dimensional and must have exactly seven elements.</para>
          <para>If a custom format string includes the "ddd" format specifier, the <see cref="M:System.DateTime.ToString" /> or <see cref="M:System.DateTimeOffset.ToString" /> method includes the appropriate member of the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" /> array in place of the "ddd" in the result string.</para>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes. If the selected <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> does not support abbreviated day names, the array contains the full day names.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In some languages, a month name that is part of a date appears in the genitive case. For example, a date in the ru-RU or Russian (Russia) culture consists of the day number and the genitive month name, such as 1 Января (1 January). For these cultures, if a custom format string includes the "MMM" format specifier, the <see cref="M:System.DateTime.ToString" /> or <see cref="M:System.DateTimeOffset.ToString" /> method includes the appropriate member of the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" /> array in place of the "MMM" in the result string.</para>
          <para>In a set operation, the array must be one-dimensional with exactly 13 elements, because <see cref="T:System.Globalization.Calendar" /> objects accommodate calendars that have 13 months. For calendars that have 12 months, the thirteenth element should be <see cref="F:System.String.Empty" />.</para>
          <para>If you set the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" /> property, you must also set the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a string array of abbreviated month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="ILASM" Value=".property class System.String[] AbbreviatedMonthNames { public hidebysig specialname instance class System.String[] get_AbbreviatedMonthNames() public hidebysig specialname instance void set_AbbreviatedMonthNames(class System.String[] value) }" />
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A one-dimensional array of type <see cref="T:System.String" />
containing the abbreviated names of the months. For
cultures with 12-month calendars the 13th element of the array is an empty string.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is not an array with exactly 13 elements.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If you set this property, the array must be one-dimensional with exactly 13 elements. <see cref="T:System.Globalization.Calendar" /> objects accommodate calendars with 13 months.</para>
          <para>If you set the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" /> property, you must also set the <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" /> property. The <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" /> and <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" /> properties are used to format dates using the following format strings: </para>
          <list type="bullet">
            <item>
              <para>A standard date and time format string that aliases a custom format string that includes the "MMM" format specifier.</para>
            </item>
            <item>
              <para>A custom date and time format string that includes the "MMM" format specifier.</para>
            </item>
          </list>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes. If the selected <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> does not support abbreviated month names, the array contains the full month names.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="ILASM" Value=".property string AMDesignator { public hidebysig specialname instance string get_AMDesignator() public hidebysig specialname instance void set_AMDesignator(string value) }" />
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>The <see cref="T:System.String" /> designator for hours that are before noon.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> property is used for all times from 0:00:00 (midnight) to 11:59:59.999.</para>
          <para>If a custom format string includes the "tt" format specifier and the time is before noon, the <see cref="M:System.DateTime.ToString" /> or <see cref="M:System.DateTimeOffset.ToString" /> method includes the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> property in place of "tt" in the result string. If the custom format string includes the "t" custom format specifier, only the first character of the <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> property value is included. You should use "tt" for languages for which it is necessary to maintain the distinction between A.M. and P.M. An example is Japanese, in which the A.M. and P.M. designators differ in the second character instead of the first character. </para>
          <para>For cultures that do not use an A.M. designator, this property returns an empty string.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string designator for hours that are "ante meridiem" (before noon).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property accepts only calendars that are valid for the culture that is associated with the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. The <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" /> property specifies the calendars that can be used by a particular culture, and the <see cref="P:System.Globalization.CultureInfo.Calendar" /> property specifies the default calendar for the culture.</para>
          <para>Changing the value of this property affects the following properties as well: <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />, <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />, <see cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />, <see cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />, <see cref="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />, <see cref="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />, <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />, <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />, <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />, <see cref="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />, and <see cref="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />.</para>
          <para>For example, if the culture of the current thread is Japanese, this property accepts <see cref="T:System.Globalization.JapaneseCalendar" />, <see cref="F:System.Globalization.GregorianCalendarTypes.Localized" /> <see cref="T:System.Globalization.GregorianCalendar" />, or <see cref="F:System.Globalization.GregorianCalendarTypes.USEnglish" /> <see cref="T:System.Globalization.GregorianCalendar" />. When the <see cref="T:System.Globalization.JapaneseCalendar" /> is used, the default long date specifier is "gg y'\x5e74'M'\x6708'd'\x65e5'". When the <see cref="F:System.Globalization.GregorianCalendarTypes.Localized" /> <see cref="T:System.Globalization.GregorianCalendar" />, is used, the default long date specifier is "yyyy'\x5e74'M'\x6708'd'\x65e5'".</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the calendar to use for the current culture.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual object Clone()" />
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The clone is writable even if the original <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only. Therefore, the properties of the clone can be modified with user-defined patterns.</para>
          <para>A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a shallow copy of the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new <see cref="T:System.Globalization.DateTimeFormatInfo" /> object copied from the original <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="ILASM" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo { public hidebysig static specialname class System.Globalization.DateTimeFormatInfo get_CurrentInfo() }" />
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance based on the
   culture of the current thread.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> property reflects user overrides.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that formats values based on the current culture.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="ILASM" Value=".property string DateSeparator { public hidebysig specialname instance string get_DateSeparator() public hidebysig specialname instance void set_DateSeparator(string value) }" />
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>The <see cref="T:System.String" /> to use to separate the year, month and day components of a date.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If a custom format string includes the "/" format specifier, the <see cref="M:System.DateTime.ToString" /> method displays the value of <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> in place of the "/" in the result string.</para>
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> property defines the string that replaces the date separator ("/" custom date and time format specifier) in a result string in a formatting operation. It also defines the date separator string in a parsing operation. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string that separates the components of a date, that is, the year, month, and day.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="ILASM" Value=".property class System.String[] DayNames { public hidebysig specialname instance class System.String[] get_DayNames() public hidebysig specialname instance void set_DayNames(class System.String[] value) }" />
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A one-dimensional array of type <see cref="T:System.String" /> containing the full names of the days of the week.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is not an array with exactly 7 elements.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If setting this property, the array must be one-dimensional and must have exactly seven elements.</para>
          <para>If a custom format string includes the "dddd" format specifier, the <see cref="M:System.DateTime.ToString" /> method includes the value of the appropriate <see cref="P:System.Globalization.DateTimeFormatInfo.DayNames" /> member in place of "dddd" in the result string.</para>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a one-dimensional string array that contains the culture-specific full names of the days of the week.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the first day of the week.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="ILASM" Value=".property string FullDateTimePattern { public hidebysig specialname instance string get_FullDateTimePattern() public hidebysig specialname instance void set_FullDateTimePattern(string value) }" />
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" /> containing the format pattern for a long date and long time value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The "F" standard format string is an alias for the <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" /> property. In other words, the custom format string assigned to this property defines the format of the result string for the "F" standard format string. For more information, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>.</para>
          <para>The value of the <see cref="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" /> property is generated dynamically by concatenating the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />  and <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> properties separated by a space. This dynamic assignment occurs under the following conditions: </para>
          <list type="bullet">
            <item>
              <para>If the property value is retrieved before it has been explicitly set. </para>
            </item>
            <item>
              <para>When the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property changes. </para>
            </item>
            <item>
              <para>When the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> property changes. </para>
            </item>
          </list>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a long date and long time value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the default invariant <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, this method returns a string from the <see cref="T:System.Globalization.GregorianCalendar" />: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="dayofweek" /> </para>
                </term>
                <description>
                  <para>Return Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Sunday </para>
              </term>
              <description>
                <para>"Sun" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Monday </para>
              </term>
              <description>
                <para>"Mon" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Tuesday </para>
              </term>
              <description>
                <para>"Tue" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Wednesday </para>
              </term>
              <description>
                <para>"Wed" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Thursday </para>
              </term>
              <description>
                <para>"Thu" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Friday </para>
              </term>
              <description>
                <para>"Fri" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Saturday </para>
              </term>
              <description>
                <para>"Sat" </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The culture-specific abbreviated name of the day of the week represented by <paramref name="dayofweek" />.</para>
        </returns>
        <param name="dayofweek">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.DayOfWeek" /> value. </param>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The era name is the name a calendar uses to refer to a period of time reckoned from a fixed point or event. For example, "A.D." or "C.E." is the current era in the Gregorian calendar.</para>
          <para>The valid values for <paramref name="era" /> are listed in the <see cref="P:System.Globalization.Calendar.Eras" /> property of the appropriate class derived from <see cref="T:System.Globalization.Calendar" />. For example: <see cref="P:System.Globalization.JapaneseCalendar.Eras" /> displays a list of eras that are supported by this implementation.</para>
          <para>In the <see cref="T:System.Globalization.JapaneseCalendar" /> class, the abbreviated era name is the first character of the full era name. This character is either the single-character case-insensitive Latin alphabet abbreviation or the single-character Kanji abbreviation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string containing the abbreviated name of the specified era, if an abbreviation exists.</para>
          <para>-or- </para>
          <para>A string containing the full name of the era, if an abbreviation does not exist.</para>
        </returns>
        <param name="era">
          <attribution license="cc4" from="Microsoft" modified="false" />The integer representing the era. </param>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month)" />
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 13.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the default invariant <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, this method returns a string from the <see cref="T:System.Globalization.GregorianCalendar" /> object. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="month" /> </para>
                </term>
                <description>
                  <para>Return Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>"Jan" </para>
              </description>
            </item>
            <item>
              <term>
                <para>2 </para>
              </term>
              <description>
                <para>"Feb" </para>
              </description>
            </item>
            <item>
              <term>
                <para>3 </para>
              </term>
              <description>
                <para>"Mar" </para>
              </description>
            </item>
            <item>
              <term>
                <para>4 </para>
              </term>
              <description>
                <para>"Apr" </para>
              </description>
            </item>
            <item>
              <term>
                <para>5 </para>
              </term>
              <description>
                <para>"May" </para>
              </description>
            </item>
            <item>
              <term>
                <para>6 </para>
              </term>
              <description>
                <para>"Jun" </para>
              </description>
            </item>
            <item>
              <term>
                <para>7 </para>
              </term>
              <description>
                <para>"Jul" </para>
              </description>
            </item>
            <item>
              <term>
                <para>8 </para>
              </term>
              <description>
                <para>"Aug" </para>
              </description>
            </item>
            <item>
              <term>
                <para>9 </para>
              </term>
              <description>
                <para>"Sep" </para>
              </description>
            </item>
            <item>
              <term>
                <para>10 </para>
              </term>
              <description>
                <para>"Oct" </para>
              </description>
            </item>
            <item>
              <term>
                <para>11 </para>
              </term>
              <description>
                <para>"Nov" </para>
              </description>
            </item>
            <item>
              <term>
                <para>12 </para>
              </term>
              <description>
                <para>"Dec" </para>
              </description>
            </item>
            <item>
              <term>
                <para>13 </para>
              </term>
              <description>
                <para>"" </para>
              </description>
            </item>
          </list>
          <para>
            <see cref="T:System.Globalization.Calendar" /> objects can accommodate calendars with 13 months. For 12-month calendars, the empty string is always returned as the name of the 13th month.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The culture-specific abbreviated name of the month represented by <paramref name="month" />.</para>
        </returns>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />An integer from 1 through 13 representing the name of the month to retrieve. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns an array that contains all custom format strings that correspond to standard format strings. See <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> for a list of the standard format strings.</para>
          <para>You can use the custom format strings in the array returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" /> method in formatting operations. However, if you do, the string representation of a date and time value returned in that formatting operation cannot always be parsed successfully by the Parse and TryParse methods. Therefore, you cannot assume that the custom format strings returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" /> method can be used to round-trip date and time values. The following example illustrates this problem. It retrieves a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that contains formatting information for the Italy (Italian) culture. It passes each custom format string in the array returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" /> method to the <see cref="M:System.DateTime.ToString(System.String)" /> method to create the string representation of a date and time. This example then attempts to parse this value by calling the <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> method. As the output from the example shows, some of the custom format strings do not produce a date and time value that successfully round-trips.</para>
          <para>code reference: System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1</para>
          <para>To parse the string representation of a date and time that can be expressed in a number of predefined custom formats, call one of the following methods: </para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
              </para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
              </para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
              </para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
              </para>
            </item>
          </list>
          <para>The custom format strings in the array returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" /> method depends on the current calendar of the culture for which the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object supplies formatting information. If the calendar changes, the array returned by this method also changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns all the standard patterns in which date and time values can be formatted.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An array that contains the standard patterns in which date and time values can be formatted.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns an array containing the custom format strings that correspond to a particular standard format string. See <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> for a list of the standard format strings.</para>
          <para>You can use the custom format strings in the array returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" /> method in formatting operations. However, if you do, the string representation of a date and time value returned in that formatting operation cannot always be parsed successfully by the Parse and TryParse methods. Therefore, you cannot assume that the custom format strings returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" /> method can be used to round-trip date and time values. The following example illustrates this problem. It retrieves a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that contains formatting information for the Russia (Russian) culture. It calls the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" /> method for each standard format string, and then passes each custom format string in the returned array to the <see cref="M:System.DateTime.ToString(System.String)" /> method to create the string representation of a date and time. This example then attempts to parse this value by calling the <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> method. As the output from the example shows, some of the custom format strings do not produce a date and time value that successfully round-trips.</para>
          <para>code reference: System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2</para>
          <para>To parse the string representation of a date and time that can be expressed in a number of predefined custom formats, call one of the following methods: </para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
              </para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
              </para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
              </para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
              </para>
            </item>
          </list>
          <para>The custom format strings in the array returned by the <see cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" /> method depends on the current calendar of the culture for which the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object supplies formatting information. If the calendar changes, the array returned by this method also changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns all the patterns in which date and time values can be formatted using the specified standard format string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An array containing the standard patterns in which date and time values can be formatted using the specified format string.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A standard format string. </param>
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the default invariant <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, this method returns a string from the <see cref="T:System.Globalization.GregorianCalendar" /> object.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="dayofweek" /> </para>
                </term>
                <description>
                  <para>Return Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Sunday </para>
              </term>
              <description>
                <para>"Sunday" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Monday </para>
              </term>
              <description>
                <para>"Monday" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Tuesday </para>
              </term>
              <description>
                <para>"Tuesday" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Wednesday </para>
              </term>
              <description>
                <para>"Wednesday" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Thursday </para>
              </term>
              <description>
                <para>"Thursday" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Friday </para>
              </term>
              <description>
                <para>"Friday" </para>
              </description>
            </item>
            <item>
              <term>
                <para>Saturday </para>
              </term>
              <description>
                <para>"Saturday" </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The culture-specific full name of the day of the week represented by <paramref name="dayofweek" />.</para>
        </returns>
        <param name="dayofweek">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.DayOfWeek" /> value. </param>
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance int32 GetEra(string eraName)" />
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eraName" /> is a null reference.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The era name is the name a calendar uses to refer to a period of time reckoned from a fixed point or event. For example, "A.D." or "C.E." is the current era in the Gregorian calendar.</para>
          <para>The comparison with <paramref name="eraName" /> is case-insensitive, for example, "A.D." is equivalent to "a.d.".</para>
          <para>
            <see cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" /> ignores punctuation in abbreviated era names, only if the <see cref="T:System.Globalization.GregorianCalendar" /> is selected in <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> and the culture uses "A.D." as the era name, that is, "A.D." is equivalent to "AD".</para>
          <para>
            <see cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" /> compares <paramref name="eraName" /> with the full era name returned by <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> and with the abbreviated era name returned by <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the integer representing the specified era.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer representing the era, if <paramref name="eraName" /> is valid; otherwise, -1.</para>
        </returns>
        <param name="eraName">
          <attribution license="cc4" from="Microsoft" modified="false" />The string containing the name of the era. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string GetEraName(int32 era)" />
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> does not represent a valid era in calendar for the current thread.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The era name is the name a calendar uses to refer to a period of time reckoned from a fixed point or event. For example, "A.D." or "C.E." is the current era in the Gregorian calendar.</para>
          <para>The valid values for <paramref name="era" /> are listed in the <see cref="P:System.Globalization.Calendar.Eras" /> property of the appropriate class derived from <see cref="T:System.Globalization.Calendar" />. For example: <see cref="P:System.Globalization.JapaneseCalendar.Eras" /> displays a list of eras that are supported by this implementation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the string containing the name of the specified era.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string containing the name of the era.</para>
        </returns>
        <param name="era">
          <attribution license="cc4" from="Microsoft" modified="false" />The integer representing the era. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual object GetFormat(class System.Type formatType)" />
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Format(String, IFormatProvider) method supported by the base data types invoke this method when the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is passed as the <see cref="T:System.IFormatProvider" /> parameter. This method implements <see cref="M:System.IFormatProvider.GetFormat(System.Type)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an object of the specified type that provides a date and time  formatting service.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current  object, if <paramref name="formatType" /> is the same as the type of the current <see cref="T:System.Globalization.DateTimeFormatInfo" />; otherwise, null.</para>
        </returns>
        <param name="formatType">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the required formatting service. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method of <paramref name="formatProvider" /> using an <see cref="T:System.Globalization.DateTimeFormatInfo" /> object as the <paramref name="Type" /> parameter. If <paramref name="formatProvider" /> is null or if <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> returns null, this method returns <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />.</para>
          <para>Your application can get a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object for a specific culture using one of the following methods: </para>
          <list type="bullet">
            <item>
              <para>The <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property.</para>
            </item>
            <item>
              <para>The <see cref="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" /> method, where <paramref name="provider" /> is a <see cref="T:System.Globalization.CultureInfo" /> object.</para>
            </item>
          </list>
          <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object can be created only for the invariant culture or for specific cultures, not for neutral cultures. </para>
          <para>For more information about the invariant culture, specific cultures, and neutral cultures, see the <see cref="T:System.Globalization.CultureInfo" /> class description.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with <see cref="T:System.IFormatProvider" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.IFormatProvider" /> that gets the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</param>
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string GetMonthName(int32 month)" />
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 13.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For the default invariant <see cref="T:System.Globalization.DateTimeFormatInfo" /> object, this method returns a string from the <see cref="T:System.Globalization.GregorianCalendar" /> object.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="month" /> </para>
                </term>
                <description>
                  <para>Return Value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>"January" </para>
              </description>
            </item>
            <item>
              <term>
                <para>2 </para>
              </term>
              <description>
                <para>"February" </para>
              </description>
            </item>
            <item>
              <term>
                <para>3 </para>
              </term>
              <description>
                <para>"March" </para>
              </description>
            </item>
            <item>
              <term>
                <para>4 </para>
              </term>
              <description>
                <para>"April" </para>
              </description>
            </item>
            <item>
              <term>
                <para>5 </para>
              </term>
              <description>
                <para>"May" </para>
              </description>
            </item>
            <item>
              <term>
                <para>6 </para>
              </term>
              <description>
                <para>"June" </para>
              </description>
            </item>
            <item>
              <term>
                <para>7 </para>
              </term>
              <description>
                <para>"July" </para>
              </description>
            </item>
            <item>
              <term>
                <para>8 </para>
              </term>
              <description>
                <para>"August" </para>
              </description>
            </item>
            <item>
              <term>
                <para>9 </para>
              </term>
              <description>
                <para>"September" </para>
              </description>
            </item>
            <item>
              <term>
                <para>10 </para>
              </term>
              <description>
                <para>"October" </para>
              </description>
            </item>
            <item>
              <term>
                <para>11 </para>
              </term>
              <description>
                <para>"November" </para>
              </description>
            </item>
            <item>
              <term>
                <para>12 </para>
              </term>
              <description>
                <para>"December" </para>
              </description>
            </item>
            <item>
              <term>
                <para>13 </para>
              </term>
              <description>
                <para>"" </para>
              </description>
            </item>
          </list>
          <para>
            <see cref="T:System.Globalization.Calendar" /> objects can accommodate calendars with 13 months. For 12-month calendars, the empty string is always returned as the name of the 13th month.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the culture-specific full name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The culture-specific full name of the month represented by <paramref name="month" />.</para>
        </returns>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />An integer from 1 through 13 representing the name of the month to retrieve. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains the shortest abbreviated day name for a specified day of the week associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The abbreviated name of the week that corresponds to the <paramref name="dayOfWeek" /> parameter.</para>
        </returns>
        <param name="dayOfWeek">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.DayOfWeek" /> values.</param>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="ILASM" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo { public hidebysig static specialname class System.Globalization.DateTimeFormatInfo get_InvariantInfo() }" />
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property does not change, regardless of the current culture. Because of this, the invariant culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object can be used to produce consistent, culture-independent results in parsing and formatting operations on data that is multi-cultural. For example, if date and time data from multiple cultures is to be persisted in string form, it can be formatted by using the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object of the invariant culture and saved. It can then be parsed by using the invariant culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that is culture-independent (invariant).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="ILASM" Value=".property bool IsReadOnly { public hidebysig specialname instance bool get_IsReadOnly() }" />
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>
            <see langword="true" /> if the <see cref="T:System.Globalization.DateTimeFormatInfo" /> is read-only; otherwise, <see langword="false" />.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="ILASM" Value=".property string LongDatePattern { public hidebysig specialname instance string get_LongDatePattern() public hidebysig specialname instance void set_LongDatePattern(string value) }" />
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" /> containing the format pattern for a long date value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "D" standard format string. The following example illustrates the relationships among the following: the "D" standard format string, the custom format string returned by the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property, and  the culture-specific representation of a date. </para>
          <para>code reference: System.Globalization.DateTimeFormatInfo.LongDatePattern#2</para>
          <para>See <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format> for individual custom format specifiers that can be combined to construct custom format strings such as "dddd, dd MMMM yyyy".</para>
          <para>You should set the date separator in the long date pattern to an exact string instead of using the date separator placeholder. For example, to obtain the pattern MM-DD-yyyy, set the long date pattern to "MM-DD-yyyy".</para>
          <para>The value of this property may change if the calendar used by a culture changes. For instance, the following example shows how the<see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property of a <see cref="T:System.Globalization.CultureInfo" /> object that represents the Arabic (Syria) culture changes when the <see cref="T:System.Globalization.Calendar" /> object used by the culture changes.</para>
          <para>code reference: System.Globalization.DateTimeFormatInfo.LongDatePattern#3</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a long date value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="ILASM" Value=".property string LongTimePattern { public hidebysig specialname instance string get_LongTimePattern() public hidebysig specialname instance void set_LongTimePattern(string value) }" />
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" /> containing the format pattern for a long time value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "T" standard format string.</para>
          <para>We recommend that you set the time separator in the long time pattern to an exact string instead of using the time separator placeholder. For example, to obtain the pattern h-mm-ss, set the long date pattern to "h-mm-ss".</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a long time value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="ILASM" Value=".property string MonthDayPattern { public hidebysig specialname instance string get_MonthDayPattern() public hidebysig specialname instance void set_MonthDayPattern(string value) }" />
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" /> containing the format pattern for a month and day value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "m" and "M" standard format strings.</para>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
          <para>We recommend that you set the date separator in the month and day pattern to an exact string instead of using the date separator placeholder. For example, to obtain the pattern MM-DD, set the month and day pattern to "MM-DD".</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a month and day value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In some languages, a month name that is part of a date appears in the genitive case. For example, a date in the Russian (Russia) or "ru-RU", culture consists of the day number and the genitive month name, such as 1 Января.</para>
          <para>If you set the <see cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" /> property, you must also set the <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a string array of month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="ILASM" Value=".property class System.String[] MonthNames { public hidebysig specialname instance class System.String[] get_MonthNames() public hidebysig specialname instance void set_MonthNames(class System.String[] value) }" />
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A one-dimensional array of type <see cref="T:System.String" />
containing the full names of the months. For
cultures with 12-month calendars the 13th element of the array is an empty string.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is not an array with exactly 13 elements.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this property is set, the array must be one-dimensional and must have exactly 13 elements. <see cref="T:System.Globalization.Calendar" /> objects accommodate calendars with 13 months.</para>
          <para>If you set the <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" /> property, you must also set the <see cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" /> property.</para>
          <para>If the custom pattern includes the format pattern "MMMM", <see cref="M:System.DateTime.ToString" /> displays the value of <see cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" /> in place of the "MMMM" in the format pattern.</para>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the native name of the calendar associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="ILASM" Value=".property string PMDesignator { public hidebysig specialname instance string get_PMDesignator() public hidebysig specialname instance void set_PMDesignator(string value) }" />
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>The <see cref="T:System.String" /> designator for hours that are after noon.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" /> property is used for all times from 12:00:00 (noon) to 23:59:59.999.</para>
          <para>If the custom pattern includes the format pattern "tt" and the time is after noon, <see cref="M:System.DateTime.ToString" /> displays the value of <see cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" /> in place of the "tt" in the format pattern. If the custom pattern includes the format pattern "t", only the first character of <see cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" /> is displayed. Your application should use "tt" for languages for which it is necessary to maintain the distinction between AM and PM. An example is Japanese, for which the AM and PM designators differ in the second character instead of the first character. </para>
          <para>For cultures that do not use a PM designator, this property returns an empty string.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string designator for hours that are "post meridiem" (after noon).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi)" />
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dtfi" /> is a null reference.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This wrapper prevents any modifications to <paramref name="dtfi" />. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</para>
        </returns>
        <param name="dtfi">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object to wrap. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "r" and "R" standard format strings.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" />
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" /> method defines the custom format strings that correspond to a particular standard date and time format string. If a call to a date and time formatting method includes the standard date and time format string specified by <paramref name="format" />, the method uses the first element in the <paramref name="patterns" /> array to define the format of the resulting string.</para>
          <block subset="none" type="note">
            <para>The Parse and TryParse methods do not fully iterate all strings in <paramref name="patterns" /> when parsing the string representation of a date and time. If you require a date and time string to have particular formats in a parsing operation, you should pass the array of valid formats to the <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />, <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />, <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />, or <see cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" /> method.</para>
          </block>
          <para>You can define custom format strings that correspond to the "d", "D", "t", "T", and "y" or "Y" standard date and time format strings. If the value of <paramref name="format" /> is any other standard format string, the <see cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" /> method throws an <see cref="T:System.ArgumentException" />.</para>
          <para>If your custom date and time format strings include date separators, you should explicitly specify a date separator instead of relying on the parsing or formatting method that replaces the "/" custom format specifier with a particular date separator. For example, to obtain the pattern MM-DD-yyyy, use the pattern "MM-DD-yyyy".</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the custom date and time format strings that correspond to a specified standard format string.</para>
        </summary>
        <param name="patterns">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of custom format strings.</param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />The standard format string associated with the custom format strings specified in the <paramref name="patterns" /> parameter. </param>
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="ILASM" Value=".property string ShortDatePattern { public hidebysig specialname instance string get_ShortDatePattern() public hidebysig specialname instance void set_ShortDatePattern(string value) }" />
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" /> containing the format pattern for a short date value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "d" standard format string.</para>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a short date value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a string array of the shortest unique abbreviated day names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="ILASM" Value=".property string ShortTimePattern { public hidebysig specialname instance string get_ShortTimePattern() public hidebysig specialname instance void set_ShortTimePattern(string value) }" />
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.String" /> containing the format pattern for a short time value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "t" standard format string.</para>
          <para>We recommend that you set the time separator in the short time pattern to an exact string instead of using the time separator placeholder. For example, to obtain the pattern h-mm-ss, set the short time pattern to "h-mm-ss".</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a short time value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "s" standard format string.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the custom format string for a sortable date and time value.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="ILASM" Value=".property string TimeSeparator { public hidebysig specialname instance string get_TimeSeparator() public hidebysig specialname instance void set_TimeSeparator(string value) }" />
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>The <see cref="T:System.String" /> to use to separate the components of time; that is, the hour, the minutes and the seconds.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the custom pattern includes the format pattern ":", <see cref="M:System.DateTime.ToString" /> displays the value of <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> in place of the ":" in the format pattern.</para>
          <para>The time separator is derived from the <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" /> property. We recommend that you set the time separator in short or long time patterns to an exact string instead of using the time separator placeholder. For example, to obtain the pattern h-mm-ss, set the pattern to "h-mm-ss". This practice also enables you to set patterns such as "h'h 'mm'm 'ss's'" (3h 36m 12s) that include multiple types of separators. The <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> property defines the string that replaces the time separator (":" custom date and time format specifier) in a result string in a formatting operation. It also defines the time separator string in a parsing operation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string that separates the components of time, that is, the hour, minutes, and seconds.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" /> property defines the format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "u" standard format string. It can be used to display dates and times in a sortable order with the universal time designator "Z" at the end. The format is sortable because it uses leading zeros for year, month, day, hour, minute, and second. The custom format string ("yyyy'-'MM'-'dd HH':'mm':'ss'Z'") is the same regardless of culture or format provider.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the custom format string for a universal, sortable date and time string.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="ILASM" Value=".property string YearMonthPattern { public hidebysig specialname instance string get_YearMonthPattern() public hidebysig specialname instance void set_YearMonthPattern(string value) }" />
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> The format pattern for a year and month value.</para>
        </value>
        <exception cref="T:System.ArgumentNullException">The value specified for a set operation is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is read-only and a set operation was attempted. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" /> property defines the culture-specific format of date strings that are returned by calls to the <see cref="M:System.DateTime.ToString" /> and <see cref="M:System.DateTimeOffset.ToString" /> methods and by composite format strings that are supplied the "y" and "Y" standard format strings.</para>
          <para>This property is affected if the value of the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property changes.</para>
          <para>We recommend that you set the date separator in the year month pattern to an exact string instead of using the date separator placeholder. For example, to get the pattern MM-yyyy, set the year month pattern to "MM-yyyy".</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom format string for a year and month value.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>