<?xml version="1.0" encoding="utf-8"?>
<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo" FullNameSP="System_Globalization_CultureInfo" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public serializable CultureInfo extends System.Object" />
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <MemberOfLibrary>Reflection</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary preserve-mono="true">
      <para>Represents locale information used by all culture dependendent types and methods.</para>
    </summary>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Globalization.CultureInfo" /> class provides culture-specific information, such as the language, sublanguage, country/region, calendar, and conventions associated with a particular culture. This class also provides access to culture-specific instances of the <see cref="T:System.Globalization.DateTimeFormatInfo" />, <see cref="T:System.Globalization.NumberFormatInfo" />, <see cref="T:System.Globalization.CompareInfo" />, and <see cref="T:System.Globalization.TextInfo" /> objects. These objects contain the information required for culture-specific operations, such as casing, formatting dates and numbers, and comparing strings. The <see cref="T:System.Globalization.CultureInfo" /> class is used either directly or indirectly by classes that format, parse, or manipulate culture-specific data, such as <see cref="T:System.String" />, <see cref="T:System.DateTime" />, <see cref="T:System.DateTimeOffset" />, and the numeric types.</para>
      <format type="text/html">
        <h2>Culture Names and Identifiers</h2>
      </format>
      <para>The <see cref="T:System.Globalization.CultureInfo" /> class specifies a unique name for each culture, based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region. </para>
      <block subset="none" type="note">
        <para>When a culture name is passed to a class constructor or a method such as <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" /> or <see cref="T:System.Globalization.CultureInfo" />, its case is not significant.</para>
      </block>
      <para>The format for the culture name is languagecode2&gt;-country/regioncode2, where languagecode2 is the two-letter language code and country/regioncode2 is the two-letter subculture code. Examples include ja-JP for Japanese (Japan) and en-US for English (United States). In cases where a two-letter language code is not available, a three-letter code derived from ISO 639-2 is used. </para>
      <para>Note that some culture names also specify an ISO 15924 script. For example, Cyrl specifies the Cyrillic script and Latn specifies the Latin script. A culture name that includes a script uses the pattern languagecode2-scripttag-country/regioncode2. An example of this type of culture name is uz-Cyrl-UZ for Uzbek (Cyrillic, Uzbekistan). On Windows operating systems before Windows Vista, a culture name that includes a script uses the pattern languagecode2-country/regioncode2-scripttag, for example, uz-UZ-Cyrl for Uzbek (Cyrillic, Uzbekistan).</para>
      <para>A neutral culture is specified by only the two-letter lowercase language code. For example, fr specifies the neutral culture for French, and de specifies the neutral culture for German.</para>
      <block subset="none" type="note">
        <para>There are two culture names that contradict this rule. The cultures Chinese (Simplified), named zh-Hans, and Chinese (Traditional), named zh-Hant, are neutral cultures. The culture names represent the current standard and should be used unless you have a reason for using the older names zh-CHS and zh-CHT.</para>
      </block>
      <para>A culture identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed cultures. Your application can use predefined culture identifiers or define custom identifiers.</para>
      <para>Certain predefined culture names and identifiers are used by this and other classes in the <see cref="N:System.Globalization" /> namespace. Detailed culture information appears in the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
      <para>Remember that the culture names and identifiers represent only a subset of cultures that can be found on a particular computer. Windows versions or service packs can change the available cultures. Applications add custom cultures using the <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> class. Users add their own custom cultures using the Microsoft Locale Builder tool. Microsoft Locale Builder is written in managed code using the CultureAndRegionInfoBuilder class.</para>
      <para>Several distinct names are closely associated with a culture, notably the names associated with the following class members:</para>
      <list type="bullet">
        <item>
          <para>
            <see cref="M:System.Globalization.CultureInfo.ToString" />
          </para>
        </item>
        <item>
          <para>
            <see cref="P:System.Globalization.CultureInfo.Name" />
          </para>
        </item>
        <item>
          <para>
            <see cref="P:System.Globalization.CompareInfo.Name" />
          </para>
        </item>
      </list>
      <format type="text/html">
        <h2>Invariant, Neutral, and Specific Cultures</h2>
      </format>
      <para>The cultures are generally grouped into three sets: invariant cultures, neutral cultures, and specific cultures.</para>
      <para>An invariant culture is culture-insensitive. Your application specifies the invariant culture by name using an empty string ("") or by its identifier. <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> defines an instance of the invariant culture. It is associated with the English language but not with any country/region. It is used in almost any method in the Globalization namespace that requires a culture. </para>
      <para>A neutral culture is a culture that is associated with a language but not with a country/region. A specific culture is a culture that is associated with a language and a country/region. For example, fr is the neutral name for the French culture, and fr-FR is the name of the specific French (France) culture. Note that Chinese (Simplified) and Chinese (Traditional) are also considered neutral cultures.</para>
      <para>Creating an instance of a <see cref="T:System.Globalization.CompareInfo" /> class for a neutral culture is not recommended because the data it contains is arbitrary. To display and sort data, specify both the language and region. Additionally, the <see cref="P:System.Globalization.CompareInfo.Name" /> property of a <see cref="T:System.Globalization.CompareInfo" /> object created for a neutral culture returns only the country and does not include the region.</para>
      <para>The defined cultures have a hierarchy in which the parent of a specific culture is a neutral culture and the parent of a neutral culture is the invariant culture. The <see cref="P:System.Globalization.CultureInfo.Parent" /> property contains the neutral culture associated with a specific culture. Custom cultures should define the <see cref="P:System.Globalization.CultureInfo.Parent" /> property in conformance with this pattern.</para>
      <para>If the resources for a specific culture are not available in the operating system, the resources for the associated neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see <format type="text/html"><a href="B224D7C0-35F8-4E82-A705-DD76795E8D16">Resource Fallback Process</a></format>.</para>
      <para>The list of locales in the Windows API is slightly different from the list of cultures supported by the .NET Framework. If interoperability with Windows is required, for example, through the p/invoke mechanism, the application should use a specific culture that is defined for the operating system. Use of the specific culture ensures consistency with the equivalent Windows locale, which is identified with a locale identifier that is the same as <see cref="P:System.Globalization.CultureInfo.LCID" />.</para>
      <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> or a <see cref="T:System.Globalization.NumberFormatInfo" /> can be created only for the invariant culture or for specific cultures, not for neutral cultures.</para>
      <para>If <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> is the <see cref="T:System.Globalization.TaiwanCalendar" /> but the <see cref="P:System.Threading.Thread.CurrentCulture" /> is not set to zh-TW, then <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, and <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> return an empty string ("").</para>
      <format type="text/html">
        <h2>Custom Cultures</h2>
      </format>
      <para>In addition to the predefined cultures supported by the Windows operating system and the .NET Framework, the .NET Framework supports three types of custom cultures:</para>
      <list type="bullet">
        <item>
          <para>New cultures that supplement the cultures available in Windows or the .NET Framework. For example, an application could install a <see cref="T:System.Globalization.CultureInfo" /> object that represents the fj-FJ (or Fijan (Fiji)) culture on a system. </para>
        </item>
        <item>
          <para>Replacement cultures whose properties are different from the properties of the standard cultures supported by Windows and the .NET Framework. </para>
        </item>
        <item>
          <para>Standard cultures with user overrides. The user can use the <ui>Region and Language</ui> application in <ui>Control Panel</ui> to customize an existing culture's property values.</para>
        </item>
      </list>
      <block subset="none" type="note">
        <para>You can use the <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> class to define, save, and register custom cultures that either supplement or replace existing cultures. The <see cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" /> method creates a Locale Data Markup Language (LDML) file that can be used to install a custom culture on target systems.</para>
      </block>
      <para>Because the .NET Framework supports custom cultures, you should consider the following when working with culture-specific data: </para>
      <list type="bullet">
        <item>
          <para>Custom cultures can have values that exceed the ranges of the predefined cultures. For example, some cultures have unusually long month names, unexpected date or time formats, or other unusual data. </para>
        </item>
        <item>
          <para>When you display culture-specific data in the user interface, you should respect the user's customizations; for example, the user might want a 24-hour clock or a yyyyMMdd date format. </para>
        </item>
        <item>
          <para>Remember that custom cultures override default values. Therefore, you cannot consider culture data to be stable. Country names, number and date formats, and spellings may change in the future. If you want to serialize culture-sensitive data such as date and time strings to be passed to the date and time parsing functions, you should use the invariant culture or a specific <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">custom format string</a></format>.</para>
        </item>
      </list>
      <format type="text/html">
        <h2>Dynamic Culture Data</h2>
      </format>
      <para>Except for the invariant culture, culture data is dynamic. This is true even for the predefined cultures. For example, countries or regions adopt new currencies, change their spellings of words, or change their preferred calendar, and culture definitions change to track this.  Custom cultures are subject to change without notice, and any specific culture might be overridden by a custom replacement culture. Also, as discussed below, an individual user can override cultural preferences. Applications should always obtain culture data at run time.</para>
      <block subset="none" type="note">
        <para>When saving data, your application should use the invariant culture, a binary format, or a specific culture-independent format. Data saved according to the current values associated with a particular culture, other than the invariant culture, might become unreadable or might change in meaning if that culture changes.</para>
      </block>
      <format type="text/html">
        <h2>Culture and Threads</h2>
      </format>
      <para>When a new application thread is started, its current culture and current UI culture are defined by the current system culture, and not by the current thread culture. The following example illustrates the difference. It sets the current culture and current UI culture of an application thread to the French (France) culture (fr-FR). If the current culture is already fr-FR, the example sets it to the English (United States) culture (en-US). It displays three random numbers as currency values and then creates a new thread, which, in turn, displays three more random numbers as currency values. But as the output from the example shows, the currency values displayed by the new thread do not reflect the formatting conventions of the French (France) culture, unlike the output from the main application thread.</para>
      <para>code reference: System.Globalization.CultureInfo.Class.Thread#1</para>
      <para>In versions of the .NET Framework before the net_v45, the most common way to ensure that the main application thread shares the same culture with all other worker threads is to pass either the name of the application-wide culture or a <see cref="T:System.Globalization.CultureInfo" /> object that represents the application-wide culture to a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate. The following example uses this approach to ensure that the currency values displayed by two threads reflect the formatting conventions of the same culture. </para>
      <para>code reference: System.Globalization.CultureInfo.Class.Thread#2</para>
      <para>You can set the culture and UI culture of thread pool threads in a similar manner by calling the <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" /> method.</para>
      <para>Starting with the net_v45, you can set the culture and UI culture of all threads in an application domain more directly by assigning a <see cref="T:System.Globalization.CultureInfo" /> object that represents that culture to the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> and <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> properties. The following example uses these properties to ensure that all threads in the default application domain share the same culture.</para>
      <para>code reference: System.Globalization.CultureInfo.Class.Thread#3</para>
      <block subset="none" type="note">
        <para>Although the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> and <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> properties are static members, they define the default culture and default UI culture only for the application domain that is current at the time these property values are set. For more information, see the next section, <format type="text/html"><a href="#AppDomain">Culture and Application Domains</a></format>.</para>
      </block>
      <para>When you assign values to the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> and <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> properties, the culture and UI culture of the threads in the application domain also change if they have not explicitly been assigned a culture. However, these threads reflect the new culture settings only while they execute in the current application domain. If these threads execute in another application domain, their culture becomes the default culture defined for that application domain. As a result, we recommend that you always set the culture of the main application thread, and not rely on the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> and <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> properties to change it.</para>
      <format type="text/html">
        <a href="#AppDomain" />
      </format>
      <format type="text/html">
        <h2>Culture and Application Domains</h2>
      </format>
      <para>
        <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> and <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> are static properties that explicitly define a default culture only for the application domain that is current when the property value is set or retrieved. The following example sets the default culture and default UI culture in the default application domain to French (France), and then uses the <see cref="T:System.AppDomainSetup" /> class and the <see cref="T:System.AppDomainInitializer" /> delegate to set the default culture and UI culture in a new application domain to Russian (Russia). A single thread then executes two methods in each application domain. Note that the thread's culture and UI culture are not explicitly set; they are derived from the default culture and UI culture of the application domain in which the thread is executing. Note also that the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> and <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> properties return the default <see cref="T:System.Globalization.CultureInfo" /> values of the application domain that is current when the method call is made.</para>
      <para>code reference: System.Globalization.CultureInfo.Class.AppDomain#1</para>
      <para>For more information about cultures and application domains, see <format type="text/html"><a href="25d6c91b-3eb3-48e7-91cb-59503bec4c22">Application Domains and Threads</a></format>.</para>
      <format type="text/html">
        <h2>CultureInfo Object Serialization</h2>
      </format>
      <para>When a <see cref="T:System.Globalization.CultureInfo" /> object is serialized, all that is actually stored is <see cref="P:System.Globalization.CultureInfo.Name" /> and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" />. It is successfully de-serialized only in an environment where that <see cref="P:System.Globalization.CultureInfo.Name" /> has the same meaning. The following three examples show why this is not always the case:</para>
      <list type="bullet">
        <item>
          <para>If the <see cref="P:System.Globalization.CultureInfo.CultureTypes" /> property value is <see cref="F:System.Globalization.CultureTypes.WindowsOnlyCultures" />, and if that culture was first introduced in Windows Vista or a later version of the Windows operating system, it is not possible to de-serialize it on Windows XP. Similarly, if the culture was first introduced in Windows XP Service Pack 2, it is not possible to de-serialize it for a Windows XP system on which the culture has not been installed.</para>
        </item>
        <item>
          <para>If the <see cref="P:System.Globalization.CultureInfo.CultureTypes" /> value is <see cref="F:System.Globalization.CultureTypes.UserCustomCulture" />, and the computer on which it is de-serialized does not have this user custom culture installed, it is not possible to de-serialize it.</para>
        </item>
        <item>
          <para>If the <see cref="P:System.Globalization.CultureInfo.CultureTypes" /> value is <see cref="F:System.Globalization.CultureTypes.ReplacementCultures" />, and the computer on which it is de-serialized does not have this replacement culture, it de-serializes to the same name, but not all of the same characteristics. For example, if en-US is a replacement culture on computer A, but not on computer B, and if a <see cref="T:System.Globalization.CultureInfo" /> object referring to this culture is serialized on computer A and de-serialized on computer B, then none of the custom characteristics of the culture are transmitted. The culture de-serializes successfully, but with a different meaning.</para>
        </item>
      </list>
      <format type="text/html">
        <h2>Control Panel Overrides</h2>
      </format>
      <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. In general, your applications should honor these user overrides.</para>
      <para>If <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true and the specified culture matches the current culture of Windows, the <see cref="T:System.Globalization.CultureInfo" /> uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
      <format type="text/html">
        <h2>Alternate Sort Orders</h2>
      </format>
      <para>The Spanish (Spain) culture has two culture identifiers: 0x0C0A, which uses the default international sort order, and 0x040A, which uses the traditional sort order. If the <see cref="T:System.Globalization.CultureInfo" /> is constructed using the es-ES culture name, the new <see cref="T:System.Globalization.CultureInfo" /> uses the default international sort order. For the traditional sort order, the object is constructed using the name es-ES_tradnl. For information on other cultures that have alternate sorts, see <format type="text/html"><a href="A097ACF0-0BBE-46AC-8D54-B6F2BFD3FC6A">Using Alternate Sort Orders</a></format>.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Predefined culture identifiers are listed in the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>In most cases, the <paramref name="culture" /> parameter is mapped to the corresponding National Language Support (NLS) locale identifier. The value of the <paramref name="culture" /> parameter becomes the value of the <see cref="P:System.Globalization.CultureInfo.LCID" /> property of the new <see cref="T:System.Globalization.CultureInfo" />.</para>
          <para>The use of the locale name constructor <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)" /> is encouraged, as locale names are preferred to LCIDs. For custom locales the locale name is required.</para>
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>If the specified culture identifier matches the culture identifier of the current Windows culture, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> that uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" /> (for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />) the results of the methods and the values of the properties are undefined.</para>
          <para>If the specified culture identifier does not match the identifier of the current Windows culture, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> that uses the default values for the specified culture.</para>
          <para>The <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property is always set to true.</para>
          <para>For example, suppose that Arabic (Saudi Arabia) is the current Windows culture and the user has changed the calendar from Hijri to Gregorian.</para>
          <list type="bullet">
            <item>
              <para>With CultureInfo("0x0401") (culture name ar-SA), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.GregorianCalendar" /> (which is the user setting) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
            <item>
              <para>With CultureInfo("0x041E") (culture name th-TH), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> (which is the default calendar for th-TH) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
          </list>
          <para>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <see cref="T:System.Globalization.CultureInfo" /> constructor overload that accepts a <paramref name="useUserOverride" /> parameter and set it to false.</para>
          <block subset="none" type="note">
            <para>For backwards compatibility, a culture constructed using a <paramref name="culture" /> parameter of 0x0004 or 0x7c04 will have a <see cref="P:System.Globalization.CultureInfo.Name" /> property of zh-CHS or zh-CHT, respectively. You should instead prefer to construct the culture using the current standard culture names of zh-Hans or zh-Hant, unless you have a reason for using the older names.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by the culture identifier.</para>
        </summary>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier, <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object, or Windows-only culture identifier. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a list of predefined culture names, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>If <paramref name="name" /> is <see cref="F:System.String.Empty" />, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> property. </para>
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the culture identifier associated with <paramref name="name" /> matches the culture identifier of the current Windows culture, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> object that uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>If the culture identifier associated with <paramref name="name" /> does not match the culture identifier of the current Windows culture, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> object that uses the default values for the specified culture.</para>
          <para>The <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property is always set to true.</para>
          <para>For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.</para>
          <list type="bullet">
            <item>
              <para>With CultureInfo("ar-SA"), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.GregorianCalendar" /> (which is the user setting) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
            <item>
              <para>With CultureInfo("th-TH"), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> (which is the default calendar for th-TH) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
          </list>
          <para>The <see cref="P:System.Globalization.CultureInfo.LCID" /> property of the new <see cref="T:System.Globalization.CultureInfo" /> is set to the culture identifier associated with the specified name.</para>
          <para>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <see cref="T:System.Globalization.CultureInfo" /> constructor overload that accepts a <paramref name="useUserOverride" /> parameter and set it to false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />A predefined <see cref="T:System.Globalization.CultureInfo" /> name, <see cref="P:System.Globalization.CultureInfo.Name" /> of an existing <see cref="T:System.Globalization.CultureInfo" />, or Windows-only culture name. <paramref name="name" /> is not case-sensitive.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Predefined culture identifiers are listed in the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>In most cases, the <paramref name="culture" /> parameter is mapped to the corresponding National Language Support (NLS) locale identifier. The value of the <paramref name="culture" /> parameter becomes the value of the <see cref="P:System.Globalization.CultureInfo.LCID" /> property of the new <see cref="T:System.Globalization.CultureInfo" />.</para>
          <para>The use of the locale name constructor <see cref="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" /> is encouraged, as locale names are preferred to LCIDs. For custom locales the locale name is required.</para>
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>Applications should typically not disallow user overrides. Note that disallowing overrides does not itself guarantee data stability; see the blog entry <see cref="http://go.microsoft.com/fwlink/?LinkId=156850">Culture data shouldn't be considered stable (except for Invariant)</see>.</para>
          <para>If the <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property is set to true and the specified culture identifier matches the identifier of the current Windows culture, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> that uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>Otherwise, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> that uses the default values for the specified culture.</para>
          <para>The value of the <paramref name="useUserOverride" /> parameter becomes the value of the <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property.</para>
          <para>For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user has changed the calendar from Hijri to Gregorian.</para>
          <list type="bullet">
            <item>
              <para>With CultureInfo("0x0401", true) (culture name ar-SA), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.GregorianCalendar" /> (which is the user setting) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
            <item>
              <para>With CultureInfo("0x0401", false) (culture name ar-SA), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.HijriCalendar" /> (which is the default calendar for ar-SA) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to false.</para>
            </item>
            <item>
              <para>With CultureInfo("0x041E", true) (culture name th-TH), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> (which is the default calendar for th-TH) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
            <item>
              <para>With CultureInfo("0x041E", false) (culture name th-TH), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> (which is the default calendar for th-TH) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to false.</para>
            </item>
          </list>
          <para>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should set the <paramref name="useUserOverride" /> parameter to false.</para>
          <block subset="none" type="note">
            <para>For backwards compatibility, a culture constructed using a <paramref name="culture" /> parameter of 0x0004 or 0x7c04 will have a <see cref="P:System.Globalization.CultureInfo.Name" /> property of zh-CHS or zh-CHT, respectively. You should instead prefer to construct the culture using the current standard culture names of zh-Hans or zh-Hant, unless you have a reason for using the older names.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by the culture identifier and on the Boolean that specifies whether to use the user-selected culture settings from the system.</para>
        </summary>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier, <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object, or Windows-only culture identifier. </param>
        <param name="useUserOverride">
          <attribution license="cc4" from="Microsoft" modified="false" />A Boolean that denotes whether to use the user-selected culture settings (true) or the default culture settings (false). </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a list of predefined culture names, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>If <paramref name="name" /> is <see cref="F:System.String.Empty" />, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> property.</para>
          <para>The user might choose to override some of the values associated with the current Windows culture through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>Applications should typically not disallow user overrides. Note that disallowing overrides does not itself guarantee data stability; see the blog entry <see cref="http://go.microsoft.com/fwlink/?LinkId=156850">Culture data shouldn't be considered stable (except for Invariant)</see>.</para>
          <para>If the <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property is set to true and the culture identifier associated with the specified culture name matches the culture identifier of the current Windows culture, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> that uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>Otherwise, this constructor creates a <see cref="T:System.Globalization.CultureInfo" /> that uses the default values for the specified culture.</para>
          <para>The value of the <paramref name="useUserOverride" /> parameter becomes the value of the <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> property.</para>
          <para>For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.</para>
          <list type="bullet">
            <item>
              <para>With CultureInfo("ar-SA", true), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.GregorianCalendar" /> (which is the user setting) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
            <item>
              <para>With CultureInfo("ar-SA", false), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.HijriCalendar" /> (which is the default calendar for ar-SA) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to false.</para>
            </item>
            <item>
              <para>With CultureInfo("th-TH", true), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> (which is the default calendar for th-TH) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to true.</para>
            </item>
            <item>
              <para>With CultureInfo("th-TH", false), <see cref="P:System.Globalization.CultureInfo.Calendar" /> is set to <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> (which is the default calendar for th-TH) and <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is set to false.</para>
            </item>
          </list>
          <para>The <see cref="P:System.Globalization.CultureInfo.LCID" /> property of the new <see cref="T:System.Globalization.CultureInfo" /> is set to the culture identifier associated with the specified name.</para>
          <para>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should set the <paramref name="useUserOverride" /> parameter to false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name and on the Boolean that specifies whether to use the user-selected culture settings from the system.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />A predefined <see cref="T:System.Globalization.CultureInfo" /> name, <see cref="P:System.Globalization.CultureInfo.Name" /> of an existing <see cref="T:System.Globalization.CultureInfo" />, or Windows-only culture name. <paramref name="name" /> is not case-sensitive.</param>
        <param name="useUserOverride">
          <attribution license="cc4" from="Microsoft" modified="false" />A Boolean that denotes whether to use the user-selected culture settings (true) or the default culture settings (false). </param>
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>If <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true and the specified culture matches the current culture of Windows, the <see cref="T:System.Globalization.CultureInfo" /> uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>Therefore, if <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true, the value of this property might be different from the default calendar used by the culture.</para>
          <para>Your application changes the calendar used by the current <see cref="T:System.Globalization.CultureInfo" /> by setting the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />, which is an instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class. The new calendar must be one of the calendars listed in <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />. <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> also includes other properties that customize the date and time formatting associated with that <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default calendar used by the culture.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Information, such as the default culture and format patterns, is cached the first time it is requested. That information can change during the life of the <see cref="T:System.AppDomain" />, for example, when the user modifies the regional and language options portion of Control Panel. However, the <see cref="T:System.Globalization.CultureInfo" /> class does not automatically detect changes in the system settings. </para>
          <para>The <see cref="M:System.Globalization.CultureInfo.ClearCachedData" /> method clears the cache of <see cref="T:System.Globalization.CultureInfo" /> objects created by <see cref="Overload:System.Globalization.CultureInfo.GetCultureInfo" /> and refreshes the information in the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />, <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />, and <see cref="P:System.Globalization.RegionInfo.CurrentRegion" /> properties, based on the current system settings. </para>
          <para>The <see cref="M:System.Globalization.CultureInfo.ClearCachedData" /> method does not refresh the information in the <see cref="P:System.Threading.Thread.CurrentCulture" /> property for existing threads. However, future threads will have any new <see cref="T:System.Globalization.CultureInfo" /> property values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Refreshes cached culture-related information.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The clone is writable even if the original <see cref="T:System.Globalization.CultureInfo" /> is read-only. Therefore, the properties of the clone can be modified.</para>
          <para>A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</para>
          <para>The <see cref="M:System.Globalization.CultureInfo.Clone" /> method creates an enhanced shallow copy. The objects returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" />, <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />, <see cref="P:System.Globalization.CultureInfo.TextInfo" />, and <see cref="P:System.Globalization.CultureInfo.Calendar" /> properties are also copied. Consequently, the cloned <see cref="T:System.Globalization.CultureInfo" /> object can modify its copied properties without affecting the original <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a copy of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A copy of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>If <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true and the specified culture matches the current culture of Windows, the <see cref="T:System.Globalization.CultureInfo" /> uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.CompareInfo" /> that defines how to compare strings for the culture.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a list of predefined culture names, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>Cultures are grouped into three sets: the invariant culture, the neutral cultures, and the specific cultures. For more information, see the description of the <see cref="T:System.Globalization.CultureInfo" /> class.</para>
          <para>If the culture identifier of the specific culture returned by this method matches the culture identifier of the current Windows culture, this method creates a <see cref="T:System.Globalization.CultureInfo" /> object that uses the Windows culture overrides. The overrides include user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property and the <see cref="T:System.Globalization.NumberFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property.</para>
          <para>Although the <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" /> method name includes the term "Specific", remember that culture data can change between versions, or due to custom cultures, or because of user overrides. Use the invariant culture or binary or fixed forms for saving data.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Globalization.CultureInfo" /> that represents the specific culture that is associated with the specified name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents:</para>
          <para>The invariant culture, if <paramref name="name" /> is an empty string ("").</para>
          <para>-or- </para>
          <para>The specific culture associated with <paramref name="name" />, if <paramref name="name" /> is a neutral culture.</para>
          <para>-or- </para>
          <para>The culture specified by <paramref name="name" />, if <paramref name="name" /> is already a specific culture.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />A predefined <see cref="T:System.Globalization.CultureInfo" /> name or the name of an existing <see cref="T:System.Globalization.CultureInfo" /> object. <paramref name="name" /> is not case-sensitive.</param>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the culture types that pertain to the current <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>
        </value>
        <remarks preserve-mono="true">Initial value for each thread is determined using following rules. When <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> is set its value is used otherwise the framework uses <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture" /> method to map system locate to framework culture name. This operation may fail in rare cases when system locale is set to invalid value or to value which cannot be translated to framework culture name. In such case <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> values is used.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used by the current thread.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current UI culture is a per-thread property. That is, each thread has its own current UI culture. This read-only property is equivalent to retrieving the <see cref="T:System.Globalization.CultureInfo" /> object returned by the  System.Threading.Thread.CurrentThread.CurrentUICulture property. When a thread is started, its UI culture is initially determined as follows: </para>
          <list type="bullet">
            <item>
              <para>By retrieving the culture that is specified by the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property in the application domain in which the thread is executing, if the property value is not null.</para>
            </item>
            <item>
              <para>By calling the Windows GetUserDefaultUILanguage function.</para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>In the compact, the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property is read-only. The current UI culture is determined by the system's regional settings and cannot be changed programmatically. </para>
          </block>
          <para>To change the user interface culture used by a thread, set the <see cref="P:System.Threading.Thread.CurrentUICulture" /> property to the new culture. If you explicitly change a thread's UI culture in this way, that change persists if the thread crosses application domain boundaries.</para>
          <format type="text/html">
            <h2>Explicitly Setting the Current UI Culture</h2>
          </format>
          <para>Although the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property is read-only, you can change its value by explicitly setting the <see cref="P:System.Threading.Thread.CurrentUICulture" /> property of the current thread. The current UI culture can be set to either a specific culture (such as en-US or de-DE) or to a neutral culture (such as en or de). The following example sets the current UI culture to fr-FR or French (France).</para>
          <para>code reference: System.Globalization.CultureInfo.CurrentUICulture#1</para>
          <para>In a multithreaded application, you can explicitly set the UI culture of any thread by assigning a <see cref="T:System.Globalization.CultureInfo" /> object that represents that culture to the thread's <see cref="P:System.Threading.Thread.CurrentUICulture" /> property. When the UI culture of a thread is set explicitly, that thread retains the same culture even if it crosses application domain boundaries and executes code in another application domain.</para>
          <format type="text/html">
            <h2>Implicitly Setting the Current UI Culture</h2>
          </format>
          <para>When a thread, including the main application thread, is first created, by default its current UI culture is set as follows:</para>
          <list type="bullet">
            <item>
              <para>By using the culture defined by the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property for the current application domain if the  property value is not null. </para>
            </item>
            <item>
              <para>By using the system's default culture. On systems that use the Windows operating system, the common language runtime calls the Windows GetUserDefaultUILanguage function to set the current  UI culture. GetUserDefaultUILanguage returns the default UI culture set by the user. If the user has not set a default UI language, it returns the culture originally installed on the system.</para>
            </item>
          </list>
          <para>If the thread crosses application boundaries and executes code in another application domain, its culture is determined in the same way as that of a newly created thread.</para>
          <para>Note that if you set a specific UI culture that is different from the system-installed UI culture or the user's preferred UI culture, and your application starts multiple threads, the current UI culture of those threads will be the culture returned by the GetUserDefaultUILanguage function, unless you assign a culture to the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property in the application domain in which the thread is executing.</para>
          <format type="text/html">
            <h2>Security Considerations</h2>
          </format>
          <para>Changing the culture of the current thread requires a <see cref="T:System.Security.Permissions.SecurityPermission" /> permission with the <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /> value set.</para>
          <block subset="none" type="note">
            <para>Manipulating threads is dangerous because of the security state associated with threads. Therefore, this permission should be given only to trustworthy code, and then only as necessary. You cannot change thread culture in semi-trusted code. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <format type="text/html">
            <h2>Overrides</h2>
          </format>
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>If <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true and the specified culture matches the current culture of Windows, the <see cref="T:System.Globalization.CultureInfo" /> uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>The value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property and the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property is not calculated until your application accesses the property. If the user can change the current culture to a new culture while the application is running and then the application accesses the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> or <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, the application retrieves the defaults for the new culture instead of the overrides for the original culture. To preserve the overrides for the original current culture, the application should access the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> and <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> properties before changing the current culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a <see cref="T:System.Globalization.DateTimeFormatInfo" /> that defines the culturally appropriate format of displaying dates and times.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In the net_v40_long and previous versions, by default, the culture of all threads is set to the Windows system culture. For applications whose current culture differs from the default system culture, this behavior is often undesirable. In the net_v45, the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> property enables an application to define the default culture of all threads in an application domain.</para>
          <block subset="none" type="note">
            <para>If you have not explicitly set the culture of any existing threads executing in an application domain, setting the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread, and not rely on the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> property to define the culture of the main application thread.</para>
          </block>
          <para>Unless it is set explicitly, the value of the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" /> property is null, and the culture of threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.</para>
          <para>For more information about cultures, threads, and application domains, see the "Culture and Threads" and "Culture and Application Domains" sections in the <see cref="T:System.Globalization.CultureInfo" /> class topic.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the default culture for threads in the current application domain.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In the net_v40_long and previous versions, by default, the UI culture of all threads is set to the Windows system culture. For applications whose current UI culture differs from the default system culture, this behavior is often undesirable. In the net_v45, the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property lets you define the default UI culture of all threads in an application domain.</para>
          <block subset="none" type="note">
            <para>If you have not explicitly set the UI culture of any existing threads executing in an application domain, setting the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread and do not rely on the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property to define the culture of the main application thread.</para>
          </block>
          <para>Unless it is set explicitly, the value of the <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" /> property is null, and the current culture of all threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.</para>
          <para>For more information about cultures, threads, and application domains, see the "Culture and Threads" and "Culture and Application Domains" sections in the <see cref="T:System.Globalization.CultureInfo" /> class topic.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the default UI culture for threads in the current application domain.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property represents the localized name of the <see cref="T:System.Globalization.CultureInfo" /> object. </para>
          <para>Culture names may vary due to scripting or formatting conventions. You should use the returned name for display, and not attempt to parse it.</para>
          <para>If a custom culture is created by means of the <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> class, the <see cref="P:System.Globalization.CultureInfo.DisplayName" /> property is initialized to the value of the <see cref="P:System.Globalization.CultureInfo.NativeName" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the full localized culture name. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For example, the <see cref="P:System.Globalization.CultureInfo.EnglishName" /> for the specific culture name en-US is "English (United States)".</para>
          <para>The value of this property is the same, regardless of the language version of the .NET Framework.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the culture name in the format languagefull [country/regionfull] in English.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method overrides <see cref="M:System.Object.Equals(System.Object)" />.</para>
          <para>Two <see cref="T:System.Globalization.CultureInfo" /> objects are considered equal if their <see cref="P:System.Globalization.CultureInfo.Name" /> and <see cref="P:System.Globalization.CultureInfo.CompareInfo" /> properties are equal.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified object is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="value" /> is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />; otherwise, false.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare with the current <see cref="T:System.Globalization.CultureInfo" />. </param>
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Languages such as Arabic, Hebrew, Urdu, and Syriac are based on bidirectional text. Windows applications, which have a graphical user interface, support bidirectional languages. However, console applications, which employ the text user interface of the operating system console, do not provide bidirectional support. Therefore, if you localize a console application to Arabic or Hebrew, your application displays unreadable text on the console screen. </para>
          <para>The user interface culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture. For example, the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property returns an Arabic culture for an Arabic operating system. Use the <see cref="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" /> method to retrieve a culture suitable for a console application user interface. After your application retrieves the fallback user interface culture, it should assign the culture to the current user interface culture of the current thread. For more information, see the "Explicitly Setting the Current UI Culture" section of the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</para>
          <para>The following are predefined cultures that have a different fallback user interface culture name from the predefined culture name. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Predefined culture</para>
                </term>
                <description>
                  <para>Culture name</para>
                </description>
                <description>
                  <para>Fallback user interface culture name</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Amharic</para>
              </term>
              <description>
                <para>am</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Amharic (Ethiopia)</para>
              </term>
              <description>
                <para>am-ET</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>(neutral Arabic)</para>
              </term>
              <description>
                <para>ar</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (U.A.E.)</para>
              </term>
              <description>
                <para>ar-AE</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Bahrain)</para>
              </term>
              <description>
                <para>ar-BH</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Algeria)</para>
              </term>
              <description>
                <para>ar-DZ</para>
              </description>
              <description>
                <para>fr-FR</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Egypt)</para>
              </term>
              <description>
                <para>ar-EG</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Iraq)</para>
              </term>
              <description>
                <para>ar-IQ</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Jordan)</para>
              </term>
              <description>
                <para>ar-JO</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Kuwait)</para>
              </term>
              <description>
                <para>ar-KW</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Lebanon)</para>
              </term>
              <description>
                <para>ar-LB</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Libya)</para>
              </term>
              <description>
                <para>ar-LY</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Morocco)</para>
              </term>
              <description>
                <para>ar-MA</para>
              </description>
              <description>
                <para>fr-FR</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Oman)</para>
              </term>
              <description>
                <para>ar-OM</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Qatar)</para>
              </term>
              <description>
                <para>ar-QA</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Saudi Arabia)</para>
              </term>
              <description>
                <para>ar-SA</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Syria)</para>
              </term>
              <description>
                <para>ar-SY</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Tunisia)</para>
              </term>
              <description>
                <para>ar-TN </para>
              </description>
              <description>
                <para>fr-FR</para>
              </description>
            </item>
            <item>
              <term>
                <para>Arabic (Yemen)</para>
              </term>
              <description>
                <para>ar-YE</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Assamese</para>
              </term>
              <description>
                <para>as</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Assamese (India)</para>
              </term>
              <description>
                <para>as-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Bengali</para>
              </term>
              <description>
                <para>bn</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Bengali (Bangladesh)</para>
              </term>
              <description>
                <para>bn-BD</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Bengali (India)</para>
              </term>
              <description>
                <para>bn-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Tibetan</para>
              </term>
              <description>
                <para>bo</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Tibetan (PRC)</para>
              </term>
              <description>
                <para>bo-CN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Divehi</para>
              </term>
              <description>
                <para>dv </para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Divehi (India)</para>
              </term>
              <description>
                <para>dv-MV </para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Persian</para>
              </term>
              <description>
                <para>fa</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Persian (Iran)</para>
              </term>
              <description>
                <para>fa-IR</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Gujarati</para>
              </term>
              <description>
                <para>gu</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Gujarati (India)</para>
              </term>
              <description>
                <para>gu-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Hebrew</para>
              </term>
              <description>
                <para>he</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Hebrew (Israel)</para>
              </term>
              <description>
                <para>he-IL</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Hindi</para>
              </term>
              <description>
                <para>hi</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Hindi (India)</para>
              </term>
              <description>
                <para>hi-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Yi</para>
              </term>
              <description>
                <para>ii</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Yi (PRC)</para>
              </term>
              <description>
                <para>ii-CN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Inukitut Syllabics</para>
              </term>
              <description>
                <para>iu-Cans</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Inukitut Syllabics (Canada)</para>
              </term>
              <description>
                <para>iu-Cans-CA</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Khmer</para>
              </term>
              <description>
                <para>km</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Khmer (Cambodia)</para>
              </term>
              <description>
                <para>km-KH</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Kannada</para>
              </term>
              <description>
                <para>kn</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Kannada (India)</para>
              </term>
              <description>
                <para>kn-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Konkani</para>
              </term>
              <description>
                <para>kok</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Konkani (India)</para>
              </term>
              <description>
                <para>kok-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Lao</para>
              </term>
              <description>
                <para>lo</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Lao (Lao P.D.R.)</para>
              </term>
              <description>
                <para>lo-LA</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Malayalam</para>
              </term>
              <description>
                <para>ml</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Malayalam (India)</para>
              </term>
              <description>
                <para>ml-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Mohawk</para>
              </term>
              <description>
                <para>moh</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Mohawk (Canada)</para>
              </term>
              <description>
                <para>moh-CA</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Marathi</para>
              </term>
              <description>
                <para>mr</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Marathi (India)</para>
              </term>
              <description>
                <para>mr-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Nepali</para>
              </term>
              <description>
                <para>ne</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Nepali (Nepal)</para>
              </term>
              <description>
                <para>ne-NP</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Norwegian</para>
              </term>
              <description>
                <para>no</para>
              </description>
              <description>
                <para>nb-NO</para>
              </description>
            </item>
            <item>
              <term>
                <para>Oriya</para>
              </term>
              <description>
                <para>or</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Oriya (India)</para>
              </term>
              <description>
                <para>or-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Punjabi</para>
              </term>
              <description>
                <para>pa</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Punjabi (India)</para>
              </term>
              <description>
                <para>pa-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Dari</para>
              </term>
              <description>
                <para>prs</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Dari (Afghanistan)</para>
              </term>
              <description>
                <para>prs-AF</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Pashto</para>
              </term>
              <description>
                <para>ps</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Pashto (Afghanistan)</para>
              </term>
              <description>
                <para>ps-AF</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Sanskrit</para>
              </term>
              <description>
                <para>sa</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Sanskrit (India)</para>
              </term>
              <description>
                <para>sa-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Sinhala</para>
              </term>
              <description>
                <para>si</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Sinhala (Sri Lanka)</para>
              </term>
              <description>
                <para>si-LK</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Syriac</para>
              </term>
              <description>
                <para>syr</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Syriac (Syria)</para>
              </term>
              <description>
                <para>syr-SY</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Tamil</para>
              </term>
              <description>
                <para>ta</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Tamil (India)</para>
              </term>
              <description>
                <para>ta-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Telugu</para>
              </term>
              <description>
                <para>te</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Telugu (India)</para>
              </term>
              <description>
                <para>te-IN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Thai</para>
              </term>
              <description>
                <para>th</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Thai (Thailand)</para>
              </term>
              <description>
                <para>th-Th</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Uighur</para>
              </term>
              <description>
                <para>ug</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Uighur (PRC)</para>
              </term>
              <description>
                <para>ug-CN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Urdu</para>
              </term>
              <description>
                <para>ur</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Urdu (Pakistan)</para>
              </term>
              <description>
                <para>ur-PK</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Vietnamese</para>
              </term>
              <description>
                <para>vi</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
            <item>
              <term>
                <para>Vietnamese (Vietnam)</para>
              </term>
              <description>
                <para>vi-VN</para>
              </description>
              <description>
                <para>en-US</para>
              </description>
            </item>
          </list>
          <para>Your application can use <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> to create a replacement for a culture, and that culture can have a console fallback culture of your choosing.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an alternate user interface culture suitable for console applications when the default graphic user interface culture is unsuitable.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An alternate culture that is used to read and display text on the console.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>We recommend that you use the string overload of this method (<see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />), because locale names should be used instead of LCIDs. For custom locales, the locale name is required. </para>
          <para>If <paramref name="culture" /> is the locale identifier of the current culture, the returned <see cref="T:System.Globalization.CultureInfo" /> object does not reflect any user overrides.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves a cached, read-only instance of a culture by using the specified culture identifier.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </returns>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A locale identifier (LCID).</param>
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a list of predefined culture names, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>The <see cref="Overload:System.Globalization.CultureInfo.GetCultureInfo" /> method retrieves a cached, read-only <see cref="T:System.Globalization.CultureInfo" /> object. It offers better performance than a corresponding call to the <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)" /> constructor. </para>
          <para>If <paramref name="name" /> is the name of the current culture, the returned <see cref="T:System.Globalization.CultureInfo" /> object does not reflect any user overrides. This makes the method suitable for server applications or tools that do not have a real user account on the system and that need to load multiple cultures efficiently. </para>
          <para> If <paramref name="name" /> is <see cref="F:System.String.Empty" />, the method returns the invariant culture. This is equivalent to retrieving the value of the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves a cached, read-only instance of a culture using the specified culture name. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of a culture. <paramref name="name" /> is not case-sensitive.</param>
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a list of predefined culture names, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center.</para>
          <para>The <see cref="Overload:System.Globalization.CultureInfo.GetCultureInfo" /> method obtains a cached, read-only <see cref="T:System.Globalization.CultureInfo" /> object. It offers better performance than a corresponding call to a <see cref="Overload:System.Globalization.CultureInfo.#ctor" /> constructor. The method is used to create a culture similar to that specified by the <paramref name="name" /> parameter, but with different sorting and casing rules. </para>
          <para>If <paramref name="name" /> or <paramref name="altName" /> is the name of the current culture, the returned objects do not reflect any user overrides. If <paramref name="name" /> is <see cref="F:System.String.Empty" />, the method returns the invariant culture. This is equivalent to retrieving the value of the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> property. If <paramref name="altName" /> is <see cref="F:System.String.Empty" />, the method uses the writing system and comparison rules specified by the invariant culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves a cached, read-only instance of a culture. Parameters specify a culture that is initialized with the <see cref="T:System.Globalization.TextInfo" /> and <see cref="T:System.Globalization.CompareInfo" /> objects specified by another culture.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of a culture. <paramref name="name" /> is not case-sensitive.</param>
        <param name="altName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of a culture that supplies the <see cref="T:System.Globalization.TextInfo" /> and <see cref="T:System.Globalization.CompareInfo" /> objects used to initialize <paramref name="name" />. <paramref name="altName" /> is not case-sensitive.</param>
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>This method and the <see cref="P:System.Globalization.CultureInfo.IetfLanguageTag" /> property are deprecated. Instead of using these elements, the application should use a new <see cref="T:System.Globalization.CultureInfo" /> object and calls to the <see cref="P:System.Globalization.CultureInfo.Name" /> property. IETF tags and names are identical.</para>
          </block>
          <para>The RFC 4646 standard that is maintained by the Internet Engineering Task Force (IETF) defines an IETF language tag, which provides a uniform means of identifying a language. The format of an IETF language tag is the same as the culture name returned by the <see cref="P:System.Globalization.CultureInfo.Name" /> property, but does not identify a culture uniquely. Different cultures share the same IETF language tag if those cultures have identical linguistic characteristics. The linguistic characteristics of a culture are contained in the <see cref="T:System.Globalization.TextInfo" /> object associated with a <see cref="T:System.Globalization.CultureInfo" /> object. </para>
          <para>An IETF language tag consists of a mandatory language identifier, an optional script identifier, and an optional region identifier. </para>
          <para>Your applications should use the retrieved culture to control language-specific tasks, such as managing a spelling or grammar checker. Applications should not use the retrieved culture to control culture-specific tasks, such as sorting text or formatting times and dates.</para>
          <para>For more information, see RFC 4646, "Tags for Identifying Languages," and the most recent draft standard, Draft-phillips-langtags-05.txt, at <see cref="http://go.microsoft.com/fwlink/?LinkId=100231">http://go.microsoft.com/fwlink/?LinkId=100231</see>.         </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Deprecated. Retrieves a read-only <see cref="T:System.Globalization.CultureInfo" /> object having linguistic characteristics that are identified by the specified RFC 4646 language tag.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of a language as specified by the RFC 4646 standard.</param>
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> method is most commonly called with the <paramref name="types" /> parameter set to the following values:  </para>
          <list type="bullet">
            <item>
              <para>
                <see cref="F:System.Globalization.CultureTypes.SpecificCultures" />, which returns all specific cultures.</para>
            </item>
            <item>
              <para>
                <see cref="F:System.Globalization.CultureTypes.NeutralCultures" />, which returns all neutral cultures and the invariant culture.</para>
            </item>
            <item>
              <para>
                <see cref="F:System.Globalization.CultureTypes.AllCultures" />, which returns all neutral and specific cultures, cultures installed in the Windows system, and custom cultures created by the user.</para>
            </item>
            <item>
              <para>
                <see cref="F:System.Globalization.CultureTypes.UserCustomCulture" />, which returns all custom cultures, such as those registered by the <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> class.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the list of supported cultures filtered by the specified <see cref="T:System.Globalization.CultureTypes" /> parameter.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An array that contains the cultures specified by the <paramref name="types" /> parameter. The array of cultures is unsorted.</para>
        </returns>
        <param name="types">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that filter the cultures to retrieve. </param>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" /> implements <see cref="M:System.IFormatProvider.GetFormat(System.Type)" />.</para>
          <para>NumberFormatInfo provides the culture-specific numeric format used in conjunction with the Format methods in the base data types. DateTimeFormatInfo controls how the date and time values are formatted for a specific culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an object that defines how to format the specified type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, which is a <see cref="T:System.Globalization.NumberFormatInfo" /> containing the default number format information for the current <see cref="T:System.Globalization.CultureInfo" />, if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.NumberFormatInfo" /> class.</para>
          <para>-or- </para>
          <para>The value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, which is a <see cref="T:System.Globalization.DateTimeFormatInfo" /> containing the default date and time format information for the current <see cref="T:System.Globalization.CultureInfo" />, if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.</para>
          <para>-or- </para>
          <para>null, if <paramref name="formatType" /> is any other object.</para>
        </returns>
        <param name="formatType">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Type" /> for which to get a formatting object. This method only supports the <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> types. </param>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method overrides <see cref="M:System.Object.GetHashCode" />.</para>
          <para>This method generates the same hash code for two objects that are equal according to the <see cref="M:System.Globalization.CultureInfo.Equals(System.Object)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Serves as a hash function for the current <see cref="T:System.Globalization.CultureInfo" />, suitable for hashing algorithms and data structures, such as a hash table.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A hash code for the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>This property and the <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" /> method are deprecated. Instead, you should use a the <see cref="P:System.Globalization.CultureInfo.Name" /> property. IETF tags and names are identical.</para>
          </block>
          <para>The RFC 4646 standard that is maintained by the Internet Engineering Task Force (IETF) defines an IETF language tag, which provides a uniform means of identifying a language. The format of an IETF language tag is similar to the culture name returned by the <see cref="P:System.Globalization.CultureInfo.Name" /> property, but does not identify a culture uniquely. That is, different cultures share the same IETF language tag if those cultures have identical linguistic characteristics. The linguistic characteristics of a culture are contained in the <see cref="T:System.Globalization.TextInfo" /> object associated with a <see cref="T:System.Globalization.CultureInfo" /> object. </para>
          <para>An IETF language tag consists of a mandatory language identifier, an optional script identifier, and an optional region identifier. </para>
          <para>For more information, see <see cref="http://go.microsoft.com/fwlink/?LinkId=230876">RFC 5646, "Tags for Identifying Languages</see>. For a list of subtags, see <see cref="http://go.microsoft.com/fwlink/?LinkId=230877">The IANA Language Subtag Registry</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Deprecated. Gets the RFC 4646 standard identification for a language. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In a localized operating system, such as Japanese Windows 2000 Professional, this property returns the culture of the operating system. This property is the equivalent of GetSystemDefaultUILanguage in the Windows API.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the culture installed with the operating system.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The invariant culture is culture-insensitive; it is associated with the English language but not with any country/region. You specify the invariant culture by name by using an empty string ("") in the call to a <see cref="T:System.Globalization.CultureInfo" /> instantiation method. <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> also retrieves an instance of the invariant culture. It can be used in almost any method in the <see cref="N:System.Globalization" /> namespace that requires a culture. The objects returned by properties such as <see cref="P:System.Globalization.CultureInfo.CompareInfo" />, <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />, and <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> also reflect the string comparison and formatting conventions of the invariant culture.</para>
          <para>Unlike culture-sensitive data, which is subject to change by user customization or by updates to the .NET Framework or the operating system, invariant culture data is stable over time and across installed cultures and cannot be customized by users. This makes the invariant culture particularly useful for operations that require culture-independent results, such as formatting and parsing operations that persist formatted data, or sorting and ordering operations that require that data be displayed in a fixed order regardless of culture. </para>
          <format type="text/html">
            <h2>String Operations</h2>
          </format>
          <para>You can use the invariant culture for culture-sensitive string operations that are not affected by the conventions of the current thread culture and that are consistent across cultures. For example, you may want sorted data to appear in a fixed order or apply a standard set of casing conventions to strings regardless of the current thread culture. To do this, you pass the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> object to a method that has a <see cref="T:System.Globalization.CultureInfo" /> parameter, such as <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> and <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" />. </para>
          <format type="text/html">
            <h2>Persisting Data</h2>
          </format>
          <para>The <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> property can be used to persist data in a culture-independent format. This provides a known format that does not change and that can be used to serialize and deserialize data across cultures. After the data is deserialized, it can be formatted appropriately based on the cultural conventions of the current user.</para>
          <para>For example, if you choose to persist date and time data in string form, you can pass the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> object to the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> or <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> method to create the string, and you can pass the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> object to the <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider)" /> or <see cref="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method to convert the string back to a date and time value. This technique ensures that the underlying date and time values do not change when the data is read or written by users from different cultures. </para>
          <para>The following example uses the invariant culture to persist a <see cref="T:System.DateTime" /> value as a string. It then parses the string and displays its value by using the formatting conventions of the French (France) and German (Germany) cultures.</para>
          <para>code reference: System.Globalization.CultureInfo.InvariantCulture#1</para>
          <format type="text/html">
            <h2>Security Decisions</h2>
          </format>
          <para>If you are making a security decision (such as whether to allow access to a system resource) based on the result of a string comparison or a case change, you should not use the invariant culture. Instead, you should perform a case-sensitive or case-insensitive ordinal comparison by calling a method that includes a <see cref="T:System.StringComparison" /> parameter and supplying either <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> as an argument. Code that performs culture-sensitive string operations can cause security vulnerabilities if the current culture is changed or if the culture on the computer that is running the code differs from the culture that is used to test the code. In contrast, an ordinal comparison depends solely on the binary value of the compared characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> object that is culture-independent (invariant).</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If this property returns false, the culture is either a specific culture or the invariant culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> represents a neutral culture.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the <see cref="T:System.Globalization.CultureInfo" /> is read-only, the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> and <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> instances are also read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> is read-only.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The input locale identifier was formerly called the keyboard layout. An input locale identifier is a broader concept than a keyboard layout since it can also indicate a speech-to-text converter, an Input Method Editor (IME), or any other form of input.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the active input locale identifier.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In most cases, the culture identifier is mapped to the corresponding NLS locale identifier.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the culture identifier for the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a list of predefined culture names and identifiers that the <see cref="P:System.Globalization.CultureInfo.Name" /> property can return, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> at the Go Global Developer Center. Note that culture names are subject to change, and that they also can reflect the names of custom cultures.</para>
          <para>The <see cref="P:System.Globalization.CultureInfo.Name" /> property follows the naming standards provided in the <see cref="T:System.Globalization.CultureInfo" /> class topic. It returns the short form of the culture name that excludes any indication of an alternate sort order. For example, if you instantiate a <see cref="T:System.Globalization.CultureInfo" /> object by using the string "de-DE_phoneb" to reflect an alternate sort order, the <see cref="P:System.Globalization.CultureInfo.Name" /> property returns "de-DE". </para>
          <para>To get the full name of the culture, you should use the <see cref="P:System.Globalization.CultureInfo.DisplayName" />, <see cref="P:System.Globalization.CultureInfo.EnglishName" />, or <see cref="P:System.Globalization.CultureInfo.NativeName" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the culture name in the format languagecode2-country/regioncode2.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this property is the same, regardless of the language version of the .NET Framework.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <format type="text/html">
            <h2>Overrides</h2>
          </format>
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>If <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true and the specified culture matches the current culture of Windows, the <see cref="T:System.Globalization.CultureInfo" /> uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>The values of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property and the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property are not calculated until the user accesses the property. If the user uses the Control Panel to change the current culture to a new culture while the application is running and then accesses the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> or <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, the application retrieves the defaults for the new culture. not the overrides for the original culture. To preserve the overrides for the original current culture, the application should access the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> and <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> properties before changing the current culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a <see cref="T:System.Globalization.NumberFormatInfo" /> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Your application changes the calendar used by the current <see cref="T:System.Globalization.CultureInfo" /> by setting the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property of <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" />, which is an instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class. The new calendar must be one of the calendars listed in <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />. <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> also includes other properties that customize the date and time formatting associated with that <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the list of calendars that can be used by the culture.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The cultures have a hierarchy in which the parent of a specific culture is a neutral culture, the parent of a neutral culture is the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />, and the parent of the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> is the invariant culture itself. The parent culture encompasses only the set of information that is common among its children.</para>
          <para>If the resources for the specific culture are not available in the system, the resources for the neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see <format type="text/html"><a href="B224D7C0-35F8-4E82-A705-DD76795E8D16">Resource Fallback Process</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This wrapper prevents any modifications to <paramref name="ci" />, or the objects returned by the <paramref name="ci" />.<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> and <paramref name="ci" />.<see cref="P:System.Globalization.CultureInfo.NumberFormat" /> properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a read-only wrapper around the specified <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A read-only <see cref="T:System.Globalization.CultureInfo" /> wrapper around <paramref name="ci" />.</para>
        </returns>
        <param name="ci">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Globalization.CultureInfo" /> to wrap. </param>
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Globalization.CultureInfo.TextInfo" /> property provides culture-specific casing information for strings. To perform culture-insensitive casing, the application should use the <see cref="P:System.Globalization.CultureInfo.TextInfo" /> property of <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Globalization.TextInfo" /> that defines the writing system associated with the culture.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For example, the three-letter abbreviation for English is "eng".</para>
          <block subset="none" type="note">
            <para>When communicating between processes or persisting data it is usually better to use the full <see cref="P:System.Globalization.CultureInfo.Name" />. Using just the language can lose context and data.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the ISO 639-2 three-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property returns the same value as the Windows API method GetLocaleInfo with the LOCALE_SABBREVLANGNAME value. For example, the three-letter code for English (United States) as defined in the Windows API is "enu".</para>
          <block subset="none" type="note">
            <para>When communicating between processes or persisting data it is usually better to use the full <see cref="P:System.Globalization.CultureInfo.Name" />. Using just the language can lose context and data.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the three-letter code for the language as defined in the Windows API.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method overrides <see cref="M:System.Object.ToString" />. It returns a normalized version of the culture name that is passed to the <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)" /> or <see cref="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" /> constructor or to the <see cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" /> or <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" /> method. It normalizes the result string by converting characters in languagecode2 to lowercase and converting characters in country/regioncode2 to uppercase if necessary. </para>
          <para>Predefined culture names are listed in the <see cref="http://go.microsoft.com/fwlink/?LinkId=200048">National Language Support (NLS) API Reference</see> page at the Go Global Developer Center.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string containing the name of the current <see cref="T:System.Globalization.CultureInfo" /> in the format languagecode2-country/regioncode2.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string containing the name of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For example, the two-letter abbreviation for English is "en". The <see cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" /> property value for the invariant culture is "iv". </para>
          <block subset="none" type="note">
            <para>When communicating between processes or persisting data it is usually better to use the full <see cref="P:System.Globalization.CultureInfo.Name" />. Using just the language can lose context and data.</para>
          </block>
          <para>If ISO 639-1 does not define a two-letter language code for a particular culture, the <see cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" /> property returns a string that consists of three or more letters. For more information, see the example.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</para>
          <para>If <see cref="P:System.Globalization.CultureInfo.UseUserOverride" /> is true and the specified culture matches the current culture of Windows, the <see cref="T:System.Globalization.CultureInfo" /> uses those overrides, including user settings for the properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, and the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> instance returned by the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property. If the user settings are incompatible with the culture associated with the <see cref="T:System.Globalization.CultureInfo" />, for example, if the selected calendar is not one of the <see cref="P:System.Globalization.CultureInfo.OptionalCalendars" />, the results of the methods and the values of the properties are undefined.</para>
          <para>This property is set when the <see cref="T:System.Globalization.CultureInfo" /> is created.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> uses the user-selected culture settings.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>