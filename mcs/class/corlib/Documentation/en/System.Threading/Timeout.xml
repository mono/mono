<?xml version="1.0" encoding="utf-8"?>
<Type Name="Timeout" FullName="System.Threading.Timeout" FullNameSP="System_Threading_Timeout" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed Timeout extends System.Object" />
  <TypeSignature Language="C#" Value="public static class Timeout" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Timeout extends System.Object" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The members of this class are used to specify infinite time-out intervals in threading operations. <see cref="F:System.Threading.Timeout.Infinite" /> is used by methods that accept an integer <paramref name="millisecondsTimeout" /> parameter, such as <see cref="M:System.Threading.Thread.Sleep(System.Int32)" />, <see cref="M:System.Threading.Thread.Join(System.Int32)" />, and <see cref="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />. <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> is used by methods that accept a <paramref name="timeout" /> parameter of type <see cref="T:System.TimeSpan" />, such as <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)" />, <see cref="M:System.Threading.Thread.Join(System.TimeSpan)" />, and <see cref="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Contains constants that specify infinite time-out intervals. This class cannot be inherited. </para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Infinite">
      <MemberSignature Language="ILASM" Value=".field public static literal int32 Infinite = -1" />
      <MemberSignature Language="C#" Value="public const int Infinite = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 Infinite = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>-1</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For threading methods that accept a <paramref name="millisecondsTimeout" /> parameter, such as <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> and <see cref="M:System.Threading.Thread.Join(System.Int32)" />, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <see cref="N:System.Threading" /> classes such as <see cref="T:System.Threading.Mutex" />, <see cref="T:System.Threading.Monitor" />, <see cref="T:System.Threading.EventWaitHandle" />, or <see cref="T:System.Threading.Semaphore" /> instead to sychronize threads or manage resources.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A constant used to specify an infinite waiting period, for threading methods that accept an <see cref="T:System.Int32" /> parameter. </para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="InfiniteTimeSpan">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteTimeSpan;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteTimeSpan" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For threading methods that accept a <paramref name="timeout" /> parameter, such as <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)" /> and <see cref="M:System.Threading.Thread.Join(System.TimeSpan)" />, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <see cref="N:System.Threading" /> classes such as <see cref="T:System.Threading.Mutex" />, <see cref="T:System.Threading.Monitor" />, <see cref="T:System.Threading.EventWaitHandle" />, or <see cref="T:System.Threading.Semaphore" /> instead to sychronize threads or manage resources.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A constant used to specify an infinite waiting period, for methods that accept a <see cref="T:System.TimeSpan" /> parameter.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>