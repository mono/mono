<?xml version="1.0" encoding="utf-8"?>
<Type Name="IConstructionCallMessage" FullName="System.Runtime.Remoting.Activation.IConstructionCallMessage">
  <TypeSignature Maintainer="auto" Language="C#" Value="public interface IConstructionCallMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConstructionCallMessage implements class System.Runtime.Remoting.Messaging.IMessage, class System.Runtime.Remoting.Messaging.IMethodCallMessage, class System.Runtime.Remoting.Messaging.IMethodMessage" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Messaging.IMethodCallMessage</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>When the user creates an instance of a new client-activated object by calling new or <see cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> and before the thread returns to the user code, a <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" /> is sent to the remote application. When the construction message arrives at the remote application, it is processed by a remoting activator (either the default one, or one that is specified in the <see cref="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.Activator" /> property) and a new object is created. The remoting application then returns a <see cref="T:System.Runtime.Remoting.Activation.IConstructionReturnMessage" /> to the local application. The <see cref="T:System.Runtime.Remoting.Activation.IConstructionReturnMessage" /> contains an instance of <see cref="T:System.Runtime.Remoting.ObjRef" />, which packages information about the remote object. The remoting infrastructure converts the <see cref="T:System.Runtime.Remoting.ObjRef" /> instance into a proxy to the remote object, which is returned to the user code.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents the construction call request of an object.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="ActivationType">
      <MemberSignature Language="C#" Value="public Type ActivationType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ActivationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'Type'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the type of the remote object to activate.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ActivationTypeName">
      <MemberSignature Language="C#" Value="public string ActivationTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ActivationTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the full type name of the remote type to activate.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Activator">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Activation.IActivator Activator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Activation.IActivator Activator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Activation.IActivator</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A chain of activators that are arranged in a hierarchy typically completes the various tasks that are involved in the activation process. If you intend to plug in a custom activator, then you should traverse the activator hierarchy and plug in your activator at the appropriate location. Use the <see cref="P:System.Runtime.Remoting.Activation.IActivator.NextActivator" /> property on the activator that is returned by the current property to traverse the chain of activators.</para>
          <para>If you add your own activator into the message's activator chain on the client side, the activator may be serialized and transported to the server side, if deemed necessary. For this reason, custom activators should be fairly lightweight in terms of serialization requirements.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the activator that activates the remote object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CallSiteActivationAttributes">
      <MemberSignature Language="C#" Value="public object[] CallSiteActivationAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] CallSiteActivationAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'object []'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.CallSiteActivationAttributes" /> indexer allows you to specify additional attributes to use during object activation. The user specifies the <see cref="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.CallSiteActivationAttributes" /> in the <paramref name="activationAttributes" /> parameter to <see cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the call site activation attributes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ContextProperties">
      <MemberSignature Language="C#" Value="public System.Collections.IList ContextProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList ContextProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'Collections.IList'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new object's context is generally chosen based on metadata attributes of the class. The context selection mechanism is extensible through custom attributes, also known as static context properties, which are compiled into the class metadata. When activating an object remotely, the <see cref="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.ContextProperties" /> contains the list of properties that were contributed by various attributes in the construction call message. These properties are used to create the context in which the server object is activated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a list of context properties that define the context in which the object is to be created.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>