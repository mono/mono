<?xml version="1.0" encoding="utf-8"?>
<Type Name="IContributeObjectSink" FullName="System.Runtime.Remoting.Contexts.IContributeObjectSink">
  <TypeSignature Maintainer="auto" Language="C#" Value="public interface IContributeObjectSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContributeObjectSink" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Runtime.Remoting.Contexts.IContributeObjectSink" /> interface is implemented by context properties in a <see cref="T:System.Runtime.Remoting.Contexts.Context" /> class that want to contribute an object-specific interception sink on the server end of a remoting call.</para>
      <para>The server object chain is composed from those context properties in the server object's context that implement <see cref="T:System.Runtime.Remoting.Contexts.IContributeObjectSink" />. <format type="text/html"><a href="6F7A7912-93CD-4C94-824F-42554C17C8D4">[&lt;topic://cpconjust-in-timeactivation&gt;]</a></format> is an example of such a property; that is, the message sink would activate the object after the call arrives, and then pass the message on to the object.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Contributes an object-specific interception sink on the server end of a remoting call.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="GetObjectSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink (MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(class System.MarshalByRefObject obj, class System.Runtime.Remoting.Messaging.IMessageSink nextSink) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.MarshalByRefObject" />
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Chains the message sink of the provided server object in front of the given sink chain.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The composite sink chain.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />The server object which provides the message sink that is to be chained in front of the given chain. </param>
        <param name="nextSink">
          <attribution license="cc4" from="Microsoft" modified="false" />The chain of sinks composed so far. </param>
      </Docs>
    </Member>
  </Members>
</Type>