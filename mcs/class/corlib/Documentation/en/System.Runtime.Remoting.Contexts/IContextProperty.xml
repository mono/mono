<?xml version="1.0" encoding="utf-8"?>
<Type Name="IContextProperty" FullName="System.Runtime.Remoting.Contexts.IContextProperty">
  <TypeSignature Maintainer="auto" Language="C#" Value="public interface IContextProperty" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextProperty" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Runtime.Remoting.Contexts.IContextProperty" /> interface is exposed by the property contributed to a context by an attribute. By default, it is also implemented by the <see cref="T:System.Runtime.Remoting.Contexts.ContextAttribute" /> base class, from which <see cref="T:System.Runtime.Remoting.Contexts.Context" /> attribute classes can extend.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Gathers naming information from the context property and determines whether the new context is ok for the context property.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Freeze">
      <MemberSignature Language="C#" Value="public void Freeze (System.Runtime.Remoting.Contexts.Context newContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Freeze(class System.Runtime.Remoting.Contexts.Context newContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newContext" Type="System.Runtime.Remoting.Contexts.Context" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Context properties cannot be added after the context has been frozen.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Called when the context is frozen.</para>
        </summary>
        <param name="newContext">
          <attribution license="cc4" from="Microsoft" modified="false" />The context to freeze. </param>
      </Docs>
    </Member>
    <Member MemberName="IsNewContextOK">
      <MemberSignature Language="C#" Value="public bool IsNewContextOK (System.Runtime.Remoting.Contexts.Context newCtx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNewContextOK(class System.Runtime.Remoting.Contexts.Context newCtx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCtx" Type="System.Runtime.Remoting.Contexts.Context" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Once all the context properties have been added to the new context, they are all queried as to whether they are okay in the new context. The context property could look at the other context properties from <paramref name="newCtx" /> and determine whether it is compatible with these other context properties. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a Boolean value indicating whether the context property is compatible with the new context.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the context property can coexist with the other context properties in the given context; otherwise, false.</para>
        </returns>
        <param name="newCtx">
          <attribution license="cc4" from="Microsoft" modified="false" />The new context in which the <see cref="T:System.Runtime.Remoting.Contexts.ContextProperty" /> has been created. </param>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the name of the property under which it will be added to the context.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>