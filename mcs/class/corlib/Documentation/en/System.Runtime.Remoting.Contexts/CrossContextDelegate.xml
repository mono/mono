<?xml version="1.0" encoding="utf-8"?>
<Type Name="CrossContextDelegate" FullName="System.Runtime.Remoting.Contexts.CrossContextDelegate">
  <TypeSignature Maintainer="auto" Language="C#" Value="public delegate void CrossContextDelegate();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CrossContextDelegate extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Callbacks provide a facility to request execution of some code in another context. The <see cref="T:System.Runtime.Remoting.Contexts.CrossContextDelegate" /> class is defined for context callbacks. Each context has a callback object that can be used to perform callbacks on the context. The delegate used to request a callback through the callback object must be of the <see cref="T:System.Runtime.Remoting.Contexts.CrossContextDelegate" /> class.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents the method that will handle the requests of execution of some code in another context.</para>
    </summary>
  </Docs>
  <Members />
</Type>