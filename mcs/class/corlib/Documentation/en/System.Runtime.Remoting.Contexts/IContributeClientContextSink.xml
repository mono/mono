<?xml version="1.0" encoding="utf-8"?>
<Type Name="IContributeClientContextSink" FullName="System.Runtime.Remoting.Contexts.IContributeClientContextSink">
  <TypeSignature Maintainer="auto" Language="C#" Value="public interface IContributeClientContextSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContributeClientContextSink" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Runtime.Remoting.Contexts.IContributeClientContextSink" /> interface is implemented by context properties in a <see cref="T:System.Runtime.Remoting.Contexts.Context" /> class that want to contribute an interception sink at the context boundary on the client end of a remoting call.</para>
      <para>The client context chain is composed from those properties in the client context that implement <see cref="T:System.Runtime.Remoting.Contexts.IContributeClientContextSink" />, which contributes to a sink through the <see cref="M:System.Runtime.Remoting.Contexts.IContributeClientContextSink.GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink)" /> method call. This chain is cached for future use.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Contributes an interception sink at the context boundary on the client end of a remoting call.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="GetClientContextSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink (System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(class System.Runtime.Remoting.Messaging.IMessageSink nextSink) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Takes the first sink in the chain of sinks composed so far, and then chains its message sink in front of the chain already formed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The composite sink chain.</para>
        </returns>
        <param name="nextSink">
          <attribution license="cc4" from="Microsoft" modified="false" />The chain of sinks composed so far. </param>
      </Docs>
    </Member>
  </Members>
</Type>