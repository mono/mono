<?xml version="1.0" encoding="utf-8"?>
<Type Name="StringBuilder" FullName="System.Text.StringBuilder" FullNameSP="System_Text_StringBuilder" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed serializable StringBuilder extends System.Object" />
  <TypeSignature Language="C#" Value="public sealed class StringBuilder : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit StringBuilder extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>This class represents a string-like object whose value is a mutable sequence of characters.  </para>
      <para>In this section:</para>
      <list type="bullet">
        <item>
          <para>
            <format type="text/html">
              <a href="#StringAndSB">The String and StringBuilder types</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#HowWorks">How StringBuilder works</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Memory">Memory allocation</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Instantiating">Instantiating a StringBuilder object</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Calling">Calling StringBuilder methods</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Operations">Performing StringBuilder operations</a>
            </format>
          </para>
          <list type="bullet">
            <item>
              <para>
                <format type="text/html">
                  <a href="#Iterating">Iterating StringBuilder characters</a>
                </format>
              </para>
            </item>
            <item>
              <para>
                <format type="text/html">
                  <a href="#Adding">Adding text to a StringBuilder object</a>
                </format>
              </para>
            </item>
            <item>
              <para>
                <format type="text/html">
                  <a href="#Deleting">Deleting text from a StringBuilder object</a>
                </format> </para>
            </item>
            <item>
              <para>
                <format type="text/html">
                  <a href="#Modifying">Modifying the text in a StringBuilder object</a>
                </format> </para>
            </item>
          </list>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Searching">Searching the text in a StringBuilder object</a>
            </format> </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Converting">Converting the StringBuilder object to a string</a>
            </format>
          </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#StringAndSB" />
      </format>
      <format type="text/html">
        <h2>The String and StringBuilder types</h2>
      </format>
      <para>Although <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.String" /> both represent sequences of characters, they are implemented differently. <see cref="T:System.String" /> is an immutable type. That is, each operation that appears to modify a <see cref="T:System.String" /> object actually creates a new string. </para>
      <para>For example, the call to the <see cref="M:System.String.Concat(System.String[])" /> method in the following C# example appears to change the value of a string variable named value. In fact, the <see cref="M:System.String.Concat(System.String[])" /> method returns a value object that has a different value and address from the value object that was passed to the method. Note that the example must be compiled using the /unsafe compiler option. </para>
      <para>code reference: System.Text.StringBuilder.Class#1</para>
      <para>For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use <see cref="T:System.Text.StringBuilder" />, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A <see cref="T:System.Text.StringBuilder" /> object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer. </para>
      <block subset="none" type="note">
        <para>Although the <see cref="T:System.Text.StringBuilder" /> class generally offers better performance than the <see cref="T:System.String" /> class, you should not automatically replace <see cref="T:System.String" /> with <see cref="T:System.Text.StringBuilder" /> whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether <see cref="T:System.Text.StringBuilder" /> actually offers a significant performance improvement. </para>
      </block>
      <para>Consider using the <see cref="T:System.String" /> class under these conditions: </para>
      <list type="bullet">
        <item>
          <para>When the number of changes that your app will make to a string is small. In these cases, <see cref="T:System.Text.StringBuilder" /> might offer negligible or no performance improvement over <see cref="T:System.String" />. </para>
        </item>
        <item>
          <para>When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation. </para>
        </item>
        <item>
          <para>When you have to perform extensive search operations while you are building your string. The <see cref="T:System.Text.StringBuilder" /> class lacks search methods such as IndexOf or StartsWith. You'll have to convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> for these operations, and this can negate the performance benefit from using <see cref="T:System.Text.StringBuilder" />. For more information, see the <format type="text/html"><a href="#Searching">Searching the text in a StringBuilder object</a></format> section. </para>
        </item>
      </list>
      <para>Consider using the <see cref="T:System.Text.StringBuilder" /> class under these conditions: </para>
      <list type="bullet">
        <item>
          <para>When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input). </para>
        </item>
        <item>
          <para>When you expect your app to make a significant number of changes to a string. </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#HowWorks" />
      </format>
      <format type="text/html">
        <h2>How StringBuilder works</h2>
      </format>
      <para>The <see cref="P:System.Text.StringBuilder.Length" /> property indicates the number of characters the <see cref="T:System.Text.StringBuilder" /> object currently contains. If you add characters to the <see cref="T:System.Text.StringBuilder" /> object, its length increases until it equals the size of the <see cref="P:System.Text.StringBuilder.Capacity" /> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the <see cref="T:System.Text.StringBuilder" /> object to exceed its current capacity, new memory is allocated, the value of the <see cref="P:System.Text.StringBuilder.Capacity" /> property is doubled, new characters are added to the <see cref="T:System.Text.StringBuilder" /> object, and its <see cref="P:System.Text.StringBuilder.Length" /> property is adjusted. Additional memory for the <see cref="T:System.Text.StringBuilder" /> object is allocated dynamically until it reaches the value defined by the <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property. When the maximum capacity is reached, no further memory can be allocated for the <see cref="T:System.Text.StringBuilder" /> object, and trying to add characters or expand it beyond its maximum capacity throws either an <see cref="T:System.ArgumentOutOfRangeException" /> or an <see cref="T:System.OutOfMemoryException" /> exception. </para>
      <para>The following example illustrates how a <see cref="T:System.Text.StringBuilder" /> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a <see cref="T:System.Text.StringBuilder" /> object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string "This is a sentence." results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <see cref="T:System.Text.StringBuilder" /> object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string "This is an additional sentence." to the value of the <see cref="T:System.Text.StringBuilder" /> object 11 times. Whenever the append operation causes the length of the <see cref="T:System.Text.StringBuilder" /> object to exceed its capacity, its existing capacity is doubled and the <see cref="M:System.Text.StringBuilder.Append(System.String)" /> operation succeeds. </para>
      <para>code reference: System.Text.StringBuilder.Class#3</para>
      <format type="text/html">
        <a href="#Memory" />
      </format>
      <format type="text/html">
        <h2>Memory allocation</h2>
      </format>
      <para>The default capacity of a <see cref="T:System.Text.StringBuilder" /> object is 16 characters, and its default maximum capacity is <see cref="F:System.Int32.MaxValue" />. These default values are used if you call the <see cref="M:System.Text.StringBuilder.#ctor" /> and <see cref="M:System.Text.StringBuilder.#ctor(System.String)" /> constructors. </para>
      <para>You can explicitly define the initial capacity of a <see cref="T:System.Text.StringBuilder" /> object in the following ways: </para>
      <list type="bullet">
        <item>
          <para>By calling any of the <see cref="T:System.Text.StringBuilder" /> constructors that includes a <paramref name="capacity" /> parameter when you create the object.   </para>
        </item>
        <item>
          <para>By explicitly assigning a new value to the <see cref="P:System.Text.StringBuilder.Capacity" /> property to expand an existing <see cref="T:System.Text.StringBuilder" /> object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <see cref="T:System.Text.StringBuilder" /> object's maximum capacity. </para>
        </item>
        <item>
          <para>By calling the <see cref="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)" /> method with the new capacity. The new capacity must not be greater than the <see cref="T:System.Text.StringBuilder" /> object's maximum capacity. However, unlike an assignment to the <see cref="P:System.Text.StringBuilder.Capacity" /> property, <see cref="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)" /> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect. </para>
        </item>
      </list>
      <para>If the length of the string assigned to the <see cref="T:System.Text.StringBuilder" /> object in the constructor call exceeds either the default capacity or the specified capacity, the <see cref="P:System.Text.StringBuilder.Capacity" /> property is set to the length of the string specified with the <paramref name="value" /> parameter. </para>
      <para>You can explicitly define the maximum capacity of a <see cref="T:System.Text.StringBuilder" /> object by calling the <see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" /> constructor. You can't change the maximum capacity by assigning a new value to the <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property, because it is read-only. </para>
      <para>As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <see cref="T:System.Text.StringBuilder" /> object doubles up to the value defined by the <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property. </para>
      <para>In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions: </para>
      <list type="bullet">
        <item>
          <para>If the eventual size of the <see cref="T:System.Text.StringBuilder" /> object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <see cref="P:System.Text.StringBuilder.Capacity" /> property to a significantly high value to eliminate the need for too many memory reallocations. </para>
        </item>
        <item>
          <para>If your app is running on a system with limited memory. In this case, you may want to consider setting the <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property to less than <see cref="F:System.Int32.MaxValue" /> if your app is handling large strings that may cause it to execute in a memory-constrained environment. </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Instantiating" />
      </format>
      <format type="text/html">
        <h2>Instantiating a StringBuilder object</h2>
      </format>
      <para>You instantiate a <see cref="T:System.Text.StringBuilder" /> object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a <see cref="T:System.Text.StringBuilder" /> object whose value is an empty string, but set its <see cref="P:System.Text.StringBuilder.Capacity" /> and <see cref="P:System.Text.StringBuilder.MaxCapacity" /> values differently. The remaining three constructors define a <see cref="T:System.Text.StringBuilder" /> object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <see cref="F:System.Int32.MaxValue" />, whereas the third allows you to set the maximum capacity. </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Constructor</para>
            </term>
            <description>
              <para>String value</para>
            </description>
            <description>
              <para>Capacity</para>
            </description>
            <description>
              <para>Maximum capacity</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="M:System.Text.StringBuilder.#ctor" />
            </para>
          </term>
          <description>
            <para>
              <see cref="F:System.String.Empty" />
            </para>
          </description>
          <description>
            <para>16</para>
          </description>
          <description>
            <para>
              <see cref="F:System.Int32.MaxValue" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Text.StringBuilder.#ctor(System.Int32)" />
            </para>
          </term>
          <description>
            <para>
              <see cref="F:System.String.Empty" />
            </para>
          </description>
          <description>
            <para>Defined by the <paramref name="capacity" /> parameter</para>
          </description>
          <description>
            <para>
              <see cref="F:System.Int32.MaxValue" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" />
            </para>
          </term>
          <description>
            <para>
              <see cref="F:System.String.Empty" />
            </para>
          </description>
          <description>
            <para>Defined by the <paramref name="capacity" /> parameter</para>
          </description>
          <description>
            <para>Defined by the <paramref name="maxCapacity" /> parameter</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Text.StringBuilder.#ctor(System.String)" />
            </para>
          </term>
          <description>
            <para>Defined by the <paramref name="value" /> parameter </para>
          </description>
          <description>
            <para>16 or <paramref name="value" />. <see cref="P:System.String.Length" />, whichever is greater</para>
          </description>
          <description>
            <para>
              <see cref="F:System.Int32.MaxValue" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)" />
            </para>
          </term>
          <description>
            <para>Defined by the <paramref name="value" /> parameter</para>
          </description>
          <description>
            <para>Defined by the <paramref name="capacity" /> parameter or <paramref name="value" />. <see cref="P:System.String.Length" />, whichever is greater.</para>
          </description>
          <description>
            <para>
              <see cref="F:System.Int32.MaxValue" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)" />
            </para>
          </term>
          <description>
            <para>Defined by <paramref name="value" />. <see cref="M:System.String.Substring(System.Int32)" />(<paramref name="startIndex" />, <paramref name="length" />)  </para>
          </description>
          <description>
            <para>Defined by the <paramref name="capacity" /> parameter or <paramref name="value" />. <see cref="P:System.String.Length" />, whichever is greater.</para>
          </description>
          <description>
            <para>Defined by the <paramref name="maxCapacity" /> parameter</para>
          </description>
        </item>
      </list>
      <para>   </para>
      <para>The following example uses three of these constructor overloads to instantiate <see cref="T:System.Text.StringBuilder" /> objects. </para>
      <para>code reference: System.Text.StringBuilder.Class#6</para>
      <format type="text/html">
        <a href="#Calling" />
      </format>
      <format type="text/html">
        <h2>Calling StringBuilder methods</h2>
      </format>
      <para>Most of the methods that modify the string in a <see cref="T:System.Text.StringBuilder" /> instance return a reference to that same instance. This enables you to call <see cref="T:System.Text.StringBuilder" /> methods in two ways: </para>
      <list type="bullet">
        <item>
          <para>You can make individual method calls and ignore the return value, as the following example does. </para>
          <para>code reference: System.Text.StringBuilder.Class#4</para>
        </item>
        <item>
          <para>You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code. </para>
          <para>code reference: System.Text.StringBuilder.Class#5</para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Operations" />
      </format>
      <format type="text/html">
        <h2>Performing StringBuilder operations</h2>
      </format>
      <para>You can use the methods of the <see cref="T:System.Text.StringBuilder" /> class to iterate, add, delete, or modify characters in a <see cref="T:System.Text.StringBuilder" /> object. </para>
      <format type="text/html">
        <a href="#Iterating" />
      </format>
      <format type="text/html">
        <h2>Iterating StringBuilder characters</h2>
      </format>
      <para>You can access the characters in a <see cref="T:System.Text.StringBuilder" /> object by using the <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> property. In C#, <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> is an indexer; in Visual Basic, it is the default property of the <see cref="T:System.Text.StringBuilder" /> class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> property. Characters in a <see cref="T:System.Text.StringBuilder" /> object begin at index 0 (zero) and continue to index <see cref="P:System.Text.StringBuilder.Length" /> - 1. </para>
      <para>The following example illustrates the <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> property. It appends ten random numbers to a <see cref="T:System.Text.StringBuilder" /> object, and then iterates each character. If the character's Unicode category is <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber" />, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the <see cref="T:System.Text.StringBuilder" /> object both before and after the values of individual characters were changed. </para>
      <para>code reference: System.Text.StringBuilder.Class#7</para>
      <format type="text/html">
        <a href="#Adding" />
      </format>
      <format type="text/html">
        <h2>Adding text to a StringBuilder object</h2>
      </format>
      <para>The <see cref="T:System.Text.StringBuilder" /> class includes the following methods for expanding the contents of a <see cref="T:System.Text.StringBuilder" /> object: </para>
      <list type="bullet">
        <item>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.String)" /> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <see cref="T:System.Text.StringBuilder" /> object.  </para>
        </item>
        <item>
          <para>The <see cref="M:System.Text.StringBuilder.AppendLine" /> method appends a line terminator or a string along with a line terminator to a <see cref="T:System.Text.StringBuilder" /> object.  </para>
        </item>
        <item>
          <para>The <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])" /> method appends a <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite format string</a></format> to a <see cref="T:System.Text.StringBuilder" /> object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture. </para>
        </item>
        <item>
          <para>The <see cref="M:System.Text.StringBuilder.Insert(System.Int32,System.String)" /> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <see cref="T:System.Text.StringBuilder" /> object. The position is defined by a zero-based index. </para>
        </item>
      </list>
      <para>The following example uses the <see cref="M:System.Text.StringBuilder.Append(System.String)" />, <see cref="M:System.Text.StringBuilder.AppendLine" />, <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])" />, and <see cref="M:System.Text.StringBuilder.Insert(System.Int32,System.String)" /> methods to expand the text of a <see cref="T:System.Text.StringBuilder" /> object. </para>
      <para>code reference: System.Text.StringBuilder.Class#9</para>
      <format type="text/html">
        <a href="#Deleting" />
      </format>
      <format type="text/html">
        <h2>Deleting text from a StringBuilder object</h2>
      </format>
      <para>The <see cref="T:System.Text.StringBuilder" /> class includes methods that can reduce the size of the current <see cref="T:System.Text.StringBuilder" /> instance. The <see cref="M:System.Text.StringBuilder.Clear" /> method removes all characters and sets the <see cref="P:System.Text.StringBuilder.Length" /> property to zero. The <see cref="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)" /> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a <see cref="T:System.Text.StringBuilder" /> object by setting its <see cref="P:System.Text.StringBuilder.Length" /> property to a value that is less than the length of the current instance. </para>
      <para>The following example removes some of the text from a <see cref="T:System.Text.StringBuilder" /> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <see cref="M:System.Text.StringBuilder.Clear" /> method to remove all the characters from the <see cref="T:System.Text.StringBuilder" /> object. </para>
      <para>code reference: System.Text.StringBuilder.Class#10</para>
      <format type="text/html">
        <a href="#Modifying" />
      </format>
      <format type="text/html">
        <h2>Modifying the text in a StringBuilder object</h2>
      </format>
      <para>The <see cref="M:System.Text.StringBuilder.Replace(System.String,System.String)" /> method replaces all occurrences of a character or a string in the entire <see cref="T:System.Text.StringBuilder" /> object or in a particular character range. The following example uses the <see cref="M:System.Text.StringBuilder.Replace(System.String,System.String)" /> method to replace all exclamation points (!) with question marks (?) in the <see cref="T:System.Text.StringBuilder" /> object. </para>
      <para>code reference: System.Text.StringBuilder.Class#11</para>
      <format type="text/html">
        <a href="#Searching" />
      </format>
      <format type="text/html">
        <h2>Searching the text in a StringBuilder object</h2>
      </format>
      <para>The <see cref="T:System.Text.StringBuilder" /> class does not include methods similar to the <see cref="M:System.String.Contains(System.String)" />, <see cref="M:System.String.IndexOf(System.String)" />, and <see cref="M:System.String.StartsWith(System.String)" /> methods provided by the <see cref="T:System.String" /> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <see cref="T:System.String" /> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows. </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Technique</para>
            </term>
            <description>
              <para>Pros</para>
            </description>
            <description>
              <para>Cons</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>Search string values before adding them to the <see cref="T:System.Text.StringBuilder" /> object. </para>
          </term>
          <description>
            <para>Useful for determining whether a substring exists. </para>
          </description>
          <description>
            <para>Cannot be used when the index position of a substring is important. </para>
          </description>
        </item>
        <item>
          <term>
            <para>Call <see cref="M:System.Text.StringBuilder.ToString" /> and search the returned <see cref="T:System.String" /> object.</para>
          </term>
          <description>
            <para>Easy to use if you assign all the text to a <see cref="T:System.Text.StringBuilder" /> object, and then begin to modify it. </para>
          </description>
          <description>
            <para>Cumbersome to repeatedly call <see cref="M:System.Text.StringBuilder.ToString" /> if you must make modifications before all text is added to the <see cref="T:System.Text.StringBuilder" /> object.</para>
            <para>You must remember to work from the end of the <see cref="T:System.Text.StringBuilder" /> object's text if you're making changes. </para>
          </description>
        </item>
        <item>
          <term>
            <para>Use the <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> property to sequentially search a range of characters. </para>
          </term>
          <description>
            <para>Useful if you're concerned with individual characters or a small substring. </para>
          </description>
          <description>
            <para>Cumbersome if the number of characters to search is large or if the search logic is complex. </para>
          </description>
        </item>
        <item>
          <term>
            <para>Convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> object, and perform modifications on the <see cref="T:System.String" /> object. </para>
          </term>
          <description>
            <para>Useful if the number of modifications is small. </para>
          </description>
          <description>
            <para>Negates the performance benefit of the <see cref="T:System.Text.StringBuilder" /> class if the number of modifications is large. </para>
          </description>
        </item>
      </list>
      <para>  </para>
      <para>Let's examine these techniques in greater detail.</para>
      <list type="bullet">
        <item>
          <para>If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <see cref="T:System.Text.StringBuilder" /> object. The following example provides one possible implementation. It defines a StringBuilderFinder class whose constructor is passed a reference to a <see cref="T:System.Text.StringBuilder" /> object and the substring to find in the string. In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <see cref="T:System.Text.StringBuilder" /> object. A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.  </para>
          <para>code reference: System.Text.StringBuilder.Class#12</para>
        </item>
        <item>
          <para>Call the <see cref="M:System.Text.StringBuilder.ToString" /> method to convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> object. You can search the string by using methods such as <see cref="M:System.String.LastIndexOf(System.String)" /> or <see cref="M:System.String.StartsWith(System.String)" />, or you can use regular expressions and the <see cref="T:System.Text.RegularExpressions.Regex" /> class to search for patterns. Because both <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.String" /> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use <see cref="T:System.Text.StringBuilder" /> methods to make changes at the same position at which that text is found in the <see cref="T:System.String" /> object.  </para>
          <block subset="none" type="note">
            <para>If you adopt this approach, you should work from the end of the <see cref="T:System.Text.StringBuilder" /> object to its beginning so that you don't have to repeatedly convert the <see cref="T:System.Text.StringBuilder" /> object to a string.  </para>
          </block>
          <para>The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a <see cref="T:System.Text.StringBuilder" /> object. It then converts the text to a <see cref="T:System.String" /> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.  </para>
          <para>code reference: System.Text.StringBuilder.Class#13</para>
        </item>
        <item>
          <para>Use the <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> property to sequentially search a range of characters in a <see cref="T:System.Text.StringBuilder" /> object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.</para>
          <para>The following example is identical in functionality to the previous example but differs in implementation. It uses the <see cref="P:System.Text.StringBuilder.Chars(System.Int32)" /> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.  </para>
          <para>code reference: System.Text.StringBuilder.Class#14</para>
        </item>
        <item>
          <para>Store all the unmodified text in the <see cref="T:System.Text.StringBuilder" /> object, call the <see cref="M:System.Text.StringBuilder.ToString" /> method to convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> object, and perform the modifications on the <see cref="T:System.String" /> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <see cref="T:System.Text.StringBuilder" /> object. </para>
          <para>The following example is identical in functionality to the previous two examples but differs in implementation. It creates a <see cref="T:System.Text.StringBuilder" /> object, converts it to a <see cref="T:System.String" /> object, and then uses a regular expression to perform all remaining modifications on the string. The <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" /> method uses a lambda expression to perform the replacement on each match. </para>
          <para>code reference: System.Text.StringBuilder.Class#15</para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Converting" />
      </format>
      <format type="text/html">
        <h2>Converting the StringBuilder object to a string</h2>
      </format>
      <para>You must convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> object before you can pass the string represented by the <see cref="T:System.Text.StringBuilder" /> object to a method that has a <see cref="T:System.String" /> parameter or display it in the user interface. You perform this conversion by calling the <see cref="M:System.Text.StringBuilder.ToString" /> method. For an illustration, see the previous example, which calls the <see cref="M:System.Text.StringBuilder.ToString" /> method to convert a <see cref="T:System.Text.StringBuilder" /> object to a string so that it can be passed to a regular expression method. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a mutable string of characters. This class cannot be inherited.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor()" />
      <MemberSignature Language="C#" Value="public StringBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string value of this instance is set to <see cref="F:System.String.Empty" />, and the capacity is set to the implementation-specific default capacity.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int32 capacity)" />
      <MemberSignature Language="C#" Value="public StringBuilder (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> is less than zero.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="capacity" /> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <see cref="P:System.Text.StringBuilder.Capacity" /> property. If the number of characters to be stored in the current instance exceeds this <paramref name="capacity" /> value, the <see cref="T:System.Text.StringBuilder" /> object allocates additional memory to store them.</para>
          <para>The string value of this instance is set to <see cref="F:System.String.Empty" />. If <paramref name="capacity" /> is zero, the implementation-specific default capacity is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified capacity.</para>
        </summary>
        <param name="capacity">
          <attribution license="cc4" from="Microsoft" modified="false" />The suggested starting size of this instance. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(string value)" />
      <MemberSignature Language="C#" Value="public StringBuilder (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string used to initialize the value of the instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (int capacity, int maxCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, int32 maxCapacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="maxCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="capacity" /> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <see cref="P:System.Text.StringBuilder.Capacity" /> property. If the number of characters to be stored in the current instance exceeds this <paramref name="capacity" /> value, the <see cref="T:System.Text.StringBuilder" /> object allocates additional memory to store them.</para>
          <para>If <paramref name="capacity" /> is zero, the implementation-specific default capacity is used.</para>
          <para>The <paramref name="maxCapacity" /> property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property. If the number of characters to be stored in the current instance exceeds this <paramref name="maxCapacity" /> value, the <see cref="T:System.Text.StringBuilder" /> object does not allocate additional memory, but instead throws an exception. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class that starts with a specified capacity and can grow to a specified maximum.</para>
        </summary>
        <param name="capacity">
          <attribution license="cc4" from="Microsoft" modified="false" />The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
        <param name="maxCapacity">
          <attribution license="cc4" from="Microsoft" modified="false" />The maximum number of characters the current string can contain. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (string value, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value, int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="capacity" /> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <see cref="P:System.Text.StringBuilder.Capacity" /> property. If the number of characters to be stored in the current instance exceeds this <paramref name="capacity" /> value, the <see cref="T:System.Text.StringBuilder" /> object allocates additional memory to store them.</para>
          <para>If <paramref name="capacity" /> is zero, the implementation-specific default capacity is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string and capacity.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string used to initialize the value of the instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
        <param name="capacity">
          <attribution license="cc4" from="Microsoft" modified="false" />The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringBuilder (string value, int startIndex, int length, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value, int32 startIndex, int32 length, int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="capacity" /> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <see cref="P:System.Text.StringBuilder.Capacity" /> property. If the number of characters to be stored in the current instance exceeds this <paramref name="capacity" /> value, the <see cref="T:System.Text.StringBuilder" /> object allocates additional memory to store them.</para>
          <para>If <paramref name="capacity" /> is zero, the implementation-specific default capacity is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class from the specified substring and capacity.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string that contains the substring used to initialize the value of this instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The position within <paramref name="value" /> where the substring begins. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters in the substring. </param>
        <param name="capacity">
          <attribution license="cc4" from="Microsoft" modified="false" />The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(bool value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Boolean)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#2</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Boolean)" /> method calls the <see cref="M:System.Boolean.ToString" /> method to get the string representation of <paramref name="value" />. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified Boolean value to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The Boolean value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int8 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Byte)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#3</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Byte)" /> method calls the <see cref="M:System.Byte.ToString(System.IFormatProvider)" />  method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 8-bit unsigned integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(valuetype System.Char value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Char)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#4</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified Unicode character to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(class System.Char[] value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char[] value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method appends all the characters in the specified array to the current instance in the same order as they appear in <paramref name="value" />. If <paramref name="value" /> is null, no changes are made.</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Char[])" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#6</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of the Unicode characters in a specified array to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of characters to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(decimal value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Decimal)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#8</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Decimal)" /> method calls the <see cref="M:System.Decimal.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified decimal number to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(float64 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Double)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#9</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Double)" /> method calls the <see cref="M:System.Double.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified double-precision floating-point number to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int16 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Int16)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#10</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Int16)" /> method calls the <see cref="M:System.Int16.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 16-bit signed integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int32 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Int32)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#11</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Int32)" /> method calls the <see cref="M:System.Int32.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 32-bit signed integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int64 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Int64)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#12</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Int64)" /> method calls the <see cref="M:System.Int64.ToString(System.IFormatProvider)" />  to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 64-bit signed integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(object value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Object)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates. It defines a Dog class, creates a Dog object, and makes three calls to the <see cref="M:System.Text.StringBuilder.Append(System.Boolean)" /> method to create a string that contains the dog's name and breed.</para>
          <para>code reference: System.Text.Stringbuilder.Append#18</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Object)" /> method calls the <see cref="M:System.Object.ToString" /> method to get the string representation of <paramref name="value" />. If <paramref name="value" /> is null, no changes are made to the <see cref="T:System.Text.StringBuilder" /> object.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified object to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int8 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.SByte)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#13</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.SByte)" /> method calls the <see cref="M:System.SByte.ToString(System.IFormatProvider)" /> method  to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 8-bit signed integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(float32 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Single)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#14</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Single)" /> method calls the <see cref="M:System.Single.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified single-precision floating-point number to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(string value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.String)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#2</para>
          <para>If <paramref name="value" /> is null, no changes are made.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends a copy of the specified string to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int16 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.UInt16)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#15</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.UInt16)" /> method calls the <see cref="M:System.UInt16.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" />. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 16-bit unsigned integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.UInt32)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#16</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.UInt32)" /> calls the <see cref="M:System.UInt32.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 32-bit unsigned integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.UInt64)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#17</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.UInt64)" /> method calls the <see cref="M:System.UInt64.ToString(System.IFormatProvider)" /> method to get the string representation of <paramref name="value" /> for the current culture. To control the formatting of <paramref name="value" />, call the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> method.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified 64-bit unsigned integer to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(valuetype System.Char value, int32 repeatCount)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char value, int repeatCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char value, int32 repeatCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="repeatCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="repeatCount" /> is less than zero.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Char,System.Int32)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#5</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends a specified number of copies of the string representation of a Unicode character to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to append. </param>
        <param name="repeatCount">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of times to append <paramref name="value" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(class System.Char[] value, int32 startIndex, int32 charCount)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (char[] value, int startIndex, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(char[] value, int32 startIndex, int32 charCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is a null reference, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not both zero.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="charCount" /> or <paramref name="startIndex" /> is less than zero.</para>
          <para>-or-</para>
          <para>The sum of <paramref name="startIndex" /> and <paramref name="charCount" /> is greater than the length of <paramref name="value" />.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method appends the specified range of characters in <paramref name="value" /> to the current instance. If <paramref name="value" /> is null and <paramref name="startIndex" /> and <paramref name="count" /> are both zero, no changes are made.</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#7</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string representation of a specified subarray of Unicode characters to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A character array. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position in <paramref name="value" />. </param>
        <param name="charCount">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Append(string value, int32 startIndex, int32 count)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Append (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Append(string value, int32 startIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is a null reference, and <paramref name="startIndex" /> and <paramref name="count" /> are not both zero.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="charCount" /> or <paramref name="startIndex" /> is less than zero. </para>
          <para> -or- </para>
          <para>The sum of <paramref name="startIndex" /> and <paramref name="charCount" /> is greater than the length of <paramref name="value" /> . </para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method appends the specified range of characters in <paramref name="value" /> to the current instance. If <paramref name="value" /> is null and <paramref name="startIndex" /> and <paramref name="count" /> are both zero, no changes are made.</para>
          <para>The <see cref="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)" /> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <see cref="T:System.Text.StringBuilder" /> object, as the following example illustrates.</para>
          <para>code reference: System.Text.StringBuilder.Append#19</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends a copy of a specified substring to this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string that contains the substring to append. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position of the substring within <paramref name="value" />. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters in <paramref name="value" /> to append. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <code lang="C#">using System;
using System.Text;

public class StringBuilderTest {
  public static void Main() { 
     
      StringBuilder sb = new StringBuilder("The high ");
      Console.WriteLine( sb.AppendFormat("temperature today was {0, 6}.", 88) ); 
  }
}
      </code>
          <para>The output is</para>
          <code>The high temperature today was     88.
 </code>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <see cref="T:System.Text.StringBuilder" /> object.</para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to <paramref name="arg0" />, the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of <paramref name="arg0" />.</para>
          <para>The syntax of a format item is as follows:</para>
          <para>{index[,length][:formatString]}</para>
          <para>Elements in square brackets are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>index</para>
              </term>
              <description>
                <para>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is null, the format item is replaced by <see cref="F:System.String.Empty" />. If there is no parameter in the index position, a <see cref="T:System.FormatException" /> is thrown.</para>
              </description>
            </item>
            <item>
              <term>
                <para>,length</para>
              </term>
              <description>
                <para>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</para>
              </description>
            </item>
            <item>
              <term>
                <para>:formatString</para>
              </term>
              <description>
                <para>A standard or custom format string that is supported by the parameter.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>For the standard and custom format strings used with date and time values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>. For the standard and custom format strings used with numeric values, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. For the standard format strings used with enumerations, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
          </block>
          <para>
            <paramref name="arg0" /> represents the object to be formatted. Each format item in <paramref name="format" /> is replaced with the string representation of <paramref name="arg0" />. If the format item includes <paramref name="formatString" /> and <paramref name="arg0" /> implements the <see cref="T:System.IFormattable" /> interface, then arg0.Format(formatString, null) defines the formatting. Otherwise, arg0.ToString() defines the formatting.</para>
          <para>If the string assigned to <paramref name="format" /> is "Thank you for your donation of {0:####} cans of food to our charitable organization." and <paramref name="arg0" /> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization." </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of <paramref name="arg0" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks). </param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to format. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, class System.Object[] args)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <code lang="C#">using System;
using System.Text;

public class StringBuilderTest {
  public static void Main() {

     string [] strings = {"very", "very", null, "high"};

     StringBuilder sb = new StringBuilder("The high ");
     Console.WriteLine( sb.AppendFormat("temperature today was {0}, {1} {2}{3}.", strings) ); 
  }
}
   </code>
          <para>The output is</para>
          <para>
            <c>The high
      temperature today was very, very high.</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <see cref="T:System.Text.StringBuilder" /> object. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</para>
          <para>The syntax of a format item is as follows:</para>
          <para>{index[,length][:formatString]}</para>
          <para>Elements in square brackets are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>index</para>
              </term>
              <description>
                <para>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is null, the format item is replaced by <see cref="F:System.String.Empty" />. If there is no parameter in the index position, a <see cref="T:System.FormatException" /> is thrown.</para>
              </description>
            </item>
            <item>
              <term>
                <para>,length</para>
              </term>
              <description>
                <para>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</para>
              </description>
            </item>
            <item>
              <term>
                <para>:formatString</para>
              </term>
              <description>
                <para>A standard or custom format string that is supported by the parameter.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>For the standard and custom format strings used with date and time values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>. For the standard and custom format strings used with numeric values, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. For the standard format strings used with enumerations, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
          </block>
          <para>
            <paramref name="args" /> represents the objects to be formatted. Each format item in <paramref name="format" /> is replaced with the string representation of the corresponding object in <paramref name="args" />. If the format item includes <paramref name="formatString" /> and the corresponding object in <paramref name="args" /> implements the <see cref="T:System.IFormattable" /> interface, then args[index].Format(formatString, provider) defines the formatting. Otherwise, args[index].ToString(provider) defines the formatting.</para>
          <para>If the string assigned to <paramref name="format" /> is "Thank you for your donation of {0:####} cans of food to our charitable organization." and <paramref name="arg0" /> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization." </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks). </param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of objects to format. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, class System.Object[] args)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> or <paramref name="args" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <code lang="C#">using System;
using System.Text;

public class StringBuilderTest {
  public static void Main() {

     string a = "very";
     string b = "very";
     string c = "high";

     StringBuilder sb = new StringBuilder("The high ");
     Console.WriteLine(sb.AppendFormat(null, "temperature today was {0}, {1} {2}.", a, b, c) ); 
  }
}
   </code>
          <para>The output is</para>
          <para>
            <c>The high
      temperature today was very, very high.</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <see cref="T:System.Text.StringBuilder" /> object. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</para>
          <para>The syntax of a format item is as follows:</para>
          <para>{index[,length][:formatString]}</para>
          <para>Elements in square brackets are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>index</para>
              </term>
              <description>
                <para>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is null, the format item is replaced by <see cref="F:System.String.Empty" />. If there is no parameter in the index position, a <see cref="T:System.FormatException" /> is thrown.</para>
              </description>
            </item>
            <item>
              <term>
                <para>,length</para>
              </term>
              <description>
                <para>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</para>
              </description>
            </item>
            <item>
              <term>
                <para>:formatString</para>
              </term>
              <description>
                <para>A standard or custom format string that is supported by the parameter.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>For the standard and custom format strings used with date and time values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>. For the standard and custom format strings used with numeric values, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. For the standard format strings used with enumerations, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
          </block>
          <para>The <paramref name="provider" /> parameter specifies an <see cref="T:System.IFormatProvider" /> implementation that can provide formatting information for the objects in <paramref name="args" />. <paramref name="provider" /> can be any of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that provides culture-specific formatting information.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides culture-specific formatting information for numeric values in <paramref name="args" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that provides culture-specific formatting information for date and time values in <paramref name="args" />.</para>
            </item>
            <item>
              <para>A custom <see cref="T:System.IFormatProvider" /> implementation that provides formatting information for one or more of the objects in <paramref name="args" />. Typically, such an implementation also implements the <see cref="T:System.ICustomFormatter" /> interface. The second example in the next section illustrates an <see cref="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])" /> method call with a custom <see cref="T:System.IFormatProvider" /> implementation.</para>
            </item>
          </list>
          <para>If the <paramref name="provider" /> parameter is null, format provider information is obtained from the current culture.</para>
          <para>
            <paramref name="args" /> represents the objects to be formatted. Each format item in <paramref name="format" /> is replaced with the string representation of the corresponding object in <paramref name="args" />. If the format item includes <paramref name="formatString" /> and the corresponding object in <paramref name="args" /> implements the <see cref="T:System.IFormattable" /> interface, then args[index].Format(formatString, provider) defines the formatting. Otherwise, args[index].ToString(provider) defines the formatting.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument. </para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks). </param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of objects to format.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <code lang="C#">using System;
using System.Text;

public class StringBuilderTest {
  public static void Main() {

     StringBuilder sb = new StringBuilder("The high ");
     Console.WriteLine( sb.AppendFormat("temperature today was {0} {1}.", "very", "high") ); 
  }
}
   </code>
          <para>The output is</para>
          <c>
            <para>The high temperature today was very high.</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <see cref="T:System.Text.StringBuilder" /> object. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <paramref name="arg0" /> and <paramref name="arg1" />, the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</para>
          <para>The syntax of a format item is as follows:</para>
          <para>{index[,length][:formatString]}</para>
          <para>Elements in square brackets are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>index</para>
              </term>
              <description>
                <para>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is null, the format item is replaced by <see cref="F:System.String.Empty" />. If there is no parameter in the index position, a <see cref="T:System.FormatException" /> is thrown.</para>
              </description>
            </item>
            <item>
              <term>
                <para>,length</para>
              </term>
              <description>
                <para>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</para>
              </description>
            </item>
            <item>
              <term>
                <para>:formatString</para>
              </term>
              <description>
                <para>A standard or custom format string that is supported by the parameter. </para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>For the standard and custom format strings used with date and time values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>. For the standard and custom format strings used with numeric values, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. For the standard format strings used with enumerations, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
          </block>
          <para>
            <paramref name="arg0" /> and <paramref name="arg1" /> represent the objects to be formatted. Each format item in <paramref name="format" /> is replaced with the string representation of either <paramref name="arg0" /> or <paramref name="arg1" />. If the format item includes <paramref name="formatString" /> and the corresponding object implements the <see cref="T:System.IFormattable" /> interface, then argx.ToString(formatString, provider) defines the formatting, where x is the index of the argument. Otherwise, argx.ToString(provider) defines the formatting.</para>
          <para>If the string assigned to <paramref name="format" /> is "Thank you for your donation of {0:####} cans of food to our charitable organization." and <paramref name="arg0" /> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization." </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks). </param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to format. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to format. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AppendFormat">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <code lang="C#">using System;
using System.Text;

public class StringBuilderTest {
  public static void Main() {

     StringBuilder sb = new StringBuilder("The high ");
     Console.WriteLine( sb.AppendFormat("temperature today was {0} {1} {2}.", "very", "very", "high") ); 
  }
}
   </code>
          <para>The output is</para>
          <para>
            <c>The high
      temperature today was very very high.</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <see cref="T:System.Text.StringBuilder" /> object.</para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <paramref name="arg0" /> through <paramref name="arg2" />, the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</para>
          <para>The syntax of a format item is as follows:</para>
          <para>{index[,length][:formatString]}</para>
          <para>Elements in square brackets are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>index</para>
              </term>
              <description>
                <para>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is null, the format item is replaced by <see cref="F:System.String.Empty" />. If there is no parameter in the index position, a <see cref="T:System.FormatException" /> is thrown.</para>
              </description>
            </item>
            <item>
              <term>
                <para>,length</para>
              </term>
              <description>
                <para>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</para>
              </description>
            </item>
            <item>
              <term>
                <para>:formatString</para>
              </term>
              <description>
                <para>A standard or custom format string that is supported by the parameter.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>For the standard and custom format strings used with date and time values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>. For the standard and custom format strings used with numeric values, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. For the standard format strings used with enumerations, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
          </block>
          <para>
            <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" /> represent the objects to be formatted. Each format item in <paramref name="format" /> is replaced with the string representation of either <paramref name="arg0" />, <paramref name="arg1" />, or <paramref name="arg2" />, depending on the index of the format item. If the format item includes <paramref name="formatString" /> and the corresponding object in <paramref name="args" /> implements the <see cref="T:System.IFormattable" /> interface, then argx.ToString(formatString, null) defines the formatting, where x is the index of the argument. Otherwise, argx.ToString() defines the formatting.</para>
          <para>If the string assigned to <paramref name="format" /> is "Thank you for your donation of {0:####} cans of food to our charitable organization." and <paramref name="arg0" /> is an integer with the value 10, the return value will be "Thank you for your donation of 10 cans of food to our charitable organization." </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks). </param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to format. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to format. </param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The third object to format. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AppendLine">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default line terminator is the current value of the <see cref="P:System.Environment.NewLine" /> property.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="AppendLine">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder AppendLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder AppendLine(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default line terminator is the current value of the <see cref="P:System.Environment.NewLine" /> property.</para>
          <para>The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends a copy of the specified string followed by the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the append operation has completed.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to append. </param>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="ILASM" Value=".property int32 Capacity { public hidebysig specialname instance int32 get_Capacity() public hidebysig specialname instance void set_Capacity(int32 value) }" />
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> containing the maximum number of characters that can be contained in the memory
   allocated by the current instance.</para>
        </value>
        <exception cref="T:System.ArgumentException">The value specified for a set operation is less than <see cref="P:System.Text.StringBuilder.Length" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Text.StringBuilder.Capacity" /> does not affect the string value of the current instance. <see cref="P:System.Text.StringBuilder.Capacity" /> can be decreased as long as it is not less than <see cref="P:System.Text.StringBuilder.Length" />.</para>
          <para>The <see cref="T:System.Text.StringBuilder" /> dynamically allocates more space when required and increases <see cref="P:System.Text.StringBuilder.Capacity" /> accordingly. For performance reasons, a <see cref="T:System.Text.StringBuilder" /> might allocate more memory than needed. The amount of memory allocated is implementation-specific.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="ILASM" Value=".property valuetype System.Char Chars[int32 index] { public hidebysig specialname instance valuetype System.Char get_Chars(int32 index) public hidebysig specialname instance void set_Chars(int32 index, valuetype System.Char value) }" />
      <MemberSignature Language="C#" Value="public char this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Gets or sets the character at a specified position in the current
      instance.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.Char" /> containing the Unicode character at location <paramref name="index" /> in the current instance.</para>
        </value>
        <remarks>
          <para>
            <paramref name="index" /> is the position of a character within the
<see cref="T:System.Text.StringBuilder" />. The first character in the string is at index 0. 
   The length of a string is the number of characters it contains. The last
   accessible character of a <see cref="T:System.Text.StringBuilder" /> instance is at the index <see cref="P:System.Text.StringBuilder.Length" />
   - 1.</para>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than or equal to the length of the current instance.</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Text.StringBuilder.Clear" /> is a convenience method that is equivalent to setting the <see cref="P:System.Text.StringBuilder.Length" /> property of the current instance to 0 (zero).</para>
          <para>Calling the <see cref="M:System.Text.StringBuilder.Clear" /> method does not modify the current instance's <see cref="P:System.Text.StringBuilder.Capacity" /> or <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes all characters from the current <see cref="T:System.Text.StringBuilder" /> instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose <see cref="P:System.Text.StringBuilder.Length" /> is 0 (zero).</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" /> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <see cref="T:System.Text.StringBuilder" /> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible. </para>
          <para>For example, your application could populate a <see cref="T:System.Text.StringBuilder" /> object with a large number of characters then use the <see cref="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" /> method to copy small, successive pieces of the <see cref="T:System.Text.StringBuilder" /> object to an array where the pieces are processed. When all the data in the <see cref="T:System.Text.StringBuilder" /> object is processed, the size of the <see cref="T:System.Text.StringBuilder" /> object is set to zero and the cycle is repeated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Copies the characters from a specified segment of this instance to a specified segment of a destination <see cref="T:System.Char" /> array.</para>
        </summary>
        <param name="sourceIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position in this instance where characters will be copied from. The index is zero-based.</param>
        <param name="destination">
          <attribution license="cc4" from="Microsoft" modified="false" />The array where characters will be copied.</param>
        <param name="destinationIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position in <paramref name="destination" /> where characters will be copied. The index is zero-based.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to be copied.</param>
      </Docs>
    </Member>
    <Member MemberName="EnsureCapacity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance int32 EnsureCapacity(int32 capacity)" />
      <MemberSignature Language="C#" Value="public int EnsureCapacity (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EnsureCapacity(int32 capacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> is less zero. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the current capacity is less than the <paramref name="capacity" /> parameter, memory for this instance is reallocated to hold at least <paramref name="capacity" /> number of characters; otherwise, no memory is changed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" /> is at least the specified value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new capacity of this instance.</para>
        </returns>
        <param name="capacity">
          <attribution license="cc4" from="Microsoft" modified="false" />The minimum capacity to ensure. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance bool Equals(class System.Text.StringBuilder sb)" />
      <MemberSignature Language="C#" Value="public bool Equals (System.Text.StringBuilder sb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Text.StringBuilder sb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sb" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance is equal to a specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if this instance and <paramref name="sb" /> have equal string, <see cref="P:System.Text.StringBuilder.Capacity" />, and <see cref="P:System.Text.StringBuilder.MaxCapacity" /> values; otherwise, false.</para>
        </returns>
        <param name="sb">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare with this instance, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, bool value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Boolean.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a Boolean value into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int8 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Byte.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, valuetype System.Char value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Char.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, class System.Char[] value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, char[] value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance </para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
          <para>If <paramref name="value" /> is null, the <see cref="T:System.Text.StringBuilder" /> is not changed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The character array to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, decimal value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Decimal.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a decimal number into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, float64 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Double.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int16 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Int16.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int32 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Int32.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int64 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance </para>
          <para> -or- </para>
          <para>
            <paramref name="index" /> is less than zero. </para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Int64.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, object value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Object.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
          <para>If <paramref name="value" /> is null, the value of this instance is unchanged.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of an object into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to insert, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int8 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.SByte.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, float32 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Single.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, string value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance </para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</para>
          <para>This instance of <see cref="T:System.Text.StringBuilder" /> is not changed if <paramref name="value" /> is null, or <paramref name="value" /> is not null but its length is zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts a string into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int16 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.UInt16.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.UInt32.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.UInt64.ToString" /> is used to get a string representation of <paramref name="value" />. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, string value, int32 count)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, string value, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, string value, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance </para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is less than zero</para>
          <para>-or-</para>
          <para>
            <paramref name="count" /> is less than zero</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
          <para>This <see cref="T:System.Text.StringBuilder" /> object is not changed if <paramref name="value" /> is null, <paramref name="value" /> is not null but its length is zero, or <paramref name="count" /> is zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts one or more copies of a specified string into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after insertion has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to insert. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of times to insert <paramref name="value" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, class System.Char[] value, int32 startIndex, int32 charCount)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Insert (int index, char[] value, int startIndex, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Insert(int32 index, char[] value, int32 startIndex, int32 charCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is a null reference, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not both zero.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="index" /> is greater than the length of the current instance or less than zero.</para>
          <para>-or-</para>
          <para>
            <paramref name="startIndex" /> or <paramref name="charCount" /> is less than zero or their sum is greater than the length of <paramref name="value" />.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the insert operation has completed.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where insertion begins. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A character array. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting index within <paramref name="value" />. </param>
        <param name="charCount">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to insert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="ILASM" Value=".property int32 Length { public hidebysig specialname instance int32 get_Length() public hidebysig specialname instance void set_Length(int32 value) }" />
      <MemberSignature Language="C#" Value="public int Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> containing the length of the current instance.</para>
        </value>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than 0.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Like the <see cref="P:System.String.Length" /> property, the <see cref="P:System.Text.StringBuilder.Length" /> property indicates the length of the current string object. Unlike the <see cref="P:System.String.Length" /> property, which is read-only, the <see cref="P:System.Text.StringBuilder.Length" /> property allows you to modify the length of the string stored to the <see cref="T:System.Text.StringBuilder" /> object.  </para>
          <para>If the specified length is less than the current length, the current <see cref="T:System.Text.StringBuilder" /> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <see cref="T:System.Text.StringBuilder" /> object is padded with the Unicode NULL character (U+0000). </para>
          <para>If the specified length is greater than the current capacity, <see cref="P:System.Text.StringBuilder.Capacity" /> increases so that it is greater than or equal to the specified length.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the length of the current <see cref="T:System.Text.StringBuilder" /> object.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MaxCapacity">
      <MemberSignature Language="C#" Value="public int MaxCapacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxCapacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum capacity for this implementation is <see cref="F:System.Int32.MaxValue" />. However, this value is implementation-specific and might be different in other or later implementations.</para>
          <para>In the net_v40_short and the net_v45, when you instantiate the <see cref="T:System.Text.StringBuilder" /> object by calling the <see cref="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)" /> constructor, both the length and the capacity of the <see cref="T:System.Text.StringBuilder" /> instance can grow beyond the value of its <see cref="P:System.Text.StringBuilder.MaxCapacity" /> property. This can occur particularly when you call the <see cref="M:System.Text.StringBuilder.Append(System.String)" /> and <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)" /> methods to append small strings.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the maximum capacity of this instance.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Remove(int32 startIndex, int32 length)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Remove (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Remove(int32 startIndex, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="startIndex" /> or <paramref name="length" /> is less than zero </para>
          <para>-or-</para>
          <para>The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the length of the current instance.</para>
        </exception>
        <example>
          <code lang="C#">using System;
using System.Text;

public class StringBuilderTest  {
   public static void Main()  {
   
      StringBuilder sb = new StringBuilder("0123456789");
      Console.WriteLine(sb);
      sb.Remove(3, 4);
      Console.WriteLine(sb);
   }
}
   </code>
          <para>The output is</para>
          <c>
            <para>0123456789</para>
            <para>012789</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current method removes the specified range of characters from the current instance. The characters at (<paramref name="startIndex" /> + <paramref name="length" />) are moved to <paramref name="startIndex" />, and the string value of the current instance is shortened by <paramref name="length" />. The capacity of the current instance is unaffected.</para>
          <block subset="none" type="note">
            <para>The <see cref="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)" /> method modifies the value of the current <see cref="T:System.Text.StringBuilder" /> instance and returns that instance. It does not create and return a new <see cref="T:System.Text.StringBuilder" /> object. </para>
          </block>
          <para />
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes the specified range of characters from this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance after the excise operation has completed.</para>
        </returns>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based position in this instance where removal begins. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to remove. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(valuetype System.Char oldChar, valuetype System.Char newChar)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(char oldChar, char newChar) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method performs an ordinal, case-sensitive comparison to identify occurrences of <paramref name="oldChar" /> in the current instance. The size of the current <see cref="T:System.Text.StringBuilder" /> instance is unchanged after the replacement. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Replaces all occurrences of a specified character in this instance with another specified character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />.</para>
        </returns>
        <param name="oldChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to replace. </param>
        <param name="newChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The character that replaces <paramref name="oldChar" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(string oldValue, string newValue)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (string oldValue, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(string oldValue, string newValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldValue" /> is a null reference.</exception>
        <exception cref="T:System.ArgumentException">The length of <paramref name="oldvalue" /> is zero.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method performs an ordinal, case-sensitive comparison to identify occurrences of <paramref name="oldValue" /> in the current instance. If <paramref name="newValue" /> is null or <see cref="F:System.String.Empty" />, all occurrences of <paramref name="oldValue" /> are removed. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Replaces all occurrences of a specified string in this instance with another specified string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.</para>
        </returns>
        <param name="oldValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to replace. </param>
        <param name="newValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The string that replaces <paramref name="oldValue" />, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(valuetype System.Char oldChar, valuetype System.Char newChar, int32 startIndex, int32 count)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (char oldChar, char newChar, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(char oldChar, char newChar, int32 startIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>The sum of <paramref name="startIndex" /> and <paramref name="count" /> is larger than the length of the current instance </para>
          <para>-or-</para>
          <para>
            <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method performs an ordinal, case-sensitive comparison to identify occurrences of <paramref name="oldChar" /> in the current instance. The size of the current <see cref="T:System.Text.StringBuilder" /> object is unchanged after the replacement. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> -1.</para>
        </returns>
        <param name="oldChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to replace. </param>
        <param name="newChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The character that replaces <paramref name="oldChar" />. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where the substring begins. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The length of the substring. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(string oldValue, string newValue, int32 startIndex, int32 count)" />
      <MemberSignature Language="C#" Value="public System.Text.StringBuilder Replace (string oldValue, string newValue, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.StringBuilder Replace(string oldValue, string newValue, int32 startIndex, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="oldValue" /> is a null reference.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</para>
          <para>-or-</para>
          <para>The sum of <paramref name="startIndex" /> and <paramref name="count" /> is greater than the length of the current instance.</para>
        </exception>
        <exception cref="T:System.ArgumentException">The length of <paramref name="oldvalue" /> is zero.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method performs an ordinal, case-sensitive comparison to identify occurrences of <paramref name="oldValue" /> in the specified substring. If <paramref name="newValue" /> is null or <see cref="F:System.String.Empty" />, all occurrences of <paramref name="oldValue" /> are removed. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1.</para>
        </returns>
        <param name="oldValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to replace. </param>
        <param name="newValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The string that replaces <paramref name="oldValue" />, or null. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in this instance where the substring begins. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The length of the substring. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="context" /> parameter is reserved for future use and does not participate in this operation.</para>
          <para>For more information, see the <see cref="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.StringBuilder" /> object.</para>
        </summary>
        <param name="info">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to populate with serialization information.</param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The place to store and retrieve serialized data. Reserved for future use.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ToString()" />
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You must call the <see cref="M:System.Text.StringBuilder.ToString" /> method to convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> object before you can pass the string represented by the <see cref="T:System.Text.StringBuilder" /> object to a method that has a <see cref="T:System.String" /> parameter or display it in the user interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string whose value is the same as this instance.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToString(int32 startIndex, int32 length)" />
      <MemberSignature Language="C#" Value="public string ToString (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(int32 startIndex, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. </para>
          <para> -or- </para>
          <para>The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the length of the current instance. </para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You must call the <see cref="M:System.Text.StringBuilder.ToString" /> method to convert the <see cref="T:System.Text.StringBuilder" /> object to a <see cref="T:System.String" /> object before you can pass the string represented by the <see cref="T:System.Text.StringBuilder" /> object to a method that has a <see cref="T:System.String" /> parameter or display it in the user interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a substring of this instance to a <see cref="T:System.String" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string whose value is the same as the specified substring of this instance.</para>
        </returns>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position of the substring in this instance. </param>
        <param name="length">
          <attribution license="cc4" from="Microsoft" modified="false" />The length of the substring. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>