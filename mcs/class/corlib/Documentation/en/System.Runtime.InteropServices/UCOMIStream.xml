<?xml version="1.0" encoding="utf-8"?>
<Type Name="UCOMIStream" FullName="System.Runtime.InteropServices.UCOMIStream">
  <TypeSignature Maintainer="auto" Language="C#" Value="public interface UCOMIStream" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract UCOMIStream" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0000000c-0000-0000-c000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>For more information, please see the existing documentation for IStream and ISequentialStream in the com subfolder of the MSDN library.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Use <see cref="T:System.Runtime.InteropServices.ComTypes.IStream" /> instead.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public void Clone (out System.Runtime.InteropServices.UCOMIStream ppstm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clone(class System.Runtime.InteropServices.UCOMIStream ppstm) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppstm" Type="System.Runtime.InteropServices.UCOMIStream&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppstm">To be added: an object of type 'UCOMIStream&amp;'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (int grfCommitFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(int32 grfCommitFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grfCommitFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::Commit in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage.</para>
        </summary>
        <param name="grfCommitFlags">
          <attribution license="cc4" from="Microsoft" modified="false" />Controls how the changes for the stream object are committed. </param>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Runtime.InteropServices.UCOMIStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Runtime.InteropServices.UCOMIStream pstm, int64 cb, native int pcbRead, native int pcbWritten) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstm" Type="System.Runtime.InteropServices.UCOMIStream" />
        <Parameter Name="cb" Type="System.Int64" />
        <Parameter Name="pcbRead" Type="System.IntPtr" />
        <Parameter Name="pcbWritten" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::CopyTo in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</para>
        </summary>
        <param name="pstm">
          <attribution license="cc4" from="Microsoft" modified="false" />Reference to the destination stream. </param>
        <param name="cb">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to copy from the source stream. </param>
        <param name="pcbRead">
          <attribution license="cc4" from="Microsoft" modified="false" />On successful return, contains the actual number of bytes read from the source. </param>
        <param name="pcbWritten">
          <attribution license="cc4" from="Microsoft" modified="false" />On successful return, contains the actual number of bytes written to the destination. </param>
      </Docs>
    </Member>
    <Member MemberName="LockRegion">
      <MemberSignature Language="C#" Value="public void LockRegion (long libOffset, long cb, int dwLockType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockRegion(int64 libOffset, int64 cb, int32 dwLockType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libOffset" Type="System.Int64" />
        <Parameter Name="cb" Type="System.Int64" />
        <Parameter Name="dwLockType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::LockRegion in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Restricts access to a specified range of bytes in the stream.</para>
        </summary>
        <param name="libOffset">
          <attribution license="cc4" from="Microsoft" modified="false" />The byte offset for the beginning of the range. </param>
        <param name="cb">
          <attribution license="cc4" from="Microsoft" modified="false" />The length of the range, in bytes, to restrict. </param>
        <param name="dwLockType">
          <attribution license="cc4" from="Microsoft" modified="false" />The requested restrictions on accessing the range. </param>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (byte[] pv, int cb, IntPtr pcbRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(unsigned int8[] pv, int32 cb, native int pcbRead) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.Byte[]" />
        <Parameter Name="cb" Type="System.Int32" />
        <Parameter Name="pcbRead" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for ISequentialStream::Read in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.</para>
        </summary>
        <param name="pv">
          <attribution license="cc4" from="Microsoft" modified="false" />On successful return, contains the data read frtom the stream. </param>
        <param name="cb">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to read from the stream object. </param>
        <param name="pcbRead">
          <attribution license="cc4" from="Microsoft" modified="false" />Pointer to a ULONG variable that receives the actual number of bytes read from the stream object. </param>
      </Docs>
    </Member>
    <Member MemberName="Revert">
      <MemberSignature Language="C#" Value="public void Revert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Revert() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::Revert in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Discards all changes that have been made to a transacted stream since the last <see cref="M:System.Runtime.InteropServices.UCOMIStream.Commit(System.Int32)" /> call.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (long dlibMove, int dwOrigin, IntPtr plibNewPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(int64 dlibMove, int32 dwOrigin, native int plibNewPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dlibMove" Type="System.Int64" />
        <Parameter Name="dwOrigin" Type="System.Int32" />
        <Parameter Name="plibNewPosition" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::Seek in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.</para>
        </summary>
        <param name="dlibMove">
          <attribution license="cc4" from="Microsoft" modified="false" />Displacement to add to <paramref name="dwOrigin" />. </param>
        <param name="dwOrigin">
          <attribution license="cc4" from="Microsoft" modified="false" />Specifies the origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file. </param>
        <param name="plibNewPosition">
          <attribution license="cc4" from="Microsoft" modified="false" />On successful return, contains the offset of the seek pointer from the beginning of the stream. </param>
      </Docs>
    </Member>
    <Member MemberName="SetSize">
      <MemberSignature Language="C#" Value="public void SetSize (long libNewSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSize(int64 libNewSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libNewSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::SetSize in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes the size of the stream object.</para>
        </summary>
        <param name="libNewSize">
          <attribution license="cc4" from="Microsoft" modified="false" />Specifies the new size of the stream as a number of bytes. </param>
      </Docs>
    </Member>
    <Member MemberName="Stat">
      <MemberSignature Language="C#" Value="public void Stat (out System.Runtime.InteropServices.STATSTG pstatstg, int grfStatFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stat(valuetype System.Runtime.InteropServices.STATSTG pstatstg, int32 grfStatFlag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstatstg" Type="System.Runtime.InteropServices.STATSTG&amp;" RefType="out" />
        <Parameter Name="grfStatFlag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pstatstg">To be added: an object of type 'STATSTG&amp;'</param>
        <param name="grfStatFlag">To be added: an object of type 'int'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockRegion">
      <MemberSignature Language="C#" Value="public void UnlockRegion (long libOffset, long cb, int dwLockType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnlockRegion(int64 libOffset, int64 cb, int32 dwLockType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libOffset" Type="System.Int64" />
        <Parameter Name="cb" Type="System.Int64" />
        <Parameter Name="dwLockType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for IStream::UnlockRegion in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes the access restriction on a range of bytes previously restricted with <see cref="M:System.Runtime.InteropServices.UCOMIStream.LockRegion(System.Int64,System.Int64,System.Int32)" />.</para>
        </summary>
        <param name="libOffset">
          <attribution license="cc4" from="Microsoft" modified="false" />The byte offset for the beginning of the range. </param>
        <param name="cb">
          <attribution license="cc4" from="Microsoft" modified="false" />The length, in bytes, of the range to restrict. </param>
        <param name="dwLockType">
          <attribution license="cc4" from="Microsoft" modified="false" />The access restrictions previously placed on the range. </param>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] pv, int cb, IntPtr pcbWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] pv, int32 cb, native int pcbWritten) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.Byte[]" />
        <Parameter Name="cb" Type="System.Int32" />
        <Parameter Name="pcbWritten" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information, please see the existing documentation for ISequentialStream::Write in the MSDN library.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a specified number of bytes into the stream object starting at the current seek pointer.</para>
        </summary>
        <param name="pv">
          <attribution license="cc4" from="Microsoft" modified="false" />Buffer to write this stream to. </param>
        <param name="cb">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write into the stream. </param>
        <param name="pcbWritten">
          <attribution license="cc4" from="Microsoft" modified="false" />On successful return, contains the actual number of bytes written to the stream object. The caller can set this pointer to null, in which case this method does not provide the actual number of bytes written. </param>
      </Docs>
    </Member>
  </Members>
</Type>