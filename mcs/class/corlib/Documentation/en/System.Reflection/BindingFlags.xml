<?xml version="1.0" encoding="utf-8"?>
<Type Name="BindingFlags" FullName="System.Reflection.BindingFlags" FullNameSP="System_Reflection_BindingFlags" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed serializable BindingFlags extends System.Enum" />
  <TypeSignature Language="C#" Value="public enum BindingFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed BindingFlags extends System.Enum" />
  <MemberOfLibrary>Reflection</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>These BindingFlags control binding for a great many classes in the System, System.Reflection, and System.Runtime namespaces that invoke, create, get, set, and find members and types.</para>
      <para>BindingFlags are used in the following <see cref="T:System.Type" /> methods and other places such as <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> : </para>
      <list type="bullet">
        <item>
          <para>
            <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetMembers" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetEvents" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetConstructors" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetMethods" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetFields" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetEvent(System.String)" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.GetMember(System.String)" /> </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> </para>
        </item>
      </list>
      <para>InvokeMember and GetMethod are especially important.</para>
      <para>The binding flags can be categorized by how they identify a type member, as listed in the following table.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Identified by Accessibility</para>
            </term>
            <description>
              <para>Identified by Binding Argument</para>
            </description>
            <description>
              <para>Identified by Operation</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="F:System.Reflection.BindingFlags.DeclaredOnly" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.FlattenHierarchy" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.IgnoreCase" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.IgnoreReturn" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.Instance" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.NonPublic" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.Public" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.Static" />
            </para>
          </term>
          <description>
            <para>
              <see cref="F:System.Reflection.BindingFlags.ExactBinding" />
            </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.OptionalParamBinding" />
            </para>
          </description>
          <description>
            <para>
              <see cref="F:System.Reflection.BindingFlags.CreateInstance" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.GetField" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.SetField" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.GetProperty" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.SetProperty" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.InvokeMethod" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.PutDispProperty" /> </para>
            <para>
              <see cref="F:System.Reflection.BindingFlags.PutRefDispProperty" />
            </para>
          </description>
        </item>
      </list>
      <block subset="none" type="note">
        <para>You must specify Instance or Static along with Public or NonPublic or no members will be returned.</para>
      </block>
      <para>The following table lists the coercions performed by the default <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" />. This table applies especially to the ExactBinding binding flag.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Source Type </para>
            </term>
            <description>
              <para>Target Type </para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>Any type </para>
          </term>
          <description>
            <para>Its base type. </para>
          </description>
        </item>
        <item>
          <term>
            <para>Any type </para>
          </term>
          <description>
            <para>The interface it implements. </para>
          </description>
        </item>
        <item>
          <term>
            <para>Char </para>
          </term>
          <description>
            <para>UInt16, UInt32, Int32, UInt64, Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>Byte </para>
          </term>
          <description>
            <para>Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>SByte </para>
          </term>
          <description>
            <para>Int16, Int32, Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>UInt16 </para>
          </term>
          <description>
            <para>UInt32, Int32, UInt64, Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>Int16 </para>
          </term>
          <description>
            <para>Int32, Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>UInt32 </para>
          </term>
          <description>
            <para>UInt64, Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>Int32 </para>
          </term>
          <description>
            <para>Int64, Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>UInt64 </para>
          </term>
          <description>
            <para>Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>Int64 </para>
          </term>
          <description>
            <para>Single, Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>Single </para>
          </term>
          <description>
            <para>Double </para>
          </description>
        </item>
        <item>
          <term>
            <para>Non-reference </para>
          </term>
          <description>
            <para>By-reference. </para>
          </description>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags CreateInstance = 0x200" />
      <MemberSignature Language="C#" Value="CreateInstance" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags CreateInstance = int32(512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>CreateInstance</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that Reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DeclaredOnly">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags DeclaredOnly = 0x2" />
      <MemberSignature Language="C#" Value="DeclaredOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags DeclaredOnly = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>DeclaredOnly</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Default = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <MemberValue>Default</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies no binding flag.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ExactBinding">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags ExactBinding = 0x10000" />
      <MemberSignature Language="C#" Value="ExactBinding" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags ExactBinding = int32(65536)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>ExactBinding</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <see cref="T:System.Security.Permissions.ReflectionPermission" />. This is consistent with lookup of members that are protected, private, and so on.</para>
          <para>The general principle is that <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" /> should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.</para>
          <para>The default binder ignores this flag, while custom binders can implement the semantics of this flag.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null Binder object, since that implies that the caller is supplying BindToXXX implementations that will pick the appropriate method.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="FlattenHierarchy">
      <MemberSignature Language="C#" Value="FlattenHierarchy" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags FlattenHierarchy = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <MemberValue>FlattenHierarchy</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags GetField = 0x400" />
      <MemberSignature Language="C#" Value="GetField" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags GetField = int32(1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>GetField</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the value of the specified field should be returned.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags GetProperty = 0x1000" />
      <MemberSignature Language="C#" Value="GetProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags GetProperty = int32(4096)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>GetProperty</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the value of the specified property should be returned.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags IgnoreCase = 0x1" />
      <MemberSignature Language="C#" Value="IgnoreCase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags IgnoreCase = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>IgnoreCase</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the case of the member name should not be considered when binding.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IgnoreReturn">
      <MemberSignature Language="C#" Value="IgnoreReturn" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags IgnoreReturn = int32(16777216)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <MemberValue>IgnoreReturn</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Used in COM interop to specify that the return value of the member can be ignored.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags Instance = 0x4" />
      <MemberSignature Language="C#" Value="Instance" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Instance = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>Instance</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that instance members are to be included in the search.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="InvokeMethod">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags InvokeMethod = 0x100" />
      <MemberSignature Language="C#" Value="InvokeMethod" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags InvokeMethod = int32(256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>InvokeMethod</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NonPublic">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags NonPublic = 0x20" />
      <MemberSignature Language="C#" Value="NonPublic" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags NonPublic = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>NonPublic</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that non-public members are to be included in the search.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OptionalParamBinding">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags OptionalParamBinding = 0x40000" />
      <MemberSignature Language="C#" Value="OptionalParamBinding" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags OptionalParamBinding = int32(262144)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>OptionalParamBinding</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameters with default values are used only in calls where trailing arguments are omitted. They must be the last arguments.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Public">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags Public = 0x10" />
      <MemberSignature Language="C#" Value="Public" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Public = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>Public</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that public members are to be included in the search.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="PutDispProperty">
      <MemberSignature Language="C#" Value="PutDispProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags PutDispProperty = int32(16384)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <MemberValue>PutDispProperty</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the PROPPUT member on a COM object should be invoked. PROPPUT specifies a property-setting function that uses a value. Use PutDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PutRefDispProperty">
      <MemberSignature Language="C#" Value="PutRefDispProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags PutRefDispProperty = int32(32768)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <MemberValue>PutRefDispProperty</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the PROPPUTREF member on a COM object should be invoked. PROPPUTREF specifies a property-setting function that uses a reference instead of a value. Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SetField">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags SetField = 0x800" />
      <MemberSignature Language="C#" Value="SetField" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags SetField = int32(2048)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>SetField</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the value of the specified field should be set.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags SetProperty = 0x2000" />
      <MemberSignature Language="C#" Value="SetProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags SetProperty = int32(8192)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>SetProperty</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Static">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags Static = 0x8" />
      <MemberSignature Language="C#" Value="Static" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Static = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>Static</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies that static members are to be included in the search.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SuppressChangeType">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Reflection.BindingFlags SuppressChangeType = 0x20000" />
      <MemberSignature Language="C#" Value="SuppressChangeType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags SuppressChangeType = int32(131072)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>SuppressChangeType</MemberValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Not implemented.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>