<?xml version="1.0" encoding="utf-8"?>
<Type Name="Char" FullName="System.Char" FullNameSP="System_Char" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sequential sealed serializable Char extends System.ValueType implements System.IComparable" />
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The dnprdnshort uses the <see cref="T:System.Char" /> structure to represent a Unicode character. The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values. Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a <see cref="T:System.Char" /> structure.  The value of a <see cref="T:System.Char" /> object is its 16-bit numeric (ordinal) value.</para>
      <format type="text/html">
        <h2>Char Objects, Unicode Characters, and Strings</h2>
      </format>
      <para>A <see cref="T:System.String" /> object is a sequential collection of <see cref="T:System.Char" /> structures that represents a string of text. Most Unicode characters can be represented by a single <see cref="T:System.Char" /> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <see cref="T:System.Char" /> objects. For this reason, a <see cref="T:System.Char" /> structure in a <see cref="T:System.String" /> object is not necessarily equivalent to a single Unicode character.</para>
      <para>Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</para>
      <list type="bullet">
        <item>
          <para>Glyphs, which may consist of a single character or of a base character followed by one or more combining characters. For example, the character ä is represented by a <see cref="T:System.Char" /> object whose code unit is U+0061 followed by a <see cref="T:System.Char" /> object whose code unit is U+0308. (The character ä can also be defined by a single <see cref="T:System.Char" /> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <see cref="T:System.Char" /> objects. </para>
          <para>code reference: System.Char.Class#1</para>
        </item>
        <item>
          <para>Characters outside the Unicode Basic Multilingual Plane (BMP). Unicode supports sixteen planes in addition to the BMP, which represents plane 0. A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane. For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character. Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16. The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60. U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF. U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</para>
          <para>code reference: System.Char.Class#2</para>
        </item>
      </list>
      <format type="text/html">
        <h2>Characters and Text Elements </h2>
      </format>
      <para>Because a single character can be represented by multiple <see cref="T:System.Char" /> objects, it is not always meaningful to work with individual <see cref="T:System.Char" /> objects. For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units. Because it erroneously equates <see cref="T:System.Char" /> objects with characters, it inaccurately reports that the resulting string has 20 characters. </para>
      <para>code reference: System.Char.Class#3</para>
      <para>You can do the following to avoid the assumption that a <see cref="T:System.Char" /> object represents a single character. </para>
      <list type="bullet">
        <item>
          <para>You can work with a <see cref="T:System.String" /> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</para>
        </item>
        <item>
          <para>You can use the <see cref="T:System.Globalization.StringInfo" /> class to work with text elements instead of individual <see cref="T:System.Char" /> objects. The following example uses the <see cref="T:System.Globalization.StringInfo" /> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine. Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</para>
          <para>code reference: System.Char.Class#4</para>
        </item>
        <item>
          <para>If a string contains a base character that has one or more combining characters, you can call the <see cref="M:System.String.Normalize" /> method to convert the substring to a single UTF-16 encoded code unit. The following example calls the <see cref="M:System.String.Normalize" /> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS). </para>
          <para>code reference: System.Char.Class#5</para>
        </item>
      </list>
      <format type="text/html">
        <h2>Common Operations</h2>
      </format>
      <para>The <see cref="T:System.Char" /> structure provides methods to compare <see cref="T:System.Char" /> objects, convert the value of the current <see cref="T:System.Char" /> object to an object of another type, and determine the Unicode category of a <see cref="T:System.Char" /> object:  </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>To do this</para>
            </term>
            <description>
              <para>Use these System.Char methods</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>Compare <see cref="T:System.Char" /> objects</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.CompareTo" /> and <see cref="Overload:System.Char.Equals" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>Convert a code point to a string</para>
          </term>
          <description>
            <para>
              <see cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>Convert a <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects to a code point</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.ConvertToUtf32" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>Get the Unicode category of a character</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.GetUnicodeCategory" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.IsControl" />, <see cref="Overload:System.Char.IsDigit" />, <see cref="Overload:System.Char.IsHighSurrogate" />, <see cref="Overload:System.Char.IsLetter" />, <see cref="Overload:System.Char.IsLetterOrDigit" />, <see cref="Overload:System.Char.IsLower" />, <see cref="Overload:System.Char.IsLowSurrogate" />, <see cref="Overload:System.Char.IsNumber" />, <see cref="Overload:System.Char.IsPunctuation" />, <see cref="Overload:System.Char.IsSeparator" />, <see cref="Overload:System.Char.IsSurrogate" />, <see cref="Overload:System.Char.IsSurrogatePair" />, <see cref="Overload:System.Char.IsSymbol" />, <see cref="Overload:System.Char.IsUpper" />, and <see cref="Overload:System.Char.IsWhiteSpace" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>Convert a <see cref="T:System.Char" /> object that represents a number to a numeric value type</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.GetNumericValue" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>Convert a character in a string into a <see cref="T:System.Char" /> object</para>
          </term>
          <description>
            <para>
              <see cref="M:System.Char.Parse(System.String)" /> and <see cref="M:System.Char.TryParse(System.String,System.Char@)" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>Convert a <see cref="T:System.Char" /> object to a <see cref="T:System.String" /> object</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.ToString" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>Change the case of a <see cref="T:System.Char" /> object</para>
          </term>
          <description>
            <para>
              <see cref="Overload:System.Char.ToLower" />, <see cref="M:System.Char.ToLowerInvariant(System.Char)" />, <see cref="Overload:System.Char.ToUpper" />, and <see cref="M:System.Char.ToUpperInvariant(System.Char)" /></para>
          </description>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a character as a UTF-16 code unit.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IComparable`1" /> interface and performs slightly better than the <see cref="M:System.Char.CompareTo(System.Object)" /> method because it does not have to convert the <paramref name="value" /> parameter to an object.</para>
          <para>The comparison performed by this method is based on the encoded values of this instance and <paramref name="value" />, not their lexicographical characteristics.</para>
          <para>If the <see cref="M:System.Char.CompareTo(System.Object)" /> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</para>
          <para>For example, suppose the instance type is <see cref="T:System.Int32" /> and the parameter type is <see cref="T:System.Byte" />. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <see cref="T:System.Int32" /> object, then generates a <see cref="M:System.Int32.CompareTo(System.Object)" /> method that compares the values of the <see cref="T:System.Int32" /> instance and the <see cref="T:System.Int32" /> parameter representation.</para>
          <para>Typically, implicit widening conversions are performed on numeric types. Consult your programming language's documentation to determine if its compiler performs widening conversions. If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <see cref="M:System.Char.CompareTo(System.Object)" /> overload that takes an <see cref="T:System.Object" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance precedes <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance has the same position in the sort order as <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance follows <paramref name="value" />. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Char" /> object to compare. </param>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual int32 CompareTo(object value)" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.Char" /> and is not a null reference.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Char.CompareTo(System.Object)" /> method implements the <see cref="T:System.IComparable" /> interface. </para>
          <para>The <paramref name="value" /> parameter must be null or an instance of <see cref="T:System.Char" />; otherwise, an exception is thrown.</para>
          <para>The comparison performed by this method is based on the encoded values of this instance and <paramref name="value" />, not necessarily their lexicographical characteristics. Any instance of <see cref="T:System.Char" />, regardless of its value, is considered greater than null.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance precedes <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance has the same position in the sort order as <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance follows <paramref name="value" />.</para>
                <para>-or- </para>
                <para>
                  <paramref name="value" /> is null. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare this instance to, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <see cref="M:System.Char.IsLowSurrogate(System.Char)" /> and <see cref="M:System.Char.IsHighSurrogate(System.Char)" />.</para>
          <para>A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair. However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion. For that reason, use the <see cref="T:System.Text.UTF32Encoding" /> class to convert bulk UTF-32 data into bulk UTF-16 data.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified Unicode code point into a UTF-16 encoded string.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</para>
        </returns>
        <param name="utf32">
          <attribution license="cc4" from="Microsoft" modified="false" />A 21-bit Unicode code point. </param>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method to convert a surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <see cref="T:System.Text.UTF32Encoding" /> class.</para>
          <para>Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit. However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units. These two <see cref="T:System.Char" /> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate. Surrogate pairs are supported only by UTF-16 encoding. This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</para>
        </returns>
        <param name="highSurrogate">
          <attribution license="cc4" from="Microsoft" modified="false" />A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF). </param>
        <param name="lowSurrogate">
          <attribution license="cc4" from="Microsoft" modified="false" />A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF). </param>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method to convert a character or surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <see cref="T:System.Text.UTF32Encoding" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a character or surrogate pair. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The index position of the character or surrogate pair in <paramref name="s" />.</param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IEquatable`1" /> interface, and performs slightly better than <see cref="M:System.Char.Equals(System.Object)" /> because it does not need to unbox the <paramref name="obj" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare to this instance. </param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool Equals(object obj)" />
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The comparison performed by this method is based on the encoded values of this instance and <paramref name="obj" />, not necessarily their lexicographical characteristics.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether this instance is equal to a specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare with this instance or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual int32 GetHashCode()" />
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para> The algorithm used to
      generate the hash code is unspecified.</para>
          <para>
            <block subset="none" type="note"> This method
      overrides <see cref="M:System.Object.GetHashCode" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer hash code.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 GetNumericValue(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Char.GetNumericValue(System.Char)" /> 
method.</para>
          <code lang="C#">using System;
public class GetNumericValueExample {
public static void Main() {
   Char[] cAry = {'8', 'V', Convert.ToChar(0X00BC)};
   //Unicode U+00BC is the code point for the character 
   //representation of 1/4
   foreach(Char c in cAry) {
      Console.Write("Numeric value of Unicode " +
                    "character {0} ", c);
      Console.WriteLine(" is {0}",
                        Char.GetNumericValue(c));
   }
}
}
</code>
          <para>The output is</para>
          <c>
            <para>Numeric value of Unicode character 8 is 8</para>
            <para>Numeric value of Unicode character V is -1</para>
            <para>Numeric value of Unicode character <onequarter /> is 0.25</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="c" /> parameter must be the <see cref="T:System.Char" /> representation of a numeric value. For example, if <paramref name="c" /> is "5", the return value is 5. However, if <paramref name="c" /> is "z", the return value is -1.0.</para>
          <para>A character has an associated numeric value if and only if it is a member of one of the following <see cref="T:System.Globalization.UnicodeCategory" /> categories: DecimalDigitNumber, LetterNumber, or OtherNumber.</para>
          <para>The <see cref="M:System.Char.GetNumericValue(System.Char)" /> method assumes that <paramref name="c" /> corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <see cref="T:System.Char" /> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <see cref="M:System.Char.ConvertFromUtf32(System.Int32)" /> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <see cref="M:System.Char.GetNumericValue(System.Char)" /> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</para>
          <para>code reference: System.Char.GetNumericValue#2</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified numeric Unicode character to a double-precision floating point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 GetNumericValue(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The character position in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="s" /> parameter must be the string representation of a numeric value. For example, if the character at position <paramref name="index" /> in <paramref name="s" /> is "5", the return value is 5. However, if the character at position <paramref name="index" /> in <paramref name="s" /> is "z", the return value is -1.</para>
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>A character has an associated numeric value if and only if it is a member of one of the following <see cref="T:System.Globalization.UnicodeCategory" /> categories: DecimalDigitNumber, LetterNumber, or OtherNumber.</para>
          <para>If the <see cref="T:System.Char" /> object at position <paramref name="index" /> is the first character of a valid surrogate pair, the <see cref="M:System.Char.GetNumericValue(System.String,System.Int32)" /> method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <see cref="M:System.Char.ConvertFromUtf32(System.Int32)" /> method to instantiate a string that represents each Aegean number. As the output from the example shows, the <see cref="M:System.Char.GetNumericValue(System.String,System.Int32)" /> method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</para>
          <para>code reference: System.Char.GetNumericValue#3</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" />. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The character position in <paramref name="s" />. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The enumerated constant, <see cref="F:System.TypeCode.Char" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Char.GetUnicodeCategory(System.Char)" /> method does not always return the same <see cref="T:System.Globalization.UnicodeCategory" /> value as the <see cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" /> method when it is passed a particular character as a parameter. The <see cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" /> method is designed to reflect the current version of the Unicode standard. In contrast, although the <see cref="M:System.Char.GetUnicodeCategory(System.Char)" /> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility. As a result, we recommend that you use the <see cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" /> method instead of <see cref="M:System.Char.GetUnicodeCategory(System.Char)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to categorize. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>The <see cref="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" /> method does not always return the same <see cref="T:System.Globalization.UnicodeCategory" /> value as the <see cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" /> method when it is passed a particular character as a parameter. The <see cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" /> method is designed to reflect the current version of the Unicode standard. In contrast, although the <see cref="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" /> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility. As a result, we recommend that you use the <see cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" /> method instead of <see cref="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" />. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The character position in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsControl(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. T The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <see cref="F:System.Globalization.UnicodeCategory.Control" /> category. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a control character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a control character; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsControl(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <see cref="F:System.Globalization.UnicodeCategory.Control" /> category. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a control character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsDigit(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method determines whether a <see cref="T:System.Char" /> is a radix-10 digit. This contrasts with <see cref="M:System.Char.IsNumber(System.Char)" />, which determines whether a Char is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</para>
          <para>Valid digits are members of the <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber" /> category.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a decimal digit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a decimal digit; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsDigit(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method determines whether a <see cref="T:System.Char" /> is a radix-10 digit. This contrasts with <see cref="M:System.Char.IsNumber(System.Char)" />, which determines whether a <see cref="T:System.Char" /> is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</para>
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid digits are members of the <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber" /> category.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="index" /> parameter is zero-based.</para>
          <para>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLetter(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method determines whether a <see cref="T:System.Char" /> is a member of any category of Unicode letter. Unicode letters include the following:</para>
          <list type="bullet">
            <item>
              <para>Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.UppercaseLetter" /> category.</para>
            </item>
            <item>
              <para>Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.LowercaseLetter" /> category.</para>
            </item>
            <item>
              <para>Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.TitlecaseLetter" /> category.</para>
            </item>
            <item>
              <para>Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.ModifierLetter" /> category.</para>
            </item>
            <item>
              <para>Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (&lt;CJK Ideograph, First&gt;) through U+9FC3 (&lt;CJK Ideograph, Last&gt;). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.OtherLetter" /> category.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a Unicode letter. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a letter; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLetter(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter. Unicode letters include the following:</para>
          <list type="bullet">
            <item>
              <para>Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.UppercaseLetter" /> category.</para>
            </item>
            <item>
              <para>Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.LowercaseLetter" /> category.</para>
            </item>
            <item>
              <para>Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.TitlecaseLetter" /> category.</para>
            </item>
            <item>
              <para>Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.ModifierLetter" /> category.</para>
            </item>
            <item>
              <para>Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (&lt;CJK Ideograph, First&gt;) through U+9FC3 (&lt;CJK Ideograph, Last&gt;). These characters are members of the <see cref="F:System.Globalization.UnicodeCategory.OtherLetter" /> category.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLetterOrDigit(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid letters and decimal digits are members of the following categories in <see cref="T:System.Globalization.UnicodeCategory" />: UppercaseLetter, LowercaseLetter, TitlecaseLetter, ModifierLetter, OtherLetter, or DecimalDigitNumber.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a letter or a decimal digit; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLetterOrDigit(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid letters and decimal digits are members of the following categories in <see cref="T:System.Globalization.UnicodeCategory" />: UppercaseLetter, LowercaseLetter, TitlecaseLetter, ModifierLetter, OtherLetter, or DecimalDigitNumber.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLower(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid lowercase letters are members of the following category in <see cref="T:System.Globalization.UnicodeCategory" />: LowercaseLetter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a lowercase letter.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a lowercase letter; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLower(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid lowercase letters are members of the following category in <see cref="T:System.Globalization.UnicodeCategory" />: LowercaseLetter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to evaluate. </param>
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="index" /> parameter is zero-based.</para>
          <para>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsNumber(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method determines whether a <see cref="T:System.Char" /> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <see cref="M:System.Char.IsDigit(System.Char)" /> method, which determines whether a <see cref="T:System.Char" /> is a radix-10 digit.</para>
          <para>Valid numbers are members of the <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber" />, <see cref="F:System.Globalization.UnicodeCategory.LetterNumber" />, or <see cref="F:System.Globalization.UnicodeCategory.OtherNumber" /> category.</para>
          <para>The <see cref="M:System.Char.IsNumber(System.Char)" /> method assumes that <paramref name="c" /> corresponds to a single linguistic character and checks whether that character represents a number. However, some numbers in the Unicode standard are represented by two <see cref="T:System.Char" /> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <see cref="M:System.Char.ConvertFromUtf32(System.Int32)" /> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <see cref="M:System.Char.IsNumber(System.Char)" /> method returns false if it is passed either a high surrogate or a low surrogate of this character.</para>
          <para>code reference: System.Char.IsNumber#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a number; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsNumber(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method determines whether a <see cref="T:System.Char" /> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <see cref="M:System.Char.IsDigit(System.Char)" /> method, which determines whether a <see cref="T:System.Char" /> is a radix-10 digit.</para>
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid numbers are members of the <see cref="F:System.Globalization.UnicodeCategory.DecimalDigitNumber" />, <see cref="F:System.Globalization.UnicodeCategory.LetterNumber" />, or <see cref="F:System.Globalization.UnicodeCategory.OtherNumber" /> category.</para>
          <para>If the <see cref="T:System.Char" /> object at position <paramref name="index" /> is the first character of a valid surrogate pair, the <see cref="M:System.Char.IsNumber(System.String,System.Int32)" /> method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <see cref="M:System.Char.ConvertFromUtf32(System.Int32)" /> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <see cref="M:System.Char.IsNumber(System.String,System.Int32)" /> method returns true if it is passed the high surrogate of AEGEAN NUMBER ONE. However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns false.</para>
          <para>code reference: System.Char.IsNumber#2</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsPunctuation(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid punctuation marks are members of the following categories in <see cref="T:System.Globalization.UnicodeCategory" />: ConnectorPunctuation, DashPunctuation, OpenPunctuation, ClosePunctuation, InititalQuotePunctuation, FinalQuotePunctuation, or OtherPunctuation. They include characters with the Unicode code points listed in the following table. </para>
          <list type="table">
            <item>
              <term>
                <para>U+0021 to U+0023</para>
              </term>
              <description>
                <para>U+060C and U+060D</para>
              </description>
              <description>
                <para>U+1800 to U+180A</para>
              </description>
              <description>
                <para>U+3014 to U+301F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+0025 to U+002A</para>
              </term>
              <description>
                <para>U+061B</para>
              </description>
              <description>
                <para>U+1944 and U+1945</para>
              </description>
              <description>
                <para>U+3030</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+002C to U+002F</para>
              </term>
              <description>
                <para>U+061E and U+061F</para>
              </description>
              <description>
                <para>U+19DE and U+19DF</para>
              </description>
              <description>
                <para>U+303D</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+003A and U+003B</para>
              </term>
              <description>
                <para>U+066A to U+066D</para>
              </description>
              <description>
                <para>U+1A1E and U+1A1F</para>
              </description>
              <description>
                <para>U+30A0</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+003F and U+0040</para>
              </term>
              <description>
                <para>U+06D4</para>
              </description>
              <description>
                <para>U+1B5A to U+1B60</para>
              </description>
              <description>
                <para>U+30FB</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+005B to U+005D</para>
              </term>
              <description>
                <para>U+0700 to U+070D</para>
              </description>
              <description>
                <para>U+2010 to U+2027</para>
              </description>
              <description>
                <para>U+A874 to U+A877</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+005F</para>
              </term>
              <description>
                <para>U+07F7 to U+07F9</para>
              </description>
              <description>
                <para>U+2030 to U+2043</para>
              </description>
              <description>
                <para>U+FD3E and U+FD3F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+007B</para>
              </term>
              <description>
                <para>U+0964 and U+0965</para>
              </description>
              <description>
                <para>U+2045 to U+2051</para>
              </description>
              <description>
                <para>U+FE10 to U+FE19</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+007D</para>
              </term>
              <description>
                <para>U+0970</para>
              </description>
              <description>
                <para>U+2053 to U+205E</para>
              </description>
              <description>
                <para>U+FE30 to U+FE52</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00A1</para>
              </term>
              <description>
                <para>U+0DF4</para>
              </description>
              <description>
                <para>U+207D and  U+207E</para>
              </description>
              <description>
                <para>U+FE54 to U+FE61</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00AB</para>
              </term>
              <description>
                <para>U+0E4F to U+0E5B</para>
              </description>
              <description>
                <para>U+208D and U+208E</para>
              </description>
              <description>
                <para>U+FE63</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00AD</para>
              </term>
              <description>
                <para>U+0F04 to U+0F12</para>
              </description>
              <description>
                <para>U+2329 and U+232A</para>
              </description>
              <description>
                <para>U+FE68</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00B7</para>
              </term>
              <description>
                <para>U+0F3A to U+0F3D</para>
              </description>
              <description>
                <para>U+2768 to U+2775</para>
              </description>
              <description>
                <para>U+FE6A and U+FE6B</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00BB</para>
              </term>
              <description>
                <para>U+0F85</para>
              </description>
              <description>
                <para>U+27C5 to U+27C6</para>
              </description>
              <description>
                <para>U+FF01 to U+FF03</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00BF</para>
              </term>
              <description>
                <para>U+0FD0 and U+0FD1</para>
              </description>
              <description>
                <para>U+27E6 to U+27EB</para>
              </description>
              <description>
                <para>U+FF05 to U+FF0A</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+037E</para>
              </term>
              <description>
                <para>U+104A to U+104F</para>
              </description>
              <description>
                <para>U+2983 to U+2998</para>
              </description>
              <description>
                <para>U+FF0C to U+FF0F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+0387</para>
              </term>
              <description>
                <para>U+10FB</para>
              </description>
              <description>
                <para>U+29D8 to U+29DB</para>
              </description>
              <description>
                <para>U+FF1A and U+FF1B</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+055A to U+055F</para>
              </term>
              <description>
                <para>U+1361 to U+1368</para>
              </description>
              <description>
                <para>U+29FC and U+29FD</para>
              </description>
              <description>
                <para>U+FF1F and U+FF20</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+0589 and U+058A</para>
              </term>
              <description>
                <para>U+166D and U+166E</para>
              </description>
              <description>
                <para>U+2CF9 to U+2CFC</para>
              </description>
              <description>
                <para>U+FF3B to U+FF3D</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05BE</para>
              </term>
              <description>
                <para>U+169B and U+169C </para>
              </description>
              <description>
                <para>U+2CFE and U+2CFF</para>
              </description>
              <description>
                <para>U+FF3F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05C0</para>
              </term>
              <description>
                <para>U+16EB to U+16ED</para>
              </description>
              <description>
                <para>U+2E00 to U+2E17</para>
              </description>
              <description>
                <para>U+FF5B</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05C3</para>
              </term>
              <description>
                <para>U+1735 and U+1736</para>
              </description>
              <description>
                <para>U+2E1C and U+2E1D</para>
              </description>
              <description>
                <para>U+FF5D</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05C6</para>
              </term>
              <description>
                <para>U+17D4 to U+17D6</para>
              </description>
              <description>
                <para>U+3001 to U+3003</para>
              </description>
              <description>
                <para>U+FF5F to U+FF65</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05F3 and U+05F4</para>
              </term>
              <description>
                <para>U+17D8 to U+17DA</para>
              </description>
              <description>
                <para>U+3008 to U+3011</para>
              </description>
              <description>
                <para>   </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a punctuation mark.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a punctuation mark; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsPunctuation(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid punctuation marks are members of the following categories in <see cref="T:System.Globalization.UnicodeCategory" />: ConnectorPunctuation, DashPunctuation, OpenPunctuation, ClosePunctuation, InititalQuotePunctuation, FinalQuotePunctuation, or OtherPunctuation. They include characters with the Unicode code points listed in the following table.</para>
          <list type="table">
            <item>
              <term>
                <para>U+0021 to U+0023</para>
              </term>
              <description>
                <para>U+060C and U+060D</para>
              </description>
              <description>
                <para>U+1800 to U+180A</para>
              </description>
              <description>
                <para>U+3014 to U+301F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+0025 to U+002A</para>
              </term>
              <description>
                <para>U+061B</para>
              </description>
              <description>
                <para>U+1944 and U+1945</para>
              </description>
              <description>
                <para>U+3030</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+002C to U+002F</para>
              </term>
              <description>
                <para>U+061E and U+061F</para>
              </description>
              <description>
                <para>U+19DE and U+19DF</para>
              </description>
              <description>
                <para>U+303D</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+003A and U+003B</para>
              </term>
              <description>
                <para>U+066A to U+066D</para>
              </description>
              <description>
                <para>U+1A1E and U+1A1F</para>
              </description>
              <description>
                <para>U+30A0</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+003F and U+0040</para>
              </term>
              <description>
                <para>U+06D4</para>
              </description>
              <description>
                <para>U+1B5A to U+1B60</para>
              </description>
              <description>
                <para>U+30FB</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+005B to U+005D</para>
              </term>
              <description>
                <para>U+0700 to U+070D</para>
              </description>
              <description>
                <para>U+2010 to U+2027</para>
              </description>
              <description>
                <para>U+A874 to U+A877</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+005F</para>
              </term>
              <description>
                <para>U+07F7 to U+07F9</para>
              </description>
              <description>
                <para>U+2030 to U+2043</para>
              </description>
              <description>
                <para>U+FD3E and U+FD3F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+007B</para>
              </term>
              <description>
                <para>U+0964 and U+0965</para>
              </description>
              <description>
                <para>U+2045 to U+2051</para>
              </description>
              <description>
                <para>U+FE10 to U+FE19</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+007D</para>
              </term>
              <description>
                <para>U+0970</para>
              </description>
              <description>
                <para>U+2053 to U+205E</para>
              </description>
              <description>
                <para>U+FE30 to U+FE52</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00A1</para>
              </term>
              <description>
                <para>U+0DF4</para>
              </description>
              <description>
                <para>U+207D and  U+207E</para>
              </description>
              <description>
                <para>U+FE54 to U+FE61</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00AB</para>
              </term>
              <description>
                <para>U+0E4F to U+0E5B</para>
              </description>
              <description>
                <para>U+208D and U+208E</para>
              </description>
              <description>
                <para>U+FE63</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00AD</para>
              </term>
              <description>
                <para>U+0F04 to U+0F12</para>
              </description>
              <description>
                <para>U+2329 and U+232A</para>
              </description>
              <description>
                <para>U+FE68</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00B7</para>
              </term>
              <description>
                <para>U+0F3A to U+0F3D</para>
              </description>
              <description>
                <para>U+2768 to U+2775</para>
              </description>
              <description>
                <para>U+FE6A and U+FE6B</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00BB</para>
              </term>
              <description>
                <para>U+0F85</para>
              </description>
              <description>
                <para>U+27C5 to U+27C6</para>
              </description>
              <description>
                <para>U+FF01 to U+FF03</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+00BF</para>
              </term>
              <description>
                <para>U+0FD0 and U+0FD1</para>
              </description>
              <description>
                <para>U+27E6 to U+27EB</para>
              </description>
              <description>
                <para>U+FF05 to U+FF0A</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+037E</para>
              </term>
              <description>
                <para>U+104A to U+104F</para>
              </description>
              <description>
                <para>U+2983 to U+2998</para>
              </description>
              <description>
                <para>U+FF0C to U+FF0F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+0387</para>
              </term>
              <description>
                <para>U+10FB</para>
              </description>
              <description>
                <para>U+29D8 to U+29DB</para>
              </description>
              <description>
                <para>U+FF1A and U+FF1B</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+055A to U+055F</para>
              </term>
              <description>
                <para>U+1361 to U+1368</para>
              </description>
              <description>
                <para>U+29FC and U+29FD</para>
              </description>
              <description>
                <para>U+FF1F and U+FF20</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+0589 and U+058A</para>
              </term>
              <description>
                <para>U+166D and U+166E</para>
              </description>
              <description>
                <para>U+2CF9 to U+2CFC</para>
              </description>
              <description>
                <para>U+FF3B to U+FF3D</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05BE</para>
              </term>
              <description>
                <para>U+169B and U+169C </para>
              </description>
              <description>
                <para>U+2CFE and U+2CFF</para>
              </description>
              <description>
                <para>U+FF3F</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05C0</para>
              </term>
              <description>
                <para>U+16EB to U+16ED</para>
              </description>
              <description>
                <para>U+2E00 to U+2E17</para>
              </description>
              <description>
                <para>U+FF5B</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05C3</para>
              </term>
              <description>
                <para>U+1735 and U+1736</para>
              </description>
              <description>
                <para>U+2E1C and U+2E1D</para>
              </description>
              <description>
                <para>U+FF5D</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05C6</para>
              </term>
              <description>
                <para>U+17D4 to U+17D6</para>
              </description>
              <description>
                <para>U+3001 to U+3003</para>
              </description>
              <description>
                <para>U+FF5F to U+FF65</para>
              </description>
            </item>
            <item>
              <term>
                <para>U+05F3 and U+05F4</para>
              </term>
              <description>
                <para>U+17D8 to U+17DA</para>
              </description>
              <description>
                <para>U+3008 to U+3011</para>
              </description>
              <description>
                <para>   </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsSeparator(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Unicode standard recognizes three subcategories of separators: </para>
          <list type="bullet">
            <item>
              <para>Space separators (the <see cref="F:System.Globalization.UnicodeCategory.SpaceSeparator" /> category), which includes characters such as \u0020.</para>
            </item>
            <item>
              <para>Line separators (the <see cref="F:System.Globalization.UnicodeCategory.LineSeparator" /> category), which includes \u2028.</para>
            </item>
            <item>
              <para>Paragraph separators (the <see cref="F:System.Globalization.UnicodeCategory.ParagraphSeparator" /> category), which includes \u2029. </para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000A (CR) as control characters (members of the <see cref="F:System.Globalization.UnicodeCategory.Control" /> category), not as separator characters. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a separator character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a separator character; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsSeparator(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>The Unicode standard recognizes three subcategories of separators: </para>
          <list type="bullet">
            <item>
              <para>Space separators (the <see cref="F:System.Globalization.UnicodeCategory.SpaceSeparator" /> category), which includes characters such as \u0020.</para>
            </item>
            <item>
              <para>Line separators (the <see cref="F:System.Globalization.UnicodeCategory.LineSeparator" /> category), which includes \u2028.</para>
            </item>
            <item>
              <para>Paragraph separators (the <see cref="F:System.Globalization.UnicodeCategory.ParagraphSeparator" /> category), which includes \u2029.</para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000A (CR) as control characters (members of the <see cref="F:System.Globalization.UnicodeCategory.Control" /> category), not as separator characters.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsSurrogate(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A surrogate is a <see cref="T:System.Char" /> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <see cref="F:System.Globalization.UnicodeCategory.Surrogate" /> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the <see cref="http://go.microsoft.com/fwlink/?linkid=37123">Unicode home page</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified character has a surrogate code unit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsSurrogate(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>A surrogate is a <see cref="T:System.Char" /> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <see cref="F:System.Globalization.UnicodeCategory.Surrogate" /> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the <see cref="http://go.microsoft.com/fwlink/?linkid=37123">Unicode home page</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=37123">Unicode home page</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, false.</para>
        </returns>
        <param name="highSurrogate">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to evaluate as the high surrogate of a surrogate pair. </param>
        <param name="lowSurrogate">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to evaluate as the low surrogate of a surrogate pair. </param>
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the <see cref="http://go.microsoft.com/fwlink/?LinkId=37123">Unicode home page</see>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position of the pair of characters to evaluate within <paramref name="s" />. </param>
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsSymbol(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid symbols are members of the following categories in <see cref="T:System.Globalization.UnicodeCategory" />: MathSymbol, CurrencySymbol, ModifierSymbol, and OtherSymbol.</para>
          <para>Symbols in the Unicode standard are a loosely defined set of characters that include the following:</para>
          <list type="bullet">
            <item>
              <para>Currency symbols.</para>
            </item>
            <item>
              <para>Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</para>
            </item>
            <item>
              <para>Number forms, such as subscripts and superscripts.</para>
            </item>
            <item>
              <para>Mathematical operators and arrows.</para>
            </item>
            <item>
              <para>Geometric symbols.</para>
            </item>
            <item>
              <para>Technical symbols.</para>
            </item>
            <item>
              <para>Braille patterns.</para>
            </item>
            <item>
              <para>Dingbats.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as a symbol character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is a symbol character; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsSymbol(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid symbols are members of the following categories in <see cref="T:System.Globalization.UnicodeCategory" />: MathSymbol, CurrencySymbol, ModifierSymbol, and OtherSymbol.</para>
          <para>Symbols in the Unicode standard are a loosely defined set of characters that include the following:</para>
          <list type="bullet">
            <item>
              <para>Currency symbols.</para>
            </item>
            <item>
              <para>Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</para>
            </item>
            <item>
              <para>Number forms, such as subscripts and superscripts.</para>
            </item>
            <item>
              <para>Mathematical operators and arrows.</para>
            </item>
            <item>
              <para>Geometric symbols.</para>
            </item>
            <item>
              <para>Technical symbols.</para>
            </item>
            <item>
              <para>Braille patterns.</para>
            </item>
            <item>
              <para>Dingbats.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsUpper(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Valid uppercase letters are members of the following category in <see cref="T:System.Globalization.UnicodeCategory" />: UppercaseLetter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as an uppercase letter.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is an uppercase letter; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsUpper(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>Valid uppercase letters are members of the following category in <see cref="T:System.Globalization.UnicodeCategory" />: UppercaseLetter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsWhiteSpace(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>White space characters are the following Unicode characters:</para>
          <list type="bullet">
            <item>
              <para>Members of the <see cref="F:System.Globalization.UnicodeCategory.SpaceSeparator" /> category, which includes the characters SPACE (U+0020), OGHAM SPACE MARK (U+1680), MONGOLIAN VOWEL SEPARATOR (U+180E), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</para>
            </item>
            <item>
              <para>Members of the <see cref="F:System.Globalization.UnicodeCategory.LineSeparator" /> category, which consists solely of the LINE SEPARATOR character (U+2028).</para>
            </item>
            <item>
              <para>Members of the <see cref="F:System.Globalization.UnicodeCategory.ParagraphSeparator" /> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</para>
            </item>
            <item>
              <para>The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), NEXT LINE (U+0085), and NO-BREAK SPACE (U+00A0).</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the specified Unicode character is categorized as white space.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="c" /> is white space; otherwise, false.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to evaluate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsWhiteSpace(string s, int32 index)" />
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="s " />is a null reference.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="index" /> is less than zero, or greater than or equal to the length of <paramref name="s" />.</exception>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Character positions in a string are indexed starting from zero.</para>
          <para>White space characters are the following Unicode characters:</para>
          <list type="bullet">
            <item>
              <para>Members of the <see cref="F:System.Globalization.UnicodeCategory.SpaceSeparator" /> category, which includes the characters SPACE (U+0020), OGHAM SPACE MARK (U+1680), MONGOLIAN VOWEL SEPARATOR (U+180E), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</para>
            </item>
            <item>
              <para>Members of the <see cref="F:System.Globalization.UnicodeCategory.LineSeparator" /> category, which consists solely of the LINE SEPARATOR character (U+2028).</para>
            </item>
            <item>
              <para>Members of the <see cref="F:System.Globalization.UnicodeCategory.ParagraphSeparator" /> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</para>
            </item>
            <item>
              <para>The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), NEXT LINE (U+0085), and NO-BREAK SPACE (U+00A0).</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether the character at the specified position in a specified string is categorized as white space.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, false.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position of the character to evaluate in <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Char MaxValue = (char)0xFFFF" />
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>(char)0xFFFF</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is hexadecimal 0xFFFF.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the largest possible value of a <see cref="T:System.Char" />. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Char MinValue = (char)0x0" />
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>(char)0x0</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is hexadecimal 0x00.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.Char Parse(string s)" />
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain exactly one character.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified string to its equivalent Unicode character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Unicode character equivalent to the sole character in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a single character, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToByte(System.Char)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.Char" /> object unchanged.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt16(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para> For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt32(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt64(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para> For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToSByte(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para> For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type targetType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type targetType, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="targetType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object of the specified type.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> object. </param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt16(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> object. (Specify null because the <paramref name="provider" /> parameter is ignored.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt32(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> object. (Specify null because the <paramref name="provider" /> parameter is ignored.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Char" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt64(System.Char)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The converted value of the current <see cref="T:System.Char" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> object. (Specify null because the <paramref name="provider" /> parameter is ignored.)</param>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.Char ToLower(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method.</para>
          <code lang="C#">using System;
public class CharToLower {
   public static void Main() {
      Char[] cAry = {'A', 'c', '*'};
      foreach (Char c in cAry) {
         Console.Write("Char '{0}' ToLower is ", c);
         Console.WriteLine("{0}", Char.ToLower(c));
      }
   }
}
</code>
          <para>The output is</para>
          <c>
            <para>Char 'A' ToLower is a</para>
            <para>Char 'c' ToLower is c</para>
            <para>Char '*' ToLower is *</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Casing rules are obtained from the current culture. </para>
          <para>Use <see cref="M:System.String.ToLower" /> to convert a string to lowercase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a Unicode character to its lowercase equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use <see cref="M:System.String.ToLower" /> to convert a string to lowercase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific casing rules. </param>
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <see cref="M:System.Char.ToLowerInvariant(System.Char)" /> method. The <see cref="M:System.Char.ToLowerInvariant(System.Char)" /> method is equivalent to ToLower(Char, CultureInfo.InvariantCulture).</para>
          <para>Use <see cref="M:System.String.ToLowerInvariant" /> to convert a string to lowercase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ToString()" />
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="note"> This method
      overrides <see cref="M:System.Object.ToString" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified Unicode character to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of <paramref name="c" />.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="provider" /> parameter is ignored; it does not participate in this operation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="provider" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />(Reserved) An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.Char ToUpper(valuetype System.Char c)" />
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method.</para>
          <code lang="C#">using System;
public class CharToUpper {
   public static void Main() {
      Char[] cAry = {'A', 'c', '*'};
      foreach (Char c in cAry) {
         Console.Write("Char '{0}' ToUpper is {1}",
                       c, Char.ToUpper(c));
         Console.WriteLine();
      }
   }
}
</code>
          <para>The output is</para>
          <c>
            <para>Char 'A' ToUpper is A</para>
            <para>Char 'c' ToUpper is C</para>
            <para>Char '*' ToUpper is *</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Casing rules are obtained from the current culture.</para>
          <para>Use <see cref="M:System.String.ToUpper" /> to convert a string to uppercase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a Unicode character to its uppercase equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use <see cref="M:System.String.ToUpper" /> to convert a string to uppercase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific casing rules. </param>
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <see cref="M:System.Char.ToUpperInvariant(System.Char)" /> method.  The <see cref="M:System.Char.ToUpperInvariant(System.Char)" /> method is equivalent to ToUpper(Char, CultureInfo.InvariantCulture).</para>
          <para>Use <see cref="M:System.String.ToUpperInvariant" /> to convert a string to uppercase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</para>
        </returns>
        <param name="c">
          <attribution license="cc4" from="Microsoft" modified="false" />The Unicode character to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, char result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Char&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>