<?xml version="1.0" encoding="utf-8"?>
<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.DateTimeOffset" /> structure includes a <see cref="T:System.DateTime" /> value, together with an <see cref="P:System.DateTimeOffset.Offset" /> property that defines the difference between the current <see cref="T:System.DateTimeOffset" /> instance's date and time and Coordinated Universal Time (UTC). Because it exactly defines a date and time relative to UTC, the <see cref="T:System.DateTimeOffset" /> structure does not include a Kind member, as the <see cref="T:System.DateTime" /> structure does. It represents dates and times with values whose UTC ranges from 12:00:00 midnight, January 1, 0001 Anno Domini (Common Era), to 11:59:59 P.M., December 31, 9999 A.D. (C.E.).</para>
      <para>The time component of a <see cref="T:System.DateTimeOffset" /> value is measured in 100-nanosecond units called ticks, and a particular date is the number of ticks since 12:00 midnight, January 1, 0001 A.D. (C.E.) in the <see cref="T:System.Globalization.GregorianCalendar" /> calendar. A <see cref="T:System.DateTimeOffset" /> value is always expressed in the context of an explicit or default calendar. Ticks that are attributable to leap seconds are not included in the total number of ticks.</para>
      <block subset="none" type="note">
        <para>   If you are working with a ticks value that you want to convert to some other time interval, such as minutes or seconds, you should use the <see cref="F:System.TimeSpan.TicksPerDay" />, <see cref="F:System.TimeSpan.TicksPerHour" />, <see cref="F:System.TimeSpan.TicksPerMinute" />, <see cref="F:System.TimeSpan.TicksPerSecond" />, or <see cref="F:System.TimeSpan.TicksPerMillisecond" /> constant to perform the conversion. For example, to add the number of seconds represented by a specified number of ticks to the <see cref="P:System.DateTimeOffset.Second" /> component of a <see cref="T:System.DateTimeOffset" /> value, you can use the expression dateValue.Second + nTicks/Timespan.TicksPerSecond.</para>
      </block>
      <para>Although a <see cref="T:System.DateTimeOffset" /> value includes an offset, it is not a fully time zone-aware data structure. While an offset from UTC is one characteristic of a time zone, it does not unambiguously identify a time zone. Not only do multiple time zones share the same offset from UTC, but the offset of a single time zone changes if it observes daylight saving time. This means that, as soon as a <see cref="T:System.DateTimeOffset" /> value is disassociated from its time zone, it can no longer be unambiguously linked back to its original time zone.</para>
      <para>Because <see cref="T:System.DateTimeOffset" /> is a structure, a <see cref="T:System.DateTimeOffset" /> object that has been declared but not otherwise initialized contains the default values for each of its member fields. This means that its <see cref="P:System.DateTimeOffset.DateTime" /> property is set to <see cref="F:System.DateTimeOffset.MinValue" /> and its <see cref="P:System.DateTimeOffset.Offset" /> property is set to <see cref="F:System.TimeSpan.Zero" />.</para>
      <para>You can create a new <see cref="T:System.DateTimeOffset" /> value by calling any of the overloads of its constructor, which are similar to the overloaded constructors for the <see cref="T:System.DateTime" /> structure. You can also create a new <see cref="T:System.DateTimeOffset" /> value by assigning it a <see cref="T:System.DateTime" /> value. This is an implicit conversion; it does not require a casting operator (in C#) or call to a conversion method (in Visual Basic). You can also initialize a <see cref="T:System.DateTimeOffset" /> value from the string representation of a date and time by calling a number of static string parsing methods, which include <see cref="Overload:System.DateTimeOffset.Parse" />, <see cref="Overload:System.DateTimeOffset.ParseExact" />, <see cref="Overload:System.DateTimeOffset.TryParse" />, and <see cref="Overload:System.DateTimeOffset.TryParseExact" />. </para>
      <para>The members of the <see cref="T:System.DateTimeOffset" /> structure provide functionality in the following areas:</para>
      <list type="bullet">
        <item>
          <para>Date and time arithmetic. </para>
          <para>You can add or subtract either dates or time intervals from a particular <see cref="T:System.DateTimeOffset" /> value. Arithmetic operations with <see cref="T:System.DateTimeOffset" /> values, unlike those with <see cref="T:System.DateTime" /> values, adjust for differences in time offsets when returning a result. For example, the following code uses <see cref="T:System.DateTime" /> variables to subtract the current local time from the current UTC time. The code then uses <see cref="T:System.DateTimeOffset" /> variables to perform the same operation. The subtraction with <see cref="T:System.DateTime" /> values returns the local time zone's difference from UTC, while the subtraction with <see cref="T:System.DateTimeOffset" /> values returns <see cref="F:System.TimeSpan.Zero" />.</para>
          <para>code reference: System.DateTimeOffset.Type#1</para>
        </item>
        <item>
          <para>Type conversion operations. </para>
          <para>You can convert <see cref="T:System.DateTimeOffset" /> values to <see cref="P:System.DateTimeOffset.DateTime" /> values and vice versa.</para>
        </item>
        <item>
          <para>Time manipulation and extraction operations. </para>
          <para>You can extract either the date or the time of a <see cref="T:System.DateTimeOffset" /> value. You can also retrieve the value of a particular <see cref="T:System.DateTimeOffset" /> component, such as its year or its month.</para>
        </item>
        <item>
          <para>Date and time conversion. </para>
          <para>You can convert any <see cref="T:System.DateTimeOffset" /> value to another <see cref="T:System.DateTimeOffset" /> value that represents the same point in time in another time zone. However, a time zone's adjustment rules are applied only in the case of the <see cref="M:System.DateTimeOffset.ToLocalTime" /> method, which converts a <see cref="T:System.DateTimeOffset" /> value to the date and time in the local system zone.</para>
        </item>
        <item>
          <para>Date and time comparison. </para>
          <para>You can determine whether any particular <see cref="T:System.DateTimeOffset" /> value is earlier than, the same as, or later than another <see cref="T:System.DateTimeOffset" /> value. Before the comparison is performed, all values are converted to UTC.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor's behavior depends on the value of the <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />, the <see cref="P:System.DateTimeOffset.DateTime" /> property of the new instance is set equal to <paramref name="dateTime" />, and the <see cref="P:System.DateTimeOffset.Offset" /> property is set equal to <see cref="F:System.TimeSpan.Zero" />. </para>
            </item>
            <item>
              <para>If the value of <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" />, the <see cref="P:System.DateTimeOffset.DateTime" /> property of the new instance is set equal to <paramref name="dateTime" />, and the <see cref="P:System.DateTimeOffset.Offset" /> property is set equal to the offset of the local system's current time zone.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</para>
        </summary>
        <param name="dateTime">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time.   </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor's behavior depends in part on the value of the <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />, the value of the <paramref name="offset" /> parameter must be 0 or an <see cref="T:System.ArgumentException" /> is thrown.</para>
            </item>
            <item>
              <para>If the value of <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Local" />, the value of the <paramref name="offset" /> parameter must be equal to the local time zone's offset from Coordinated Universal Time (UTC) for that particular date or an <see cref="T:System.ArgumentException" /> is thrown.</para>
            </item>
            <item>
              <para>If the value of <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Unspecified" />, the <paramref name="offset" /> parameter can have any valid value.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</para>
        </summary>
        <param name="dateTime">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time.   </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The time's offset from Coordinated Universal Time (UTC).</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Ordinarily, trying to call the <see cref="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" /> constructor to instantiate a <see cref="T:System.DateTimeOffset" /> value with a local time and an offset other than that of the local time zone throws an <see cref="T:System.ArgumentException" />. You can use this overload of the <see cref="T:System.DateTimeOffset" /> constructor to work around this limitation. The following example uses the local time's number of ticks to instantiate a <see cref="T:System.DateTimeOffset" /> value whose offset does not necessarily represent that of the local time:</para>
          <para>code reference: System.DateTimeOffset.Constructors#4</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</para>
        </summary>
        <param name="ticks">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The time's offset from Coordinated Universal Time (UTC).</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTimeOffset" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999).</param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12).</param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23).   </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59).</param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59).</param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The time's offset from Coordinated Universal Time (UTC).</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTimeOffset" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999).</param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12).</param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23).   </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59).</param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59).</param>
        <param name="millisecond">
          <attribution license="cc4" from="Microsoft" modified="false" />The milliseconds (0 through 999).</param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The time's offset from Coordinated Universal Time (UTC).</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> parameters all reflect values expressed in the calendar specified by the <paramref name="calendar" /> parameter. An exception is thrown if these values form a date and time that cannot be expressed by using this calendar.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year.</param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12).</param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23).   </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59).</param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59).</param>
        <param name="millisecond">
          <attribution license="cc4" from="Microsoft" modified="false" />The milliseconds (0 through 999).</param>
        <param name="calendar">
          <attribution license="cc4" from="Microsoft" modified="false" />The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The time's offset from Coordinated Universal Time (UTC).</param>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds) in a single operation. This method's behavior is identical to the addition operator. The <see cref="T:System.DateTimeOffset" /> structure also supports specialized addition methods (such as <see cref="M:System.DateTimeOffset.AddDays(System.Double)" />, <see cref="M:System.DateTimeOffset.AddHours(System.Double)" />, and <see cref="M:System.DateTimeOffset.AddMinutes(System.Double)" />) for each time interval.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="timeSpan" /> to its date and time.</para>
          </block>
          <para>The <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method does not affect the value of the current <see cref="T:System.DateTimeOffset" /> object's <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
          <para>If the <paramref name="timeSpan" /> parameter is null, this method returns the value of the original <see cref="T:System.DateTimeOffset" /> object unchanged.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</para>
        </returns>
        <param name="timeSpan">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The fractional part of the <paramref name="days" /> parameter is the fractional part of a day. For example, 4.5 is equivalent to 4 days, 12 hours, 0 minutes, 0 seconds, 0 milliseconds. The <paramref name="days" /> parameter is rounded to the nearest millisecond.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="days" /> to its date and time.</para>
          </block>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.AddDays(System.Double)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
          <para>Converting time intervals of less than a day to a fraction can involve a loss of precision. If this is problematic, you can use the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of a day.  </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of whole and fractional days to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</para>
        </returns>
        <param name="days">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional days. The number can be negative or positive.</param>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The fractional part of the <paramref name="hours" /> parameter is the fractional part of an hour. For example, 4.5 is equivalent to 4 hours, 30 minutes, 0 seconds, 0 milliseconds. The <paramref name="hours" /> parameter is rounded to the nearest millisecond.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="hours" /> to its date and time.</para>
          </block>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.AddHours(System.Double)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
          <para>Converting time intervals of less than an hour to a fraction can involve a loss of precision. (For example, one minute is 0.01666 of an hour.) If this is problematic, you can use the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of an hour. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of whole and fractional hours to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</para>
        </returns>
        <param name="hours">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional hours. The number can be negative or positive.</param>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The fractional part of the <paramref name="milliseconds" /> parameter is the fractional part of a millisecond. For example, 4.5 is equivalent to 4 milliseconds and 5000 ticks, where one millisecond equals 10,000 ticks. However, <paramref name="milliseconds" /> is rounded to the nearest millisecond; all values of .5 or greater are rounded up.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="milliseconds" /> to its date and time.</para>
          </block>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.AddMilliseconds(System.Double)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of milliseconds to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</para>
        </returns>
        <param name="milliseconds">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional milliseconds. The number can be negative or positive.   </param>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The fractional part of the <paramref name="minutes" /> parameter is the fractional part of a minute. For example, 4.5 is equivalent to 4 minutes, 30 seconds, 0 milliseconds. The <paramref name="minutes" /> parameter is rounded to the nearest millisecond.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="minutes" /> to its date and time.</para>
          </block>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.AddMinutes(System.Double)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
          <para>Converting time intervals of less than a minute to a fraction can involve a loss of precision. (For example, one second is 0.01666 of a minute.) If this is problematic, you can use the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of a minute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of whole and fractional minutes to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</para>
        </returns>
        <param name="minutes">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional minutes. The number can be negative or positive.   </param>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Unlike most of the other methods that add a single time interval unit (such as minutes or days) to a date and time value, <see cref="M:System.DateTimeOffset.AddMonths(System.Int32)" /> does not enable you to add fractional parts of a month. To add a time that consists of other time units in addition to months to a <see cref="T:System.DateTimeOffset" /> object, use the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="months" /> to its date and time.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of months to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</para>
        </returns>
        <param name="months">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole months. The number can be negative or positive.</param>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The fractional part of the <paramref name="seconds" /> parameter is the fractional part of a second. The value of fractional parts of a second are shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Second value</para>
                </term>
                <description>
                  <para>Equivalent</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>.1 second</para>
              </term>
              <description>
                <para>100 milliseconds</para>
              </description>
            </item>
            <item>
              <term>
                <para>.01 second</para>
              </term>
              <description>
                <para>10 milliseconds</para>
              </description>
            </item>
            <item>
              <term>
                <para>.001 second</para>
              </term>
              <description>
                <para>1 millisecond</para>
              </description>
            </item>
          </list>
          <para>The <paramref name="seconds" /> parameter is rounded to the nearest millisecond.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="minutes" /> to its date and time.</para>
          </block>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.AddSeconds(System.Double)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of whole and fractional seconds to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</para>
        </returns>
        <param name="seconds">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional seconds. The number can be negative or positive.</param>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A tick represents 100 nanoseconds, or one-ten millionth of a second. Because a tick is a very small and precise time interval, any larger time unit can be expressed as a number of ticks without a loss of precision.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="minutes" /> to its date and time.</para>
          </block>
          <para>The following table lists the number of ticks in a particular time interval.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Time interval</para>
                </term>
                <description>
                  <para>Number of ticks</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Second</para>
              </term>
              <description>
                <para>10,000,000</para>
              </description>
            </item>
            <item>
              <term>
                <para>Minute</para>
              </term>
              <description>
                <para>600,000,000</para>
              </description>
            </item>
            <item>
              <term>
                <para>Hour</para>
              </term>
              <description>
                <para>36,000,000,000</para>
              </description>
            </item>
            <item>
              <term>
                <para>Day</para>
              </term>
              <description>
                <para>864,000,000,000</para>
              </description>
            </item>
            <item>
              <term>
                <para>Week</para>
              </term>
              <description>
                <para>6,048,000,000,000</para>
              </description>
            </item>
            <item>
              <term>
                <para>Month</para>
              </term>
              <description>
                <para>Depends on number of days in the month.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Non-leap year</para>
              </term>
              <description>
                <para>315,360,000,000,000</para>
              </description>
            </item>
            <item>
              <term>
                <para>Leap year</para>
              </term>
              <description>
                <para>316,224,000,000,000</para>
              </description>
            </item>
          </list>
          <para>Because a <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.AddTicks(System.Int64)" /> method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of ticks to the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</para>
        </returns>
        <param name="ticks">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of 100-nanosecond ticks. The number can be negative or positive.</param>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Unlike most of the other methods that add a single time interval unit (such as minutes or days) to a date and time value, <see cref="M:System.DateTimeOffset.AddYears(System.Int32)" /> does not enable you to add fractional parts of a year. To add a time that consists of other time units in addition to years to a <see cref="T:System.DateTimeOffset" /> object, use the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method.</para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="months" /> to its date and time.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified number of years to the <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</para>
        </returns>
        <param name="years">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of years. The number can be negative or positive.</param>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In performing the comparison, the method converts both the <paramref name="first" /> and the <paramref name="second" /> parameters to Coordinated Universal Time (UTC) before it performs the comparison. The method is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#1</para>
          <para>In other words, the <see cref="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" /> method determines whether two <see cref="T:System.DateTimeOffset" /> objects represent a single point in time. It directly compares neither dates and times nor offsets.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value</para>
                </term>
                <description>
                  <para>Meaning</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero</para>
              </term>
              <description>
                <para>
                  <paramref name="first" /> is earlier than <paramref name="second" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero</para>
              </term>
              <description>
                <para>
                  <paramref name="first" /> is equal to <paramref name="second" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero</para>
              </term>
              <description>
                <para>
                  <paramref name="first" /> is later than <paramref name="second" />.</para>
              </description>
            </item>
          </list>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method compares <see cref="T:System.DateTimeOffset" /> objects by comparing their <see cref="P:System.DateTimeOffset.UtcDateTime" /> values; that is, it determines whether the two objects represent a single point in time, and indicates whether the current object is earlier than, later than, or the same as the <paramref name="other" /> parameter. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero</para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero</para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero.</para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.</para>
              </description>
            </item>
          </list>
        </returns>
        <param name="other">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property removes any significant part of the time component from a <see cref="T:System.DateTimeOffset" /> object and returns only its significant date component. For example, if the <see cref="T:System.DateTimeOffset" /> object has a date and time value of "1/12/07 4:01pm +7:30", the property returns a <see cref="T:System.DateTime" /> value of "1/12/07 12:00:00 AM". The <see cref="T:System.DateTime" /> value can then be displayed by using any of the standard or custom format specifiers that display dates only. (See the Example section for an illustration.)</para>
          <para>The value of the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is always <see cref="F:System.DateTimeKind.Unspecified" />. It is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property. </para>
          <para>To display a date without its time component, you can also use the "D" or "d" format specifiers; for an illustration, see the Example section.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.DateTime" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>This property returns both the date and the time component of a <see cref="T:System.DateTimeOffset" /> object, which makes it useful for performing <see cref="T:System.DateTimeOffset" /> to <see cref="T:System.DateTime" /> conversion. For example, if the <see cref="T:System.DateTimeOffset" /> object has a date and time value of "1/12/07 4:01pm + 7:30", the property returns a date of "1/12/07 4:01pm". </para>
          <para>The value of the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is <see cref="F:System.DateTimeKind.Unspecified" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Day" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's day component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "d" or "dd" custom format specifiers.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the constants in the <see cref="T:System.DayOfWeek" /> enumeration ranges from <see cref="F:System.DayOfWeek.Sunday" /> to <see cref="F:System.DayOfWeek.Saturday" />. If cast to an integer, its value ranges from zero (which indicates <see cref="F:System.DayOfWeek.Sunday" />) to six (which indicates <see cref="F:System.DayOfWeek.Saturday" />). </para>
          <para>You can also display the weekday name of a particular date by using the "D" format specifier or the "dddd" custom format specifier. For example:</para>
          <para>code reference: System.DateTimeOffset.Properties#4</para>
          <para>Note that the string returned by calling the ToString method of the <see cref="T:System.DayOfWeek" /> enumeration member that is returned by this property is not localized. To extract a string that contains the weekday name of the current culture or of a specific culture, call the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "dddd" custom format specifier. For example, the following code displays the weekday name for a date using the fr-fr culture.</para>
          <para>code reference: System.DateTimeOffset.Properties#5</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Before it performs the comparison, this method converts the values of both <see cref="T:System.DateTimeOffset" /> objects to Coordinated Universal Time (UTC). The method is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#2</para>
          <para>In other words, the <see cref="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" /> method determines whether two <see cref="T:System.DateTimeOffset" /> objects represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <see cref="T:System.DateTimeOffset" /> objects represent the same time and have the same offset value, use the <see cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" /> method.</para>
          <para>A <see cref="T:System.DateTimeOffset" /> object that is not null is considered to be later (or greater) than one that is null.</para>
          <para>This overload of the <see cref="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" /> method implements the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. It offers slightly better performance than the <see cref="M:System.DateTimeOffset.Equals(System.Object)" /> overload because the <paramref name="other" /> parameter does not have to be converted from an object.  </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</para>
        </returns>
        <param name="other">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare to the current <see cref="T:System.DateTimeOffset" /> object.   </param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Before it performs the comparison, this method converts the values of both the current <see cref="T:System.DateTimeOffset" /> object and the <paramref name="obj" /> parameter to Coordinated Universal Time (UTC). The method is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#3</para>
          <para>In other words, the <see cref="M:System.DateTimeOffset.Equals(System.Object)" /> method determines whether the current <see cref="T:System.DateTimeOffset" /> object and a specified object represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <see cref="T:System.DateTimeOffset" /> objects represent the same time and have the same offset value, use the <see cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" /> method.</para>
          <para>If <paramref name="obj" /> is null, or if the run-time type of <paramref name="obj" /> is not <see cref="T:System.DateTimeOffset" />, the method returns false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Before it performs the comparison, this method converts both <see cref="T:System.DateTimeOffset" /> objects to Coordinated Universal Time (UTC). The method is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#4</para>
          <para>In other words, the <see cref="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" /> method determines whether the two <see cref="T:System.DateTimeOffset" /> objects represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <see cref="T:System.DateTimeOffset" /> objects represent the same time and have the same offset value, use the <see cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Because multiple time zones share a single offset, a return value of true does not guarantee that the current and the <paramref name="other" /> object represent times in the same time zone. </para>
          <para>Unlike the <see cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" /> method, the overloads of the <see cref="Overload:System.DateTimeOffset.Equals" /> method determine only whether two <see cref="T:System.DateTimeOffset" /> values represent a single point in time. They do not indicate that two values have the same date and time as well as the same offset. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, false.</para>
        </returns>
        <param name="other">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare to the current <see cref="T:System.DateTimeOffset" /> object. </param>
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file. </para>
          <para>A Windows file time is directly accessible through the Windows API by calling the GetFileTime function, which returns a FILETIME structure. The single function parameter is the handle of the file whose file time information is to be retrieved. The file handle is retrieved by calling the CreateFile function. The FILETIME structure's dwHighDateTime member contains the four high-order bytes of the file time, and its dwLowDateTime member contains the four low-order bytes. The example that follows illustrates how to retrieve Windows file time values and convert them to <see cref="T:System.DateTimeOffset" /> values.</para>
          <para>Windows file time values can also be created from <see cref="T:System.DateTime" /> values by calling the <see cref="M:System.DateTime.ToFileTime" /> and <see cref="M:System.DateTime.ToFileTimeUtc" /> methods, and from <see cref="T:System.DateTimeOffset" /> values by calling the <see cref="M:System.DateTimeOffset.ToFileTime" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified Windows file time to an equivalent local time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</para>
        </returns>
        <param name="fileTime">
          <attribution license="cc4" from="Microsoft" modified="false" />A Windows file time, expressed in ticks.</param>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer hash code.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Hour" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property. </para>
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's hour component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "H", or "HH" custom format specifiers. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If necessary, the <see cref="P:System.DateTimeOffset.LocalDateTime" /> property converts the current <see cref="T:System.DateTimeOffset" /> object's date and time to the local system's date and time. The conversion is a two-step operation:</para>
          <list type="ordered">
            <item>
              <para>The property converts the current <see cref="T:System.DateTimeOffset" /> object's time to Coordinated Universal Time (UTC).</para>
            </item>
            <item>
              <para>The property then converts UTC to local time.</para>
            </item>
          </list>
          <para>There are no invalid times and ambiguous times are mapped to the local zone's standard time. (However, the conversion can create an anomaly: if a <see cref="T:System.DateTimeOffset" /> value that is derived from the local computer reflects an ambiguous date and time, that value can be converted to UTC and then back to a local time that differs from the original time.)  The property applies any adjustment rules in the local time zone when it performs this conversion.</para>
          <para>This property returns both the date and the time component of a <see cref="T:System.DateTimeOffset" /> object, which makes it useful for <see cref="T:System.DateTimeOffset" /> to <see cref="T:System.DateTime" /> conversion. In addition to performing any necessary time conversion, this property differs from the <see cref="P:System.DateTimeOffset.DateTime" /> property by setting the value of the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object to <see cref="F:System.DateTimeKind.Local" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <MemberValue>12/31/9999 11:59:59 PM +00:00</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is 12/31/9999 11:59:59 PM +00:00.</para>
          <para>The <see cref="F:System.DateTimeOffset.MaxValue" /> property is used to determine whether the value of a new <see cref="T:System.DateTimeOffset" /> object or the <see cref="T:System.DateTimeOffset" /> value returned by an arithmetic operation is the same as or earlier than this maximum range value. If it is not, the method throws an <see cref="T:System.ArgumentOutOfRangeException" />. Any <see cref="T:System.DateTimeOffset" /> value is converted to Coordinated Universal Time (UTC) before the method compares it with <see cref="F:System.DateTimeOffset.MaxValue" />.  This means that a <see cref="T:System.DateTimeOffset" /> value whose date and time are close to the maximum range, but whose offset is negative, may throw an exception. For example, the value 12/31/9999 11:00 PM -02:00 is out of range because it is one hour later than <see cref="F:System.DateTimeOffset.MaxValue" /> when it is converted to UTC.</para>
          <para>Some calendars, such as the <see cref="T:System.Globalization.UmAlQuraCalendar" />, support an upper date range that is earlier than <see cref="F:System.DateTime.MaxValue" />. In these cases, trying to access <see cref="F:System.DateTime.MaxValue" /> in variable assignments or formatting and parsing operations can throw an <see cref="T:System.ArgumentOutOfRangeException" />. Instead of retrieving the value of <see cref="F:System.DateTime.MaxValue" />, you can retrieve the value of the specified culture's latest valid date value from the <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's millisecond component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "fff" custom format specifier. </para>
          <para>If you rely on properties such as <see cref="P:System.DateTimeOffset.Now" /> or <see cref="P:System.DateTimeOffset.UtcNow" /> to accurately track the number of elapsed milliseconds, the precision of the time's millisecond component depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's resolution is approximately 10-15 milliseconds.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Minute" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's minute component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "m", or "mm" custom format specifiers.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <MemberValue>1/1/0001 12:00:00 AM +00:00</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is 1/1/0001 12:00:00 AM +00:00.</para>
          <para>The <see cref="F:System.DateTimeOffset.MinValue" /> property is used to determine whether the value of a new <see cref="T:System.DateTimeOffset" /> object or the <see cref="T:System.DateTimeOffset" /> value returned by an arithmetic operation is the same as or later than this minimum range value. If it is not, the method throws an <see cref="T:System.ArgumentOutOfRangeException" />. Any <see cref="T:System.DateTimeOffset" /> value is converted to Coordinated Universal Time (UTC) before the method performs the comparison with <see cref="F:System.DateTimeOffset.MinValue" />.  This means that a <see cref="T:System.DateTimeOffset" /> value whose date and time are close to the minimum range, but whose offset is positive, may throw an exception. For example, the value 1/1/0001 1:00:00 AM +02:00 is out of range because it is one hour earlier than <see cref="F:System.DateTimeOffset.MinValue" /> when it is converted to UTC.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Month" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's month component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "M" or "MM" custom format specifiers.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The precision of the current local time's millisecond component depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's resolution is approximately 10-15 milliseconds.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the <see cref="P:System.TimeSpan.Hours" /> property of the returned <see cref="T:System.TimeSpan" /> object can range from -14 hours to 14 hours. </para>
          <para>The value of the <see cref="P:System.DateTimeOffset.Offset" /> property is precise to the minute.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the time's offset from Coordinated Universal Time (UTC). </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Addition (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" /> method defines the addition operation for <see cref="T:System.DateTimeOffset" /> values. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#1</para>
          <para>Languages that do not support custom operators and operator overloading can call the <see cref="M:System.DateTimeOffset.Add(System.TimeSpan)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</para>
        </returns>
        <param name="dateTimeOffset">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to add the time interval to.</param>
        <param name="timeSpan">
          <attribution license="cc4" from="Microsoft" modified="false" />The time interval to add.</param>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the operation of the equality operator for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#2</para>
          <para>Before evaluating the <paramref name="left" /> and <paramref name="right" /> operands for equality, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#4</para>
          <para>In other words, the <see cref="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" /> method determines whether the two <see cref="T:System.DateTimeOffset" /> objects represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <see cref="T:System.DateTimeOffset" /> objects represent the same time and have the same offset value, use the <see cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the operation of the greater than operator for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#3</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" /> method instead. They can also call the <see cref="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" /> method directly, as the following example shows.</para>
          <para>code reference: System.DateTimeOffset.Operators#4</para>
          <para>Before evaluating the <paramref name="left" /> and <paramref name="right" /> operands, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#5</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the operation of the greater than or equal to operator for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#5</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" /> method instead. Some languages can also call the <see cref="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" /> method directly, as the following example shows.</para>
          <para>code reference: System.DateTimeOffset.Operators#6</para>
          <para>Before evaluating the <paramref name="left" /> and <paramref name="right" /> operands, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#6</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Implicit (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the operation of the inequality operator for <see cref="T:System.DateTimeOffset" /> objects. It always returns the opposite result from <see cref="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />. The <see cref="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" /> method enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#8</para>
          <para>Before evaluating the <paramref name="left" /> and <paramref name="right" /> operands for equality, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#4</para>
          <para>In other words, the <see cref="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" /> method determines whether the two <see cref="T:System.DateTimeOffset" /> objects represent different points in time. It directly compares neither dates and times nor offsets.</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" /> method instead. In addition, some languages can also call the <see cref="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" /> method directly, as the following example shows.</para>
          <para>code reference: System.DateTimeOffset.Operators#9</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the operation of the less than operator for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#10</para>
          <para>Before evaluating the <paramref name="left" /> and <paramref name="right" /> operands, the operator converts both operands to Coordinated Universal Time (UTC). The operation is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#8</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" /> method instead. In addition, some languages can also call the <see cref="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" /> method directly, as the following example shows.</para>
          <para>code reference: System.DateTimeOffset.Operators#11</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the operation of the less than or equal to operator for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#12</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" /> method instead. Some languages can also call the <see cref="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" /> method directly, as the following example shows.</para>
          <para>code reference: System.DateTimeOffset.Operators#13</para>
          <para>Before evaluating the <paramref name="left" /> and <paramref name="right" /> operands, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:</para>
          <para>code reference: System.DateTimeOffset.Syntax#9</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Subtraction (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" /> method defines the subtraction operation for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#14</para>
          <para>Languages that do not support custom operators and operator overloading can call the <see cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The minuend.   </param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The subtrahend.</param>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Subtraction (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" /> method defines the subtraction operation for <see cref="T:System.DateTimeOffset" /> objects. It enables code such as the following:</para>
          <para>code reference: System.DateTimeOffset.Operators#15</para>
          <para>Languages that do not support custom operators and operator overloading can call the <see cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</para>
        </returns>
        <param name="dateTimeOffset">
          <attribution license="cc4" from="Microsoft" modified="false" />The date and time object to subtract from.</param>
        <param name="timeSpan">
          <attribution license="cc4" from="Microsoft" modified="false" />The time interval to subtract.</param>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.DateTimeOffset.Parse(System.String)" /> parses a string with three elements that can appear in any order and are delimited by white space. These three elements are as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Example</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>&lt;Date&gt;</para>
              </term>
              <description>
                <para>"2/10/2007"</para>
              </description>
            </item>
            <item>
              <term>
                <para>&lt;Time&gt;</para>
              </term>
              <description>
                <para>"1:02:03 PM"</para>
              </description>
            </item>
            <item>
              <term>
                <para>&lt;Offset&gt;</para>
              </term>
              <description>
                <para>"-7:30:15"</para>
              </description>
            </item>
          </list>
          <para>Although each of these elements is optional, &lt;Offset&gt; cannot appear by itself. It must be provided together with either &lt;Date&gt; or &lt;Time&gt;. If &lt;Date&gt; is missing, its default value is the current day. If &lt;Time&gt; is missing, its default value is 12:00:00 AM. If &lt;Date&gt; is present but its year component consists of only two digits, it is converted to a year in the current culture's current calendar based on the value of the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property. If &lt;Offset&gt; is missing, its default value is the offset of the local time zone. &lt;Offset&gt; can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, &lt;Offset&gt; must include a sign symbol.</para>
          <para>The <paramref name="input" /> string is parsed by using the formatting information in a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that is initialized for the current culture. To parse a string that contains designated formatting that does not necessarily correspond to the formatting of the current culture, use the <see cref="Overload:System.DateTimeOffset.ParseExact" /> method and provide a format specifier.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert.</param>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method parses a string with three elements that can appear in any order and are delimited by white space. These three elements are shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Example</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>&lt;Date&gt;</para>
              </term>
              <description>
                <para>"2/10/2007"</para>
              </description>
            </item>
            <item>
              <term>
                <para>&lt;Time&gt;</para>
              </term>
              <description>
                <para>"1:02:03 PM"</para>
              </description>
            </item>
            <item>
              <term>
                <para>&lt;Offset&gt;</para>
              </term>
              <description>
                <para>"-7:30:15"</para>
              </description>
            </item>
          </list>
          <para>Although each of these elements is optional, &lt;Offset&gt; cannot appear by itself. It must be provided together with either &lt;Date&gt; or &lt;Time&gt;. If &lt;Date&gt; is missing, its default value is the current day. If &lt;Date&gt; is present but its year component consists of only two digits, it is converted to a year in the <paramref name="provider" /> parameter's current calendar based on the value of the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property. If &lt;Time&gt; is missing, its default value is 12:00:00 AM. If &lt;Offset&gt; is missing, its default value is the offset of the local time zone. &lt;Offset&gt; can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, &lt;Offset&gt; must include a sign symbol.</para>
          <para>The format of these three elements is defined by the <paramref name="formatProvider" /> parameter, which can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose formatting is used in the <paramref name="input" /> parameter. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the formatting used in <paramref name="input" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>If <paramref name="formatprovider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used. </para>
          <para>The positive or negative sign used in &lt;Offset&gt; must be either + or -. It is not defined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> or <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> object of the <paramref name="formatProvider" /> parameter.   </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert.   </param>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that provides culture-specific format information about <paramref name="input" />.</param>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method parses a string with three elements that can appear in any order and are delimited by white space. These three elements are shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Example</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>&lt;Date&gt;</para>
              </term>
              <description>
                <para>"2/10/2007"</para>
              </description>
            </item>
            <item>
              <term>
                <para>&lt;Time&gt;</para>
              </term>
              <description>
                <para>"1:02:03 PM"</para>
              </description>
            </item>
            <item>
              <term>
                <para>&lt;Offset&gt;</para>
              </term>
              <description>
                <para>"-7:30:15"</para>
              </description>
            </item>
          </list>
          <para>Although each of these elements is optional, &lt;Offset&gt; cannot appear by itself. It must be provided together with either &lt;Date&gt; or &lt;Time&gt;. If &lt;Date&gt; is missing, its default value is the current day. If &lt;Date&gt; is present but its year component consists of only two digits, it is converted to a year in the <paramref name="provider" /> parameter's current calendar based on the value of the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property. If &lt;Time&gt; is missing, its default value is 12:00:00 AM. If &lt;Offset&gt; is missing, its default value is the offset of the local time zone, or <see cref="F:System.TimeSpan.Zero" /> if either the <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> or <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> value is specified in the <paramref name="styles" /> parameter. If &lt;Offset&gt; is present, it can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, &lt;Offset&gt; must include a sign symbol.</para>
          <para>The format of these three elements is defined by the <paramref name="formatProvider" /> parameter, which can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose formatting is used in the <paramref name="input" /> parameter. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the formatting used in <paramref name="input" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>Each element can also be enclosed by leading or trailing white space, and the &lt;Date&gt; and &lt;Time&gt; elements can include inner white space (such as 6:   00:00). Only the &lt;Offset&gt; component cannot include inner white space.</para>
          <para>If <paramref name="formatprovider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used. </para>
          <para>The positive or negative sign used in &lt;Offset&gt; must be either + or -. It is not defined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> or <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> object returned by the <paramref name="formatProvider" /> parameter.</para>
          <para>The following table shows the members of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration that are supported.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>DateTimeStyles member</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" />
                </para>
              </term>
              <description>
                <para>Parses the string represented by <paramref name="input" /> and, if necessary, converts it to UTC. It is equivalent to parsing a string and then calling the <see cref="M:System.DateTimeOffset.ToUniversalTime" /> method of the returned <see cref="T:System.DateTimeOffset" /> object.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />
                </para>
              </term>
              <description>
                <para>Although valid, this value is ignored. Inner white space is permitted in the &lt;Date&gt; and &lt;Time&gt; elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>Although valid, this value is ignored. Leading white space is permitted in front of each component in the parsed string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>Although valid, this value is ignored. Trailing white space is permitted in front of each component in the parsed string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />
                </para>
              </term>
              <description>
                <para>This is the default behavior. It cannot be overridden by supplying a more restrictive <see cref="T:System.Globalization.DateTimeStyles" /> enumeration value, such as <see cref="F:System.Globalization.DateTimeStyles.None" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />
                </para>
              </term>
              <description>
                <para>Indicates that, if the <paramref name="input" /> parameter lacks an &lt;Offset&gt; element, the offset of the local time zone should be provided. This is the default behavior of the <see cref="M:System.DateTimeOffset.Parse(System.String)" /> method.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />
                </para>
              </term>
              <description>
                <para>Indicates that, if the <paramref name="input" /> parameter lacks an &lt;Offset&gt; element, the UTC offset (00:00) should be provided.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.None" />
                </para>
              </term>
              <description>
                <para>Although valid, this value is ignored and has no effect.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />
                </para>
              </term>
              <description>
                <para>Because the <see cref="T:System.DateTimeOffset" /> structure does not include a Kind property, this value has no effect.</para>
              </description>
            </item>
          </list>
          <para>Only the <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> value is not supported. An <see cref="T:System.ArgumentException" /> is thrown if this value is included in the <paramref name="styles" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert.   </param>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that provides culture-specific format information about <paramref name="input" />.</param>
        <param name="styles">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.   </param>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" /> method parses the string representation of a date, which must be in the format defined by the <paramref name="format" /> parameter. It also requires that the &lt;Date&gt;, &lt;Time&gt;, and &lt;Offset&gt; elements of the string representation of a date and time appear in the order specified by <paramref name="format" />. If the <paramref name="input" /> string does not match this <paramref name="format" /> parameter, the method throws a <see cref="T:System.FormatException" />.  In contrast, the <see cref="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" /> method parses the string representation of a date in any one of the formats recognized by the format provider's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. <see cref="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" /> also allows the &lt;Date&gt;, &lt;Time&gt;, and &lt;Offset&gt; elements of the string representation of a date and time to appear in any order.</para>
          <para>The <paramref name="format" /> parameter is a string that contains either a single standard format specifier or one or more custom format specifiers that define the required format of the <paramref name="input" /> parameter. For details about valid formatting codes, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. If <paramref name="format" /> includes the z, zz, or zzz custom format specifiers to indicate that an offset must be present in <paramref name="input" />, that offset must include either a negative sign or a positive sign. If the sign is missing, the method throws a <see cref="T:System.FormatException" />.</para>
          <para>If <paramref name="format" /> requires that <paramref name="input" /> contain a date but not a time, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned a time of midnight (0:00:00). If <paramref name="format" /> requires that <paramref name="input" /> contain a time but not a date, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned the current date on the local system. If <paramref name="format" /> does not require that <paramref name="input" /> contain an offset, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned the time zone offset of the local system.</para>
          <para>The particular date and time symbols and strings used in <paramref name="input" /> are defined by the <paramref name="formatProvider" /> parameter, as is the precise format of <paramref name="input" /> if <paramref name="format" /> is a standard format specifier string. The <paramref name="formatProvider" /> parameter can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture based on which <paramref name="input" /> is interpreted. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the symbols and formatting in <paramref name="input" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>If <paramref name="formatprovider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert.</param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format specifier that defines the expected format of <paramref name="input" />.</param>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method parses the string representation of a date, which must be in the format defined by the <paramref name="format" /> parameter. It also requires that the &lt;Date&gt;, &lt;Time&gt;, and &lt;Offset&gt; elements of the string representation of a date and time appear in the order specified by <paramref name="format" />. If the <paramref name="input" /> string does not match the pattern of the <paramref name="format" /> parameter, with any variations defined by the <paramref name="styles" /> parameter, the method throws a <see cref="T:System.FormatException" />.  In contrast, the <see cref="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method parses the string representation of a date in any one of the formats recognized by the format provider's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. <see cref="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> also allows the &lt;Date&gt;, &lt;Time&gt;, and &lt;Offset&gt; elements of the string representation of a date and time to appear in any order.</para>
          <para>The <paramref name="format" /> parameter is a string that contains either a single standard format specifier or one or more custom format specifiers that define the required pattern of the <paramref name="input" /> parameter. For details about valid formatting codes, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. If <paramref name="format" /> includes the z, zz, or zzz custom format specifiers to indicate that an offset must be present in <paramref name="input" />, that offset must include either a negative sign or a positive sign. If the sign is missing, the method throws a <see cref="T:System.FormatException" />.</para>
          <para>If <paramref name="format" /> requires that <paramref name="input" /> contain a date but not a time, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned a time of midnight (0:00:00). If <paramref name="format" /> requires that <paramref name="input" /> contain a time but not a date, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned the current date on the local system. If <paramref name="format" /> does not require that <paramref name="input" /> contain an offset, the offset of the resulting <see cref="T:System.DateTimeOffset" /> object depends on the value of the <paramref name="styles" /> parameter. If <paramref name="styles" /> includes <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, the offset of the local time zone is assigned to the <see cref="T:System.DateTimeOffset" /> object. If <paramref name="styles" /> includes <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, the Coordinated Universal Time (UTC) offset, or +00:00, is assigned to the <see cref="T:System.DateTimeOffset" /> object. If neither value is specified, the offset of the local time zone is used.</para>
          <para>The particular date and time symbols and strings used in <paramref name="input" /> are defined by the <paramref name="formatProvider" /> parameter. The same is true for the precise format of <paramref name="input" />, if <paramref name="format" /> is a standard format specifier string. The <paramref name="formatProvider" /> parameter can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture based on which <paramref name="input" /> is interpreted. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the symbols and formatting in <paramref name="input" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>If <paramref name="formatprovider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used. </para>
          <para>The <paramref name="styles" /> parameter defines whether white space is allowed in the input string, indicates how strings without an explicit offset component are parsed, and supports UTC conversion as part of the parsing operation. All members of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration are supported except <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />. The following table lists the effect of each supported member.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>DateTimeStyles member</para>
                </term>
                <description>
                  <para>Behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" />
                </para>
              </term>
              <description>
                <para>Parses <paramref name="input" /> and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the <see cref="M:System.DateTimeOffset.ToUniversalTime" /> method of the returned <see cref="T:System.DateTimeOffset" /> object.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />
                </para>
              </term>
              <description>
                <para>If <paramref name="format" /> does not require that <paramref name="input" /> contain an offset value, the returned <see cref="T:System.DateTimeOffset" /> object is given the offset of the local time zone. This is the default value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />
                </para>
              </term>
              <description>
                <para>If <paramref name="format" /> does not require that <paramref name="input" /> contain an offset value, the returned <see cref="T:System.DateTimeOffset" /> object is given the UTC offset (+00:00).</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include inner white space not specified by <paramref name="format" />. Extra white space can appear between date and time components and within individual components, and is ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include leading spaces not specified by <paramref name="format" />. These are ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include trailing spaces not specified by <paramref name="format" />. These are ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include leading, trailing, and inner spaces not specified by <paramref name="format" />. All extra white-space characters not specified in <paramref name="format" /> are ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.None" />
                </para>
              </term>
              <description>
                <para>Indicates that additional white space is not permitted in <paramref name="input" />. White space must appear exactly as specified in <paramref name="format" />. This is the default behavior.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />
                </para>
              </term>
              <description>
                <para>Has no effect because the <see cref="T:System.DateTimeOffset" /> structure does not include a Kind property.</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert.</param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format specifier that defines the expected format of <paramref name="input" />.</param>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
        <param name="styles">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method parses the string representation of a date that matches any one of the patterns assigned to the <paramref name="formats" /> parameter. If the <paramref name="input" /> string does not match any one of these patterns with any of the variations defined by the <paramref name="styles" /> parameter, the method throws a <see cref="T:System.FormatException" />. Aside from comparing <paramref name="input" /> to multiple formatting patterns, this overload behaves identically to the <see cref="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method.</para>
          <para>The <paramref name="formats" /> parameter is a string array whose elements contain either a single standard format specifier or one or more custom format specifiers that define the possible pattern of the <paramref name="input" /> parameter. When the method is called, <paramref name="input" /> must match one of these patterns. For details about valid formatting codes, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. If the matched element in <paramref name="formats" /> includes the z, zz, or zzz custom format specifiers to indicate that an offset must be present in <paramref name="input" />, that offset must include either a negative sign or a positive sign. If the sign is missing, the method throws a <see cref="T:System.FormatException" />.</para>
          <block subset="none" type="note">
            <para>Using the <paramref name="formats" /> parameter of this overload to specify multiple formats can help reduce the frustration many users experience when they enter dates and times. In particular, the ability to define multiple input patterns enables an application to handle date and time representations that can either include or lack leading zeros in months, days, hours, minutes, and seconds. The example provides an illustration of this.</para>
          </block>
          <para>If the matched element in <paramref name="formats" /> requires that <paramref name="input" /> contain a date but not a time, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned a time of midnight (0:00:00). If the matched element in <paramref name="formats" /> requires that <paramref name="input" /> contain a time but not a date, the resulting <see cref="T:System.DateTimeOffset" /> object is assigned the current date on the local system. If the matched element in <paramref name="formats" /> does not require that <paramref name="input" /> contain an offset, the offset of the resulting <see cref="T:System.DateTimeOffset" /> object depends on the value of the <paramref name="styles" /> parameter. If <paramref name="styles" /> includes <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, the offset of the local time zone is assigned to the <see cref="T:System.DateTimeOffset" /> object. If <paramref name="styles" /> includes <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, the Coordinated Universal Time (UTC) offset, or +00:00, is assigned to the <see cref="T:System.DateTimeOffset" /> object. If neither value is specified, the offset of the local time zone is used.</para>
          <para>The particular date and time symbols and strings used in <paramref name="input" /> are defined by the <paramref name="formatProvider" /> parameter. The same is true for the precise format of <paramref name="input" />, if the matching element of <paramref name="formats" /> is a standard format specifier string. The <paramref name="formatProvider" /> parameter can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture based on which <paramref name="input" /> is interpreted. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the symbols and formatting in <paramref name="input" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>If <paramref name="formatprovider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used. </para>
          <para>The <paramref name="styles" /> parameter defines whether white space is permitted in the input string, indicates how strings without an explicit offset component are parsed, and supports UTC conversion as part of the parsing operation. All members of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration are supported except <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />. The following table lists the effect of each supported member.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>DateTimeStyles member</para>
                </term>
                <description>
                  <para>Behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" />
                </para>
              </term>
              <description>
                <para>Parses <paramref name="input" /> and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the <see cref="M:System.DateTimeOffset.ToUniversalTime" /> method of the returned <see cref="T:System.DateTimeOffset" /> object.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />
                </para>
              </term>
              <description>
                <para>If the matched element in <paramref name="formats" /> does not require that <paramref name="input" /> contain an offset value, the returned <see cref="T:System.DateTimeOffset" /> object is given the offset of the local time zone. This is the default value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />
                </para>
              </term>
              <description>
                <para>If the matched element in <paramref name="formats" /> does not require that <paramref name="input" /> contain an offset value, the returned <see cref="T:System.DateTimeOffset" /> object is given the UTC offset (+00:00).</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include inner white space not specified by <paramref name="format" />. Extra white space can appear between date and time components and within individual components (except the offset), and is ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include leading spaces not specified by <paramref name="formats" />. These are ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include trailing spaces not specified by <paramref name="formats" />. These are ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />
                </para>
              </term>
              <description>
                <para>Allows <paramref name="input" /> to include leading, trailing, and inner spaces not specified by <paramref name="formats" />. All extra white-space characters not specified in the matched element in <paramref name="formats" /> are ignored when parsing the string.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.None" />
                </para>
              </term>
              <description>
                <para>Indicates that additional white space is not permitted in <paramref name="input" />. White space must appear exactly as specified in a particular element of <paramref name="formats" /> for a match to occur. This is the default behavior.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />
                </para>
              </term>
              <description>
                <para>Has no effect because the <see cref="T:System.DateTimeOffset" /> structure does not include a Kind property.</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</para>
        </returns>
        <param name="input">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert.</param>
        <param name="formats">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
        <param name="styles">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Second" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's second component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "s", or "ss" custom format specifiers.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method converts both <see cref="T:System.DateTimeOffset" /> objects to Coordinated Universal Time (UTC) before calculating the time interval that separates them. This removes any effect that different offsets from UTC may have on the comparison.</para>
          <block subset="none" type="note">
            <para>For languages that support custom operators, you can also perform date and time subtraction by using the subtraction operator. For details, see the <see cref="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" /> method.</para>
          </block>
          <para>Because neither the current <see cref="T:System.DateTimeOffset" /> object nor the <paramref name="value" /> parameter represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" /> method does not consider a particular time zone's adjustment rules when it subtracts dates and times. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that represents the value to subtract. </param>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use the <see cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" /> method to subtract more than one kind of time interval (days, hours, minutes, seconds, or milliseconds) in a single operation. Its behavior is identical to the <see cref="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" /> method, which defines the subtraction operator. The <see cref="T:System.DateTimeOffset" /> structure also supports specialized addition methods (such as <see cref="M:System.DateTimeOffset.AddDays(System.Double)" />, <see cref="M:System.DateTimeOffset.AddHours(System.Double)" />, and <see cref="M:System.DateTimeOffset.AddMinutes(System.Double)" />) that allow you to perform subtraction by assigning a negative value to the method parameter. </para>
          <block subset="none" type="note">
            <para>This method returns a new <see cref="T:System.DateTimeOffset" /> object. It does not modify the value of the current object by adding <paramref name="timeSpan" /> to its date and time.</para>
          </block>
          <para>The <see cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" /> method does not affect the value of the <see cref="T:System.DateTimeOffset" /> object's <see cref="P:System.DateTimeOffset.Offset" /> property. The returned <see cref="T:System.DateTimeOffset" /> object has the same offset as the original object.</para>
          <para>Because the current <see cref="T:System.DateTimeOffset" /> object does not represent the date and time in a specific time zone, the <see cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" /> method does not consider a particular time zone's adjustment rules when it performs the subtraction. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The time interval to subtract.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero</para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero</para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero</para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.</para>
              </description>
            </item>
          </list>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Runs when the deserialization of an object has been completed.</para>
        </summary>
        <param name="sender">
          <attribution license="cc4" from="Microsoft" modified="false" />The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
        <param name="info">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to populate with data.</param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Ticks" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>The value of the <see cref="P:System.DateTimeOffset.Ticks" /> property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001 (the value of <see cref="F:System.DateTimeOffset.MinValue" />). It does not include ticks that would be added by leap seconds. A nanosecond is one billionth of a second; there are ten million ticks in a second. The value of the <see cref="P:System.DateTimeOffset.Ticks" /> property ranges from DateTimeOffset.MinValue.Ticks to DateTimeOffset.MaxValue.Ticks.</para>
          <para>You can assign the number of ticks to a <see cref="T:System.DateTimeOffset" /> object by using the <see cref="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" /> constructor overload.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.TimeOfDay" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>The <see cref="P:System.DateTimeOffset.TimeOfDay" /> property returns the time component of a <see cref="T:System.DateTimeOffset" /> object in the form of a <see cref="T:System.TimeSpan" /> object. It is equivalent to the <see cref="P:System.DateTime.TimeOfDay" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file. </para>
          <para>The <see cref="M:System.DateTimeOffset.ToFileTime" /> method converts the current <see cref="T:System.DateTimeOffset" /> object's date and time to UTC before it performs the conversion. In other words, calling the <see cref="M:System.DateTimeOffset.ToFileTime" /> method is equivalent to the following method call:</para>
          <para>[C#]</para>
          <code>this.ToUtcDateTime().ToFileTime();</code>
          <para>[Visual Basic]</para>
          <code>Me.ToUtcDateTime().ToFileTime()</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In performing the conversion to local time, the method first converts the current <see cref="T:System.DateTimeOffset" /> object's date and time to Coordinated Universal Time (UTC) by subtracting the offset from the time. It then converts the UTC date and time to local time by adding the local time zone offset. In doing this, it takes account of any adjustment rules for the local time zone.  </para>
          <para>Both the value of the current <see cref="T:System.DateTimeOffset" /> object and the value of the <see cref="T:System.DateTimeOffset" /> object returned by the method call represent the same point in time. That is, if both are passed to the <see cref="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" /> method, the method will return true.</para>
          <para>If the conversion causes a time that is out of range of the <see cref="T:System.DateTimeOffset" /> type, the <see cref="M:System.DateTimeOffset.ToLocalTime" /> method returns a <see cref="T:System.DateTimeOffset" /> object that has the date and time set to either <see cref="F:System.DateTimeOffset.MaxValue" /> or <see cref="F:System.DateTimeOffset.MinValue" /> and the offset set to the local time zone offset.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" /> method is an alternative to calling the <see cref="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />  method. It can be useful for performing simple conversions from one time zone to another when the time zones' offsets from Coordinated Universal Time (UTC) are known. However, because neither the original <see cref="T:System.DateTimeOffset" /> object nor the new <see cref="T:System.DateTimeOffset" /> object returned by the method call are unambiguously related to a particular time zone, the method does not apply any time zone adjustment rules in the conversion. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</para>
        </returns>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.   </param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value of this method is identical to that of the <see cref="M:System.DateTime.ToString" /> method, except that it includes a space followed by the offset appended at the end of the string. In other words, it formats output using the short date pattern, the long time pattern, and the zzz custom format string, with each element separated from the previous element by a space. For example, if <see cref="M:System.DateTime.ToString" /> returns a value of 1/12/2008 6:15:50 PM, <see cref="M:System.DateTimeOffset.ToString" /> returns a value of 1/12/2008 6:15:50 PM -08:00 for a time that is eight hours behind Coordinated Universal Time (UTC).</para>
          <para>This method uses formatting information derived from the current culture. For more information, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />. Other overloads of the <see cref="M:System.DateTimeOffset.ToString" /> method enable you to specify the culture whose formatting to use, and to define the output pattern of the <see cref="T:System.DateTimeOffset" /> value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value of this method is identical to that of its equivalent overload of the <see cref="M:System.DateTime.ToString" /> method, except that it includes a space followed by the offset appended at the end of the string. In other words, it formats output using the short date pattern, the long time pattern, and the zzz custom format string, with each element separated from the previous element by a space.</para>
          <para>The format of these three elements is defined by the <paramref name="formatProvider" /> parameter. The <paramref name="formatProvider" /> parameter can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose formatting conventions are applied to the returned string. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the formatting of the returned string.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>If <paramref name="formatProvider" /> is null, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with the current culture is used (see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</para>
        </returns>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="format" /> parameter should contain either a single format specifier character (see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format>) or a custom format pattern (see <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>) that defines the format of the returned string. If <paramref name="format" /> is a null or empty string (""), the <see cref="T:System.DateTimeOffset" /> value is output using the default format.</para>
          <para>The following table shows the exact operation of certain format specifiers when used with <see cref="T:System.DateTimeOffset" />, which differs from their behavior when used with <see cref="T:System.DateTime" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Existing format specifier</para>
                </term>
                <description>
                  <para>New behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>"K"</para>
              </term>
              <description>
                <para>Designed to round-trip a date and time. With <see cref="T:System.DateTimeOffset" />, maps to "zzz" (the offset is always displayed with hours and minutes). Note that "K" is a custom format specifier; it cannot appear as the single character in <paramref name="format" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"U"</para>
              </term>
              <description>
                <para>Not supported.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"r" </para>
              </term>
              <description>
                <para>Converts the <see cref="T:System.DateTimeOffset" /> object to Coordinated Universal Time (UTC) and outputs it using the custom format string ddd, dd MMM yyyy HH:mm:ss GMT.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"u"</para>
              </term>
              <description>
                <para>Converts the <see cref="T:System.DateTimeOffset" /> object to UTC and outputs it using the format yyyy-MM-dd HH:mm:ssZ.</para>
              </description>
            </item>
          </list>
          <para>The remaining standard date and time format specifiers behave the same with the <see cref="M:System.DateTimeOffset.ToString(System.String)" /> method as they do with the <see cref="M:System.DateTime.ToString" /> method.</para>
          <para>This method uses formatting information derived from the current culture. For more information, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format string.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="format" /> parameter should contain either a single format specifier character (see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format>) or a custom format pattern (see <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>). If <paramref name="format" /> is a null or empty string (""), the <see cref="T:System.DateTimeOffset" /> object is output using the default format.</para>
          <para>The following table shows the exact operation of certain format specifiers when used with <see cref="T:System.DateTimeOffset" />, which differs from their behavior when used with <see cref="T:System.DateTime" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Existing format specifier</para>
                </term>
                <description>
                  <para>New behavior</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>"K"</para>
              </term>
              <description>
                <para>Designed to round-trip a date and time. With <see cref="T:System.DateTimeOffset" />, maps to "zzz" (the offset is always displayed with hours and minutes). Note that "K" is a custom format specifier; it cannot appear as the single character in <paramref name="format" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"U"</para>
              </term>
              <description>
                <para>Not supported.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"r" </para>
              </term>
              <description>
                <para>Converts the <see cref="T:System.DateTimeOffset" /> object to Coordinated Universal Time (UTC) and outputs it using the custom format string ddd, dd MMM yyyy HH:mm:ss GMT.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"u"</para>
              </term>
              <description>
                <para>Converts the <see cref="T:System.DateTimeOffset" /> value to UTC and outputs it using the format yyyy-MM-dd HH:mm:ssZ.</para>
              </description>
            </item>
          </list>
          <para>The remaining standard date and time format specifiers behave the same with the <see cref="M:System.DateTimeOffset.ToString(System.String)" /> method as they do with the <see cref="M:System.DateTime.ToString" /> method.</para>
          <para>The pattern that corresponds to standard format specifiers, as well as the symbols and names of date and time components, is defined by the <paramref name="formatProvider" /> parameter. The <paramref name="formatProvider" /> parameter can be either of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose formatting is used in <paramref name="input" />. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the formatting used in <paramref name="input" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
          </list>
          <para>If <paramref name="formatProvider" /> is null, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with the current culture is used (see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format string.</param>
        <param name="formatProvider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information.</param>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method returns a <see cref="T:System.DateTimeOffset" /> object whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to zero.</para>
          <para>Both the value of the current <see cref="T:System.DateTimeOffset" /> object and the value of the <see cref="T:System.DateTimeOffset" /> object returned by the method call represent the same point in time. That is, if both are passed to the <see cref="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" /> method, the method will return true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property performs a dual conversion:</para>
          <list type="bullet">
            <item>
              <para>It converts the date and time of the current <see cref="T:System.DateTimeOffset" /> object to Coordinated Universal Time (UTC). The conversion is performed by subtracting the value of the <see cref="P:System.DateTimeOffset.Offset" /> property from the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</para>
            </item>
            <item>
              <para>It converts the <see cref="T:System.DateTimeOffset" /> value to a <see cref="T:System.DateTime" /> value.</para>
            </item>
          </list>
          <para>The <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="P:System.DateTimeOffset.DateTime" /> value is set to <see cref="F:System.DateTimeKind.Utc" />. </para>
          <para>Retrieving the value of the <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is equivalent to calling the current <see cref="T:System.DateTimeOffset" /> object's ToUniversalTime.DateTime property, except that the <see cref="P:System.DateTime.Kind" /> property of the latter <see cref="T:System.DateTime" /> value is <see cref="F:System.DateTimeKind.Unspecified" />. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.UtcNow" /> property computes the current Universal Coordinated Time (UTC) based on the local system's clock time and an offset defined by the local system's time zone. </para>
          <para>The precision of the current UTC time's millisecond component depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's resolution is approximately 10-15 milliseconds.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the <see cref="P:System.DateTimeOffset.UtcTicks" /> property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001 (the value of <see cref="F:System.DateTimeOffset.MinValue" />). It does not include ticks that would be added by leap seconds. A nanosecond is one billionth of a second; there are ten million ticks in a second. The value of the <see cref="P:System.DateTimeOffset.UtcTicks" /> property ranges from DateTimeOffset.MinValue.Ticks to DateTimeOffset.MaxValue.Ticks. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTimeOffset.Year" /> property is not affected by the value of the <see cref="P:System.DateTimeOffset.Offset" /> property.</para>
          <para>You can also create a string representation of a <see cref="T:System.DateTimeOffset" /> object's year component by calling the <see cref="Overload:System.DateTimeOffset.ToString" /> method with the "y", "yy", or "yyyy" custom format specifiers.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>