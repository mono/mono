<?xml version="1.0" encoding="utf-8"?>
<Type Name="Decimal" FullName="System.Decimal" FullNameSP="System_Decimal" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sequential sealed serializable Decimal extends System.ValueType implements System.IComparable, System.IFormattable" />
  <TypeSignature Language="C#" Value="public struct Decimal : IComparable, IComparable&lt;decimal&gt;, IConvertible, IEquatable&lt;decimal&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Decimal extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Decimal&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.Decimal&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback" />
  <MemberOfLibrary>ExtendedNumerics</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Decimal&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Decimal&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Decimal" /> value type represents decimal numbers ranging from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335. The <see cref="T:System.Decimal" /> value type is appropriate for financial calculations that require large numbers of significant integral and fractional digits and no round-off errors. The <see cref="T:System.Decimal" /> type does not eliminate the need for rounding. Rather, it minimizes errors due to rounding. For example, the following code produces a result of 0.9999999999999999999999999999 instead of 1.</para>
      <para>code reference: System.Decimal.Class#1</para>
      <para>When the result of the division and multiplication is passed to the <see cref="M:System.Math.Round(System.Decimal,System.Int32)" /> method, the result suffers no loss of precision, as the following code shows.</para>
      <para>code reference: System.Decimal.Class#2</para>
      <para>A decimal number is a floating-point value that consists of a sign, a numeric value where each digit in the value ranges from 0 to 9, and a scaling factor that indicates the position of a floating decimal point that separates the integral and fractional parts of the numeric value. </para>
      <para>The binary representation of a <see cref="T:System.Decimal" /> value consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the 96-bit integer and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28. Therefore, the binary representation of a <see cref="T:System.Decimal" /> value  the form, ((-2<superscript>96</superscript> to 2<superscript>96</superscript>) / 10<superscript>(0 to 28)</superscript>), where -(2<superscript>96</superscript>-1) is equal to <see cref="F:System.Decimal.MinValue" />, and 2<superscript>96</superscript>-1 is equal to <see cref="F:System.Decimal.MaxValue" />. For more information about the binary representation of <see cref="T:System.Decimal" /> values and an example, see the <see cref="M:System.Decimal.#ctor(System.Int32[])" /> constructor and the <see cref="M:System.Decimal.GetBits(System.Decimal)" /> method. </para>
      <para>The scaling factor  also preserves any trailing zeros in a <see cref="T:System.Decimal" /> number. Trailing zeros do not affect the value of a <see cref="T:System.Decimal" /> number in arithmetic or comparison operations. However, trailing zeros might be revealed by the <see cref="Overload:System.Decimal.ToString" /> method if an appropriate format string is applied.</para>
      <format type="text/html">
        <h2>Conversion Considerations</h2>
      </format>
      <para>This type provides methods that convert <see cref="T:System.Decimal" /> values to and from <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, and <see cref="T:System.UInt64" /> values. Conversions from these integral types to <see cref="T:System.Decimal" /> are widening conversions that never lose information or throw exceptions. </para>
      <para>Conversions from <see cref="T:System.Decimal" /> to any of the integral types are narrowing conversions that round the <see cref="T:System.Decimal" /> value to the nearest integer value toward zero. Some languages, such as C#, also support the conversion of <see cref="T:System.Decimal" /> values to <see cref="T:System.Char" /> values. If the result of these conversions cannot be represented in the destination type, an <see cref="T:System.OverflowException" /> exception is thrown.</para>
      <para>The <see cref="T:System.Decimal" /> type also provides methods that convert <see cref="T:System.Decimal" /> values to and from <see cref="T:System.Single" /> and <see cref="T:System.Double" /> values. Conversions from <see cref="T:System.Decimal" /> to <see cref="T:System.Single" /> or <see cref="T:System.Double" /> are narrowing conversions that might lose precision but not information about the magnitude of the converted value. The conversion does not throw an exception.</para>
      <para>Conversions from <see cref="T:System.Single" /> or <see cref="T:System.Double" /> to <see cref="T:System.Decimal" /> throw an <see cref="T:System.OverflowException" /> exception if the result of the conversion cannot be represented as a <see cref="T:System.Decimal" />.</para>
      <format type="text/html">
        <h2>Performing Operations on Decimal Values</h2>
      </format>
      <para>The <see cref="T:System.Decimal" /> type supports standard mathematical operations such as addition, subtraction, division, multiplication, and unary negation. You can also work directly with the binary representation of a <see cref="T:System.Decimal" /> value by calling the <see cref="M:System.Decimal.GetBits(System.Decimal)" /> method.  </para>
      <para>To compare two <see cref="T:System.Decimal" /> values, you can use the standard numeric comparison operators, or you can call the <see cref="M:System.Decimal.CompareTo(System.Decimal)" /> or <see cref="M:System.Decimal.Equals(System.Decimal)" /> method. </para>
      <para>You can also call the members of the <see cref="T:System.Math" /> class to perform a wide range of numeric operations, including getting the absolute value of a number, determining the maximum or minimum value of two <see cref="T:System.Decimal" /> values, getting the sign of a number, and rounding a number. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a decimal number.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(float64 value)" />
      <MemberSignature Language="C#" Value="public Decimal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">
          <para>
            <paramref name="value" /> is one of the following:</para>
          <para>greater than <see cref="F:System.Decimal.MaxValue" /></para>
          <para>less than <see cref="F:System.Decimal.MinValue" /></para>
          <para>equal to <see cref="F:System.Double.NaN" />, but the Decimal representation does not support NaNs.</para>
          <para>equal to <see cref="F:System.Double.PositiveInfinity" />, but the Decimal representation does not support infinities.</para>
          <para>equal to <see cref="F:System.Double.NegativeInfinity" />, but the Decimal representation does not support infinities.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor rounds <paramref name="value" /> to 15 significant digits using rounding to nearest. This is done even if the number has more than 15 digits and the less significant digits are zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified double-precision floating-point number.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to represent as a <see cref="T:System.Decimal" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int32 value)" />
      <MemberSignature Language="C#" Value="public Decimal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This constructor initializes the new <see cref="T:System.Decimal" /> to the value
   specified by <paramref name="value" />. The scale of the new <see cref="T:System.Decimal" /> is 0.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit signed integer.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to represent as a <see cref="T:System.Decimal" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(class System.Int32[] bits)" />
      <MemberSignature Language="C#" Value="public Decimal (int[] bits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32[] bits) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="bits" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bits" /> is a null reference. </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="bits" /> does not contain four elements. </para>
        </exception>
        <example>
          <para>The following example demonstrates using the <see cref="T:System.Decimal" /> (Int32 [])
   constructor.</para>
          <code lang="C#">using System;
class ConstructDecimal {
 public static void Main() {
 int negativeBitValue = unchecked ((int)0x80000000);
 int [] parts0 = {0,0,0,0}; //Positive Zero.
 int [] parts1 = {1,0,0,0};
 int [] parts2 = {0,1,0,0};
 int [] parts3 = {0,0,1,0};
 int [] parts4 = {0,0,0,negativeBitValue}; // Negative zero.
 int [] parts5 = {1,1,1,0};
 int [] partsMaxValue = {-1,-1,-1,0};
 int [] partsMinValue = {-1,-1,-1,negativeBitValue};

 decimal d = new Decimal(parts0);
 Console.WriteLine("{{0,0,0,0}} = {0}",d);
 d = new Decimal(parts1);
 Console.WriteLine("{{1,0,0,0}} = {0}",d);
 d = new Decimal(parts2);
 Console.WriteLine("{{0,1,0,0}} = {0}",d);
 d = new Decimal(parts3);
 Console.WriteLine("{{0,0,1,0}} = {0}",d);
 d = new Decimal(parts4);
 Console.WriteLine("{{0,0,0,{0}}} = {1}",parts4[3],d);
 d = new Decimal(parts5);
 Console.WriteLine("{{1,1,1,0}} = {0}",d);
 d = new Decimal(partsMaxValue );
 Console.WriteLine("{{-1,-1,-1,0}} = {0}",d);
 d = new Decimal(partsMinValue);
 Console.WriteLine("{{-1,-1,-1,{0}}} = {1}",partsMinValue [3],d);
 }
}
</code>
          <para>The output is</para>
          <c>
            <para>{0,0,0,0} = 0</para>
            <para>{1,0,0,0} = 1</para>
            <para>{0,1,0,0} = 4294967296</para>
            <para>{0,0,1,0} = 18446744073709551616</para>
            <para>{0,0,0,-2147483648} = 0</para>
            <para>{1,1,1,0} = 18446744078004518913</para>
            <para>{-1,-1,-1,0} = 79228162514264337593543950335</para>
            <para>{-1,-1,-1,-2147483648} = -79228162514264337593543950335</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The binary representation of a <see cref="T:System.Decimal" /> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</para>
          <para>
                        <paramref name="bits" /> is a four-element long array of 32-bit signed integers.</para>
          <para>
                            <paramref name="bits" /> [0], <paramref name="bits" /> [1], and <paramref name="bits" /> [2] contain the low, middle, and high 32 bits of the 96-bit integer number.</para>
          <para>
                                <paramref name="bits" /> [3] contains the scale factor and sign, and consists of following parts: </para>
          <para>Bits 0 to 15, the lower word, are unused and must be zero.</para>
          <para>Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.</para>
          <para>Bits 24 to 30 are unused and must be zero.</para>
          <para>Bit 31 contains the sign; 0 meaning positive, and 1 meaning negative.</para>
          <para>A numeric value might have several possible binary representations; all are equally valid and numerically equivalent. Note that the bit representation differentiates between negative and positive zero. These values are treated as being equal in all operations.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.</para>
        </summary>
        <param name="bits">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of 32-bit signed integers containing a representation of a decimal value. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int64 value)" />
      <MemberSignature Language="C#" Value="public Decimal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This constructor initializes the new <see cref="T:System.Decimal" /> to the value
   specified by <paramref name="value" />. The scale of the new <see cref="T:System.Decimal" /> is 0.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit signed integer.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to represent as a <see cref="T:System.Decimal" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(float32 value)" />
      <MemberSignature Language="C#" Value="public Decimal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">
          <para>
            <paramref name="value" /> is one of the following:</para>
          <para>greater than <see cref="F:System.Decimal.MaxValue" /></para>
          <para>less than <see cref="F:System.Decimal.MinValue" /></para>
          <para>equal to <see cref="F:System.Single.NaN" />, but the Decimal representation does not support NaNs.</para>
          <para>equal to <see cref="F:System.Single.PositiveInfinity" />, but the Decimal representation does not support infinities.</para>
          <para>equal to <see cref="F:System.Single.NegativeInfinity" />, but the Decimal representation does not support infinities.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor rounds <paramref name="value" /> to 7 significant digits using rounding to nearest. This is done even if the number has more than 7 digits and the less significant digits are zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified single-precision floating-point number.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to represent as a <see cref="T:System.Decimal" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public Decimal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use the 
   <see cref="T:System.Decimal" />(<see cref="T:System.Int64" />) constructor.</para>
          <para>This constructor initializes the new <see cref="T:System.Decimal" /> to the value
   specified by <paramref name="value" />. The scale of the new <see cref="T:System.Decimal" /> is 0.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit unsigned integer.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to represent as a <see cref="T:System.Decimal" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public Decimal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue />
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This constructor initializes the new <see cref="T:System.Decimal" /> to the value
   specified by <paramref name="value" />. The scale of the new <see cref="T:System.Decimal" /> is 0.</para>
          <para>This member is not CLS-compliant. For a CLS-compliant alternative, use the 
<see cref="T:System.Decimal" />(<see cref="T:System.Int64" />) constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit unsigned integer.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to represent as a <see cref="T:System.Decimal" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Decimal (int lo, int mid, int hi, bool isNegative, byte scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 lo, int32 mid, int32 hi, bool isNegative, unsigned int8 scale) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="lo" Type="System.Int32" />
        <Parameter Name="mid" Type="System.Int32" />
        <Parameter Name="hi" Type="System.Int32" />
        <Parameter Name="isNegative" Type="System.Boolean" />
        <Parameter Name="scale" Type="System.Byte" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The binary representation of a <see cref="T:System.Decimal" /> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10 raised to an exponent ranging from 0 to 28.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent parts.</para>
        </summary>
        <param name="lo">
          <attribution license="cc4" from="Microsoft" modified="false" />The low 32 bits of a 96-bit integer. </param>
        <param name="mid">
          <attribution license="cc4" from="Microsoft" modified="false" />The middle 32 bits of a 96-bit integer. </param>
        <param name="hi">
          <attribution license="cc4" from="Microsoft" modified="false" />The high 32 bits of a 96-bit integer. </param>
        <param name="isNegative">
          <attribution license="cc4" from="Microsoft" modified="false" />
                true to indicate a negative number; false to indicate a positive number. </param>
        <param name="scale">
          <attribution license="cc4" from="Microsoft" modified="false" />A power of 10 ranging from 0 to 28. </param>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Add(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal Add (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Add(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following code sample illustrates the use of Add : </para>
          <para>code reference: Decimal Example#5</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of <paramref name="d1" /> and <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to add. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to add. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <paramref name="d" /> is positive, the presence of any fractional component causes <paramref name="d" /> to be rounded to the next highest integer. If <paramref name="d" /> is negative, the rounding operation causes any fractional component of <paramref name="d" /> to be discarded. The operation of this method differs from the <see cref="M:System.Decimal.Floor(System.Decimal)" /> method, which supports rounding toward negative infinity. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smallest integral value that is greater than or equal to the specified decimal number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The smallest integral value that is greater than or equal to the <paramref name="d" /> parameter. Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number. </param>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Compare(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static int Compare (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of <paramref name="d1" /> and <paramref name="d2" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>
                        <paramref name="d1" /> is less than <paramref name="d2" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>
                            <paramref name="d1" /> and <paramref name="d2" /> are equal. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>
                                <paramref name="d1" /> is greater than <paramref name="d2" />. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IComparable`1" /> interface and performs slightly better than the <see cref="M:System.Decimal.CompareTo(System.Object)" /> method because it does not have to convert the <paramref name="value" /> parameter to an object.</para>
          <para>Depending on your programming language, it might be possible to code a <see cref="Overload:System.Decimal.CompareTo" /> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</para>
          <para>For example, suppose the instance type is <see cref="T:System.Int32" /> and the parameter type is <see cref="T:System.Byte" />. The Microsoft C# compiler generates instructions to represent the parameter as an <see cref="T:System.Int32" /> object, then generates a <see cref="M:System.Int32.CompareTo(System.Int32)" /> method to compare the values of the <see cref="T:System.Int32" /> instance and the <see cref="T:System.Int32" /> parameter representation.</para>
          <para>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified <see cref="T:System.Decimal" /> object and returns a comparison of their relative values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is less than <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is equal to <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is greater than <paramref name="value" />. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare with this instance.</param>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual int32 CompareTo(object value)" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.Decimal" /> and is not a null reference. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Any instance of <see cref="T:System.Decimal" />, regardless of its value, is considered greater than null.</para>
          <para>Parameter <paramref name="value" /> must be null or an instance of <see cref="T:System.Decimal" />; otherwise, an exception is thrown.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified object and returns a comparison of their relative values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is less than <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is equal to <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is greater than <paramref name="value" />.</para>
                <para>-or- </para>
                <para>
                        <paramref name="value" /> is null. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare with this instance, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Divide(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal Divide (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Divide(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="d2" /> is zero. </exception>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Divides two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of dividing <paramref name="d1" /> by <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The dividend. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The divisor. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IEquatable`1" /> interface, and performs slightly better than <see cref="M:System.Decimal.Equals(System.Object)" /> because it does not have to convert the <paramref name="value" /> parameter to an object.</para>
          <para>If <paramref name="value" /> has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</para>
          <para>For example, suppose the instance type is <see cref="T:System.Int32" /> and the parameter type is <see cref="T:System.Byte" />. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <see cref="T:System.Int32" /> object, then generates a <see cref="M:System.Int32.CompareTo(System.Int32)" /> method to compare the <see cref="T:System.Int32" /> instance and parameter representation.</para>
          <para>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance and a specified <see cref="T:System.Decimal" /> object represent the same value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="value" /> is equal to this instance; otherwise, false.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare to this instance.</param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool Equals(object value)" />
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="note"> This method
      overrides <see cref="M:System.Object.Equals(System.Object)" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance and a specified <see cref="T:System.Object" /> represent the same type and value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise, false.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare with this instance. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool Equals(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool Equals (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether two specified instances of <see cref="T:System.Decimal" /> represent the same value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Floor(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Decimal.Floor(System.Decimal)" /> method.</para>
          <code lang="C#">using System;
class DecimalTest {
 public static void Main() {
   Console.WriteLine("floor {0} is {1}", 3.14159m, Decimal.Floor(3.14159m));
   Console.WriteLine("floor {0} is {1}", -3.9m, Decimal.Floor(-3.9m));
   Console.WriteLine("floor {0} is {1}", 3.0m, Decimal.Floor(3.0m));
 }
}
</code>
          <para>The output is</para>
          <c>
            <para>floor 3.14159 is 3</para>
            <para>floor -3.9 is -4</para>
            <para>floor 3.0 is 3</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, Section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <paramref name="d" /> is positive, any fractional component is truncated. If <paramref name="d" /> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <see cref="M:System.Decimal.Ceiling(System.Decimal)" /> method, which supports rounding toward positive infinity. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="d" /> has a fractional part, the next whole <see cref="T:System.Decimal" /> number toward negative infinity that is less than <paramref name="d" />.</para>
          <para>-or- </para>
          <para>If <paramref name="d" /> doesn't have a fractional part, <paramref name="d" /> is returned unchanged. Note that the method returns an integral value of type <see cref="T:System.Decimal" />. </para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to round. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="FromOACurrency">
      <MemberSignature Language="C#" Value="public static decimal FromOACurrency (long cy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal FromOACurrency(int64 cy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cy" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <see cref="T:System.Decimal" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Decimal" /> that contains the equivalent of <paramref name="cy" />.</para>
        </returns>
        <param name="cy">
          <attribution license="cc4" from="Microsoft" modified="false" />An OLE Automation Currency value. </param>
      </Docs>
    </Member>
    <Member MemberName="GetBits">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.Int32[] GetBits(decimal d)" />
      <MemberSignature Language="C#" Value="public static int[] GetBits (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] GetBits(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the different
      representations of 1.00 and 1.</para>
          <code lang="C#">using System;
public class Class1  {
    public static void Print (int [] bs) {
        foreach (int b in bs) {
            Console.Write (b+" ");
        }
    }
public static void Main () {
   decimal d = 1.00m;
    decimal d1 = 1;
    Console.Write (d);
    Console.Write (" - bits: "); 
    Print (decimal.GetBits(d));
    Console.WriteLine();
    Console.Write (d1);
    Console.Write (" - bits: "); 
    Print (decimal.GetBits(d1));
    Console.WriteLine();
    Console.WriteLine ("d1.CompareTo(d) == {0}", d1.CompareTo(d));
    Console.WriteLine ("d1 == d {0}", d1 == d);
}
}
   </code>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The binary representation of a <see cref="T:System.Decimal" /> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.</para>
          <para>The return value is a four-element array of 32-bit signed integers.</para>
          <para>The first, second, and third elements of the returned array contain the low, middle, and high 32 bits of the 96-bit integer number.</para>
          <para>The fourth element of the returned array contains the scale factor and sign. It consists of the following parts: </para>
          <para>Bits 0 to 15, the lower word, are unused and must be zero.</para>
          <para>Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.</para>
          <para>Bits 24 to 30 are unused and must be zero.</para>
          <para>Bit 31 contains the sign: 0 mean positive, and 1 means negative.</para>
          <para>Note that the bit representation differentiates between negative and positive zero. These values are treated as being equal in all operations.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer array with four elements that contain the binary representation of <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual int32 GetHashCode()" />
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>The algorithm used to
      generate the hash code value is unspecified.</para>
          <para>
            <block subset="none" type="note">This method
      overrides <see cref="M:System.Object.GetHashCode" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer hash code.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The enumerated constant <see cref="F:System.TypeCode.Decimal" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="ILASM" Value=".field public static initOnly decimal MaxValue" />
      <MemberSignature Language="C#" Value="public static readonly decimal MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Decimal MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>79228162514264337593543950335</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is positive 79,228,162,514,264,337,593,543,950,335.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="ILASM" Value=".field public static initOnly decimal MinusOne" />
      <MemberSignature Language="C#" Value="public static readonly decimal MinusOne;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Decimal MinusOne" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>-1</MemberValue>
      <Docs>
        <remarks>
          <para>The value of this constant is -1. The scale shall be 0.</para>
          <para>This field is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the number negative one (-1).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="ILASM" Value=".field public static initOnly decimal MinValue" />
      <MemberSignature Language="C#" Value="public static readonly decimal MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Decimal MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>-79228162514264337593543950335</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is negative 79,228,162,514,264,337,593,543,950,335.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Multiply(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal Multiply (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Multiply(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Multiplies two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of multiplying <paramref name="d1" /> and <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The multiplicand. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The multiplier. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Negate(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal Negate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Negate(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by negative one.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A decimal number with the value of <paramref name="d" />, but the opposite sign.</para>
          <para>-or- </para>
          <para>Zero, if <paramref name="d" /> is zero.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to negate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="ILASM" Value=".field public static initOnly decimal One" />
      <MemberSignature Language="C#" Value="public static readonly decimal One;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Decimal One" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>1</MemberValue>
      <Docs>
        <remarks>
          <para>The value of this constant is 1. The scale shall be 0.</para>
          <para>This field is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the number one (1).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Addition(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal op_Addition (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Addition(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)" /> method defines the operation of the addition operator for <see cref="T:System.Decimal" /> values. It enables code such as the following:</para>
          <para>code reference: System.Decimal.Operators#3</para>
          <para>If the language you're using doesn't support custom operators, call the <see cref="M:System.Decimal.Add(System.Decimal,System.Decimal)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of adding <paramref name="d1" /> and <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to add. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to add. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Decrement(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal op_Decrement (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Decrement(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" /> .</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Decrement(System.Decimal)" /> method defines the operation of the decrement operator for <see cref="T:System.Decimal" /> values. It enables code such as the following:</para>
          <para>code reference: System.Decimal.Operators#4</para>
          <para>Some languages (such as Visual Basic) that lack an increment operator can call the <see cref="M:System.Decimal.op_Decrement(System.Decimal)" /> method directly, as the following example shows. </para>
          <para>code reference: System.Decimal.Operators#5</para>
          <para>If your language does not support custom operators, call the <see cref="M:System.Decimal.Subtract(System.Decimal,System.Decimal)" /> method instead, as the following example shows.</para>
          <para>code reference: System.Decimal.Operators#6</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Decrements the <see cref="T:System.Decimal" /> operand by one.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of <paramref name="d" /> decremented by 1.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to decrement. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Division(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal op_Division (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Division(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.DivideByZeroException">The divisor is zero. </exception>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Division(System.Decimal,System.Decimal)" /> method defines the operation of the division operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#7</para>
          <para>If the language you're using doesn't support custom operators, call the <see cref="M:System.Decimal.Divide(System.Decimal,System.Decimal)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Divides two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of dividing <paramref name="d1" /> by <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The dividend. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The divisor. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_Equality(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool op_Equality (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)" /> method defines the operation of the equality operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#1</para>
          <para>If the language you're using doesn't support custom operators, call the <see cref="M:System.Decimal.Equals(System.Decimal)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether two <see cref="T:System.Decimal" /> values are equal.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname unsigned int8 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static byte op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Byte" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Double" /> .</para>
        </summary>
        <returns>
          <para> A <see cref="T:System.Double" /> with the specified value. </para>
        </returns>
        <remarks>
          <para>
            <block subset="none" type="note"> This operation can
      produce round-off errors due to the fact that <see cref="T:System.Double" /> has fewer significant digits than, and has a different radix than,    <see cref="T:System.Decimal" />.</block>
          </para>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname valuetype System.Char op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static char op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname char op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Char" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Char" /> .</para>
        </summary>
        <returns>
          <para> A <see cref="T:System.Char" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Char.MaxValue" /> or less than <see cref="F:System.Char.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname float64 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static double op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Double" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Double" /> .</para>
        </summary>
        <returns>
          <para> A <see cref="T:System.Double" /> with the specified value. </para>
        </returns>
        <remarks>
          <para>
            <block subset="none" type="note"> This operation can
      produce round-off errors due to the fact that <see cref="T:System.Double" /> has fewer significant digits than
   <see cref="T:System.Decimal" />.</block>
          </para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname int16 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static short op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Int16" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Int16" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Int16" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname int32 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static int op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Int32" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Int32" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Int32" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname int64 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static long op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Int64" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Int64" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Int64" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname int8 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static sbyte op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.SByte" />.</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.SByte" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.SByte" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant 
      alternative to <see cref="T:System.SByte" />, use <see cref="T:System.Int16" /> .</para>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname float32 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static float op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.Single" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.Int16" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Int16" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant 
      alternative to <see cref="T:System.UInt16" />, use <see cref="T:System.Int32" /> .</para>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname unsigned int16 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static ushort op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.UInt16" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.UInt16" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.UInt16" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant 
      alternative to <see cref="T:System.UInt16" />, use <see cref="T:System.Int32" /> .</para>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname unsigned int32 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static uint op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.UInt32" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.UInt32" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.UInt32" /> containing <paramref name="value" /> rounded towards zero to the
   nearest integer. </para>
        </returns>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant 
      alternative to <see cref="T:System.UInt32" />, use <see cref="T:System.Int64" /> ). </para>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname unsigned int64 op_Explicit(decimal value)" />
      <MemberSignature Language="C#" Value="public static ulong op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Decimal" /> value to convert to <see cref="T:System.UInt64" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Decimal" /> value to <see cref="T:System.UInt64" /> .</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.UInt64" /> containing
<paramref name="value" /> rounded towards zero to the nearest
   integer. </para>
        </returns>
        <remarks>
          <para>This member is not CLS-compliant. For a CLS-compliant
      alternative to <see cref="T:System.UInt64" />, use <see cref="T:System.Int64" /> .</para>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting integer value is greater than <see cref="F:System.UInt64.MaxValue" /> or less than <see cref="F:System.UInt64.MinValue" />.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Explicit(float64 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Explicit (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Double" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Double" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">
          <para>
            <paramref name="value" /> is one of the following:</para>
          <para>greater than <see cref="F:System.Decimal.MaxValue" /></para>
          <para>less than <see cref="F:System.Decimal.MinValue" /></para>
          <para>equal to <see cref="F:System.Double.NaN" />, but the Decimal representation does not support NaNs.</para>
          <para>equal to <see cref="F:System.Double.PositiveInfinity" />, but the Decimal representation does not support infinities.</para>
          <para>equal to <see cref="F:System.Double.NegativeInfinity" />, but the Decimal representation does not support infinities.</para>
        </exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Explicit(float32 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Explicit (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Single" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an explicit conversion of a <see cref="T:System.Single" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">
          <para>
            <paramref name="value" /> is one of the following:</para>
          <para>greater than <see cref="F:System.Decimal.MaxValue" /></para>
          <para>less than <see cref="F:System.Decimal.MinValue" /></para>
          <para>equal to <see cref="F:System.Single.NaN" />, but the Decimal representation does not support NaNs.</para>
          <para>equal to <see cref="F:System.Single.PositiveInfinity" />, but the Decimal representation does not support infinities.</para>
          <para>equal to <see cref="F:System.Single.NegativeInfinity" />, but the Decimal representation does not support infinities.</para>
        </exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_GreaterThan(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)" /> method defines the operation of the greater than operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#8</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.Decimal.Compare(System.Decimal,System.Decimal)" /> method instead. They may also be able to call the <see cref="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)" /> method directly, as the following example shows. </para>
          <para>code reference: System.Decimal.Operators#9</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than another specified <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
                    true if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_GreaterThanOrEqual(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)" /> method defines the operation of the greater than or equal operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#10</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.Decimal.Compare(System.Decimal,System.Decimal)" /> method instead. They may also be able to call the <see cref="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)" /> method directly, as the following example shows. </para>
          <para>code reference: System.Decimal.Operators#11</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than or equal to another specified <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
                    true if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(unsigned int8 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Byte" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.Byte" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(valuetype System.Char value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Char" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.Char" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(int16 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Int16" /> value to convert to <see cref="T:System.Decimal" />.</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.Int16" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(int32 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Int32" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.Int32" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(int64 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.Int64" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.Int64" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(int8 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.SByte" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.SByte" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>
          <para>
   This member is not CLS-compliant. </para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(unsigned int16 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.UInt16" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.UInt16" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>
          <para> This member is not CLS-compliant.</para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.UInt32" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.UInt32" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>
          <para>
   This member is not CLS-compliant. </para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Implicit(unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public static decimal op_Implicit (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Implicit(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The <see cref="T:System.UInt64" /> value to convert to <see cref="T:System.Decimal" /> .</param>
        <summary>
          <para>Perform an implicit conversion of a <see cref="T:System.UInt64" /> value to <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Decimal" />
with the
specified value.</para>
        </returns>
        <remarks>
          <para>This member is not CLS-compliant.</para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Increment(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal op_Increment (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Increment(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" /> .</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Increment(System.Decimal)" /> method defines the operation of the increment operator for <see cref="T:System.Decimal" /> values. It enables code such as the following:</para>
          <para>code reference: System.Decimal.Operators#12</para>
          <para>Some languages (such as Visual Basic) that lack an increment operator can call the <see cref="M:System.Decimal.op_Increment(System.Decimal)" /> method directly, as the following example shows. </para>
          <para>code reference: System.Decimal.Operators#13</para>
          <para>If your language does not support custom operators, call the <see cref="M:System.Decimal.Add(System.Decimal,System.Decimal)" /> method instead, as the following example shows.</para>
          <para>code reference: System.Decimal.Operators#14</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Increments the <see cref="T:System.Decimal" /> operand by 1.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of <paramref name="d" /> incremented by 1.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to increment. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_Inequality(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool op_Inequality (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)" /> method defines the operation of the inequality operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#2</para>
          <para>If the language you're using doesn't support custom operators, you can test for inequality by using one of the following techniques:</para>
          <list type="bullet">
            <item>
              <para>Calling the <see cref="M:System.Decimal.Compare(System.Decimal,System.Decimal)" /> method, which indicates the relationship between two <see cref="T:System.Decimal" /> values. </para>
            </item>
            <item>
              <para>Calling the <see cref="M:System.Decimal.Equals(System.Decimal)" /> method and reversing its value. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether two <see cref="T:System.Decimal" /> objects have different values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_LessThan(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool op_LessThan (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)" /> method defines the operation of the less than operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#15</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.Decimal.Compare(System.Decimal,System.Decimal)" /> method instead. They may also be able to call the <see cref="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)" /> method directly, as the following example shows. </para>
          <para>code reference: System.Decimal.Operators#16</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than another specified <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_LessThanOrEqual(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)" /> method defines the operation of the less than or equal operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#17</para>
          <para>Languages that do not support custom operators can call the <see cref="M:System.Decimal.Compare(System.Decimal,System.Decimal)" /> method instead. They may also be able to call the <see cref="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)" /> method directly, as the following example shows. </para>
          <para>code reference: System.Decimal.Operators#18</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or equal to another specified <see cref="T:System.Decimal" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            true if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Modulus(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal op_Modulus (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Modulus(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="d2" /> is zero. </exception>
        <exception cref="T:System.OverflowException">
          <paramref name="d1" /> divided by <paramref name="d2" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)" /> method defines the operation of the modulus operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#19</para>
          <para>If the language you're using doesn't support custom operators, call the <see cref="M:System.Decimal.Remainder(System.Decimal,System.Decimal)" />  method instead. </para>
          <para>The sign of the value return by the modulus operation depends on the sign of dividend. If dividend is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the remainder resulting from dividing two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The remainder resulting from dividing <paramref name="d1" /> by <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The dividend. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The divisor. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Multiply(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal op_Multiply (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Multiply(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)" /> method defines the operation of the multiplication operator for <see cref="T:System.Decimal" /> values. It enables code such as the following: </para>
          <para>code reference: System.Decimal.Operators#20</para>
          <para>If the language you're using doesn't support custom operators, call the <see cref="M:System.Decimal.Multiply(System.Decimal,System.Decimal)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Multiplies two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of multiplying <paramref name="d1" /> by <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to multiply. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to multiply. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_Subtraction(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal op_Subtraction (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Subtraction(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)" /> method defines the operation of the subtraction operator for <see cref="T:System.Decimal" /> values. It enables code such as the following:</para>
          <para>code reference: System.Decimal.Operators#21</para>
          <para>If the language you're using doesn't support custom operators, call the <see cref="M:System.Decimal.Subtract(System.Decimal,System.Decimal)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts two specified <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The minuend. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The subtrahend. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_UnaryNegation(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal op_UnaryNegation (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_UnaryNegation(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_UnaryPlus(System.Decimal)" /> method defines the operation of the unary negation operator (or the additive inverse operator) for <see cref="T:System.Decimal" /> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <see cref="M:System.Decimal.Negate(System.Decimal)" /> method instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of <paramref name="d" /> multiplied by negative one (-1).</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to negate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname decimal op_UnaryPlus(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal op_UnaryPlus (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_UnaryPlus(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.op_UnaryPlus(System.Decimal)" /> method defines the operation of the unary positive operator for <see cref="T:System.Decimal" /> values. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the value of the <see cref="T:System.Decimal" /> operand (the sign of the operand is unchanged).</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the operand, <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The operand to return.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Parse(string s)" />
      <MemberSignature Language="C#" Value="public static decimal Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s " />is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Decimal.Parse(System.String)" /> method.</para>
          <code lang="C#">using System;
using System.Globalization;
class DecimalParseClass {
  public static void Main() {
    string s1 = " -1.001  ";
    string s2 = "+1,000,111.99";     
    string s3 = "2.900";
    Console.WriteLine("String: {0} (decimal) {1}",s1,Decimal.Parse(s1));
    Console.WriteLine("String: {0} (decimal) {1}",s2,Decimal.Parse(s2));
    Console.WriteLine("String: {0} (decimal) {1}",s3,Decimal.Parse(s3));
  }
}
</code>
          <para>The output is</para>
          <c>
            <para>String: -1.001 (decimal) -1.001</para>
            <para>String: +1,000,111.99 (decimal) 1000111.99</para>
            <para>String: 2.900 (decimal) 2.900</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="s" /> contains a number of the form: </para>
          <para>[ws][sign][digits,]digits[.fractional-digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                                        ws
                                    </para>
              </term>
              <description>
                <para>Optional white space. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                        sign
                                    </para>
              </term>
              <description>
                <para>An optional sign. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                        digits
                                    </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                        ,
                                    </para>
              </term>
              <description>
                <para>A culture-specific thousands separator symbol.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                        .
                                    </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                        fractional-digits
                                    </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
          </list>
          <para>Parameter <paramref name="s" /> is interpreted using the <see cref="F:System.Globalization.NumberStyles.Number" /> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <paramref name="s" />, use either the <see cref="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)" /> or the <see cref="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> method.</para>
          <para>Parameter <paramref name="s" /> is parsed using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo" /> initialized for the current system culture. For more information, see <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />. To parse a string using the formatting information of some other culture, use the <see cref="M:System.Decimal.Parse(System.String,System.IFormatProvider)" /> or <see cref="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> method.</para>
          <para>If necessary, the value of <paramref name="s" /> is rounded using rounding to nearest.</para>
          <para>A <see cref="T:System.Decimal" /> has 29 digits of precision. If <paramref name="s" /> represents a number that has more than 29 digits, but has a fractional part and is within the range of <see cref="F:System.Decimal.MaxValue" /> and <see cref="F:System.Decimal.MinValue" />, the number is rounded, not truncated, to 29 digits using rounding to nearest.</para>
          <para>If during a parse operation a separator is encountered in the <paramref name="s" /> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The equivalent to the number contained in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string representation of the number to convert.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Parse(string s, valuetype System.Globalization.NumberStyles style)" />
      <MemberSignature Language="C#" Value="public static decimal Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <example>
          <para>The following example demonstrates supplying <see cref="T:System.Globalization.NumberStyles" /> values to the <see cref="M:System.Decimal.Parse(System.String)" />
method to allow for a symbol separating groups
of digits, and a decimal separator. This example uses the symbols from the U.S.
English culture, namely a comma and a decimal point.</para>
          <code lang="C#">using System;
using System.Globalization;
class DecimalParseClass {
public static void Main() {
 string s = "1,000,111.99"; 
 NumberStyles ns = NumberStyles.AllowThousands | NumberStyles.AllowDecimalPoint;
 decimal d = Decimal.Parse(s,ns);
 Console.WriteLine("{0} parsed to decimal {1}",s,d);
}
}
</code>
          <para>The output is</para>
          <c>
            <para>1,000,111.99 parsed to decimal 1000111.99</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="style" /> parameter defines the style elements (such as thousands separators, white space, and currency symbols) that are allowed in the <paramref name="s" /> parameter for the parse operation to succeed. It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles" /> enumeration. The following <see cref="T:System.Globalization.NumberStyles" /> members are not supported:</para>
          <list type="bullet">
            <item>
              <para>
                                                <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />
                                            </para>
            </item>
            <item>
              <para>
                                                <see cref="F:System.Globalization.NumberStyles.HexNumber" />
                                            </para>
            </item>
          </list>
          <para>Depending on the value of <paramref name="style" />, the <paramref name="s" /> parameter may include the following elements:</para>
          <para>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                                                    ws
                                                </para>
              </term>
              <description>
                <para>Optional white space. White space can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    $
                                                </para>
              </term>
              <description>
                <para>A culture-specific currency symbol. Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />  and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" /> properties of the current culture. The current culture's currency symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    sign
                                                </para>
              </term>
              <description>
                <para>An optional sign. The sign can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" /> flag. Parentheses can be used in <paramref name="s" /> to indicate a negative value if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    digits
                                                </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    ,
                                                </para>
              </term>
              <description>
                <para>A culture-specific thousands separator symbol. The current culture's thousands separator can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    .
                                                </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    fractional-digits
                                                </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. Fractional digits can appear in <paramref name="s" /> only if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    e
                                                </para>
              </term>
              <description>
                <para>The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
          </list>
          <para>A string with digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None" /> style) always parses successfully. The remaining <see cref="T:System.Globalization.NumberStyles" /> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <see cref="T:System.Globalization.NumberStyles" /> members affect the elements that may be present in <paramref name="s" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>NumberStyles value</para>
                </term>
                <description>
                  <para>Elements permitted in s in addition to digits</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.None" />
                                                </para>
              </term>
              <description>
                <para>The digits element only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />
                                                </para>
              </term>
              <description>
                <para>The . and fractional-digits elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowExponent" />
                                                </para>
              </term>
              <description>
                <para>The <paramref name="s" /> parameter can also use exponential notation. This flag supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />
                                                </para>
              </term>
              <description>
                <para>The ws element at the beginning of <paramref name="s" />.  </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />
                                                </para>
              </term>
              <description>
                <para>The ws element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />
                                                </para>
              </term>
              <description>
                <para>The sign element at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />
                                                </para>
              </term>
              <description>
                <para>The sign element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowParentheses" />
                                                </para>
              </term>
              <description>
                <para>The sign element in the form of parentheses enclosing the numeric value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowThousands" />
                                                </para>
              </term>
              <description>
                <para>The , element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" />
                                                </para>
              </term>
              <description>
                <para> The $ element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.Currency" />
                                                </para>
              </term>
              <description>
                <para>All. The <paramref name="s" /> parameter cannot represent a hexadecimal number or a number in exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.Float" />
                                                </para>
              </term>
              <description>
                <para>The ws element at the beginning or end of <paramref name="s" />, sign at the beginning of <paramref name="s" />, and the . symbol. The <paramref name="s" /> parameter can also use exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.Number" />
                                                </para>
              </term>
              <description>
                <para>The <paramref name="ws" />, <paramref name="sign" />, ,, and . elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                    <see cref="F:System.Globalization.NumberStyles.Any" />
                                                </para>
              </term>
              <description>
                <para>All styles, except <paramref name="s" /> cannot represent a hexadecimal number.</para>
              </description>
            </item>
          </list>
          <para>The <paramref name="s" /> parameter is parsed using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo" /> object initialized for the current system culture. For more information, see <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</para>
          <para>A <see cref="T:System.Decimal" /> has 29 digits of precision. If <paramref name="s" /> represents a number that has more than 29 digits, but has a fractional part and is within the range of <see cref="F:System.Decimal.MaxValue" /> and <see cref="F:System.Decimal.MinValue" />, the number is rounded, not truncated, to 29 digits using rounding to nearest.</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, <paramref name="styles" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> and <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> values, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified style to its <see cref="T:System.Decimal" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string representation of the number to convert. </param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Parse(string s, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static decimal Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <example>
          <para>The following example demonstrates supplying a <see cref="T:System.IFormatProvider" /> to the
<see cref="M:System.Decimal.Parse(System.String)" /> 
method to allow a decimal point, and commas separating groups of digits.</para>
          <code lang="C#">using System;
using System.Globalization;
class DecimalParseClass {
public static void Main() {
 string s = "1,000,111.99"; 
 //Get the default formatting symbols.
 NumberFormatInfo nfi = new NumberFormatInfo();
 // Default group separator is ','
 // Default decimal separator is '.'
 decimal d = Decimal.Parse(s,nfi);
 Console.WriteLine("{0} parsed to decimal {1}",s,d);
}
}
</code>
          <para>The output is</para>
          <para>
            <c>1,000,111.99
   parsed to decimal 1000111.99</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="M:System.Decimal.Parse(System.String,System.IFormatProvider)" /> method is commonly used to convert text that can be formatted in a variety of ways to a <see cref="T:System.Decimal" /> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</para>
          <para>The <paramref name="s" /> parameter contains a number of the form: </para>
          <para>[ws][sign][digits,]digits[.fractional-digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                                                                        ws
                                                                    </para>
              </term>
              <description>
                <para>Optional white space. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                        sign
                                                                    </para>
              </term>
              <description>
                <para>An optional sign. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                        digits
                                                                    </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                        ,
                                                                    </para>
              </term>
              <description>
                <para>A culture-specific thousands separator symbol.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                        .
                                                                    </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                        fractional-digits
                                                                    </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
          </list>
          <para>The <paramref name="s" /> parameter is interpreted using the <see cref="F:System.Globalization.NumberStyles.Number" /> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <paramref name="s" />, use the <see cref="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> method.</para>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation, such as a <see cref="T:System.Globalization.NumberFormatInfo" /> or <see cref="T:System.Globalization.CultureInfo" /> object. The <paramref name="provider" /> parameter supplies culture-specific information used in parsing. If <paramref name="provider" /> is null, the thread current culture is used.</para>
          <para>A <see cref="T:System.Decimal" /> object has 29 digits of precision. If <paramref name="s" /> represents a number that has more than 29 digits, but has a fractional part and is within the range of <see cref="F:System.Decimal.MaxValue" /> and <see cref="F:System.Decimal.MinValue" />, the number is rounded, not truncated, to 29 digits using rounding to nearest.</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="provider" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string representation of the number to convert. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> that supplies culture-specific parsing information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static decimal Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="s" /> is a null reference. </para>
        </exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <example>
          <para>The following example demonstrates supplying <see cref="T:System.Globalization.NumberStyles" /> values and a <see cref="T:System.IFormatProvider" /> to the
<see cref="M:System.Decimal.Parse(System.String)" /> 
method to allow colons separating
groups of digits, and a decimal point.</para>
          <code lang="C#">using System;
using System.Globalization;
class DecimalParseClass {
public static void Main() {
 string s = "1:000:111.99"; 
 NumberStyles ns = NumberStyles.AllowThousands | NumberStyles.AllowDecimalPoint;
 NumberFormatInfo nfi = new NumberFormatInfo();
 //Change the format info to separate digit groups using a colon.
 nfi.NumberGroupSeparator = ":";
 decimal d = Decimal.Parse(s,ns,nfi);
 Console.WriteLine("{0} parsed to decimal {1}",s,d);
}
}
</code>
          <para>The output is</para>
          <c>
            <para>1:000:111.99 parsed to decimal 1000111.99</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="style" /> parameter defines the allowable format of the <paramref name="s" /> parameter for the parse operation to succeed. It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles" /> enumeration. The following <see cref="T:System.Globalization.NumberStyles" /> members are not supported:</para>
          <list type="bullet">
            <item>
              <para>
                                                                <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />
                                                            </para>
            </item>
            <item>
              <para>
                                                                <see cref="F:System.Globalization.NumberStyles.HexNumber" />
                                                            </para>
            </item>
          </list>
          <para>Depending on the value of <paramref name="style" />, the <paramref name="s" /> parameter may include the following elements:</para>
          <para> [ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                                                                    $
                                                                </para>
              </term>
              <description>
                <para>A culture-specific currency symbol. Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />  and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" /> properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> object returned by the <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method of the <paramref name="provider" /> parameter. The currency symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    ws
                                                                </para>
              </term>
              <description>
                <para>Optional white space. White space can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    sign
                                                                </para>
              </term>
              <description>
                <para>An optional sign. The sign can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" /> flag. Parentheses can be used in <paramref name="s" /> to indicate a negative value if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses" /> flag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    digits
                                                                </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    ,
                                                                </para>
              </term>
              <description>
                <para>A culture-specific thousands separator symbol. The thousands separator of the culture defined by <paramref name="provider" /> can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    .
                                                                </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. The decimal point symbol of the culture defined by <paramref name="provider" /> can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    fractional-digits
                                                                </para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. Fractional digits can appear in <paramref name="s" /> only if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    e
                                                                </para>
              </term>
              <description>
                <para>The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
          </list>
          <para>A string with digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None" /> style) always parses successfully. The remaining <see cref="T:System.Globalization.NumberStyles" /> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <see cref="T:System.Globalization.NumberStyles" /> members affect the elements that may be present in <paramref name="s" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>NumberStyles value</para>
                </term>
                <description>
                  <para>Elements permitted in s in addition to digits</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.None" />
                                                                </para>
              </term>
              <description>
                <para>The digits element only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />
                                                                </para>
              </term>
              <description>
                <para>The . and fractional-digits elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowExponent" />
                                                                </para>
              </term>
              <description>
                <para>The <paramref name="s" /> parameter can also use exponential notation.  This flag supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />
                                                                </para>
              </term>
              <description>
                <para>The ws element at the beginning of <paramref name="s" />.  </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />
                                                                </para>
              </term>
              <description>
                <para>The ws element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />
                                                                </para>
              </term>
              <description>
                <para>The sign element at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />
                                                                </para>
              </term>
              <description>
                <para>The sign element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowParentheses" />
                                                                </para>
              </term>
              <description>
                <para>The sign element in the form of parentheses enclosing the numeric value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowThousands" />
                                                                </para>
              </term>
              <description>
                <para>The , element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" />
                                                                </para>
              </term>
              <description>
                <para> The $ element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.Currency" />
                                                                </para>
              </term>
              <description>
                <para>All. The <paramref name="s" /> parameter cannot represent a hexadecimal number or a number in exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.Float" />
                                                                </para>
              </term>
              <description>
                <para>The ws element at the beginning or end of <paramref name="s" />, sign at the beginning of <paramref name="s" />, and the .
                                                                
                                                                symbol. The <paramref name="s" /> parameter can also use exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.Number" />
                                                                </para>
              </term>
              <description>
                <para>The <paramref name="ws" />, <paramref name="sign" />, ,, and . elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                                                                    <see cref="F:System.Globalization.NumberStyles.Any" />
                                                                </para>
              </term>
              <description>
                <para>All styles, except <paramref name="s" /> cannot represent a hexadecimal number.</para>
              </description>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation, such as a <see cref="T:System.Globalization.NumberFormatInfo" /> or <see cref="T:System.Globalization.CultureInfo" /> object. The <paramref name="provider" /> parameter supplies culture-specific information used in parsing. If <paramref name="provider" /> is null, the thread current culture is used.</para>
          <para>A <see cref="T:System.Decimal" /> object has 29 digits of precision. If <paramref name="s" /> represents a number that has more than 29 digits, but has a fractional part and is within the range of <see cref="F:System.Decimal.MaxValue" /> and <see cref="F:System.Decimal.MinValue" />, the number is rounded, not truncated, to 29 digits using rounding to nearest.</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string representation of the number to convert. </param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Remainder(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal Remainder (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Remainder(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="d2" /> is zero.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="d1" /> divided by <paramref name="d2" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The divisor. </param>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The remainder after dividing <paramref name="d1" /> by <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The dividend. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The divisor. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called <newTerm>rounding to nearest</newTerm> or <newTerm>banker's rounding</newTerm>. It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction. It is equivalent to calling the <see cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" /> method with a <paramref name="mode" /> argument of <see cref="F:System.MidpointRounding.ToEven" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to the nearest integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer that is nearest to the <paramref name="d" /> parameter. If <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to round. </param>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Round(decimal d, int32 decimals)" />
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="decimals" /> is not between 0 and 28, inclusive. </exception>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Decimal.Round(System.Decimal,System.Int32)" /> method.</para>
          <code lang="C#">using System;
class MyClass {
public static void Main() {
 decimal d1 = 2.5m;
 decimal d2 = 3.5m;
 decimal d3 = 2.98765432m;
 decimal d4 = 2.18765432m;
 Console.WriteLine("Rounding to 0 places...");
 Console.WriteLine("round {0} = {1}",d1, Decimal.Round(d1,0));
 Console.WriteLine("round {0} = {1}",d2, Decimal.Round(d2,0));
 Console.WriteLine("round {0} = {1}",d3, Decimal.Round(d3,0));
 Console.WriteLine("round {0} = {1}",d4, Decimal.Round(d4,0));
 Console.WriteLine("Rounding to 2 places...");
 Console.WriteLine("round {0} = {1}",d1, Decimal.Round(d1,2));
 Console.WriteLine("round {0} = {1}",d2, Decimal.Round(d2,2));
 Console.WriteLine("round {0} = {1}",d3, Decimal.Round(d3,2));
 Console.WriteLine("round {0} = {1}",d4, Decimal.Round(d4,2));
}
}
</code>
          <para>The output is</para>
          <c>
            <para>Rounding to 0 places...</para>
            <para>round 2.5 = 2</para>
            <para>round 3.5 = 4</para>
            <para>round 2.98765432 = 3</para>
            <para>round 2.18765432 = 2</para>
            <para>Rounding to 2 places...</para>
            <para>round 2.5 = 2.5</para>
            <para>round 3.5 = 3.5</para>
            <para>round 2.98765432 = 2.99</para>
            <para>round 2.18765432 = 2.19</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is equivalent to calling the <see cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" /> method with a <paramref name="mode" /> argument of <see cref="F:System.MidpointRounding.ToEven" />.When <paramref name="d" /> is exactly halfway between two rounded values, the result is the rounded value that has an even digit in the far right decimal position. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36. This process is known as <newTerm>rounding toward even</newTerm>, or <newTerm>rounding to nearest</newTerm>. It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a <see cref="T:System.Decimal" /> value to a specified number of decimal places.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The decimal number equivalent to <paramref name="d" /> rounded to <paramref name="decimals" /> number of decimal places.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to round. </param>
        <param name="decimals">
          <attribution license="cc4" from="Microsoft" modified="false" />A value from 0 to 28 that specifies the number of decimal places to round to. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest or banker's rounding. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer that is nearest to the <paramref name="d" /> parameter. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, the <paramref name="mode" /> parameter determines which of the two numbers is returned. </para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to round. </param>
        <param name="mode">
          <attribution license="cc4" from="Microsoft" modified="false" />A value that specifies how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="decimals" /> parameter specifies the number of significant decimal places in the return value and ranges from 0 to 28. If <paramref name="decimals" /> is zero, an integer is returned.</para>
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest or banker's rounding. If <paramref name="decimals" /> is zero, this kind of rounding is sometimes called rounding toward zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number that is nearest to the <paramref name="d" /> parameter with a precision equal to the <paramref name="decimals" /> parameter. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, the <paramref name="mode" /> parameter determines which of the two numbers is returned. If the precision of <paramref name="d" /> is less than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to round. </param>
        <param name="decimals">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of significant decimal places (precision) in the return value. </param>
        <param name="mode">
          <attribution license="cc4" from="Microsoft" modified="false" />A value that specifies how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Subtract(decimal d1, decimal d2)" />
      <MemberSignature Language="C#" Value="public static decimal Subtract (decimal d1, decimal d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Subtract(valuetype System.Decimal d1, valuetype System.Decimal d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Decimal" />
        <Parameter Name="d2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">The result is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts one specified <see cref="T:System.Decimal" /> value from another.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The minuend. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The subtrahend. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToBoolean(System.Decimal)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
                                            true if the value of the current instance is not zero; otherwise, false.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored. </param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToByte(System.Decimal)" /> method or the <see cref="M:System.Convert.ToByte(System.Decimal)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Byte" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>None. This conversion is not supported. </para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>None. This conversion is not supported. </para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, unchanged.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToDouble(System.Decimal)" /> method or the <see cref="M:System.Convert.ToDouble(System.Decimal)" /> method.</para>
          <para>Because a <see cref="T:System.Double" /> has fewer significant digits than a <see cref="T:System.Decimal" />, this operation may produce round-off errors.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Double" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToInt16(System.Decimal)" /> method or the <see cref="M:System.Convert.ToInt16(System.Decimal)" /> method.</para>
          <para>The <see cref="T:System.Decimal" /> value is rounded toward zero to the nearest integer value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Int16" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToInt32(System.Decimal)" /> method or the <see cref="M:System.Convert.ToInt32(System.Decimal)" /> method.</para>
          <para>The <see cref="T:System.Decimal" /> value is rounded toward zero to the nearest integer value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Int32" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />The parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToInt64(System.Decimal)" /> method or the <see cref="M:System.Convert.ToInt64(System.Decimal)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Int64" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToSByte(System.Decimal)" /> method or the <see cref="M:System.Convert.ToSByte(System.Decimal)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.SByte" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToSingle(System.Decimal)" /> method or the <see cref="M:System.Convert.ToSingle(System.Decimal)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Single" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type targetType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type targetType, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="targetType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the static (Shared in Visual Basic) <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <paramref name="type" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToUInt16(System.Decimal)" /> method or the <see cref="M:System.Convert.ToUInt16(System.Decimal)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToUInt32(System.Decimal)" /> method or the <see cref="M:System.Convert.ToUInt32(System.Decimal)" /> method.</para>
          <para>The <see cref="T:System.Decimal" /> value is rounded toward zero to the nearest integer value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Decimal" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call either the <see cref="M:System.Decimal.ToUInt64(System.Decimal)" /> method or the <see cref="M:System.Convert.ToUInt64(System.Decimal)" /> method.</para>
          <para>The <see cref="T:System.Decimal" /> value is rounded toward zero to the nearest integer value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Runs when the deserialization of an object has been completed.</para>
        </summary>
        <param name="sender">
          <attribution license="cc4" from="Microsoft" modified="false" />The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="value" /> is rounded to the nearest integer value toward zero, and that result is returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit unsigned integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An 8-bit unsigned integer equivalent to <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This operation can produce round-off errors because a double-precision floating-point number has fewer significant digits than a <see cref="T:System.Decimal" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number equivalent to <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit signed integer equivalent to <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is the integral part of the decimal value; fractional digits are truncated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is the integral part of the decimal value; fractional digits are truncated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToOACurrency">
      <MemberSignature Language="C#" Value="public static long ToOACurrency (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToOACurrency(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified <see cref="T:System.Decimal" /> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 64-bit signed integer that contains the OLE Automation equivalent of <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An 8-bit signed integer equivalent to <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This operation can produce round-off errors because a single-precision floating-point number has fewer significant digits than a <see cref="T:System.Decimal" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent single-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A single-precision floating-point number equivalent to the value of <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ToString()" />
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.ToString" /> method formats a <see cref="T:System.Decimal" /> value in the default ("G", or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <see cref="M:System.Decimal.ToString(System.String)" /> method, as follows: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                            <see cref="M:System.Decimal.ToString(System.IFormatProvider)" />
                        </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                            <see cref="M:System.Decimal.ToString(System.String)" />
                        </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                            <see cref="M:System.Decimal.ToString(System.String,System.IFormatProvider)" />
                        </para>
              </description>
            </item>
          </list>
          <para>
            </para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that represents the value of this instance.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.ToString(System.IFormatProvider)" /> method formats a <see cref="T:System.Decimal" /> value in the default ("G", or general) format of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <see cref="M:System.Decimal.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                            <see cref="M:System.Decimal.ToString" />
                        </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                            <see cref="M:System.Decimal.ToString(System.String)" />
                        </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                            <see cref="M:System.Decimal.ToString(System.String,System.IFormatProvider)" />
                        </para>
              </description>
            </item>
          </list>
          <para>
            </para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object. Typically, <paramref name="provider" /> is a <see cref="T:System.Globalization.NumberFormatInfo" /> object or a <see cref="T:System.Globalization.CultureInfo" /> object. The <paramref name="provider" /> parameter supplies culture-specific information used in formatting. If <paramref name="provider" /> is null, the thread current culture is used.</para>
          <para>To convert a <see cref="T:System.Decimal" /> value to its string representation using a specified culture and a specific format string, call the <see cref="M:System.Decimal.ToString(System.String,System.IFormatProvider)" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="provider" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToString(string format)" />
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <para>The following example shows the effects of various
      formats on the string returned by <see cref="M:System.Decimal.ToString" />.</para>
          <code lang="C#">using System;
class test {
 public static void Main() {
 decimal d = 1234.56789m;
 Console.WriteLine(d);
 string[] fmts = {"C","E","F","G","N","P"};
 for (int i=0;i&lt;fmts.Length;i++)
 Console.WriteLine("{0}: {1}", 
 fmts[i],d.ToString(fmts[i]));
 }
}
   </code>
          <para>The output is</para>
          <c>
            <para>1234.56789</para>
            <para>C: $1,234.57</para>
            <para>E: 1.234568E+003</para>
            <para>F: 1234.57</para>
            <para>G: 1234.56789</para>
            <para>N: 1,234.57</para>
            <para>P: 123,456.79 %</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Decimal.ToString(System.String)" /> method formats a <see cref="T:System.Decimal" /> value in a specified format by using the conventions of the current culture. If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <see cref="M:System.Decimal.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                                <see cref="M:System.Decimal.ToString" />
                            </para>
              </description>
            </item>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                                <see cref="M:System.Decimal.ToString(System.IFormatProvider)" />
                            </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                                <see cref="M:System.Decimal.ToString(System.String,System.IFormatProvider)" />
                            </para>
              </description>
            </item>
          </list>
          <para>
                </para>
          <para>The <see cref="M:System.Decimal.ToString(System.String)" /> method uses the standard or custom numeric format string specified by the <paramref name="format" /> parameter to convert the value of the current instance into its string representation. The <paramref name="format" /> parameter can be any valid <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format specifier</a></format> except for D, R, and X, as well as any combination of <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">custom numeric format specifiers</a></format>. If <paramref name="format" /> is null or an empty string, the return value of this instance is formatted with the general numeric format specifier (G).</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The return value is formatted by using the <see cref="T:System.Globalization.NumberFormatInfo" /> object for the current culture. To apply the formatting conventions of a specified culture, call the <see cref="M:System.Decimal.ToString(System.String,System.IFormatProvider)" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A standard or custom numeric format string (see Remarks).</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(string format, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)" /> method formats a <see cref="T:System.Double" /> value in a specified format of a specified culture. If you want to use default format or culture settings, use the other overloads of the <see cref="M:System.Double.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                                <see cref="M:System.Double.ToString" />
                            </para>
              </description>
            </item>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                                <see cref="M:System.Double.ToString(System.IFormatProvider)" />
                            </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                                <see cref="M:System.Double.ToString(System.String)" />
                            </para>
              </description>
            </item>
          </list>
          <para>The <paramref name="format" /> parameter can be any valid standard numeric format specifier except for D, R, and X, as well as any combination of custom numeric format specifiers. If <paramref name="format" /> is null or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object. Typically, <paramref name="provider" /> is a <see cref="T:System.Globalization.NumberFormatInfo" /> or <see cref="T:System.Globalization.CultureInfo" /> object. The <paramref name="provider" /> parameter supplies culture-specific information used in formatting. If <paramref name="provider" /> is null, the thread current culture is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric format string (see Remarks).</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is the integral part of the decimal value; fractional digits are truncated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit unsigned integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is the integral part of the decimal value; fractional digits are truncated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit unsigned integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is the integral part of the decimal value; fractional digits are truncated.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit unsigned integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to convert. </param>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Truncate(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Decimal.Truncate(System.Decimal)" /> method.</para>
          <code lang="C#">using System;
class MyClass {
public static void Main() {
 decimal d1 = 1234.56789m;
 decimal d2 = -1234.56789m;
 Console.WriteLine("{0} truncated is {1}", d1, Decimal.Truncate(d1));
 Console.WriteLine("{0} truncated is {1}", d2, Decimal.Truncate(d2));
}
}
</code>
          <para>The output is</para>
          <c>
            <para>1234.56789 truncated is 1234</para>
            <para>-1234.56789 truncated is -1234</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method rounds <paramref name="d" /> toward zero, to the nearest whole number, which corresponds to discarding any digits after the decimal point.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The result of <paramref name="d" /> rounded toward zero, to the nearest whole number.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The decimal number to truncate. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out decimal result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Decimal result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Decimal&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out decimal result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, valuetype System.Decimal result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Decimal&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="ILASM" Value=".field public static initOnly decimal Zero" />
      <MemberSignature Language="C#" Value="public static readonly decimal Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Decimal Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>0</MemberValue>
      <Docs>
        <remarks>
          <para>The value of this constant is 0. The scale shall be 0.</para>
          <para>This field is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the number zero (0).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>