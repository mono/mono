<?xml version="1.0" encoding="utf-8"?>
<Type Name="Math" FullName="System.Math" FullNameSP="System_Math" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed Math extends System.Object" />
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <MemberOfLibrary>ExtendedNumerics</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>To be added.</remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Abs(decimal value)" />
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates the <see cref="M:System.Math.Abs(System.SByte)" />(<see cref="T:System.Decimal" />) method.</para>
          <code lang="C#">
using System;

public class MathAbsExample
{
   public static void Main()
   {
      Decimal d1 = Math.Abs( (Decimal)0.00 );
      Decimal d2 = Math.Abs( (Decimal)(-1.23) );
      Console.WriteLine("Math.Abs( (Decimal)0.00 ) returns {0}",d1);
      Console.WriteLine("Math.Abs( (Decimal)(-1.23) ) returns {0}",d2);
   }
}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Abs( (Decimal)0.00 ) returns 0</para>
            <para>Math.Abs( (Decimal)(-1.23) ) returns 1.23</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of a <see cref="T:System.Decimal" /> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of a <see cref="T:System.Decimal" /> number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A decimal number, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.Decimal.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Abs(float64 value)" />
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of a <see cref="T:System.Double" /> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</para>
          <para>If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, the return value is <see cref="F:System.Double.PositiveInfinity" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, the return value is <see cref="F:System.Double.NaN" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of a double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.Double.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int16 Abs(int16 value)" />
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of an <see cref="T:System.Int16" /> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of a 16-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.Int16.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Abs(int32 value)" />
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">
          <paramref name="value " /> equals <see cref="F:System.Int32.MinValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of an <see cref="T:System.Int32" /> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of a 32-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.Int32.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int64 Abs(int64 value)" />
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">
          <paramref name="value " /> equals <see cref="F:System.Int64.MinValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of an <see cref="T:System.Int64" /> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of a 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 64-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.Int64.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int8 Abs(int8 value)" />
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of an 8-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An 8-bit signed integer, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.SByte.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float32 Abs(float32 value)" />
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The absolute value of a <see cref="T:System.Single" /> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</para>
          <para>If <paramref name="value" /> is equal to <see cref="F:System.Single.NegativeInfinity" /> or <see cref="F:System.Single.PositiveInfinity" />, the return value is <see cref="F:System.Single.PositiveInfinity" />. If <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />, the return value is <see cref="F:System.Single.NaN" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the absolute value of a single-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A single-precision floating-point number, x, such that 0 <math>≤</math> x <math>≤</math> <see cref="F:System.Single.MaxValue" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Acos(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Multiply the return value by 180/<see cref="F:System.Math.PI" /> to convert from radians to degrees.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the angle whose cosine is the specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An angle, <math>θ</math>, measured in radians, such that 0 <math>≤</math> <math>θ</math> <math>≤</math> <math>π</math> </para>
          <para>-or- </para>
          <para>
            <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number representing a cosine, where <paramref name="d" /> must be greater than or equal to -1, but less than or equal to 1. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Asin(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</para>
          <para>Multiply the return value by 180/<see cref="F:System.Math.PI" /> to convert from radians to degrees.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the angle whose sine is the specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An angle, <math>θ</math>, measured in radians, such that -<math>π</math>/2 <math>≤</math> <math>θ</math> <math>≤</math> <math>π</math>/2 </para>
          <para>-or- </para>
          <para>
            <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number representing a sine, where <paramref name="d" /> must be greater than or equal to -1, but less than or equal to 1. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Atan(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</para>
          <para>Multiply the return value by 180/<see cref="F:System.Math.PI" /> to convert from radians to degrees.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the angle whose tangent is the specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An angle, <math>θ</math>, measured in radians, such that -<math>π</math>/2 <math>≤</math> <math>θ</math> <math>≤</math> <math>π</math>/2.</para>
          <para>-or- </para>
          <para>
            <see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -<math>π</math>/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or <math>π</math>/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number representing a tangent. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Atan2(float64 y, float64 x)" />
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Atan2(System.Double,System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathAtan2Example
{

   public static void Main()
   {

      Double d1 = Math.Atan2(2,0);
      Double d2 = Math.Atan2(0,0);
      Console.WriteLine("Math.Atan2(2,0) returns {0}", d1);
      Console.WriteLine("Math.Atan2(0,0) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Atan2(2,0) returns 1.5707963267949</para>
            <para>Math.Atan2(0,0) returns 0</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the angle whose tangent is the quotient of two specified numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An angle, <math>θ</math>, measured in radians, such that -<math>π</math> <math>≤</math> <math>θ</math> <math>≤</math> <math>π</math>, and tan(<math>θ</math>) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane. Observe the following: </para>
          <list type="bullet">
            <item>
              <para>For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; <math>θ</math> &lt; <math>π</math>/2.</para>
            </item>
            <item>
              <para>For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, <math>π</math>/2 &lt; <math>θ</math> <math>≤</math> <math>π</math>.</para>
            </item>
            <item>
              <para>For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -<math>π</math> &lt; <math>θ</math> &lt; -<math>π</math>/2.</para>
            </item>
            <item>
              <para>For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -<math>π</math>/2 &lt; <math>θ</math> &lt; 0.</para>
            </item>
          </list>
          <para>For points on the boundaries of the quadrants, the return value is the following:</para>
          <list type="bullet">
            <item>
              <para>If y is 0 and x is not negative, θ = 0.</para>
            </item>
            <item>
              <para>If y is 0 and x is negative, θ = π.</para>
            </item>
            <item>
              <para>If y is positive and x is 0, θ = π/2.</para>
            </item>
            <item>
              <para>If y is negative and x is 0, θ = -π/2.</para>
            </item>
            <item>
              <para>If y is 0 and x is 0, θ = 0. </para>
            </item>
          </list>
          <para>If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y coordinate of a point. </param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x coordinate of a point. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int64  BigMul(int32 a,int32 b)" />
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Produces the full product of two 32-bit numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number containing the product of the specified numbers.</para>
        </returns>
        <param name="a">
          <attribution license="cc4" from="Microsoft" modified="false" />The first number to multiply. </param>
        <param name="b">
          <attribution license="cc4" from="Microsoft" modified="false" />The second number to multiply. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <paramref name="d" /> is positive, the presence of any fractional component causes <paramref name="d" /> to be rounded to the next highest integer. If <paramref name="d" /> is negative, the rounding operation causes any fractional component of <paramref name="d" /> to be discarded. The operation of this method differs from the <see cref="M:System.Math.Floor(System.Decimal)" /> method, which supports rounding toward negative infinity. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smallest integral value that is greater than or equal to the specified decimal number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The smallest integral value that is greater than or equal to <paramref name="d" />. Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number. </param>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Ceiling(float64 a)" />
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Ceiling(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathCeilingExample
{

   public static void Main()
   {

      Double d1 = Math.Ceiling(3.4);
      Double d2 = Math.Ceiling(-3.4);
      Console.WriteLine("Math.Ceiling(3.4) returns {0}", d1);
      Console.WriteLine("Math.Ceiling(-3.4) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Ceiling(3.4) returns 4</para>
            <para>Math.Ceiling(-3.4) returns -3</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <paramref name="a" /> is positive, the presence of any fractional component causes <paramref name="a" /> to be rounded to the next highest integer. If <paramref name="a" /> is negative, the rounding operation causes any fractional component of <paramref name="a" /> to be discarded. The operation of this method differs from the <see cref="M:System.Math.Floor(System.Double)" /> method, which supports rounding toward negative infinity.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The smallest integral value that is greater than or equal to <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</para>
        </returns>
        <param name="a">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Cos(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The angle, <paramref name="d" />, must be in radians. Multiply by <see cref="F:System.Math.PI" />/180 to convert degrees to radians.</para>
          <para>Acceptable values of <paramref name="d" /> range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside this range, the <see cref="M:System.Math.Cos(System.Double)" /> method returns <paramref name="d" /> unchanged rather than throwing an exception. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the cosine of the specified angle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The cosine of <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />An angle, measured in radians. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Cosh(float64 value)" />
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The angle, <paramref name="value" />, must be in radians. Multiply by <see cref="F:System.Math.PI" />/180 to convert degrees to radians.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hyperbolic cosine of the specified angle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An angle, measured in radians. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32  DivRem(int32 a,int32 b, [out] int32 &amp;result) " />
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, int32 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"> A <see cref="T:System.Int32" /> that contains the dividend.</param>
        <param name="b"> A <see cref="T:System.Int32" /> that contains the divisor.</param>
        <param name="result"> A <see cref="T:System.Int32" /> that receives the remainder.</param>
        <summary>
          <para>
    Returns the quotient of two numbers, also passing the remainder as an output parameter.
     </para>
        </summary>
        <returns>
          <para> A <see cref="T:System.Int32" /> containing the quotient of the specified numbers.
      </para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int64  DivRem(int64 a,int64 b,[out] int64 &amp;result)" />
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, int64 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"> A <see cref="T:System.Int64" /> that contains the dividend.</param>
        <param name="b"> A <see cref="T:System.Int64" /> that contains the divisor.</param>
        <param name="result"> A <see cref="T:System.Int64" /> that receives the remainder.</param>
        <summary>
          <para>
    Returns the quotient of two numbers, also passing the remainder as an output parameter.
     </para>
        </summary>
        <returns>
          <para> A <see cref="T:System.Int64" /> containing the quotient of the specified numbers. 
      </para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 E = 2.71828182845905" />
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this field is 2.7182818284590452354.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the natural logarithmic base, specified by the constant, e.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Exp(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Math.Pow(System.Double,System.Double)" /> method to calculate powers of other bases.</para>
          <para>
            <see cref="M:System.Math.Exp(System.Double)" /> is the inverse of <see cref="M:System.Math.Log(System.Double)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns e raised to the specified power.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number e raised to the power <paramref name="d" />. If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number specifying a power. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <paramref name="d" /> is positive, any fractional component is truncated. If <paramref name="d" /> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <see cref="M:System.Math.Ceiling(System.Decimal)" /> method, which supports rounding toward positive infinity.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the largest integer less than or equal to the specified decimal number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The largest integer less than or equal to <paramref name="d" />.  Note that the method returns an integral value of type <see cref="T:System.Math" />. </para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number. </param>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Floor(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Floor(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathFloorExample
{

   public static void Main()
   {

      Double d1 = Math.Floor(3.4);
      Double d2 = Math.Floor(-3.4);
      Console.WriteLine("Math.Floor(3.4) returns {0}", d1);
      Console.WriteLine("Math.Floor(-3.4) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Floor(3.4) returns 3</para>
            <para>Math.Floor(-3.4) returns -4</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <paramref name="d" /> is positive, any fractional component is truncated. If <paramref name="d" /> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <see cref="M:System.Math.Ceiling(System.Decimal)" /> method, which supports rounding toward positive infinity.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the largest integer less than or equal to the specified double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The largest integer less than or equal to <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 IEEERemainder(float64 x, float64 y)" />
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.IEEERemainder(System.Double,System.Double)" /> 
method.</para>
          <code lang="C#">using System;

public class MathIEEERemainderExample
{

   public static void Main()
   {

      Double d1 = Math.IEEERemainder(3.54,0);
      Double d2 = Math.IEEERemainder(9.99,-3.33);
      Double d3 = Math.IEEERemainder(-9.99,3.33);
      Double d4 = Math.IEEERemainder(9.5,1.5);
      Console.WriteLine("Math.IEEERemainder(3.54,0) returns {0}", d1);
      Console.WriteLine("Math.IEEERemainder(9.99,-3.33) returns {0}", d2);
      Console.WriteLine("Math.IEEERemainder(-9.99,3.33) returns {0}", d3);
      Console.WriteLine("Math.IEEERemainder(9.5,1.5) returns {0}", d4);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.IEEERemainder(3.54,0) returns NaN</para>
            <para>Math.IEEERemainder(9.99,-3.33) returns 0</para>
            <para>Math.IEEERemainder(-9.99,3.33) returns 0</para>
            <para>Math.IEEERemainder(9.5,1.5) returns 0.5</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</para>
          <para>The <see cref="M:System.Math.IEEERemainder(System.Double,System.Double)" /> method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the <see cref="M:System.Math.IEEERemainder(System.Double,System.Double)" /> method is:</para>
          <code>IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))</code>
          <para>In contrast, the formula for the modulus operator is:</para>
          <code>Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) * 
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) * 
          Math.Sign(dividend)</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the remainder resulting from the division of a specified number by another specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</para>
          <para>If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</para>
          <para>If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />A dividend. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />A divisor. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Log(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="d" /> is specified as a base 10 number.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the natural (base e) logarithm of a specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>One of the values in the following table. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="d" /> parameter</para>
                </term>
                <description>
                  <para>Return value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Positive </para>
              </term>
              <description>
                <para>The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log <subscript>e</subscript> <paramref name="d" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NegativeInfinity" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>Negative </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>Equal to <see cref="F:System.Double.NaN" /></para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Equal to <see cref="F:System.Double.PositiveInfinity" /></para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.PositiveInfinity" />
                </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The number whose logarithm is to be found. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Log(float64 a, float64 newBase)" />
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the logarithm of a specified number in a specified base.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>One of the values in the following table. (+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="a" />
                  </para>
                </term>
                <description>
                  <para>
                    <paramref name="newBase" />
                  </para>
                </description>
                <description>
                  <para>Return value</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <paramref name="a" /> <math>&gt;</math> 0</para>
              </term>
              <description>
                <para>(0 <math>&lt;</math> <paramref name="newBase" /> <math>&lt;</math> 1) -or-(<paramref name="newBase" /> <math>&gt;</math> 1)</para>
              </description>
              <description>
                <para>log<subscript>newBase</subscript>(a)</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> <math>&lt;</math> 0</para>
              </term>
              <description>
                <para>(any value)</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>(any value)</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> <math>&lt;</math> 0</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> != 1</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> = 0</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> != 1</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> = +Infinity</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> = NaN</para>
              </term>
              <description>
                <para>(any value)</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>(any value)</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> = NaN</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>(any value)</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> = 1</para>
              </description>
              <description>
                <para>NaN</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> = 0</para>
              </term>
              <description>
                <para>0 <math>&lt;</math> <paramref name="newBase" /> <math>&lt;</math> 1 </para>
              </description>
              <description>
                <para>+Infinity</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> = 0</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> <math>&gt;</math> 1</para>
              </description>
              <description>
                <para>-Infinity</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> =  +Infinity</para>
              </term>
              <description>
                <para>0 <math>&lt;</math> <paramref name="newBase" /> <math>&lt;</math> 1</para>
              </description>
              <description>
                <para>-Infinity</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> =  +Infinity</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> <math>&gt;</math> 1</para>
              </description>
              <description>
                <para>+Infinity</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> = 1</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> = 0</para>
              </description>
              <description>
                <para>0</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="a" /> = 1</para>
              </term>
              <description>
                <para>
                  <paramref name="newBase" /> = +Infinity</para>
              </description>
              <description>
                <para>0</para>
              </description>
            </item>
          </list>
        </returns>
        <param name="a">
          <attribution license="cc4" from="Microsoft" modified="false" />The number whose logarithm is to be found. </param>
        <param name="newBase">
          <attribution license="cc4" from="Microsoft" modified="false" />The base of the logarithm. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Log10(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="d" /> is specified as a base 10 number.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the base 10 logarithm of a specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>One of the values in the following table. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="d" /> parameter </para>
                </term>
                <description>
                  <para>Return value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Positive </para>
              </term>
              <description>
                <para>The base 10 log of <paramref name="d" />; that is, log <subscript>10</subscript> <paramref name="d" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NegativeInfinity" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>Negative </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>Equal to <see cref="F:System.Double.NaN" /></para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Equal to <see cref="F:System.Double.PositiveInfinity" /></para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.PositiveInfinity" />
                </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number whose logarithm is to be found. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int8 Max(unsigned int8 val1, unsigned int8 val2)" />
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 8-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 8-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 8-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Max(decimal val1, decimal val2)" />
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two decimal numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two decimal numbers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two decimal numbers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Max(float64 val1, float64 val2)" />
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two double-precision floating-point numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two double-precision floating-point numbers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two double-precision floating-point numbers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int16 Max(int16 val1, int16 val2)" />
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 16-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 16-bit signed integers to compare. </param>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 16-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 16-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 16-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Max(int32 val1, int32 val2)" />
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 32-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 32-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 32-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int64 Max(int64 val1, int64 val2)" />
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 64-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 64-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 64-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int8 Max(int8 val1, int8 val2)" />
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Max(System.SByte,System.SByte)" />(<see cref="T:System.Int16" />, <see cref="T:System.Int16" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 8-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 8-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 8-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float32 Max(float32 val1, float32 val2)" />
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two single-precision floating-point numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two single-precision floating-point numbers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two single-precision floating-point numbers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 Max(unsigned int16 val1, unsigned int16 val2)" />
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Max(System.SByte,System.SByte)" />(<see cref="T:System.Int32" />, <see cref="T:System.Int32" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 16-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 16-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 16-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int32 Max(unsigned int32 val1, unsigned int32 val2)" />
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Max(System.SByte,System.SByte)" />(<see cref="T:System.Int64" />, <see cref="T:System.Int64" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 32-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 32-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 32-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int64 Max(unsigned int64 val1, unsigned int64 val2)" />
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Math.Max(System.SByte,System.SByte)" />(<see cref="T:System.Decimal" />, <see cref="T:System.Decimal" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the larger of two 64-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 64-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 64-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int8 Min(unsigned int8 val1, unsigned int8 val2)" />
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 8-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 8-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 8-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Min(decimal val1, decimal val2)" />
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two decimal numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two decimal numbers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two decimal numbers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Min(float64 val1, float64 val2)" />
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two double-precision floating-point numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two double-precision floating-point numbers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two double-precision floating-point numbers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int16 Min(int16 val1, int16 val2)" />
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 16-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 16-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 16-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Min(int32 val1, int32 val2)" />
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 32-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 32-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 32-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int64 Min(int64 val1, int64 val2)" />
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 64-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 64-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 64-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int8 Min(int8 val1, int8 val2)" />
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Min(System.SByte,System.SByte)" />(<see cref="T:System.Int16" />, <see cref="T:System.Int16" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 8-bit signed integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 8-bit signed integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 8-bit signed integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float32 Min(float32 val1, float32 val2)" />
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two single-precision floating-point numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two single-precision floating-point numbers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two single-precision floating-point numbers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 Min(unsigned int16 val1, unsigned int16 val2)" />
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Min(System.SByte,System.SByte)" />(<see cref="T:System.Int32" />, <see cref="T:System.Int32" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 16-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 16-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 16-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int32 Min(unsigned int32 val1, unsigned int32 val2)" />
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Min(System.SByte,System.SByte)" />(<see cref="T:System.Int64" />, <see cref="T:System.Int64" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 32-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 32-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 32-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int64 Min(unsigned int64 val1, unsigned int64 val2)" />
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant
      alternative, use <see cref="M:System.Math.Min(System.SByte,System.SByte)" />(<see cref="T:System.Decimal" />, <see cref="T:System.Decimal" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the smaller of two 64-bit unsigned integers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
        </returns>
        <param name="val1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first of two 64-bit unsigned integers to compare. </param>
        <param name="val2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second of two 64-bit unsigned integers to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 PI = 3.14159265358979" />
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this field is 3.14159265358979323846.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, <math>π</math>.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Pow(float64 x, float64 y)" />
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following table indicates the return value when various values or ranges of values are specified for the <paramref name="x" /> and <paramref name="y" /> parameters. For more information, see <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.NegativeInfinity" />, and <see cref="F:System.Double.NaN" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Parameters </para>
                </term>
                <description>
                  <para>Return value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <paramref name="x" /> or <paramref name="y" /> = NaN. </para>
              </term>
              <description>
                <para>NaN </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = Any value except NaN; <paramref name="y" /> = 0. </para>
              </term>
              <description>
                <para>1 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = NegativeInfinity; <paramref name="y" /> &lt; 0. </para>
              </term>
              <description>
                <para>0 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = NegativeInfinity; <paramref name="y" /> is a positive odd integer. </para>
              </term>
              <description>
                <para>NegativeInfinity </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = NegativeInfinity; <paramref name="y" /> is positive but not an odd integer. </para>
              </term>
              <description>
                <para>PositiveInfinity </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> &lt; 0 but not NegativeInfinity; <paramref name="y" /> is not an integer, NegativeInfinity, or PositiveInfinity.</para>
              </term>
              <description>
                <para>NaN </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = -1; <paramref name="y" /> = NegativeInfinity or PositiveInfinity. </para>
              </term>
              <description>
                <para>NaN </para>
              </description>
            </item>
            <item>
              <term>
                <para>-1 &lt; <paramref name="x" /> &lt; 1; <paramref name="y" /> = NegativeInfinity. </para>
              </term>
              <description>
                <para>PositiveInfinity </para>
              </description>
            </item>
            <item>
              <term>
                <para>-1 &lt; <paramref name="x" /> &lt; 1; <paramref name="y" /> = PositiveInfinity. </para>
              </term>
              <description>
                <para>0 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> &lt; -1 or <paramref name="x" /> &gt; 1; <paramref name="y" /> = NegativeInfinity. </para>
              </term>
              <description>
                <para>0 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> &lt; -1 or <paramref name="x" /> &gt; 1; <paramref name="y" /> = PositiveInfinity. </para>
              </term>
              <description>
                <para>PositiveInfinity </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = 0; <paramref name="y" /> &lt; 0. </para>
              </term>
              <description>
                <para>PositiveInfinity </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = 0; <paramref name="y" /> &gt; 0. </para>
              </term>
              <description>
                <para>0 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = 1; <paramref name="y" /> is any value except NaN. </para>
              </term>
              <description>
                <para>1 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = PositiveInfinity; <paramref name="y" /> &lt; 0. </para>
              </term>
              <description>
                <para>0 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <paramref name="x" /> = PositiveInfinity; <paramref name="y" /> &gt; 0. </para>
              </term>
              <description>
                <para>PositiveInfinity </para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a specified number raised to the specified power.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number <paramref name="x" /> raised to the power <paramref name="y" />.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number to be raised to a power. </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number that specifies a power. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static decimal Round(decimal d)" />
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Round(System.Double)" />(<see cref="T:System.Decimal" />) method.</para>
          <code lang="C#">using System;

public class MathRoundExample
{

   public static void Main()
   {

      Double d1 = Math.Round(4.4);
      Double d2 = Math.Round(4.5);
      Double d3 = Math.Round(4.6);
      Console.WriteLine("Math.Round(4.4) returns {0}", d1);
      Console.WriteLine("Math.Round(4.5) returns {0}", d2);
      Console.WriteLine("Math.Round(4.6) returns {0}", d3);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Round(4.4) returns 4</para>
            <para>Math.Round(4.5) returns 4</para>
            <para>Math.Round(4.6) returns 5</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to the nearest integral value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer nearest parameter <paramref name="d" />. If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to be rounded. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Round(float64 a)" />
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Round(System.Double)" />(<see cref="T:System.Double" />) method.</para>
          <code lang="C#">using System;

public class MathRoundExample
{

   public static void Main()
   {

      Double d1 = Math.Round(4.4);
      Double d2 = Math.Round(4.5);
      Double d3 = Math.Round(4.6);
      Console.WriteLine("Math.Round(4.4) returns {0}", d1);
      Console.WriteLine("Math.Round(4.5) returns {0}", d2);
      Console.WriteLine("Math.Round(4.6) returns {0}", d3);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Round(4.4) returns 4</para>
            <para>Math.Round(4.5) returns 4</para>
            <para>Math.Round(4.6) returns 5</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a double-precision floating-point value to the nearest integral value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer nearest <paramref name="a" />. If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</para>
        </returns>
        <param name="a">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number to be rounded. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to a specified number of fractional digits.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />. </para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to be rounded. </param>
        <param name="decimals">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of decimal places in the return value. </param>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer nearest <paramref name="d" />. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned. </para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to be rounded. </param>
        <param name="mode">
          <attribution license="cc4" from="Microsoft" modified="false" />Specification for how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Round(float64 value, int32 digits)" />
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="digits" /> &lt; 0</para>
          <para>-or-</para>
          <para>
            <paramref name="digits" /> &gt; 15</para>
        </exception>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Round(System.Double)" />(<see cref="T:System.Double" />, <see cref="T:System.Int32" />) method.</para>
          <code lang="C#">using System;

public class MathRoundExample
{

   public static void Main()
   {

      Double d1 = Math.Round(3.44,1);
      Double d2 = Math.Round(3.45,1);
      Double d3 = Math.Round(3.55,1);
      Console.WriteLine("Math.Round(3.44, 1) returns {0}", d1);
      Console.WriteLine("Math.Round(3.45, 1) returns {0}", d2);
      Console.WriteLine("Math.Round(3.55, 1) returns {0}", d3);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Round(3.44, 1) returns 3.4</para>
            <para>Math.Round(3.45, 1) returns 3.4</para>
            <para>Math.Round(3.55, 1) returns 3.6</para>
          </c>
        </example>
        <param name="digits">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of fractional digits in the return value. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a double-precision floating-point value to a specified number of fractional digits.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number to be rounded. </param>
        <param name="digits">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of fractional digits in the return value. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integer nearest <paramref name="value" />. If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number to be rounded. </param>
        <param name="mode">
          <attribution license="cc4" from="Microsoft" modified="false" />Specification for how to round <paramref name="value" /> if it is midway between two other numbers.</param>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />. If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A decimal number to be rounded. </param>
        <param name="decimals">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of decimal places in the return value. </param>
        <param name="mode">
          <attribution license="cc4" from="Microsoft" modified="false" />Specification for how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Round method, see the <see cref="Overload:System.Math.Round" /> reference page.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />. If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number to be rounded. </param>
        <param name="digits">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of fractional digits in the return value. </param>
        <param name="mode">
          <attribution license="cc4" from="Microsoft" modified="false" />Specification for how to round <paramref name="value" /> if it is midway between two other numbers.</param>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(decimal value)" />
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of a decimal number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed decimal number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(float64 value)" />
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArithmeticException">
          <paramref name="value " />is equal to <see cref="F:System.Double.NaN" />.</exception>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Sign(System.SByte)" />(<see cref="T:System.Double" />) method.</para>
          <code lang="C#">using System;

public class MathSignExample
{

   public static void Main()
   {

      Double d1 = Math.Sign(4.4);
      Double d2 = Math.Sign(0.0);
      Double d3 = Math.Sign(-4.5);
      Console.WriteLine("Math.Sign(4.4) returns {0}", d1);
      Console.WriteLine("Math.Sign(0.0) returns {0}", d2);
      Console.WriteLine("Math.Sign(-4.5) returns {0}", d3);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Sign(4.4) returns 1 </para>
            <para>Math.Sign(0.0) returns 0 </para>
            <para>Math.Sign(-4.5) returns -1</para>
          </c>
        </example>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of a double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(int16 value)" />
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of a 16-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(int32 value)" />
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of a 32-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(int64 value)" />
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of a 64-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(int8 value)" />
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This method is not CLS-compliant. For a CLS-compliant alternative, use
   <see cref="M:System.Math.Sign(System.SByte)" />(<see cref="T:System.Int16" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of an 8-bit signed integer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Sign(float32 value)" />
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArithmeticException">
          <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating the sign of a single-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that indicates the sign of <paramref name="value" />, as shown in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return value </para>
                </term>
                <description>
                  <para>Meaning </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>-1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is less than zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>0 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is equal to zero. </para>
              </description>
            </item>
            <item>
              <term>
                <para>1 </para>
              </term>
              <description>
                <para>
                  <paramref name="value" /> is greater than zero. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A signed number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Sin(float64 a)" />
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Sin(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathSinExample
{

   public static void Main()
   {

      Double d1 = Math.Sin(0);
      Double d2 = Math.Sin(Math.PI/2.0);
      Console.WriteLine("Math.Sin(0) returns {0}", d1);
      Console.WriteLine("Math.Sin(Math.PI/2.0) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Sin(0) returns 0</para>
            <para>Math.Sin(Math.PI/2.0) returns 1</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The angle, <paramref name="a" />, must be in radians. Multiply by <see cref="F:System.Math.PI" />/180 to convert degrees to radians.</para>
          <para>Acceptable values of <paramref name="a" /> range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside of this range, the <see cref="M:System.Math.Sin(System.Double)" /> method returns <paramref name="a" /> unchanged rather than throwing an exception.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the sine of the specified angle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sine of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="a">
          <attribution license="cc4" from="Microsoft" modified="false" />An angle, measured in radians. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Sinh(float64 value)" />
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Sinh(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathSinhExample
{

   public static void Main()
   {

      Double d1 = Math.Sinh(0);
      Double d2 = Math.Sinh(Math.PI);
      Console.WriteLine("Math.Sinh(0) returns {0}", d1);
      Console.WriteLine("Math.Sinh(Math.PI) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Sinh(0) returns 0</para>
            <para>Math.Sinh(Math.PI) returns 11.5487393572577</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The angle, <paramref name="value" />, must be in radians. Multiply by <see cref="F:System.Math.PI" />/180 to convert degrees to radians.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hyperbolic sine of the specified angle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The hyperbolic sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An angle, measured in radians. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Sqrt(float64 d)" />
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Sqrt(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathSqrtExample
{

   public static void Main()
   {

      Double d1 = Math.Sqrt(16.0);
      Double d2 = Math.Sqrt(0.0);
      Double d3 = Math.Sqrt(-10.0);
      Console.WriteLine("Math.Sqrt(16.0) returns {0}", d1);
      Console.WriteLine("Math.Sqrt(0.0) returns {0}", d2);
      Console.WriteLine("Math.Sqrt(-10.0) returns {0}", d3);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Sqrt(16.0) returns 4</para>
            <para>Math.Sqrt(0.0) returns 0</para>
            <para>Math.Sqrt(-10.0) returns NaN</para>
          </c>
        </example>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the square root of a specified number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>One of the values in the following table. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="d" /> parameter </para>
                </term>
                <description>
                  <para>Return value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Zero or positive </para>
              </term>
              <description>
                <para>The positive square root of <paramref name="d" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Negative </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>Equals <see cref="F:System.Double.NaN" /></para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Equals <see cref="F:System.Double.PositiveInfinity" /></para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.PositiveInfinity" />
                </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The number whose square root is to be found. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Tan(float64 a)" />
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Tan(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathTanExample
{

   public static void Main()
   {

      Double d1 = Math.Tan(0);
      Double d2 = Math.Tan(Math.PI/2.0);
      Console.WriteLine("Math.Tan(0) returns {0}", d1);
      Console.WriteLine("Math.Tan(Math.PI/2.0) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Tan(0) returns 0</para>
            <para>Math.Tan(Math.PI/2.0) returns 1.63317787283838E+16</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The angle, <paramref name="a" />, must be in radians. Multiply by <see cref="F:System.Math.PI" />/180 to convert degrees to radians.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the tangent of the specified angle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The tangent of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="a">
          <attribution license="cc4" from="Microsoft" modified="false" />An angle, measured in radians. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Tanh(float64 value)" />
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <example>
          <para>The following example demonstrates using the <see cref="M:System.Math.Tanh(System.Double)" /> method.</para>
          <code lang="C#">using System;

public class MathTanhExample
{

   public static void Main()
   {

      Double d1 = Math.Tanh(0);
      Double d2 = Math.Tanh(Math.PI);
      Console.WriteLine("Math.Tanh(0) returns {0}", d1);
      Console.WriteLine("Math.Tanh(Math.PI) returns {0}", d2);

   }

}
</code>
          <para>The output is</para>
          <c>
            <para>Math.Tanh(0) returns 0 </para>
            <para>Math.Tanh(Math.PI) returns 0.99627207622075</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The angle, <paramref name="value" />, must be in radians. Multiply by <see cref="F:System.Math.PI" />/180 to convert degrees to radians.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hyperbolic tangent of the specified angle.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An angle, measured in radians. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Math.Truncate(System.Decimal)" /> rounds <paramref name="d" /> to the nearest integer towards zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calculates the integral part of a specified decimal number. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number to truncate.</param>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Math.Truncate(System.Double)" /> rounds <paramref name="d" /> to the nearest integer towards zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calculates the integral part of a specified double-precision floating-point number. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>
                    <paramref name="d" />
                  </para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Double.NaN" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NaN" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Double.NegativeInfinity" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.NegativeInfinity" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Double.PositiveInfinity" />
                </para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Double.PositiveInfinity" />
                </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A number to truncate.</param>
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>