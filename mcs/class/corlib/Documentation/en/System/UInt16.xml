<?xml version="1.0" encoding="utf-8"?>
<Type Name="UInt16" FullName="System.UInt16" FullNameSP="System_UInt16" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sequential sealed serializable UInt16 extends System.ValueType implements System.IComparable, System.IFormattable" />
  <TypeSignature Language="C#" Value="public struct UInt16 : IComparable, IComparable&lt;ushort&gt;, IConvertible, IEquatable&lt;ushort&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit unsigned int16 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;unsigned int16&gt;, class System.IConvertible, class System.IEquatable`1&lt;unsigned int16&gt;, class System.IFormattable" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.UInt16&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.UInt16&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.UInt16" /> value type represents unsigned integers with values ranging from 0 to 65535.</para>
      <block subset="none" type="note">
        <para>   The <see cref="T:System.UInt16" /> type is not CLS-compliant. The CLS-compliant alternative type is <see cref="T:System.Int32" />. <see cref="T:System.Int16" /> can be used instead to replace a <see cref="T:System.UInt16" /> value that ranges from zero to <see cref="F:System.Int16.MaxValue" />. For more information about CLS compliance, see <format type="text/html"><a href="4f0b77d0-4844-464f-af73-6e06bedeafc6">Common Language Specification</a></format>. </para>
      </block>
      <para>The <see cref="T:System.UInt16" /> structure provides methods to compare instances of this type, convert the value of an instance to its string representation, and convert the string representation of a number to an instance of this type.</para>
      <para>For information about how format specification codes control the string representation of value types, see <format type="text/html"><a href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</a></format>.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a 16-bit unsigned integer.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual int32 CompareTo(object value)" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.UInt16" /> and is not a null reference.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Any instance of <see cref="T:System.UInt16" />, regardless of its value, is considered greater than null.</para>
          <para>
            <paramref name="value" /> must be null or an instance of <see cref="T:System.UInt16" />; otherwise, an exception is thrown.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is less than <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is equal to <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is greater than <paramref name="value" />.</para>
                <para>-or- </para>
                <para>
                  <paramref name="value" /> is null. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IComparable`1" /> interface and performs slightly better than the <see cref="M:System.UInt16.CompareTo(System.Object)" /> method because it does not have to convert the <paramref name="value" /> parameter to an object.</para>
          <para>Depending on your programming language, it might be possible to code a <see cref="Overload:System.UInt16.CompareTo" /> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</para>
          <para>For example, suppose the instance type is <see cref="T:System.Int32" /> and the parameter type is <see cref="T:System.Byte" />. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <see cref="T:System.Int32" /> object, then generates a <see cref="M:System.Int32.CompareTo(System.Object)" /> method that compares the values of the <see cref="T:System.Int32" /> instance and the <see cref="T:System.Int32" /> parameter representation.</para>
          <para>Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified 16-bit unsigned integer and returns an indication of their relative values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is less than <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is equal to <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is greater than <paramref name="value" />. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An unsigned integer to compare. </param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool Equals(object obj)" />
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <para>
            <block subset="none" type="note">This method
      overrides <see cref="M:System.Object.Equals(System.Object)" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance is equal to a specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare to this instance. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ushort obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(unsigned int16 obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IEquatable`1" /> interface, and performs slightly better than <see cref="M:System.UInt16.Equals(System.Object)" /> because it does not have to convert the <paramref name="obj" /> parameter to an object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt16" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />A 16-bit unsigned integer to compare to this instance.</param>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual int32 GetHashCode()" />
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>The algorithm used to
      generate the hash code is unspecified. </para>
          <para>
            <block subset="none" type="note">This method
      overrides <see cref="M:System.Object.GetHashCode" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer hash code.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt16" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The enumerated constant, <see cref="F:System.TypeCode.UInt16" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="ILASM" Value=".field public static literal unsigned int16 MaxValue = 65535" />
      <MemberSignature Language="C#" Value="public const ushort MaxValue = 65535;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int16 MaxValue = unsigned int16(65535)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>65535</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is 65535; that is, hexadecimal 0xFFFF.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the largest possible value of <see cref="T:System.UInt16" />. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="ILASM" Value=".field public static literal unsigned int16 MinValue = 0" />
      <MemberSignature Language="C#" Value="public const ushort MinValue = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int16 MinValue = unsigned int16(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>0</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is 0.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the smallest possible value of <see cref="T:System.UInt16" />. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 Parse(string s)" />
      <MemberSignature Language="C#" Value="public static ushort Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
        <example>
          <para>This example demonstrates parsing a string to a <see cref="T:System.UInt16" />.</para>
          <code lang="C#">using System;
public class UInt16ParseClass {
  public static void Main() {
    string str = "  100   ";
    Console.WriteLine("String: \"{0}\" &lt;UInt16&gt; {1}",str,UInt16.Parse(str));
  }
}
</code>
          <para>The output is</para>
          <para>
            <c>String: " 100
   " &lt;UInt16&gt; 100</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="s" /> parameter should be the string representation of a number in the following form.</para>
          <para>[ws][sign]digits[ws]</para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>Optional white space.</para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>An optional sign. Valid sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> properties of the current culture. However, the negative sign symbol can be used only with zero; otherwise, the method throws an <see cref="T:System.OverflowException" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>digits</para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The string specified by the <paramref name="s" /> parameter is interpreted by using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</para>
          </block>
          <para>The <paramref name="s" /> parameter is parsed by using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo" /> object that is initialized for the current system culture. For more information, see <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />. To parse a string by using the formatting information of a specific culture, use the <see cref="M:System.UInt16.Parse(System.String,System.IFormatProvider)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number to its 16-bit unsigned integer equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 Parse(string s, valuetype System.Globalization.NumberStyles style)" />
      <MemberSignature Language="C#" Value="public static ushort Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="style" /> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <paramref name="s" /> parameter for the parse operation to succeed. <paramref name="style" /> must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles" /> enumeration. The <paramref name="style" /> parameter makes this method overload useful when <paramref name="s" /> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <paramref name="s" /> is known only at run time, or when you want to disallow white space or a sign symbol in <paramref name="s" />.</para>
          <para>Depending on the value of <paramref name="style" />, the <paramref name="s" /> parameter may include the following elements: </para>
          <para>[ws][$][sign][digits,]digits[.fractional_digits][E[sign]exponential_digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. If <paramref name="style" /> includes <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />, the <paramref name="s" /> parameter may contain the following elements:</para>
          <para>[ws]hexdigits[ws]</para>
          <para>The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>Optional white space. White space can appear at the start of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>$</para>
              </term>
              <description>
                <para>A culture-specific currency symbol. Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" /> properties of the current culture. The current culture's currency symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>An optional sign. The sign can appear at the start of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" /> flag. Parentheses can be used in <paramref name="s" /> to indicate a negative value if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses" /> flag. However, the negative sign symbol can be used only with zero; otherwise, the method throws an <see cref="T:System.OverflowException" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>digits</para>
                <para>fractional_digits</para>
                <para>exponential_digits</para>
              </term>
              <description>
                <para>A sequence of digits from 0 through 9. For fractional_digits, only the digit 0 is valid.</para>
              </description>
            </item>
            <item>
              <term>
                <para>,</para>
              </term>
              <description>
                <para>A culture-specific group separator symbol. The current culture's group separator can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>.</para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if fractional_digits includes any other digit, a <see cref="T:System.FormatException" /> is thrown.</para>
              </description>
            </item>
            <item>
              <term>
                <para>E</para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>hexdigits</para>
              </term>
              <description>
                <para>A sequence of hexadecimal digits from 0 through f, or 0 through F. </para>
              </description>
            </item>
          </list>
          <para>A string with digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None" /> style) always parses successfully. Most of the remaining <see cref="T:System.Globalization.NumberStyles" /> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <see cref="T:System.Globalization.NumberStyles" /> members affect the elements that may be present in <paramref name="s" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>NumberStyles value</para>
                </term>
                <description>
                  <para>Elements permitted in <paramref name="s" /> in addition to digits</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.None" />
                </para>
              </term>
              <description>
                <para>The digits element only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />
                </para>
              </term>
              <description>
                <para>The decimal point (.) and fractional-digits elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowExponent" />
                </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates exponential notation, along with exponential_digits. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the start of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />
                </para>
              </term>
              <description>
                <para>The sign element at the start of <paramref name="s" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />
                </para>
              </term>
              <description>
                <para>The sign element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowParentheses" />
                </para>
              </term>
              <description>
                <para>The sign element in the form of parentheses enclosing the numeric value. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowThousands" />
                </para>
              </term>
              <description>
                <para>The group separator (,) element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" />
                </para>
              </term>
              <description>
                <para>The currency ($) element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Currency" />
                </para>
              </term>
              <description>
                <para>All elements. However, <paramref name="s" /> cannot represent a hexadecimal number or a number in exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Float" />
                </para>
              </term>
              <description>
                <para>The ws element at the start or end of <paramref name="s" />, sign at the start of <paramref name="s" />, and the decimal point (.) symbol. The <paramref name="s" /> parameter can also use exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Number" />
                </para>
              </term>
              <description>
                <para>The <paramref name="ws" />, <paramref name="sign" />, group separator (,), and decimal point (.) elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Any" />
                </para>
              </term>
              <description>
                <para>All elements. However, <paramref name="s" /> cannot represent a hexadecimal number.</para>
              </description>
            </item>
          </list>
          <para>Unlike the other <see cref="T:System.Globalization.NumberStyles" /> values, which allow for, but do not require, the presence of particular style elements in <paramref name="s" />, the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> style value means that the individual numeric characters in <paramref name="s" /> are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the <paramref name="style" /> parameter are <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> and <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />. (The <see cref="T:System.Globalization.NumberStyles" /> enumeration includes a composite number style, <see cref="F:System.Globalization.NumberStyles.HexNumber" />, that includes both white-space flags.)</para>
          <block subset="none" type="note">
            <para>If <paramref name="s" /> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as 0x or &amp;h) that differentiates it as a hexadecimal number. This causes the conversion to fail.</para>
          </block>
          <para>The <paramref name="s" /> parameter is parsed by using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo" /> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <see cref="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> overload.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified style to its 16-bit unsigned integer equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 Parse(string s, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static ushort Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="s" /> parameter contains a number of the form: </para>
          <para>[ws][sign]digits[ws] </para>
          <para>Items in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>Optional white space. </para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>An optional sign, or a negative sign if <paramref name="s" /> represents the value zero.</para>
              </description>
            </item>
            <item>
              <term>
                <para>digits</para>
              </term>
              <description>
                <para>A sequence of digits ranging from 0 to 9. </para>
              </description>
            </item>
          </list>
          <para>The s parameter is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. In addition to the byte value's decimal digits, only leading and trailing spaces along with a leading sign is allowed. (If the negative sign is present, <paramref name="s" /> must represent a value of zero or the method throws an <see cref="T:System.OverflowException" />.) To explicitly define the style elements together with the culture-specific formatting information that can be present in <paramref name="s" />, use the <see cref="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> method.</para>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides culture-specific information about the format of <paramref name="s" />. There are three ways to use the <paramref name="provider" /> parameter to supply custom formatting information to the parse operation:</para>
          <list type="bullet">
            <item>
              <para>You can pass the actual <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides formatting information. (Its implementation of <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> simply returns itself.)</para>
            </item>
            <item>
              <para>You can pass a <see cref="T:System.Globalization.CultureInfo" /> object that specifies the culture whose formatting is to be used. Its <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property provides formatting information.  </para>
            </item>
            <item>
              <para>You can pass a custom <see cref="T:System.IFormatProvider" /> implementation. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method must instantiate and return the <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides formatting information.</para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.NumberFormatInfo" /> for the current culture is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified culture-specific format to its 16-bit unsigned integer equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static unsigned int16 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static ushort Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="style" /> parameter defines the style elements (such as white space or the positive or negative sign symbol) that are allowed in the <paramref name="s" /> parameter for the parse operation to succeed. It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles" /> enumeration.</para>
          <para>Depending on the value of <paramref name="style" />, the <paramref name="s" /> parameter may include the following elements: </para>
          <para>[ws][$][sign]digits[.fractional_digits][E[sign]exponential_digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. If <paramref name="style" /> includes <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />, the <paramref name="s" /> parameter may include the following elements:</para>
          <para>[ws]hexdigits[ws]</para>
          <para>The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>Optional white space. White space can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>$</para>
              </term>
              <description>
                <para>A culture-specific currency symbol. Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" /> property of the <see cref="T:System.Globalization.NumberFormatInfo" /> object that is returned by the <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method of the <paramref name="provider" /> parameter. The currency symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>An optional sign. (The method throws an <see cref="T:System.OverflowException" /> if <paramref name="s" /> includes a negative sign and represents a non-zero number.) The sign can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flag, and it can appear the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" /> flag. Parentheses can be used in <paramref name="s" /> to indicate a negative value if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>digits</para>
              </term>
              <description>
                <para>A sequence of digits from 0 through 9. </para>
              </description>
            </item>
            <item>
              <term>
                <para>.</para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>fractional_digits</para>
              </term>
              <description>
                <para>One or more occurrences of the digit 0-9 if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag, or one or more occurrences of the digit 0 if it does not. Fractional digits can appear in <paramref name="s" /> only if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>E</para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>exponential_digits</para>
              </term>
              <description>
                <para>A sequence of digits from 0 through 9. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>hexdigits</para>
              </term>
              <description>
                <para>A sequence of hexadecimal digits from 0 through f, or 0 through F. </para>
              </description>
            </item>
          </list>
          <para>A string with decimal digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None" /> style) always parses successfully. Most of the remaining <see cref="T:System.Globalization.NumberStyles" /> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <see cref="T:System.Globalization.NumberStyles" /> members affect the elements that may be present in <paramref name="s" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Non-composite NumberStyles values</para>
                </term>
                <description>
                  <para>Elements permitted in <paramref name="s" /> in addition to digits</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.None" />
                </para>
              </term>
              <description>
                <para>Decimal digits only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />
                </para>
              </term>
              <description>
                <para>The decimal point (.) and fractional_digits elements. However, if style does not include the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag, fractional_digits must consist of only one or more 0 digits; otherwise, an <see cref="T:System.OverflowException" /> is thrown. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowExponent" />
                </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates exponential notation, along with exponential_digits. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />
                </para>
              </term>
              <description>
                <para>A sign before digits.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />
                </para>
              </term>
              <description>
                <para>A sign after digits.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowParentheses" />
                </para>
              </term>
              <description>
                <para>Parentheses before and after digits to indicate a negative value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowThousands" />
                </para>
              </term>
              <description>
                <para>The group separator (,) element. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" />
                </para>
              </term>
              <description>
                <para>The currency ($) element.</para>
              </description>
            </item>
          </list>
          <para>If the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> flag is used, <paramref name="s" /> must be a hexadecimal value. The only other flags that can be combined with it are <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> and <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />. (The <see cref="T:System.Globalization.NumberStyles" /> enumeration includes a composite number style, <see cref="F:System.Globalization.NumberStyles.HexNumber" />, that includes both white-space flags.) </para>
          <block subset="none" type="note">
            <para>If the <paramref name="s" /> parameter is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as 0x or &amp;h) that differentiates it as a hexadecimal number. This causes the parse operation to throw an exception.</para>
          </block>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides culture-specific information about the format of <paramref name="s" />. There are three ways to use the <paramref name="provider" /> parameter to supply custom formatting information to the parse operation:</para>
          <list type="bullet">
            <item>
              <para>You can pass the actual <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides formatting information. (Its implementation of <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> simply returns itself.)</para>
            </item>
            <item>
              <para>You can pass a <see cref="T:System.Globalization.CultureInfo" /> object that specifies the culture whose formatting is to be used. Its <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property provides formatting information.  </para>
            </item>
            <item>
              <para>You can pass a custom <see cref="T:System.IFormatProvider" /> implementation. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method must instantiate and return the <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides formatting information.</para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.NumberFormatInfo" /> object for the current culture is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToBoolean(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the value of the current instance is not zero; otherwise, false.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToByte(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Byte" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToChar(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Char" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToDecimal(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to a <see cref="T:System.Decimal" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToDouble(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to a <see cref="T:System.Double" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt16(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to an <see cref="T:System.Int16" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt32(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this instance, converted to an <see cref="T:System.Int32" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt64(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to an <see cref="T:System.Int64" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToSByte(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to an <see cref="T:System.SByte" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToSingle(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value pf this instance, converted to a <see cref="T:System.Single" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type targetType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type targetType, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="targetType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the static (Shared in Visual Basic) <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to <paramref name="type" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, unchanged.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt32(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to a <see cref="T:System.UInt32" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.UInt16" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt64(System.UInt16)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current value of this instance, converted to a <see cref="T:System.UInt64" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ToString()" />
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.UInt16.ToString" /> method formats a <see cref="T:System.UInt16" /> value in the default ("G", or general) format by using the <see cref="T:System.Globalization.NumberFormatInfo" /> object of the current culture. If you want to specify a different format or culture, use the other overloads of the <see cref="M:System.UInt16.ToString(System.String)" /> method, as follows: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.IFormatProvider)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.String)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" />
                </para>
              </description>
            </item>
          </list>
          <para>     </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.UInt16.ToString(System.IFormatProvider)" /> method formats a <see cref="T:System.UInt16" /> value in the default ("G", or general) format by using the <see cref="T:System.Globalization.NumberFormatInfo" /> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <see cref="M:System.UInt16.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.String)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" />
                </para>
              </description>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides culture-specific formatting information. However, none of the properties of the <see cref="T:System.Globalization.NumberFormatInfo" /> are used when formatting with the general numeric format specifier ("G").</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToString(string format)" />
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <para>This example demonstrates converting a <see cref="T:System.UInt16" /> to a string.</para>
          <code lang="C#">using System;
public class UInt16ToStringExample {
   public static void Main() {
      UInt16 i = 16;
      Console.WriteLine(i);
      String[] formats = {"c", "d", "e", "f", "g", "n", "p", "x" };
      foreach(String str in formats)
         Console.WriteLine("{0}: {1}", str, i.ToString(str));
   }
}
</code>
          <para>The output is</para>
          <c>
            <para>16</para>
            <para>c: $16.00</para>
            <para>d: 16</para>
            <para>e: 1.600000e+001</para>
            <para>f: 16.00</para>
            <para>g: 16</para>
            <para>n: 16.00</para>
            <para>p: 1,600.00 %</para>
            <para>x: 10</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.UInt16.ToString(System.String)" /> method formats a <see cref="T:System.UInt16" /> value in a specified format by using a <see cref="T:System.Globalization.NumberFormatInfo" /> object that represents the conventions of the current culture. If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <see cref="M:System.UInt16.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.IFormatProvider)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" />
                </para>
              </description>
            </item>
          </list>
          <para>The <paramref name="format" /> parameter can be any valid <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format specifier</a></format>, or any combination of <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">custom numeric format specifiers</a></format>. If <paramref name="format" /> is equal to <see cref="F:System.String.Empty" /> or is null, the return value of the current <see cref="T:System.UInt16" /> object is formatted with the general format specifier ("G"). If <paramref name="format" /> is any other value, the method throws a <see cref="T:System.FormatException" />.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about support for formatting in the .NET Framework, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The format of the returned string is determined by the <see cref="T:System.Globalization.NumberFormatInfo" /> object for the current culture. Depending on the <paramref name="format" /> parameter, this object controls symbols such as the group separator and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" /> overload.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric format string.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(string format, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric format string.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" /> method formats a <see cref="T:System.UInt16" /> value in a specified format by using the <see cref="T:System.Globalization.NumberFormatInfo" /> object of a specified culture. If you want to use default format or culture settings, use the other overloads of the <see cref="M:System.UInt16.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.IFormatProvider)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.UInt16.ToString(System.String)" />
                </para>
              </description>
            </item>
          </list>
          <para>     </para>
          <para>The <paramref name="format" /> parameter can be any valid <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format specifier</a></format>, or any combination of <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">custom numeric format specifiers</a></format>. If <paramref name="format" /> is equal to <see cref="F:System.String.Empty" /> or is null, the return value of the current <see cref="T:System.UInt16" /> object is formatted with the general format specifier ("G"). If <paramref name="format" /> is any other value, the method throws a <see cref="T:System.FormatException" />.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides culture-specific information about the format of the string returned by this method. When the <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" /> method is invoked, it calls the <paramref name="provider" /> parameter's <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method and passes it a <see cref="T:System.Type" /> object that represents the <see cref="T:System.Globalization.NumberFormatInfo" /> type. The <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method then returns the <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides information for formatting the current <see cref="T:System.UInt16" /> value, such as the group separator symbol or the decimal point symbol. There are three ways to use the <paramref name="provider" /> parameter to supply formatting information to the <see cref="M:System.UInt16.ToString(System.String,System.IFormatProvider)" /> method: </para>
          <list type="bullet">
            <item>
              <para>You can pass a <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture that supplies formatting information. Its <see cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" /> method returns the <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides numeric formatting information for that culture.</para>
            </item>
            <item>
              <para>You can pass the actual <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides numeric formatting information. (Its implementation of <see cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" /> just returns itself.)</para>
            </item>
            <item>
              <para>You can pass a custom object that implements <see cref="T:System.IFormatProvider" />. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method instantiates and returns the <see cref="T:System.Globalization.NumberFormatInfo" /> object that provides formatting information.</para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the formatting of the returned string is based on the <see cref="T:System.Globalization.NumberFormatInfo" /> object of the current culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance, as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric format string.</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out ushort result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, unsigned int16 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.UInt16&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out ushort result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, unsigned int16 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.UInt16&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>