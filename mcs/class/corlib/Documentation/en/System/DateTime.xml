<?xml version="1.0" encoding="utf-8"?>
<Type Name="DateTime" FullName="System.DateTime" FullNameSP="System_DateTime" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed serializable DateTime extends System.ValueType implements System.IComparable, System.IFormattable" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.DateTime" /> value type represents dates and times with values ranging from 00:00:00 (midnight), January 1, 0001 Anno Domini (Common Era) through 11:59:59 P.M., December 31, 9999 A.D. (C.E.) in the Gregorian calendar. </para>
      <para>Time values are measured in 100-nanosecond units called ticks, and a particular date is the number of ticks since 12:00 midnight, January 1, 0001 A.D. (C.E.) in the <see cref="T:System.Globalization.GregorianCalendar" /> calendar (excluding ticks that would be added by leap seconds). For example, a ticks value of 31241376000000000L represents the date, Friday, January 01, 0100 12:00:00 midnight. A <see cref="T:System.DateTime" /> value is always expressed in the context of an explicit or default calendar.</para>
      <block subset="none" type="note">
        <para>If you are working with a ticks value that you want to convert to some other time interval, such as minutes or seconds, you should use the <see cref="F:System.TimeSpan.TicksPerDay" />, <see cref="F:System.TimeSpan.TicksPerHour" />, <see cref="F:System.TimeSpan.TicksPerMinute" />, <see cref="F:System.TimeSpan.TicksPerSecond" />, or <see cref="F:System.TimeSpan.TicksPerMillisecond" /> constant to perform the conversion. For example, to add the number of seconds represented by a specified number of ticks to the <see cref="P:System.DateTime.Second" /> component of a <see cref="T:System.DateTime" /> value, you can use the expression dateValue.Second + nTicks/Timespan.TicksPerSecond.</para>
      </block>
      <para>In this section: </para>
      <para>
        <format type="text/html">
          <a href="#instantiating_datetime">Instantiating a DateTime object</a>
        </format>
        <br />
<format type="text/html"><a href="#datetime_values_strings">DateTime values and their string representations</a></format><br />
<format type="text/html"><a href="#parsing">Converting strings to DateTime values</a></format><br />
<format type="text/html"><a href="#datetime_versions">Version considerations</a></format><br />
<format type="text/html"><a href="#datetime_values">DateTime values</a></format><br />
<format type="text/html"><a href="#datetime_ops">DateTime operations</a></format><br />
<format type="text/html"><a href="#datetime_timespan">DateTime vs. TimeSpan</a></format><br />
<format type="text/html"><a href="#com_interop">COM interop considerations</a></format></para>
      <format type="text/html">
        <a href="#instantiating_datetime" />
      </format>
      <format type="text/html">
        <h2>Instantiating a DateTime object</h2>
      </format>
      <para>You can create a new <see cref="T:System.DateTime" /> value in any of the following ways:</para>
      <list type="bullet">
        <item>
          <para>By calling any of the overloads of the <see cref="T:System.DateTime" /> constructor that allow you to specify specific elements of the date and time value (such as the year, month, and day, or the number of ticks). The following statement illustrates a call to one of the <see cref="T:System.DateTime" /> constructors to create a date with a specific year, month, day, hour, minute, and second.</para>
          <para>code reference: System.DateTime.Instantiation#1</para>
        </item>
        <item>
          <para>By using any compiler-specific syntax for declaring date and time values. For example, the following Visual Basic statement initializes a new <see cref="T:System.DateTime" /> value.</para>
          <para>code reference: System.DateTime.Instantiation#2</para>
        </item>
        <item>
          <para>By assigning the <see cref="T:System.DateTime" /> object a date and time value returned by a property or method. The following example assigns the current date and time, the current Coordinated Universal Time (UTC) date and time, and the current date to three new <see cref="T:System.DateTime" /> variables. </para>
          <para>code reference: System.DateTime.Instantiation#3</para>
        </item>
        <item>
          <para>By parsing the string representation of a date and time value. The <see cref="Overload:System.DateTime.Parse" />, <see cref="Overload:System.DateTime.ParseExact" />, <see cref="Overload:System.DateTime.TryParse" />, and <see cref="Overload:System.DateTime.TryParseExact" /> methods all convert a string to its equivalent date and time value. The following example uses the <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider)" /> method to parse a string and convert it to a <see cref="T:System.DateTime" /> value. </para>
          <para>code reference: System.DateTime.Instantiation#4</para>
          <para>Note that the <see cref="Overload:System.DateTime.TryParse" /> and <see cref="Overload:System.DateTime.TryParseExact" /> methods indicate whether a particular string contains a valid representation of a <see cref="T:System.DateTime" /> value in addition to performing the conversion. </para>
        </item>
        <item>
          <para>By calling the <see cref="T:System.DateTime" /> structure's implicit default constructor. (For details on the implicit default constructor of a value type, see <format type="text/html"><a href="471eb994-2958-49d5-a6be-19b4313f80a3">Value Types (C# Reference)</a></format>.) An approximate equivalent, for compilers that support it, is declaring a <see cref="T:System.DateTime" />  value without explicitly assigning a date and time to it. The following example illustrates a call to the <see cref="T:System.DateTime" /> implicit default constructor in C# and Visual Basic, as well as a <see cref="T:System.DateTime" /> variable declaration with no assignment in Visual Basic.</para>
          <para>code reference: System.DateTime.Instantiation#5</para>
        </item>
      </list>
      <format type="text/html">
        <a href="#datetime_values_strings" />
      </format>
      <format type="text/html">
        <h2>DateTime Values and their string representations</h2>
      </format>
      <para>Internally, all <see cref="T:System.DateTime" /> values are represented as the number of ticks (the number of 100-nanosecond intervals) that have elapsed since 12:00:00 midnight, January 1, 0001. The actual <see cref="T:System.DateTime" /> value is independent of the way in which that value appears when displayed in a user interface element or when written to a file. The appearance of a <see cref="T:System.DateTime" /> value is the result of a formatting operation. Formatting is the process of converting a value to its string representation.</para>
      <para>Because the appearance of date and time values is dependent on such factors as culture, international standards, application requirements, and personal preference, the <see cref="T:System.DateTime" /> structure offers a great deal of flexibility in formatting date and time values through the overloads of its <see cref="Overload:System.DateTime.ToString" /> method. The default <see cref="M:System.DateTime.ToString" /> method returns the string representation of a date and time value using the current culture's short date and long time pattern. The following example uses the default <see cref="M:System.DateTime.ToString" /> method to display the date and time using the short date and long time pattern for the en-US culture, the current culture on the computer on which the example was run.</para>
      <para>code reference: System.DateTime.Formatting#1</para>
      <para>The <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> method returns the string representation of a date and time value using the short date and long time pattern of a specific culture. The following example uses the <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> method to display the date and time using the short date and long time pattern for the fr-FR culture.</para>
      <para>code reference: System.DateTime.Formatting#2</para>
      <para>The <see cref="M:System.DateTime.ToString(System.String)" /> method returns the string representation of the date and time in a format defined by a standard or custom format specifier and using the formatting conventions of the current culture. The following example uses the <see cref="M:System.DateTime.ToString(System.String)" /> method to display the full date and time pattern for the en-US culture, the current culture on the computer on which the example was run.</para>
      <para>code reference: System.DateTime.Formatting#3</para>
      <para>The <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method returns the string representation of the date and time in a format defined by a specific format specifier and using the formatting conventions of a specific culture. The following example uses the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method to display the full date and time pattern for the fr-FR culture.</para>
      <para>code reference: System.DateTime.Formatting#4</para>
      <para>For more information about formatting <see cref="T:System.DateTime" /> values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>.</para>
      <format type="text/html">
        <a href="#parsing" />
      </format>
      <format type="text/html">
        <h2>Converting strings to DateTime values</h2>
      </format>
      <para>Parsing involves converting the string representation of a date and time to a <see cref="T:System.DateTime" /> value. Typically, date and time strings have two different usages in applications: </para>
      <list type="bullet">
        <item>
          <para>They represent a date and time that can take a variety of forms and that reflect the conventions of either the current culture or a specific culture. For example, an application may allow a user whose current culture is en-US to input a date value as "12/15/2013" or "December 15, 2013", and allow a user whose current culture is en-GB to input a date value as "15/12/2013" or "15 December 2013". </para>
        </item>
        <item>
          <para>They represent a date and time in a predefined format. For example, an application may serialize a date as "20130103" independently of the culture on which the app is running, or it may require that a date be input in the current culture's short date format. </para>
        </item>
      </list>
      <para>You can use the <see cref="M:System.DateTime.Parse(System.String)" /> or <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> method to convert a string that might reflect one of the common date and time formats used by a culture to a <see cref="T:System.DateTime" /> value. The following example shows how you can use <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> to convert date strings in a number of different culture-specific formats to a <see cref="T:System.DateTime" /> value. It changes the current culture to English (Great Britain) and calls the <see cref="M:System.DateTime.GetDateTimeFormats" /> method to generate an array of date and time strings. It then passes each element in the array to the <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> method. The output from the example shows that the parsing method was able to successfully convert each of the culture-specific date and time strings. </para>
      <para>code reference: System.DateTime.Parsing#1</para>
      <para>You can use the <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> and <see cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" /> methods to convert a date and time string that must match a particular format or formats to a <see cref="T:System.DateTime" /> value. You specify the required format or formats as a parameter to the parsing method by using one or more <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard</a></format> or <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">custom</a></format> date and time format strings. The following example uses the <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" /> method to convert strings that must be either in a "yyyyMMdd" format or a "HHmmss" format to <see cref="T:System.DateTime" /> values. </para>
      <para>code reference: System.DateTime.Parsing#2</para>
      <para>The <see cref="M:System.DateTime.Parse(System.String)" /> and <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> methods throw an exception if the string to be converted to a <see cref="T:System.DateTime" /> value cannot be parsed. The <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> and <see cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" /> methods return a Boolean value that indicates whether the conversion succeeded or failed. Because the parsing operation for date and time strings, particularly if strings are input by users, tends to have a high failure rate, and because exception handling is expensive, you should use the <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> or <see cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" /> methods in scenarios where performance is important or conversions are subject to a high rate of failure. </para>
      <para>For more information about parsing date and time values, see <format type="text/html"><a href="43bae51e-9b1d-41a6-a187-772c0d096d90">Parsing Date and Time Strings</a></format>. </para>
      <format type="text/html">
        <a href="#datetime_versions" />
      </format>
      <format type="text/html">
        <h2>Version considerations</h2>
      </format>
      <para>Prior to the .NET Framework version 2.0, the <see cref="T:System.DateTime" /> structure contains a 64-bit field composed of an unused 2-bit field concatenated with a private Ticks field, which is a 62-bit unsigned field that contains the number of ticks that represent the date and time. The value of the Ticks field can be obtained with the <see cref="P:System.DateTime.Ticks" /> property.</para>
      <para>Starting with the .NET Framework 2.0, the <see cref="T:System.DateTime" /> structure contains a 64-bit field composed of a private Kind field concatenated with the Ticks field. The Kind field is a 2-bit field that indicates whether the <see cref="T:System.DateTime" /> structure represents a local time, a Coordinated Universal Time (UTC), or the time in an unspecified time zone. The Kind field is used when performing time conversions between time zones, but not for time comparisons or arithmetic. The value of the Kind field can be obtained with the <see cref="P:System.DateTime.Kind" /> property.</para>
      <block subset="none" type="note">
        <para>An alternative to the <see cref="T:System.DateTime" /> structure for working with date and time values in particular time zones is the <see cref="T:System.DateTimeOffset" /> structure. The <see cref="T:System.DateTimeOffset" /> structure stores date and time information in a private <see cref="T:System.DateTime" /> field and the number of minutes by which that date and time differs from UTC in a private <see cref="T:System.Int16" /> field. This makes it possible for a <see cref="T:System.DateTimeOffset" /> value to reflect the time in a particular time zone, whereas a <see cref="T:System.DateTime" /> value can unambiguously reflect only UTC and the local time zone's time. For a discussion about when to use the <see cref="T:System.DateTime" /> structure or the <see cref="T:System.DateTimeOffset" /> structure when working with date and time values, see <format type="text/html"><a href="07f17aad-3571-4014-9ef3-b695a86f3800">Choosing Between DateTime, DateTimeOffset, and TimeZoneInfo</a></format>.</para>
      </block>
      <para>   </para>
      <format type="text/html">
        <a href="#datetime_values" />
      </format>
      <format type="text/html">
        <h2>DateTime values</h2>
      </format>
      <para>Descriptions of time values in the <see cref="T:System.DateTime" /> type are often expressed using the Coordinated Universal Time (UTC) standard, which is the internationally recognized name for Greenwich Mean Time (GMT). Coordinated Universal Time is the time as measured at zero degrees longitude, the UTC origin point. Daylight saving time is not applicable to UTC.</para>
      <para>Local time is relative to a particular time zone. A time zone is associated with a time zone offset, which is the displacement of the time zone measured in hours from the UTC origin point. In addition, local time is optionally affected by daylight saving time, which adds or subtracts an hour from the length of a day. Consequently, local time is calculated by adding the time zone offset to UTC and adjusting for daylight saving time if necessary. The time zone offset at the UTC origin point is zero.</para>
      <para>UTC time is suitable for calculations, comparisons, and storing dates and time in files. Local time is appropriate for display in user interfaces of desktop applications. Time zone-aware applications (such as many Web applications) also need to work with a number of other time zones.</para>
      <para>If the <see cref="P:System.DateTime.Kind" /> property of a <see cref="T:System.DateTime" /> object is <see cref="F:System.DateTimeKind.Unspecified" />, it is unspecified whether the time represented is local time, UTC time, or a time in some other time zone. </para>
      <format type="text/html">
        <a href="#datetime_ops" />
      </format>
      <format type="text/html">
        <h2>DateTime operations</h2>
      </format>
      <para>A calculation using a <see cref="T:System.DateTime" /> structure, such as <see cref="M:System.DateTime.Add(System.TimeSpan)" /> or <see cref="M:System.DateTime.Subtract(System.DateTime)" />, does not modify the value of the structure. Instead, the calculation returns a new <see cref="T:System.DateTime" /> structure whose value is the result of the calculation.</para>
      <para>Conversion operations between time zones (such as between UTC and local time, or between one time zone and another) take daylight saving time into account, but arithmetic and comparison operations do not. </para>
      <para>The <see cref="T:System.DateTime" /> structure itself offers limited support for converting from one time zone to another. You can use the <see cref="M:System.DateTime.ToLocalTime" /> method to convert UTC to local time, or you can use the <see cref="M:System.DateTime.ToUniversalTime" /> method to convert from local time to UTC. However, a full set of time zone conversion methods is available in the <see cref="T:System.TimeZoneInfo" /> class. Using these methods, you can convert the time in any one of the world's time zones to the time in any other time zone.  </para>
      <para>Calculations and comparisons of <see cref="T:System.DateTime" /> objects are meaningful only if the objects represent times in the same time zone. You can use a <see cref="T:System.TimeZoneInfo" /> object to represent a <see cref="T:System.DateTime" /> value's time zone, although the two are loosely coupled. (That is, a <see cref="T:System.DateTime" /> object does not have a property that returns an object that represents that date and time value's time zone other than the <see cref="P:System.DateTime.Kind" /> property.) For this reason, in a time zone-aware application, you must rely on some external mechanism to determine the time zone in which a <see cref="T:System.DateTime" /> object was created. For example, you could use a structure that wraps both the <see cref="T:System.DateTime" /> value and the <see cref="T:System.TimeZoneInfo" /> object that represents the <see cref="T:System.DateTime" /> value's time zone. For details on using UTC in calculations and comparisons with <see cref="T:System.DateTime" /> values, see <format type="text/html"><a href="87c7ddf2-f15e-48af-8602-b3642237e6d0">Performing Arithmetic Operations with Dates and Times</a></format>.</para>
      <para>Each <see cref="T:System.DateTime" /> member implicitly uses the Gregorian calendar to perform its operation, with the exception of constructors that specify a calendar, and methods with a parameter derived from <see cref="T:System.IFormatProvider" />, such as <see cref="T:System.Globalization.DateTimeFormatInfo" />, that implicitly specifies a calendar. </para>
      <para>Operations by members of the <see cref="T:System.DateTime" /> type take into account details such as leap years and the number of days in a month.</para>
      <para>Two other common operations with <see cref="T:System.DateTime" /> values involve converting a date and time value to or from its string representation. The process of converting a <see cref="T:System.DateTime" /> value to its string representation is a formatting operation; for more information about formatting, see <format type="text/html"><a href="#datetime_values_strings">DateTime values and their string representations</a></format>. The process of converting the string representation of a date and time to a <see cref="T:System.DateTime" /> value is a parsing operation; for more information about parsing, see <format type="text/html"><a href="#parsing">Converting strings to DateTime values</a></format>.</para>
      <format type="text/html">
        <a href="#datetime_timespan" />
      </format>
      <format type="text/html">
        <h2>DateTime vs. TimeSpan</h2>
      </format>
      <para>The <see cref="T:System.DateTime" /> and <see cref="T:System.TimeSpan" /> value types differ in that a <see cref="T:System.DateTime" /> represents an instant in time whereas a <see cref="T:System.TimeSpan" /> represents a time interval. This means, for example, that you can subtract one instance of <see cref="T:System.DateTime" /> from another to obtain a <see cref="T:System.TimeSpan" /> object that represents the time interval between them. Or you could add a positive <see cref="T:System.TimeSpan" /> to the current <see cref="T:System.DateTime" /> to obtain a <see cref="T:System.DateTime" /> value that represents a future date.</para>
      <para>You can add or subtract a time interval from a <see cref="T:System.DateTime" /> object. Time intervals can be negative or positive, can be expressed in units such as ticks or seconds, or can be expressed as a <see cref="T:System.TimeSpan" /> object. </para>
      <format type="text/html">
        <a href="#com_interop" />
      </format>
      <format type="text/html">
        <h2>COM interop considerations</h2>
      </format>
      <para>A <see cref="T:System.DateTime" /> value that is transferred to a COM application, then is transferred back to a managed application, is said to round-trip. However, a <see cref="T:System.DateTime" /> value that specifies only a time does not round-trip as you might expect. </para>
      <para>If you round-trip only a time, such as 3 P.M., the final date and time is December 30, 1899 C.E. at 3:00 P.M., instead of January, 1, 0001 C.E. at 3:00 P.M. This happens because the .NET Framework and COM assume a default date when only a time is specified. However, the COM system assumes a base date of December 30, 1899 C.E. while the .NET Framework assumes a base date of January, 1, 0001 C.E. </para>
      <para>When only a time is passed from the .NET Framework to COM, special processing is performed that converts the time to the format used by COM. When only a time is passed from COM to the .NET Framework, no special processing is performed because that would corrupt legitimate dates and times on or before December 30, 1899. This also means if a date starts its round-trip from COM, the .NET Framework and COM preserve the date.</para>
      <para>The behavior of the .NET Framework and COM means that if your application round-trips a <see cref="T:System.DateTime" /> that only specifies a time, your application must remember to modify or ignore the erroneous date from the final <see cref="T:System.DateTime" /> object.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents an instant in time, typically expressed as a date and time of day. </para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int64 ticks)" />
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time represented by <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</para>
        </summary>
        <param name="ticks">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</para>
        </summary>
        <param name="ticks">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar. </param>
        <param name="kind">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the enumeration values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int32 year, int32 month, int32 day)" />
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="year" /> is less than 1 or greater than 9999</para>
          <para>-or-</para>
          <para>
            <paramref name="month" /> is less than 1 or greater than 12</para>
          <para>-or-</para>
          <para>
            <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" /></para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTime" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" /> constructor.</para>
          <para>The time of day for the resulting <see cref="T:System.DateTime" /> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The time of day for the resulting <see cref="T:System.DateTime" /> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />.</para>
          <para>The allowable values for <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> depend on <paramref name="calendar" />. An exception is thrown if the specified date and time cannot be expressed using <paramref name="calendar" />.</para>
          <para>The <see cref="N:System.Globalization" /> namespace provides several calendars including <see cref="T:System.Globalization.GregorianCalendar" /> and <see cref="T:System.Globalization.JulianCalendar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through the number of years in <paramref name="calendar" />). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through the number of months in <paramref name="calendar" />). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="calendar">
          <attribution license="cc4" from="Microsoft" modified="false" />The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second)" />
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year " />is less than 1 or greater than 9999 <para>-or-</para><para><paramref name="month" /> is less than 1 or greater than 12</para><para>-or-</para><para><paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" /></para><para>-or-</para><para><paramref name="hour " /> is less than 0 or greater than 23</para><para>-or-</para><para><paramref name="minute " /> is less than 0 or greater than 59</para><para>-or-</para><para><paramref name="second " /> is less than 0 or greater than 59</para></exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />. </para>
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTime" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" /> constructor.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTime" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" /> constructor.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
        <param name="kind">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />.</para>
          <para>The allowable values for <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> depend on <paramref name="calendar" />. An exception is thrown if the specified date and time cannot be expressed using <paramref name="calendar" />.</para>
          <para>The <see cref="N:System.Globalization" /> namespace provides several calendars including <see cref="T:System.Globalization.GregorianCalendar" /> and <see cref="T:System.Globalization.JulianCalendar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through the number of years in <paramref name="calendar" />). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through the number of months in <paramref name="calendar" />). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
        <param name="calendar">
          <attribution license="cc4" from="Microsoft" modified="false" />The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond)" />
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year " />is less than 1 or greater than 9999 <para>-or-</para><para><paramref name="month" /> is less than 1 or greater than 12</para><para>-or-</para><para><paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" /></para><para>-or-</para><para><paramref name="hour " />is less than 0 or greater than 23</para><para>-or-</para><para><paramref name="minute " />is less than 0 or greater than 59</para><para>-or-</para><para><paramref name="second " />is less than 0 or greater than 59</para><para> -or-</para><para><paramref name="millisecond" /> is less than 0 or greater than 999</para></exception>
        <exception cref="T:System.ArgumentException">The specified parameters evaluate to a date less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTime" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" /> constructor.</para>
          <para>The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
        <param name="millisecond">
          <attribution license="cc4" from="Microsoft" modified="false" />The milliseconds (0 through 999). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor interprets <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> as a year, month, and day in the Gregorian calendar. To instantiate a <see cref="T:System.DateTime" /> value by using the year, month, and day in another calendar, call the <see cref="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" /> constructor.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through 9999). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through 12). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
        <param name="millisecond">
          <attribution license="cc4" from="Microsoft" modified="false" />The milliseconds (0 through 999). </param>
        <param name="kind">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.Kind" /> property is initialized to <see cref="F:System.DateTimeKind.Unspecified" />.</para>
          <para>The allowable values for <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> depend on <paramref name="calendar" />. An exception is thrown if the specified date and time cannot be expressed using <paramref name="calendar" />.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
          <para>The <see cref="N:System.Globalization" /> namespace provides several calendars including <see cref="T:System.Globalization.GregorianCalendar" /> and <see cref="T:System.Globalization.JulianCalendar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through the number of years in <paramref name="calendar" />). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through the number of months in <paramref name="calendar" />). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
        <param name="millisecond">
          <attribution license="cc4" from="Microsoft" modified="false" />The milliseconds (0 through 999). </param>
        <param name="calendar">
          <attribution license="cc4" from="Microsoft" modified="false" />The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The allowable values for <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters depend on the <paramref name="calendar" /> parameter. An exception is thrown if the specified date and time cannot be expressed using <paramref name="calendar" />.</para>
          <para>For applications in which portability of date and time data or a limited degree of time zone awareness is important, you can use the corresponding <see cref="T:System.DateTimeOffset" /> constructor.</para>
          <para>The <see cref="N:System.Globalization" /> namespace provides several calendars including <see cref="T:System.Globalization.GregorianCalendar" /> and <see cref="T:System.Globalization.JulianCalendar" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</para>
        </summary>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year (1 through the number of years in <paramref name="calendar" />). </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (1 through the number of months in <paramref name="calendar" />). </param>
        <param name="day">
          <attribution license="cc4" from="Microsoft" modified="false" />The day (1 through the number of days in <paramref name="month" />). </param>
        <param name="hour">
          <attribution license="cc4" from="Microsoft" modified="false" />The hours (0 through 23). </param>
        <param name="minute">
          <attribution license="cc4" from="Microsoft" modified="false" />The minutes (0 through 59). </param>
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />The seconds (0 through 59). </param>
        <param name="millisecond">
          <attribution license="cc4" from="Microsoft" modified="false" />The milliseconds (0 through 999). </param>
        <param name="calendar">
          <attribution license="cc4" from="Microsoft" modified="false" />The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
        <param name="kind">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value)" />
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use the <see cref="M:System.DateTime.Add(System.TimeSpan)" /> method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds) in a single operation. This method's behavior is identical to that of the addition operator. The <see cref="T:System.DateTime" /> structure also supports specialized addition methods (such as <see cref="M:System.DateTime.AddDays(System.Double)" />, <see cref="M:System.DateTime.AddHours(System.Double)" />, and <see cref="M:System.DateTime.AddMinutes(System.Double)" />) for each time interval.</para>
          <para>The <see cref="M:System.DateTime.Add(System.TimeSpan)" /> method takes into account leap years and the number of days in a month when performing date arithmetic. </para>
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation. The <see cref="P:System.DateTime.Kind" /> property of the new <see cref="T:System.DateTime" /> instance is the same as that of the current instance.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A positive or negative time interval. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation.</para>
          <para>The fractional part of <paramref name="value" /> is the fractional part of a day. For example, 4.5 is equivalent to 4 days, 12 hours, 0 minutes, 0 seconds, 0 milliseconds, and 0 ticks.</para>
          <para>The <paramref name="value" /> parameter is rounded to the nearest millisecond.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation. The <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is the same as that of <paramref name="value" />.</para>
          <para>The fractional part of <paramref name="value" /> is the fractional part of an hour. For example, 4.5 is equivalent to 4 hours, 30 minutes, 0 seconds, 0 milliseconds, and 0 ticks.</para>
          <para>The <paramref name="value" /> parameter is rounded to the nearest millisecond.</para>
          <para>Converting time intervals of less than an hour to a fraction can involve a loss of precision if the result is a non-terminating repeating decimal. (For example, one minute is 0.016667 of an hour.) If this is problematic, you can use the <see cref="M:System.DateTime.Add(System.TimeSpan)" /> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of an hour.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation.</para>
          <para>The fractional part of <paramref name="value" /> is the fractional part of a millisecond. For example, 4.5 is equivalent to 4 milliseconds and 5000 ticks, where one millisecond = 10000 ticks.</para>
          <para>The <paramref name="value" /> parameter is rounded to the nearest integer.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation.</para>
          <para>The fractional part of <paramref name="value" /> is the fractional part of a minute. For example, 4.5 is equivalent to 4 minutes, 30 seconds, 0 milliseconds, and 0 ticks.</para>
          <para>The <paramref name="value" /> parameter is rounded to the nearest millisecond.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months)" />
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</para>
          <para>-or-</para>
          <para>The <paramref name="months" /> parameter is less than -120,000 or greater than 120,000</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" /> object. Instead, it returns a new <see cref="T:System.DateTime" /> object whose value is the result of this operation.</para>
          <para>The <see cref="M:System.DateTime.AddMonths(System.Int32)" /> method calculates the resulting month and year, taking into account leap years and the number of days in a month, then adjusts the day part of the resulting <see cref="T:System.DateTime" /> object. If the resulting day is not a valid day in the resulting month, the last valid day of the resulting month is used. For example, March 31st + 1 month = April 30th. The time-of-day part of the resulting <see cref="T:System.DateTime" /> object remains the same as this instance. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</para>
        </returns>
        <param name="months">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of months. The <paramref name="months" /> parameter can be negative or positive. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation.</para>
          <para>The fractional part of <paramref name="value" /> is the fractional part of a second. For example, 4.5 is equivalent to 4 seconds, 500 milliseconds, and 0 ticks.</para>
          <para>The <paramref name="value" /> parameter is rounded to the nearest millisecond.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value)" />
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" /> object. Instead, it returns a new <see cref="T:System.DateTime" /> object whose value is the result of this operation.</para>
          <para>The <see cref="M:System.DateTime.AddYears(System.Int32)" /> method calculates the resulting year taking into account leap years. The month and time-of-day part of the resulting <see cref="T:System.DateTime" /> object remains the same as this instance.</para>
          <para>If the current instance represents the leap day in a leap year, the return value depends on the target date:</para>
          <list type="bullet">
            <item>
              <para>If <paramref name="value" /> + <see cref="P:System.DateTime.Year" /> is also a leap year, the return value represents the leap day in that year. For example, if four years is added to February 29, 2012, the date returned is February 29, 2016. </para>
            </item>
            <item>
              <para>If <paramref name="value" /> + <see cref="P:System.DateTime.Year" /> is not a leap year, the return value represents the day before the leap day in that year. For example, if one year is added to February 29, 2012, the date returned is February 28, 2013. </para>
            </item>
          </list>
          <para>The following example illustrates using the <see cref="M:System.DateTime.AddYears(System.Int32)" /> method with a <see cref="T:System.DateTime" /> value that represents a leap year day. It displays the date for the fifteen years prior to and the fifteen years that follow February 29, 2000. </para>
          <para>code reference: System.DateTime.AddYears#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A number of years. The <paramref name="value" /> parameter can be negative or positive. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2)" />
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Before comparing <see cref="T:System.DateTime" /> objects, ensure that the objects represent times in the same time zone.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Value Type </para>
                </term>
                <description>
                  <para>Condition </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>
                  <paramref name="t1" /> is earlier than <paramref name="t2" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>
                  <paramref name="t1" /> is the same as <paramref name="t2" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>
                  <paramref name="t1" /> is later than <paramref name="t2" />. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="t1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="t2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IComparable`1" /> interface and performs slightly better than the <see cref="M:System.DateTime.CompareTo(System.Object)" /> method overload because it does not have to convert the <paramref name="value" /> parameter to an object.</para>
          <para>Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is earlier than <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is the same as <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is later than <paramref name="value" />. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare to the current instance. </param>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual int32 CompareTo(object value)" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.DateTime" /> and is not a null reference.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> properties.</para>
          <para>Any instance of <see cref="T:System.DateTime" />, regardless of its value, is considered greater than null.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is earlier than <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is the same as <paramref name="value" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is later than <paramref name="value" />, or <paramref name="value" /> is null. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A boxed object to compare, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="ILASM" Value=".property valuetype System.DateTime Date { public hidebysig specialname instance valuetype System.DateTime get_Date() }" />
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A new <see cref="T:System.DateTime" /> instance with the same date as the current instance,
 and the time value set to midnight (00:00:00).</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> value is the same as that of the current instance.</para>
          <para>Because the <see cref="T:System.DateTime" /> type represents both dates and times in a single type, it is important to avoid misinterpreting a date returned by the <see cref="P:System.DateTime.Date" /> property as a date and time. For more information, see "Saving and Restoring DateTime Values" in the <see cref="T:System.DateTime" /> topic.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the date component of this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="ILASM" Value=".property int32 Day { public hidebysig specialname instance int32 get_Day() }" />
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> between 1 and 31 set to the day of the month component of the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.Day" /> property always returns the day of the month in the Gregorian calendar, even if the current <see cref="T:System.DateTime" /> value was instantiated using some other calendar or if the current thread culture's default calendar is not the Gregorian calendar. To retrieve the day of the month of a particular date using some other calendar, call that calendar's <see cref="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)" /> method. The following example uses both the <see cref="P:System.DateTime.Day" /> property and the <see cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" /> method to retrieve the day of the month for a <see cref="T:System.DateTime" /> value that is instantiated using the Hijri calendar.</para>
          <para>code reference: System.DateTime.Day#1</para>
          <para>Similarly, the following example uses both the <see cref="P:System.DateTime.Day" /> property and the <see cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" /> method to retrieve the day of the month when the current thread culture is ar-SA, which uses Hijri as its default calendar.</para>
          <para>code reference: System.DateTime.Day#2</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the day of the month represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the constants in the <see cref="T:System.DayOfWeek" /> enumeration ranges from <see cref="F:System.DayOfWeek.Sunday" /> to <see cref="F:System.DayOfWeek.Saturday" />. If cast to an integer, its value ranges from zero (which indicates <see cref="F:System.DayOfWeek.Sunday" />) to six (which indicates <see cref="F:System.DayOfWeek.Saturday" />).</para>
          <para>The <see cref="P:System.DateTime.DayOfWeek" /> property returns an enumerated constant; it does not reflect a system's regional and language settings. To retrieve a string representing a localized weekday name for a particular date, call one of the overloads of the <see cref="Overload:System.DateTime.ToString" /> method that includes a <paramref name="format" /> parameter and pass it either the ddd or dddd custom format strings. For details, see <format type="text/html"><a href="1c9bef76-5634-46cf-b91c-9b9eb72091d7">How to: Extract the Day of the Week from a Specific Date</a></format>.   </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the day of the week represented by this instance.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="ILASM" Value=".property int32 DayOfYear { public hidebysig specialname instance int32 get_DayOfYear() }" />
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Int32" /> between 1 and 366 set to the day of the year component of the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.DayOfYear" /> property takes leap years into account when it calculates the day of the year. The property value always reflects the day of the year in the Gregorian calendar, regardless of the current thread culture's current calendar. To retrieve the day of the year in a different calendar, call the <see cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" /> method of that calendar. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the day of the year represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 DaysInMonth(int32 year, int32 month)" />
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 12.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" /> method always interprets <paramref name="month" /> and <paramref name="year" /> as the month and year of the Gregorian calendar even if the Gregorian calendar is not the current culture's current calendar. To get the number of days in a specified month of a particular calendar, call that calendar's <see cref="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the number of days in the specified month and year.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.</para>
          <para>For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</para>
        </returns>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />The year. </param>
        <param name="month">
          <attribution license="cc4" from="Microsoft" modified="false" />The month (a number ranging from 1 to 12). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current instance and <paramref name="value" /> are equal if their <see cref="P:System.DateTime.Ticks" /> property values are equal. Their <see cref="P:System.DateTime.Kind" /> property values are not considered in the test for equality. </para>
          <para>This method implements the <see cref="T:System.IEquatable`1" /> interface, and performs slightly better than the <see cref="M:System.DateTime.Equals(System.Object)" /> method because the <paramref name="value" /> parameter does not have to be converted to an object. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare to this instance. </param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool Equals(object value)" />
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current instance and <paramref name="value" /> are equal if their <see cref="P:System.DateTime.Ticks" /> property values are equal. Their <see cref="P:System.DateTime.Kind" /> property values are not considered in the test for equality.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance is equal to a specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, false.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to compare to this instance. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2)" />
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <paramref name="t1" /> and <paramref name="t2" /> are equal if their <see cref="P:System.DateTime.Ticks" /> property values are equal. Their <see cref="P:System.DateTime.Kind" /> property values are not considered in the test for equality.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the two values are equal; otherwise, false.</para>
        </returns>
        <param name="t1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="t2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.DateTime.ToBinary" /> method to convert the value of the current <see cref="T:System.DateTime" /> object to a binary value. Subsequently, use the binary value and the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method to recreate the original <see cref="T:System.DateTime" /> object.</para>
          <block subset="none" type="note">
            <para>In some cases, the <see cref="T:System.DateTime" /> value returned by the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method is not identical to the original <see cref="T:System.DateTime" /> value supplied to the <see cref="M:System.DateTime.ToBinary" /> method. For more information, see the next section, "Local Time Adjustment". </para>
          </block>
          <format type="text/html">
            <h2>Local Time Adjustment</h2>
          </format>
          <para>A local time, which is a Coordinated Universal Time adjusted to the local time zone, is represented by a <see cref="T:System.DateTime" /> structure whose <see cref="P:System.DateTime.Kind" /> property has the value <see cref="F:System.DateTimeKind.Local" />. When restoring a local <see cref="T:System.DateTime" /> value from the binary representation that is produced by the <see cref="M:System.DateTime.ToBinary" /> method, the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method may adjust the recreated value so that it is not equal to the original value. This can occur under the following conditions:</para>
          <list type="bullet">
            <item>
              <para>If a local <see cref="T:System.DateTime" /> object is serialized in one time zone by the <see cref="M:System.DateTime.ToBinary" /> method, and then deserialized in a different time zone by the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method, the local time represented by the resulting <see cref="T:System.DateTime" /> object is automatically adjusted to the second time zone.</para>
              <para>For example, consider a <see cref="T:System.DateTime" /> object that represents a local time of 3 P.M. An application that is executing in the U.S. Pacific Time zone uses the <see cref="M:System.DateTime.ToBinary" /> method to convert that <see cref="T:System.DateTime" /> object to a binary value. Another application that is executing in the U.S. Eastern Time zone then uses the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method to convert the binary value to a new <see cref="T:System.DateTime" /> object. The value of the new <see cref="T:System.DateTime" /> object is 6 P.M., which represents the same point in time as the original 3 P.M. value, but is adjusted to local time in the Eastern Time zone. </para>
            </item>
            <item>
              <para>If the binary representation of a local <see cref="T:System.DateTime" /> value represents an invalid time in the local time zone of the system on which <see cref="M:System.DateTime.FromBinary(System.Int64)" /> is called, the time is adjusted so that it is valid.</para>
              <para>For example, the transition from standard time to daylight saving time occurs in the Pacific Time zone of the United States on March 14, 2010, at 2:00 A.M., when the time advances by one hour, to 3:00 A.M. This hour interval is an invalid time, that is, a time interval that does not exist in this time zone. The following example shows that when a time that falls within this range is converted to a binary value by the <see cref="M:System.DateTime.ToBinary" /> method and is then restored by the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method, the original value is adjusted to become a valid time. You can determine whether a particular date and time value may be subject to modification by passing it to the <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> method, as the example illustrates. </para>
              <para>code reference: System.DateTime.FromBinary#1</para>
            </item>
          </list>
          <format type="text/html">
            <h2>Version Considerations</h2>
          </format>
          <para>Starting with the .NET Framework version 2.0, a <see cref="T:System.DateTime" /> structure consists of a private Kind field, which indicates whether the specified time is local time, Coordinated Universal Time (UTC), or neither, concatenated to a private Ticks field, which contains the number of 100-nanosecond ticks that specify a date and time. The number of ticks can be accessed with the <see cref="P:System.DateTime.Ticks" /> property and the Kind field can be accessed with the <see cref="P:System.DateTime.Kind" /> property. </para>
          <para>Prior to the .NET Framework 2.0, if you serialized a <see cref="T:System.DateTime" /> object manually instead of using a serialization interface such as <see cref="T:System.Runtime.Serialization.ISerializable" />, you needed to serialize only the Ticks data in the <see cref="T:System.DateTime" />. Starting with the .NET Framework 2.0, you must also serialize the Kind data. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</para>
        </returns>
        <param name="dateData">
          <attribution license="cc4" from="Microsoft" modified="false" />A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field. </param>
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file. </para>
          <para>The <paramref name="fileTime" /> parameter specifies a file time expressed in 100-nanosecond ticks.</para>
          <para>Starting with the .NET Framework version 2.0, the return value is a <see cref="T:System.DateTime" /> whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified Windows file time to an equivalent local time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</para>
        </returns>
        <param name="fileTime">
          <attribution license="cc4" from="Microsoft" modified="false" />A Windows file time expressed in ticks. </param>
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file. </para>
          <para>The <paramref name="fileTime" /> parameter specifies a file time expressed in 100-nanosecond ticks.</para>
          <para>Starting with the .NET Framework version 2.0, the return value is a <see cref="T:System.DateTime" /> whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified Windows file time to an equivalent UTC time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</para>
        </returns>
        <param name="fileTime">
          <attribution license="cc4" from="Microsoft" modified="false" />A Windows file time expressed in ticks. </param>
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="d" /> parameter is a double-precision floating-point number that represents a date as the number of days before or after the base date, midnight, 30 December 1899. The sign and integral part of <paramref name="d" /> encode the date as a positive or negative day displacement from 30 December 1899, and the absolute value of the fractional part of <paramref name="d" /> encodes the time of day as a fraction of a day displacement from midnight. <paramref name="d" /> must be a value between negative 657435.0 through positive 2958465.99999999.</para>
          <para>Note that because of the way dates are encoded, there are two ways of representing any time of day on 30 December 1899. For example, -0.5 and 0.5 both mean noon on 30 December 1899 because a day displacement of plus or minus zero days from the base date is still the base date, and a half day displacement from midnight is noon.</para>
          <para>See <see cref="M:System.DateTime.ToOADate" /> and the MSDN Online Library at http://MSDN.Microsoft.com/library/default.asp for more information on OLE Automation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that represents the same date and time as <paramref name="d" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />An OLE Automation Date value. </param>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string array returned by the <see cref="M:System.DateTime.GetDateTimeFormats" /> method is equivalent to combining the string arrays returned by separate calls to the <see cref="M:System.DateTime.GetDateTimeFormats(System.Char)" /> method with the "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U", and "y" standard format strings. For more information about standard format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>.</para>
          <para>Each element of the return value is formatted using information from the current culture. For more information about culture-specific formatting information for the current culture, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</para>
          <block subset="none" type="note">
            <para>Because this method uses culture-sensitive data, you should not assume that multiple calls to the method will return identical data. The data returned by this method can change if the current culture changes, the user overrides individual cultural settings, or an update occurs to the system's cultural data. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="format" /> parameter can be any of the standard date and time format specifiers. These include d, D, f, F, g, G, M (or m), O (or o), R (or r), s, t, T, u, U, and Y (or y). For more information, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>.</para>
          <para>Each element of the return value is formatted using information from the current culture. For more information about culture-specific formatting information for the current culture, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</para>
          <block subset="none" type="note">
            <para>Because this method uses culture-sensitive data, you should not assume that multiple calls to the method will return identical data. The data returned by this method can change if the current culture changes, the user overrides individual cultural settings, or an update occurs to the system's cultural data. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A standard date and time format string (see Remarks). </param>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string array returned by the <see cref="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" /> method is equivalent to combining the string arrays returned by separate calls to the <see cref="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" /> method with the "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U", and "y" standard format strings. For more information about standard format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>.</para>
          <para>Each element of the return value is formatted using culture-specific information supplied by <paramref name="provider" />.</para>
          <block subset="none" type="note">
            <para>Because this method uses culture-sensitive data, you should not assume that multiple calls to the method will return identical data unless <paramref name="provider" /> is a <see cref="T:System.Globalization.CultureInfo" /> object that represents the invariant culture. The data returned by this method can change if the user overrides the individual cultural settings of <paramref name="provider" /> or if an update occurs to the system's cultural data for <paramref name="provider" />. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about this instance. </param>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The format parameter can be any of the standard date and time format specifiers. These include d, D, f, F, g, G, M (or m), O (or o), R (or r), s, t, T, u, U, and Y (or y). For more information, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>.</para>
          <para>Each element of the return value is formatted using culture-specific information supplied by <paramref name="provider" />.</para>
          <block subset="none" type="note">
            <para>Because this method uses culture-sensitive data, you should not assume that multiple calls to the method will return identical data unless <paramref name="provider" /> is a <see cref="T:System.Globalization.CultureInfo" /> object that represents the invariant culture. The data returned by this method can change if the user overrides the individual cultural settings of <paramref name="provider" /> or if an update occurs to the system's cultural data for <paramref name="provider" />. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time format string (see Remarks). </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about this instance. </param>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual int32 GetHashCode()" />
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para> The algorithm used to
      generate the hash code is unspecified.</para>
          <para>
            <block subset="none" type="note"> This method
      overrides <see cref="M:System.Object.GetHashCode" />.</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer hash code.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="ILASM" Value=".property int32 Hour { public hidebysig specialname instance int32 get_Hour() }" />
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Int32" /> between 0 and 23 set to the hour component
   of the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the <see cref="P:System.DateTime.Hour" /> property is always expressed using a 24-hour clock. To retrieve a string that represents the hour of a date and time using a 12-hour clock, call the <see cref="M:System.DateTime.ToString(System.String)" /> or <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method with the "h" custom format specifier. For example:</para>
          <para>code reference: System.DateTime.Hour#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the hour component of the date represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method determines whether the current <see cref="T:System.DateTime" /> value falls within the daylight saving time range of the local time zone, which is returned by the <see cref="P:System.TimeZoneInfo.Local" /> property. You can determine whether a time zone supports daylight saving time by retrieving the value of its <see cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" /> property. For time zones that observe daylight saving time, you can determine when the transition to and from daylight saving time occurs by retrieving the <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> array returned by the time zone's <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> property.</para>
          <para>If the current <see cref="T:System.DateTime" /> value represents either an ambiguous or an invalid time in the local time zone, the method returns false. </para>
          <para>On winxp systems, the <see cref="M:System.DateTime.IsDaylightSavingTime" /> method recognizes only the current adjustment rule when determining whether the current instance is a daylight saving time. As a result, the method may not accurately report whether the current instance is a daylight saving time for periods before the current adjustment rule came into effect.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; false if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsLeapYear(int32 year)" />
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <paramref name="year" /> is specified as a 4-digit base 10 number; for example, 1996.</para>
          <para>
            <paramref name="year" /> is always interpreted as a year in the Gregorian calendar. To determine whether a particular year was a leap year in some other calendar, call that calendar object's IsLeapYear method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an indication whether the specified year is a leap year.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="year" /> is a leap year; otherwise, false.</para>
        </returns>
        <param name="year">
          <attribution license="cc4" from="Microsoft" modified="false" />A 4-digit year. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can explicitly set the <see cref="P:System.DateTime.Kind" /> property of a new <see cref="T:System.DateTime" /> value to a particular <see cref="T:System.DateTimeKind" /> value by calling the <see cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" /> method. </para>
          <para>The <see cref="P:System.DateTime.Kind" /> property allows a <see cref="T:System.DateTime" /> value to clearly reflect either Coordinated Universal Time (UTC) or the local time. In contrast, the <see cref="T:System.DateTimeOffset" /> structure can unambiguously reflect any time in any time zone as a single point in time.   </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="ILASM" Value=".field public static initOnly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>12/31/9999 11:59:59 PM</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is equivalent to 23:59:59.9999999, December 31, 9999, exactly one 100-nanosecond tick before 00:00:00, January 1, 10000.</para>
          <para>Some calendars, such as the <see cref="T:System.Globalization.UmAlQuraCalendar" />, support an upper date range that is earlier than <see cref="F:System.DateTime.MaxValue" />. In these cases, trying to access <see cref="F:System.DateTime.MaxValue" /> in variable assignments or formatting and parsing operations can throw an <see cref="T:System.ArgumentOutOfRangeException" />. Rather than retrieving the value of <see cref="F:System.DateTime.MaxValue" />, you can retrieve the value of the specified culture's latest valid date value from the System.Globalization.CultureInfo.DateTimeFormat.Calendar.MaxSupportedDateTime property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="ILASM" Value=".property int32 Millisecond { public hidebysig specialname instance int32 get_Millisecond() }" />
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para> A <see cref="T:System.Int32" /> between 0 and 999 set to the milliseconds component of
   the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can display the string representation of the <see cref="P:System.DateTime.Millisecond" /> property by using the "fff" format specifier. For example, the following code displays a string that contains the number of milliseconds in a date and time to the console.</para>
          <para>code reference: System.DateTime.Millisecond#1</para>
          <para>You can also display the millisecond component together with the other components of a date and time value by using the "o" standard format specifier. For example:</para>
          <para>code reference: System.DateTime.Millisecond#2</para>
          <para>However, the "o" format specifier is intended less for displaying than for round-tripping or storing a <see cref="T:System.DateTime" /> value. You can also display milliseconds together with other date and time components by using a custom format string, as the following example shows.</para>
          <para>code reference: System.DateTime.Millisecond#3</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the milliseconds component of the date represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="ILASM" Value=".property int32 Minute { public hidebysig specialname instance int32 get_Minute() }" />
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> between 0 and 59 set to the minute component of the
   current instance.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the minute component of the date represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="ILASM" Value=".field public static initOnly valuetype System.DateTime MinValue" />
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>1/1/0001 12:00:00 AM</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is equivalent to 00:00:00.0000000, January 1, 0001.</para>
          <para>
            <see cref="F:System.DateTime.MinValue" /> defines the date and time that is assigned to an uninitialized <see cref="T:System.DateTime" /> variable. The following example illustrates this.</para>
          <para>code reference: System.DateTime.MinValue#1</para>
          <para>The <see cref="F:System.DateTime.MinValue" /> and <see cref="F:System.DateTime.MaxValue" /> properties can be used to ensure that a value lies within the supported range before passing it to a <see cref="T:System.DateTime" /> constructor. The code in the Example section illustrates this usage.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="ILASM" Value=".property int32 Month { public hidebysig specialname instance int32 get_Month() }" />
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> between 1 and 12 set to the month component of the
   current instance.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the month component of the date represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="ILASM" Value=".property valuetype System.DateTime Now { public hidebysig static specialname valuetype System.DateTime get_Now() }" />
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The resolution of this property depends on the system timer.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>System </para>
                </term>
                <description>
                  <para>Approximate Resolution </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Windows NT 3.5 and later </para>
              </term>
              <description>
                <para>10 milliseconds </para>
              </description>
            </item>
            <item>
              <term>
                <para>Windows 98 </para>
              </term>
              <description>
                <para>55 milliseconds </para>
              </description>
            </item>
          </list>
          <para>The <see cref="P:System.DateTime.Now" /> property is frequently used to measure performance. However, because of its low resolution, it is not suitable for use as a benchmarking tool. A better alternative is to use the <see cref="T:System.Diagnostics.Stopwatch" /> class.</para>
          <para>Starting with the .NET Framework version 2.0, the return value is a <see cref="T:System.DateTime" /> whose <see cref="P:System.DateTime.Kind" /> property returns <see cref="F:System.DateTimeKind.Local" />.</para>
          <block subset="none" type="note">
            <para>You can also use the <see cref="P:System.DateTimeOffset.Now" /> property to retrieve the current local date and time. It allows a local time to be expressed unambiguously as a single point in time, which in turn makes that time value portable across computers. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t)" />
      <MemberSignature Language="C#" Value="public static DateTime op_Addition (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <remarks>
          <para>The returned value is equivalent to
   <see langword="DateTime" />( <paramref name="d" />.Ticks + <paramref name="t" />.Ticks ).</para>
        </remarks>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting date and time is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a specified time interval to a specified date and time, yielding a new date and time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The date and time value to add. </param>
        <param name="t">
          <attribution license="cc4" from="Microsoft" modified="false" />The time interval to add. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2)" />
      <MemberSignature Language="C#" Value="public static bool op_Equality (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" /> operator determines whether two <see cref="T:System.DateTime" /> values are equal by comparing their number of ticks. Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2)" />
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" /> operator determines the relationship between two <see cref="T:System.DateTime" /> values by comparing their number of ticks. Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, false.</para>
        </returns>
        <param name="t1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="t2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2)" />
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" /> operator determines the relationship between two <see cref="T:System.DateTime" /> values by comparing their number of ticks. Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, false.</para>
        </returns>
        <param name="t1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="t2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2)" />
      <MemberSignature Language="C#" Value="public static bool op_Inequality (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" /> operator determines whether two <see cref="T:System.DateTime" /> values are not equal by comparing their number of ticks. Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, false.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2)" />
      <MemberSignature Language="C#" Value="public static bool op_LessThan (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" /> operator determines the relationship between two <see cref="T:System.DateTime" /> values by comparing their number of ticks. Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, false.</para>
        </returns>
        <param name="t1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="t2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2)" />
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" /> operator determines the relationship between two <see cref="T:System.DateTime" /> values by comparing their number of ticks. Before comparing <see cref="T:System.DateTime" /> objects, make sure that the objects represent times in the same time zone. You can do this by comparing the values of their <see cref="P:System.DateTime.Kind" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, false.</para>
        </returns>
        <param name="t1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to compare. </param>
        <param name="t2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to compare. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2)" />
      <MemberSignature Language="C#" Value="public static TimeSpan op_Subtraction (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting date and time is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" /> method does not consider the value of the <see cref="P:System.DateTime.Kind" /> property of the two <see cref="T:System.DateTime" /> values when performing the subtraction. Before subtracting <see cref="T:System.DateTime" /> objects, ensure that the objects represent times in the same time zone. Otherwise, the result will include the difference between time zones.</para>
          <block subset="none" type="note">
            <para>The <see cref="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" /> method does consider the difference between time zones when performing the subtraction.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts a specified date and time from another specified date and time and returns a time interval.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</para>
        </returns>
        <param name="d1">
          <attribution license="cc4" from="Microsoft" modified="false" />The date and time value to subtract from (the minuend). </param>
        <param name="d2">
          <attribution license="cc4" from="Microsoft" modified="false" />The date and time value to subtract (the subtrahend). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t)" />
      <MemberSignature Language="C#" Value="public static DateTime op_Subtraction (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting date and time is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method subtracts the ticks value of <paramref name="t" /> from the ticks value of <paramref name="d" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts a specified time interval from a specified date and time and returns a new date and time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />The date and time value to subtract from. </param>
        <param name="t">
          <attribution license="cc4" from="Microsoft" modified="false" />The time interval to subtract. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime Parse(string s)" />
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a time or date and time.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Parse method, see the <see cref="Overload:System.DateTime.Parse" /> overload summary. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time contained in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime Parse(string s, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a time or date and time.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Parse method, see the <see cref="Overload:System.DateTime.Parse" /> overload summary. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific format information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles)" />
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a time or date and time.</exception>
        <param name="styles">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>For examples and comprehensive usage information about this and other overloads of the Parse method, see the <see cref="Overload:System.DateTime.Parse" /> overload summary. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and formatting style.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
        <param name="styles">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />or <paramref name="format" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="s" /> or <paramref name="format" /> is an empty string.</para>
          <para> -or-</para>
          <para>
            <paramref name="s" /> does not contain a date and time that were recognized as the pattern specified in <paramref name="format" /> . </para>
        </exception>
        <example>
          <para>This example demonstrates the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> method.</para>
          <code lang="C#">using System;
using System.Globalization;

public class DateTimeTest {
 public static void Main() {
     DateTimeFormatInfo dtfi = new DateTimeFormatInfo();

     DateTime dt = DateTime.ParseExact("January 22", dtfi.MonthDayPattern, null);
     Console.WriteLine(dt);
 }
}
   </code>
          <para>The output is</para>
          <para>
            <c>1/22/2001
      12:00:00 AM</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> method parses the string representation of a date, which must be in the format defined by the <paramref name="format" /> parameter. It also requires that the &lt;Date&gt; and &lt;Time&gt; elements of the string representation of a date and time appear in the order specified by <paramref name="format" />, and that <paramref name="s" /> have no white space other than that permitted by <paramref name="format" />. If <paramref name="format" /> defines a date with no time element and the parse operation succeeds, the resulting <see cref="T:System.DateTime" /> value has a time of midnight (00:00:00). If <paramref name="format" /> defines a time with no date element and the parse operation succeeds, the resulting <see cref="T:System.DateTime" /> value has a date of DateTime.Now.Date.</para>
          <para>If <paramref name="s" /> does not represent a time in a particular time zone and the parse operation succeeds, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> value is <see cref="F:System.DateTimeKind.Unspecified" />. If <paramref name="s" /> does represent the time in a particular time zone and <paramref name="format" /> allows time zone information to be present (for example, if <paramref name="format" /> is equal to the "o", "r", or "u" standard format specifiers, or if it contains the "z", "zz", or "zzz" custom format specifiers), the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> value is <see cref="F:System.DateTimeKind.Local" />. </para>
          <para>The <paramref name="format" /> parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of <paramref name="s" />. For details about valid formatting codes, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> or <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
          <block subset="none" type="note">
            <para>If <paramref name="format" /> is a custom format pattern that does not include date or time separators (such as "yyyyMMdd HHmm"), use the invariant culture for the <paramref name="provider" /> parameter and the widest form of each custom format specifier. For example, if you want to specify hours in the format pattern, specify the wider form, "HH", instead of the narrower form, "H".</para>
          </block>
          <para>The particular date and time symbols and strings (such as names of the days of the week in a particular language) used in <paramref name="s" /> are defined by the <paramref name="provider" /> parameter, as is the precise format of <paramref name="s" /> if <paramref name="format" /> is a standard format specifier string. The <paramref name="provider" /> parameter can be any of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used to interpret <paramref name="s" />. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the symbols and formatting in <paramref name="s" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
            <item>
              <para>A custom <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns either the <see cref="T:System.Globalization.CultureInfo" /> object or the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that provides formatting information. </para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific format information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />or <paramref name="format" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="s" /> or format is an empty string.</para>
          <para> -or-</para>
          <para>
            <paramref name="s" /> does not contain a date and time that were recognized as one of the patterns specified in <paramref name="format." /></para>
        </exception>
        <example>
          <para>This example demonstrates the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> method.</para>
          <code lang="C#">using System;
using System.Globalization;

public class DateTimeTest {
 public static void Main() {
     DateTimeFormatInfo dtfi = new DateTimeFormatInfo();

     DateTime dt = DateTime.ParseExact(" January 22 ", dtfi.MonthDayPattern, null, DateTimeStyles.AllowWhiteSpaces);
     Console.WriteLine(dt);
 }
}
   </code>
          <para>The output is</para>
          <c>
            <para>1/22/2001
         12:00:00 AM</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method parses the string representation of a date, which must be in a format defined by the <paramref name="format" /> parameter. It also requires that the date and time elements in <paramref name="s" /> appear in the order specified by <paramref name="format" />. If <paramref name="s" /> does not match the pattern of the <paramref name="format" /> parameter, with any variations defined by the <paramref name="style" /> parameter, the method throws a <see cref="T:System.FormatException" />. In contrast, the <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method parses the string representation of a date in any one of the formats recognized by the format provider's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. The <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method also allows the date and time elements in <paramref name="s" /> to appear in any order.</para>
          <para>If the <paramref name="s" /> parameter contains only a time and no date, the current date is used unless the <paramref name="style" /> parameter includes the <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> flag, in which case the default date (DateTime.Date.MinValue) is used. If the <paramref name="s" /> parameter contains only a date and no time, midnight (00:00:00) is used. The <paramref name="style" /> parameter also determines whether the <paramref name="s" /> parameter can contain leading, inner, or trailing white space characters.</para>
          <para>If <paramref name="s" /> contains no time zone information, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is <see cref="F:System.DateTimeKind.Unspecified" />. This behavior can be changed by using the <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> flag, which returns a <see cref="T:System.DateTime" /> value whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, or by using the <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> and <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> flags, which returns a <see cref="T:System.DateTime" /> value whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />. If <paramref name="s" /> contains time zone information, the time is converted to local time, if necessary, and the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is set to <see cref="F:System.DateTimeKind.Local" />. This behavior can be changed by using the <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> flag to not convert Coordinated Universal Time (UTC) to a local time and to set the <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Utc" />. </para>
          <para>The <paramref name="format" /> parameter defines the required pattern of the <paramref name="s" /> parameter. It can consist of either one or more custom format specifiers from the <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format> table, or a single standard format specifier, which identifies a predefined pattern, from the <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> table. </para>
          <para>If you do not use date or time separators in a custom format pattern, use the invariant culture for the <paramref name="provider" /> parameter and the widest form of each custom format specifier. For example, if you want to specify hours in the pattern, specify the wider form, "HH", instead of the narrower form, "H".</para>
          <block subset="none" type="note">
            <para>Rather than requiring that <paramref name="s" /> conform to a single format for the parse operation to succeed, you can call the <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method and specify multiple permitted formats. This makes the parse operation more likely to succeed.</para>
          </block>
          <para>The <paramref name="styles" /> parameter includes one or more members of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration that determine whether and where white space not defined by <paramref name="format" /> can appear in <paramref name="s" /> and that control the precise behavior of the parse operation. The following table describes how each member of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration affects the operation of the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>DateTimeStyles member</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" />
                </para>
              </term>
              <description>
                <para>Parses <paramref name="s" /> and, if necessary, converts it to UTC. If <paramref name="s" /> includes a time zone offset, or if <paramref name="s" /> contains no time zone information but <paramref name="styles" /> includes the <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> flag, the method parses the string, calls <see cref="M:System.DateTime.ToUniversalTime" /> to convert the returned <see cref="T:System.DateTime" /> value to UTC, and sets the <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Utc" />. If <paramref name="s" /> indicates that it represents UTC, or if <paramref name="s" /> does not contain time zone information but <paramref name="styles" /> includes the <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> flag, the method parses the string, performs no time zone conversion on the returned <see cref="T:System.DateTime" /> value, and sets the <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Utc" />. In all other cases, the flag has no effect.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />
                </para>
              </term>
              <description>
                <para>Specifies that white space not defined by <paramref name="format" /> can appear between any individual date or time element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>Specifies that white space not defined by <paramref name="format" /> can appear at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>Specifies that white space not defined by <paramref name="format" /> can appear at the end of <paramref name="s" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />
                </para>
              </term>
              <description>
                <para>Specifies that <paramref name="s" /> may contain leading, inner, and trailing white spaces not defined by <paramref name="format" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />
                </para>
              </term>
              <description>
                <para>Specifies that if <paramref name="s" /> lacks any time zone information, it is assumed to represent a local time. Unless the <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> flag is present, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> value is set to <see cref="F:System.DateTimeKind.Local" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />
                </para>
              </term>
              <description>
                <para>Specifies that if <paramref name="s" /> lacks any time zone information, it is assumed to represent UTC. Unless the <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> flag is present, the method converts the returned <see cref="T:System.DateTime" /> value from UTC to local time and sets its <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Local" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />
                </para>
              </term>
              <description>
                <para>If <paramref name="s" /> contains time without date information, the date of the return value is set to DateTime.MinValue.Date.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.None" />
                </para>
              </term>
              <description>
                <para>The <paramref name="s" /> parameter is parsed using default values. No white space other than that present in <paramref name="format" /> is allowed. If <paramref name="s" /> lacks a date component, the date of the returned <see cref="T:System.DateTime" /> value is set to 1/1/0001. If <paramref name="s" /> contains no time zone information, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is set to <see cref="F:System.DateTimeKind.Unspecified" />. If time zone information is present in <paramref name="s" />, the time is converted to local time and the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is set to <see cref="F:System.DateTimeKind.Local" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />
                </para>
              </term>
              <description>
                <para>For strings that contain time zone information, tries to prevent the conversion to a <see cref="T:System.DateTime" /> value date and time with its <see cref="P:System.DateTime.Kind" /> property set to <see cref="F:System.DateTimeKind.Local" />. This flag primarily prevents the conversion of UTC times to local times.</para>
              </description>
            </item>
          </list>
          <para>The particular date and time symbols and strings (such as the names of the days of the week in a particular language) used in <paramref name="s" /> are defined by the <paramref name="provider" /> parameter, as is the precise format of <paramref name="s" /> if <paramref name="format" /> is a standard format specifier string. The <paramref name="provider" /> parameter can be any of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used to interpret <paramref name="s" />. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the symbols and formatting in <paramref name="s" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
            <item>
              <para>A custom <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns either the <see cref="T:System.Globalization.CultureInfo" /> object or the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that provides formatting information. </para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string containing a date and time to convert. </param>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static valuetype System.DateTime ParseExact(string s, class System.String[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s " />or <paramref name="formats" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="s" /> or <paramref name="format" /> is an empty string.</para>
          <para> -or-</para>
          <para>
            <paramref name="s" /> does not contain a date and time that were recognized as the pattern specified in <paramref name="format" /></para>
        </exception>
        <example>
          <para>This example demonstrates the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> method.</para>
          <code lang="C#">using System;
using System.Globalization;

public class DateTimeTest {
 public static void Main() {
     DateTimeFormatInfo dtfi = new DateTimeFormatInfo();
     string [] patterns = {dtfi.LongTimePattern, dtfi.ShortTimePattern}; 

     DateTime dt = DateTime.ParseExact("10:11:12", patterns, null, DateTimeStyles.NoCurrentDateDefault);
     Console.WriteLine(dt);
 }
}
   </code>
          <para>The output is</para>
          <para>
            <c>1/1/0001
      10:11:12 AM</c>
          </para>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method parses the string representation of a date that matches any one of the patterns assigned to the <paramref name="formats" /> parameter. If the string <paramref name="s" /> does not match any one of these patterns with any of the variations defined by the <paramref name="styles" /> parameter, the method throws a <see cref="T:System.FormatException" />. Aside from comparing <paramref name="s" /> to multiple formatting patterns, rather than to a single formatting pattern, this overload behaves identically to the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method.</para>
          <para>The <paramref name="s" /> parameter contains the date and time to parse. If the <paramref name="s" /> parameter contains only a time and no date, the current date is used unless the <paramref name="style" /> parameter includes the <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> flag, in which case the default date (DateTime.Date.MinValue) is used. If the <paramref name="s" /> parameter contains only a date and no time, midnight (00:00:00) is used. The <paramref name="style" /> parameter also determines whether the <paramref name="s" /> parameter can contain leading, inner, or trailing white space characters other than those permitted by one of the format strings in <paramref name="formats" />.</para>
          <para>If <paramref name="s" /> contains no time zone information, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is <see cref="F:System.DateTimeKind.Unspecified" />. This behavior can be changed by using the <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> flag, which returns a <see cref="T:System.DateTime" /> value whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, or by using the <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> and <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> flags, which returns a <see cref="T:System.DateTime" /> value whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />. If <paramref name="s" /> contains time zone information, the time is converted to local time, if necessary, and the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is set to <see cref="F:System.DateTimeKind.Local" />. This behavior can be changed by using the <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> flag to not convert Coordinated Universal Time (UTC) to a local time and set the <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Utc" />. </para>
          <para>The <paramref name="formats" /> parameter contains an array of patterns, one of which <paramref name="s" /> must match exactly if the parse operation is to succeed. The patterns in the <paramref name="formats" /> parameter consists of one or more custom format specifiers from the <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format> table, or a single standard format specifier, which identifies a predefined pattern, from the <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> table. </para>
          <para>If you do not use date or time separators in a custom format pattern, use the invariant culture for the <paramref name="provider" /> parameter and the widest form of each custom format specifier. For example, if you want to specify hours in the pattern, specify the wider form, "HH", instead of the narrower form, "H".</para>
          <para>The <paramref name="styles" /> parameter includes one or more members of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration that determine whether and where white space not defined by <paramref name="format" /> can appear in <paramref name="s" /> and that control the precise behavior of the parse operation. The following table describes how each member of the <see cref="T:System.Globalization.DateTimeStyles" /> enumeration affects the operation of the <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" /> method.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>DateTimeStyles member</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" />
                </para>
              </term>
              <description>
                <para>Parses <paramref name="s" /> and, if necessary, converts it to UTC. If <paramref name="s" /> includes a time zone offset, or if <paramref name="s" /> contains no time zone information but <paramref name="styles" /> includes the <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> flag, the method parses the string, calls <see cref="M:System.DateTime.ToUniversalTime" /> to convert the returned <see cref="T:System.DateTime" /> value to UTC, and sets the <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Utc" />. If <paramref name="s" /> indicates that it represents UTC, or if <paramref name="s" /> does not contain time zone information but <paramref name="styles" /> includes the <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> flag, the method parses the string, performs no time zone conversion on the returned <see cref="T:System.DateTime" /> value, and sets the <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Utc" />. In all other cases, the flag has no effect.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />
                </para>
              </term>
              <description>
                <para>Specifies that white space not defined by <paramref name="format" /> can appear between any individual date or time element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>Specifies that white space not defined by <paramref name="format" /> can appear at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>Specifies that white space not defined by <paramref name="format" /> can appear at the end of <paramref name="s" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces" />
                </para>
              </term>
              <description>
                <para>Specifies that <paramref name="s" /> may contain leading, inner, and trailing white spaces not defined by <paramref name="format" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />
                </para>
              </term>
              <description>
                <para>Specifies that if <paramref name="s" /> lacks any time zone information, it is assumed to represent a local time. Unless the <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> flag is present, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> value is set to <see cref="F:System.DateTimeKind.Local" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />
                </para>
              </term>
              <description>
                <para>Specifies that if <paramref name="s" /> lacks any time zone information, it is assumed to represent UTC. Unless the <see cref="F:System.Globalization.DateTimeStyles.AdjustToUniversal" /> flag is present, the method converts the returned <see cref="T:System.DateTime" /> value from UTC to local time and sets its <see cref="P:System.DateTime.Kind" /> property to <see cref="F:System.DateTimeKind.Local" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />
                </para>
              </term>
              <description>
                <para>If <paramref name="s" /> contains time without date information, the date of the return value is set to DateTime.MinValue.Date.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.None" />
                </para>
              </term>
              <description>
                <para>The <paramref name="s" /> parameter is parsed using default values. No white space other than that present in <paramref name="format" /> is allowed. If <paramref name="s" /> lacks a date component, the date of the returned <see cref="T:System.DateTime" /> value is set to 1/1/0001. If <paramref name="s" /> contains no time zone information, the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is set to <see cref="F:System.DateTimeKind.Unspecified" />. If time zone information is present in <paramref name="s" />, the time is converted to local time and the <see cref="P:System.DateTime.Kind" /> property of the returned <see cref="T:System.DateTime" /> object is set to <see cref="F:System.DateTimeKind.Local" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />
                </para>
              </term>
              <description>
                <para>For strings that contain time zone information, tries to prevent the conversion to a date and time with its <see cref="P:System.DateTime.Kind" /> property set to <see cref="F:System.DateTimeKind.Local" />. This flag primarily prevents the conversion of UTC times to local times.</para>
              </description>
            </item>
          </list>
          <para>The particular date and time symbols and strings (such as the names of the days of the week in a particular language) used in <paramref name="s" /> are defined by the <paramref name="provider" /> parameter, as is the precise format of <paramref name="s" /> if <paramref name="format" /> is a standard format specifier string. The <paramref name="provider" /> parameter can be any of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used to interpret <paramref name="s" />. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by its <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the symbols and formatting in <paramref name="s" />.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
            <item>
              <para>A custom <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns either the <see cref="T:System.Globalization.CultureInfo" /> object or the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that provides formatting information. </para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> object that corresponds to the current culture is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a date and time to convert. </param>
        <param name="formats">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of allowable formats of <paramref name="s" />. For more information, see the Remarks section. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific format information about <paramref name="s" />. </param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="ILASM" Value=".property int32 Second { public hidebysig specialname instance int32 get_Second() }" />
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> between 0 and 59 set to the seconds component of the current instance.</para>
        </value>
        <remarks>
          <para>This property is read-only.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the seconds component of the date represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.DateTime" /> object consists of a Kind field that indicates whether the time value is based on local time, Coordinated Universal Time (UTC), or neither, and a Ticks field that contains a time value measured in 100-nanosecond ticks. The <see cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" /> method creates a new <see cref="T:System.DateTime" /> object using the specified <paramref name="kind" /> parameter and the original time value.</para>
          <block subset="none" type="note">
            <para>The returned <see cref="T:System.DateTime" /> value does not represent the same instant in time as the <paramref name="value" /> parameter, and <see cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" /> is not a time zone conversion method. Instead, it leaves the time specified by the <paramref name="value" /> parameter unchanged, and sets the <see cref="P:System.DateTime.Kind" /> property to <paramref name="kind" />. For information about time zone conversions, see <format type="text/html"><a href="a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Converting Times Between Time Zones</a></format>.</para>
          </block>
          <para>The <see cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" /> method is useful in interoperability scenarios where you receive a <see cref="T:System.DateTime" /> object with an unspecified Kind field, but you can determine by independent means that the Ticks field represents local time or UTC.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter. </para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A date and time. </param>
        <param name="kind">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value)" />
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the date and time of the current instance is earlier than <paramref name="value" />, the method returns a <see cref="T:System.TimeSpan" /> object that represents a negative time span. That is, the value of all of its non-zero properties (such as <see cref="P:System.TimeSpan.Days" /> or <see cref="P:System.TimeSpan.Ticks" />) is negative.</para>
          <para>The <see cref="M:System.DateTime.Subtract(System.DateTime)" /> method does not consider the value of the <see cref="P:System.DateTime.Kind" /> property of the two <see cref="T:System.DateTime" /> values when performing the subtraction. Before subtracting <see cref="T:System.DateTime" /> objects, ensure that the objects represent times in the same time zone. Otherwise, the result will include the difference between time zones.</para>
          <block subset="none" type="note">
            <para>The <see cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" /> method does consider the difference between time zones when performing the subtraction.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts the specified date and time from this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The date and time value to subtract. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value)" />
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting date and time is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method does not change the value of this <see cref="T:System.DateTime" />. Instead, it returns a new <see cref="T:System.DateTime" /> whose value is the result of this operation.</para>
          <para>Ordinarily, the <see cref="M:System.DateTime.Subtract(System.TimeSpan)" /> method subtracts a <see cref="T:System.TimeSpan" /> object that represents a positive time span and returns a <see cref="T:System.DateTime" /> value that is earlier than the date and time of the current instance. However, if the <see cref="T:System.TimeSpan" /> object represents a negative time span, the <see cref="M:System.DateTime.Subtract(System.TimeSpan)" /> method returns a <see cref="T:System.DateTime" /> value that is later than the date and time of the current instance.</para>
          <para>The <see cref="M:System.DateTime.Subtract(System.TimeSpan)" /> method allows you to subtract a time interval that consists of more than one unit of time (such as a given number of hours and a given number of minutes). To subtract a single unit of time (such as years, months, or days) from the <see cref="T:System.DateTime" /> instance, you can pass a negative numeric value as a parameter to any of the following methods:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="M:System.DateTime.AddYears(System.Int32)" />, to subtract a specific number of years from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddMonths(System.Int32)" />, to subtract a specific number of months from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddDays(System.Double)" />, to subtract a specific number of days from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddHours(System.Double)" />, to subtract a specific number of hours from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddMinutes(System.Double)" />, to subtract a specific number of minutes from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddSeconds(System.Double)" />, to subtract a specific number of seconds from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddMilliseconds(System.Double)" />, to subtract a specific number of milliseconds from the current date and time instance.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.DateTime.AddTicks(System.Int64)" />, to subtract a specific number of ticks from the current date and time instance.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Subtracts the specified duration from this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</para>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The time interval to subtract. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the current <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The current object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type targetType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type targetType, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="targetType">To be added.</param>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The return value for this member is not used.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method populates the <paramref name="info" /> parameter with the <see cref="P:System.DateTime.Ticks" /> and <see cref="P:System.DateTime.Kind" /> property values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <param name="info">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to populate with data. </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The destination for this serialization. (This parameter is not used; specify null.)</param>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="ILASM" Value=".property int64 Ticks { public hidebysig specialname instance int64 get_Ticks() }" />
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int64" /> set to the number of ticks that represent the date and
   time of the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond. </para>
          <para>The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001, which represents <see cref="F:System.DateTime.MinValue" />. It does not include the number of ticks that are attributable to leap seconds.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of ticks that represent the date and time of this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="ILASM" Value=".property valuetype System.TimeSpan TimeOfDay { public hidebysig specialname instance valuetype System.TimeSpan get_TimeOfDay() }" />
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.TimeSpan" /> instance set to the
   time component of the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Unlike the <see cref="P:System.DateTime.Date" /> property. which returns a <see cref="T:System.DateTime" /> value that represents a date without its time component, the <see cref="P:System.DateTime.TimeOfDay" /> property returns a <see cref="T:System.TimeSpan" /> value that represents a  <see cref="T:System.DateTime" /> value's time component. </para>
          <para>If you want to display the time of day or retrieve the string representation of the time of day of a <see cref="T:System.DateTime" /> value, you can instead call an overload of the <see cref="M:System.DateTime.ToString(System.String)" /> method that has a <paramref name="format" /> parameter or use the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting</a></format> feature with the "t" or "T" standard format string. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the time of day for this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.DateTime.ToBinary" /> method to convert the value of the current <see cref="T:System.DateTime" /> object to a binary value. Subsequently, use the binary value and the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method to recreate the original <see cref="T:System.DateTime" /> object.</para>
          <block subset="none" type="note">
            <para>In some cases, the <see cref="T:System.DateTime" /> value returned by the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method is not identical to the original <see cref="T:System.DateTime" /> value supplied to the <see cref="M:System.DateTime.ToBinary" /> method. For more information, see the next section, "Local Time Adjustment".</para>
          </block>
          <format type="text/html">
            <h2>Local Time Adjustment</h2>
          </format>
          <para>A local time, which is a Coordinated Universal Time adjusted to the local time zone, is represented by a <see cref="T:System.DateTime" /> structure whose <see cref="P:System.DateTime.Kind" /> property has the value <see cref="F:System.DateTimeKind.Local" />. When restoring a local <see cref="T:System.DateTime" /> value from the binary representation that is produced by the <see cref="M:System.DateTime.ToBinary" /> method, the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method may adjust the recreated value so that it is not equal to the original value. This can occur under the following conditions:</para>
          <list type="bullet">
            <item>
              <para>If a local <see cref="T:System.DateTime" /> object is serialized in one time zone by the <see cref="M:System.DateTime.ToBinary" /> method, and then deserialized in a different time zone by the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method, the local time represented by the resulting <see cref="T:System.DateTime" /> object is automatically adjusted to the second time zone.</para>
              <para>For example, consider a <see cref="T:System.DateTime" /> object that represents a local time of 3 P.M. An application that is executing in the U.S. Pacific Time zone uses the <see cref="M:System.DateTime.ToBinary" /> method to convert that <see cref="T:System.DateTime" /> object to a binary value. Another application that is executing in the U.S. Eastern Time zone uses the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method to convert the binary value to a new <see cref="T:System.DateTime" /> object. The value of the new <see cref="T:System.DateTime" /> object is 6 P.M., which represents the same point in time as the original 3 P.M. value, but is adjusted to local time in the Eastern Time zone. </para>
            </item>
            <item>
              <para>If the binary representation of a local <see cref="T:System.DateTime" /> value represents an invalid time in the local time zone of the system on which <see cref="M:System.DateTime.FromBinary(System.Int64)" /> is called, the time is adjusted so that it is valid.</para>
              <para>For example, the transition from standard time to daylight saving time occurs in the U.S. Pacific Time zone on March 14, 2010, at 2:00 A.M., when the time advances by one hour, to 3:00 A.M. This hour interval is an invalid time, that is, a time interval that does not exist in this time zone. The following example shows that when a time that falls within this range is converted to a binary value by the <see cref="M:System.DateTime.ToBinary" /> method and is then restored by the <see cref="M:System.DateTime.FromBinary(System.Int64)" /> method, the original value is adjusted to become a valid time. You can determine whether a particular date and time value may be subject to modification by passing it to the <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> method, as the example illustrates. </para>
              <para>code reference: System.DateTime.FromBinary#1</para>
            </item>
          </list>
          <format type="text/html">
            <h2>Version Considerations</h2>
          </format>
          <para>Starting with the .NET Framework version 2.0, a <see cref="T:System.DateTime" /> structure consists of a private Kind field, which indicates whether the specified time value is based on local time, Coordinated Universal Time (UTC), or neither, and a private Ticks field, which contains the number of 100-nanosecond ticks that specify a date and time. The Ticks field can be accessed with the <see cref="P:System.DateTime.Ticks" /> property and the Kind field can be accessed with the <see cref="P:System.DateTime.Kind" /> property. </para>
          <para>Prior to the .NET Framework 2.0, if you serialized a <see cref="T:System.DateTime" /> object manually instead of using a serialization interface such as <see cref="T:System.Runtime.Serialization.ISerializable" />, you only needed to serialize the Ticks data in the <see cref="T:System.DateTime" /> structure. Starting with version 2.0, you must also serialize the Kind data. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties. </para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="ILASM" Value=".property valuetype System.DateTime Today { public hidebysig static specialname valuetype System.DateTime get_Today() }" />
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.DateTime" /> instance set to the date of the current instance, with the time set to
 00:00:00.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Starting with the .NET Framework version 2.0, the return value is a <see cref="T:System.DateTime" /> whose <see cref="P:System.DateTime.Kind" /> property returns <see cref="F:System.DateTimeKind.Local" />.</para>
          <para>Because it returns the current date without the current time, the <see cref="P:System.DateTime.Today" /> property is suitable for use in applications that work with dates only. For details, see <format type="text/html"><a href="07f17aad-3571-4014-9ef3-b695a86f3800">Choosing Between DateTime, DateTimeOffset, and TimeZoneInfo</a></format>. In contrast, the <see cref="P:System.DateTime.TimeOfDay" /> property returns the current time without the current date, and the <see cref="P:System.DateTime.Now" /> property returns both the current date and the current time. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current date.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file. </para>
          <para>The <see cref="M:System.DateTime.ToFileTime" /> method uses the <see cref="P:System.DateTime.Kind" /> property to determine whether the current <see cref="T:System.DateTime" /> object is a local time, a UTC time, or an unspecified kind of time which is treated as a local time. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file. </para>
          <para>The <see cref="M:System.DateTime.ToFileTimeUtc" /> method uses the <see cref="P:System.DateTime.Kind" /> property to determine whether the current <see cref="T:System.DateTime" /> object is a local time, a UTC time, or an unspecified kind of time which is treated as a UTC time. If it is a local time, it converts the time to UTC before performing the conversion to a Windows file time.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime()" />
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The local time is equal to the Coordinated Universal Time (UTC) time plus the UTC offset. For more information about the UTC offset, see <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />. The conversion also takes into account the daylight saving time rule that applies to the time represented by the current <see cref="T:System.DateTime" /> object. </para>
          <block subset="none" type="note">
            <para>On winxp systems, the <see cref="M:System.DateTime.ToLocalTime" /> method recognizes only the current adjustment rule when converting from UTC to local time. As a result, conversions for periods before the current adjustment rule came into effect may not accurately reflect the difference between UTC and local time.  </para>
          </block>
          <para>Starting with the .NET Framework version 2.0, the value returned by the <see cref="M:System.DateTime.ToLocalTime" /> method is determined by the <see cref="P:System.DateTime.Kind" /> property of the current <see cref="T:System.DateTime" /> object. The following table describes the possible results. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Kind</para>
                </term>
                <description>
                  <para>Results</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.DateTimeKind.Utc" />
                </para>
              </term>
              <description>
                <para>This instance of <see cref="T:System.DateTime" /> is converted to local time.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.DateTimeKind.Local" />
                </para>
              </term>
              <description>
                <para>No conversion is performed.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.DateTimeKind.Unspecified" />
                </para>
              </term>
              <description>
                <para>This instance of <see cref="T:System.DateTime" /> is assumed to be a UTC time, and the conversion is performed as if <see cref="P:System.DateTime.Kind" /> were <see cref="F:System.DateTimeKind.Utc" />.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The <see cref="M:System.DateTime.ToLocalTime" /> method converts a <see cref="T:System.DateTime" /> value from UTC to local time. To convert the time in any designated time zone to local time, use the <see cref="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" /> method.</para>
          </block>
          <para>The value returned by the conversion is a <see cref="T:System.DateTime" /> whose <see cref="P:System.DateTime.Kind" /> property always returns <see cref="F:System.DateTimeKind.Local" />. Consequently, a valid result is returned even if <see cref="M:System.DateTime.ToLocalTime" /> is applied repeatedly to the same <see cref="T:System.DateTime" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToLongDateString()" />
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object is formatted using the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" /> property associated with the current thread culture. The return value is identical to the value returned by specifying the "D" <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard DateTime format string</a></format> with the <see cref="M:System.DateTime.ToString(System.String)" /> method. </para>
          <block subset="none" type="note">
            <para>The string returned by the <see cref="M:System.DateTime.ToLongDateString" /> method is culture-sensitive. It reflects the pattern defined by the current culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. For example, for the en-US culture, the standard long date pattern is "dddd, MMMM dd, yyyy"; for the de-DE culture, it is "dddd, d. MMMM yyyy"; for the ja-JP culture, it is "yyyy'?'M'?'d'?'". The specific format string on a particular computer can also be customized so that it differs from the standard long date format string.</para>
          </block>
          <para>For more information about the current thread culture, see the <see cref="P:System.Threading.Thread.CurrentCulture" /> property. For more information about format characters, format patterns, and the output they produce, see the <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format> topic. For more information about changing the format pattern associated with a format character, see the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToLongTimeString()" />
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object is formatted using the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> property associated with the current thread culture. The return value is identical to the value returned by specifying the "T" <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard date and time format string</a></format> with the <see cref="M:System.DateTime.ToString(System.String)" /> method. </para>
          <block subset="none" type="note">
            <para>The string returned by the <see cref="M:System.DateTime.ToLongTimeString" /> method is culture-sensitive. It reflects the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> property of the current culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. For example, for the en-US culture, the standard long time pattern is "h:mm:ss tt"; for the de-DE culture, it is "HH:mm:ss"; for the ja-JP culture, it is "H:mm:ss". The specific format string on a particular computer can also be customized so that it differs from the standard long time format string.</para>
          </block>
          <para>For more information about the current thread culture, see the <see cref="P:System.Threading.Thread.CurrentCulture" /> property. For more information about format characters, format patterns, and the output they produce, see the <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format> topic. For more information about changing the format pattern associated with a format character, see the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OLE Automation date is implemented as a floating-point number whose integral component is the number of days before or after midnight, 30 December 1899, and whose fractional component represents the time on that day divided by 24. For example, midnight, 31 December 1899 is represented by 1.0; 6 A.M., 1 January 1900 is represented by 2.25; midnight, 29 December 1899 is represented by -1.0; and 6 A.M., 29 December 1899 is represented by -1.25.</para>
          <para>The base OLE Automation Date is midnight, 30 December 1899. The minimum OLE Automation date is midnight, 1 January 0100. The maximum OLE Automation Date is the same as <see cref="F:System.DateTime.MaxValue" />, the last moment of 31 December 9999.</para>
          <para>The <see cref="M:System.DateTime.ToOADate" /> method throws an <see cref="T:System.OverflowException" /> if the current instance represents a date that is later than <see cref="F:System.DateTime.MinValue" /> and earlier than midnight on January1, 0100. However, if the value of the current instance is <see cref="F:System.DateTime.MinValue" />, the method returns 0.</para>
          <para>For more information about OLE Automation, see the <see cref="http://go.microsoft.com/fwlink/?linkid=37118">MSDN Library</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of this instance to the equivalent OLE Automation date.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToShortDateString()" />
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object is formatted using the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" /> property associated with the current thread culture. The return value is identical to the value returned by specifying the "d" <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard DateTime format string</a></format> with the <see cref="M:System.DateTime.ToString(System.String)" /> method.</para>
          <block subset="none" type="note">
            <para>The string returned by the <see cref="M:System.DateTime.ToShortDateString" /> method is culture-sensitive. It reflects the pattern defined by the current culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. For example, for the en-US culture, the standard short date pattern is "M/d/yyyy"; for the de-DE culture, it is "dd.MM.yyyy"; for the ja-JP culture, it is "yyyy/M/d". The specific format string on a particular computer can also be customized so that it differs from the standard short date format string.</para>
          </block>
          <para>For more information about the current thread culture, see the <see cref="P:System.Threading.Thread.CurrentCulture" /> property. For more information about format characters, format patterns, and the output they produce, see the <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format> topic. For more information about changing the format pattern associated with a format character, see the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToShortTimeString()" />
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object is formatted using the pattern defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" /> property associated with the current thread culture. The return value is identical to the value returned by specifying the "t" <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">standard DateTime format string</a></format> with the <see cref="M:System.DateTime.ToString(System.String)" /> method.</para>
          <block subset="none" type="note">
            <para>The string returned by the <see cref="M:System.DateTime.ToShortTimeString" /> method is culture-sensitive. It reflects the pattern defined by the current culture's <see cref="T:System.Globalization.DateTimeFormatInfo" /> object. For example, for the en-US culture, the standard short time pattern is "h:mm tt"; for the de-DE culture, it is "HH:mm"; for the ja-JP culture, it is "H:mm". The specific format string on a particular computer can also be customized so that it differs from the standard short time format string.</para>
          </block>
          <para>For more information about the current thread culture, see the <see cref="P:System.Threading.Thread.CurrentCulture" /> property. For more information about format characters, format patterns, and the output they produce, see the <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format> topic. For more information about changing the format pattern associated with a format character, see the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ToString()" />
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object is formatted using the general date and time format specifier ('G'). To format it using a specific date and time format specifier, call the <see cref="M:System.DateTime.ToString(System.String)" /> method. To format it using the general date and time format specifier ('G') for a specific culture, call the <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> method. To format it using a specific date and time format specifier and the conventions of a specific culture, call the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method. </para>
          <para>This method uses formatting information derived from the current culture. In particular, it combines the custom format strings returned by the <see cref="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" /> and <see cref="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" /> properties of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the Thread.CurrentThread.CurrentCulture.DateTimeFormat property. For more information, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />. Other overloads of the <see cref="Overload:System.DateTime.ToString" /> method enable you to specify the culture whose formatting to use and to define the output pattern of the <see cref="T:System.DateTime" /> value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current <see cref="T:System.DateTime" /> object is formatted using the general date and time format specifier ('G'), which formats output using the short date pattern and the long time pattern. </para>
          <para>The format of the short date and long time pattern is defined by the <paramref name="provider" /> parameter. The <paramref name="provider" /> parameter can be any of the following: </para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the formatting of the returned string.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
            <item>
              <para>A custom object that implements the <see cref="T:System.IFormatProvider" /> interface. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that provides formatting information.</para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with the current culture is used. For more information, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToString(string format)" />
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <para>The length of the <paramref name="format" /> string is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
          <para>-or-</para>
          <para>The <paramref name="format" /> string does not contain a valid custom format pattern.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="format" /> parameter should contain either a single format specifier character (see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>) or a custom format pattern (see <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>) that defines the format of the returned string. If <paramref name="format" /> is null or an empty string, the general format specifier, 'G', is used.</para>
          <para>This method uses formatting information derived from the current culture. For more information, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A standard or custom date and time format string (see Remarks). </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(string format, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <para>The length of the <paramref name="format" /> string is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
          <para>-or-</para>
          <para>The <paramref name="format" /> string does not contain a valid custom format pattern.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="format" /> parameter can contain either a single format specifier character (see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format>) or a custom format pattern (see <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>). If <paramref name="format" /> is null or an empty string (""), the standard format specifier, "G", is used.</para>
          <para>The <paramref name="provider" /> parameter defines the pattern that corresponds to the standard format specifiers, as well as the symbols and names of date and time components. The <paramref name="provider" /> parameter can be any of the following:</para>
          <list type="bullet">
            <item>
              <para>A <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object returned by the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property defines the formatting of the returned string.</para>
            </item>
            <item>
              <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that defines the format of date and time data.</para>
            </item>
            <item>
              <para>A custom object that implements the <see cref="T:System.IFormatProvider" /> interface. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that provides formatting information.</para>
            </item>
          </list>
          <para>If <paramref name="provider" /> is null, the <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the current culture is used. For more information, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A standard or custom date and time format string. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime()" />
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Coordinated Universal Time (UTC) is equal to the local time minus the UTC offset. For more information about the UTC offset, see <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />. The conversion also takes into account the daylight saving time rule that applies to the time represented by the current <see cref="T:System.DateTime" /> object. </para>
          <block subset="none" type="note">
            <para>On winxp systems, the <see cref="M:System.DateTime.ToUniversalTime" /> method recognizes only the current adjustment rule when converting from local time to UTC. As a result, conversions for periods before the current adjustment rule came into effect may not accurately reflect the difference between local time and UTC. </para>
          </block>
          <para>Starting with the .NET Framework version 2.0, the value returned by the <see cref="M:System.DateTime.ToUniversalTime" /> method is determined by the <see cref="P:System.DateTime.Kind" /> property of the current <see cref="T:System.DateTime" /> object. The following table describes the possible results. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Kind</para>
                </term>
                <description>
                  <para>Results</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.DateTimeKind.Utc" />
                </para>
              </term>
              <description>
                <para>No conversion is performed.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.DateTimeKind.Local" />
                </para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTime" /> object is converted to UTC.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.DateTimeKind.Unspecified" />
                </para>
              </term>
              <description>
                <para>The current <see cref="T:System.DateTime" /> object is assumed to be a local time, and the conversion is performed as if <see cref="P:System.DateTime.Kind" /> were <see cref="F:System.DateTimeKind.Local" />.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The <see cref="M:System.DateTime.ToUniversalTime" /> method converts a <see cref="T:System.DateTime" /> value from local time to UTC. To convert the time in a non-local time zone to UTC, use the <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> method. To convert a time whose offset from UTC is known, use the <see cref="M:System.DateTimeOffset.ToUniversalTime" /> method.</para>
          </block>
          <para>If the date and time instance value is an ambiguous time, this method assumes that it is a standard time. (An ambiguous time is one that can map either to a standard time or to a daylight saving time in the local time zone) If the date and time instance value is an invalid time, this method simply subtracts the local time from the local time zone's UTC offset to return UTC. (An invalid time is one that does not exist because of the application of daylight saving time adjustment rules.)</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.DateTime result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTime result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, valuetype System.DateTime result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, valuetype System.DateTime result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="ILASM" Value=".property valuetype System.DateTime UtcNow { public hidebysig static specialname valuetype System.DateTime get_UtcNow() }" />
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.DateTime" /> instance set to the current date and time in coordinated universal time (UTC). </para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The resolution of this property depends on the system timer.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>System </para>
                </term>
                <description>
                  <para>Approximate Resolution </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Windows NT 3.5 and later </para>
              </term>
              <description>
                <para>10 milliseconds </para>
              </description>
            </item>
            <item>
              <term>
                <para>Windows 98 </para>
              </term>
              <description>
                <para>55 milliseconds </para>
              </description>
            </item>
          </list>
          <para>Starting with the .NET Framework version 2.0, the return value is a <see cref="T:System.DateTime" /> whose <see cref="P:System.DateTime.Kind" /> property returns <see cref="F:System.DateTimeKind.Utc" />.</para>
          <para>An alternative to using <see cref="P:System.DateTime.UtcNow" /> is <see cref="P:System.DateTimeOffset.UtcNow" />. While the former indicates that a date and time value is Coordinated Universal Time (UTC) by assigning <see cref="F:System.DateTimeKind.Utc" /> to its <see cref="P:System.DateTime.Kind" /> property, the latter assigns the date and time value the UTC time's offset (equal to <see cref="F:System.TimeSpan.Zero" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="ILASM" Value=".property int32 Year { public hidebysig specialname instance int32 get_Year() }" />
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A <see cref="T:System.Int32" /> between 1 and 9999 set to the year component of the current instance.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.DateTime.Year" /> property returns the year of the current instance in the Gregorian calendar. It does not return the year using the default calendar of the current culture. To retrieve the year using a particular calendar, you can call that calendar's GetYear method, as the following code shows.</para>
          <para>code reference: System.DateTime.Year#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the year component of the date represented by this instance.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>