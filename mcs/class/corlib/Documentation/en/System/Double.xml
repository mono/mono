<?xml version="1.0" encoding="utf-8"?>
<Type Name="Double" FullName="System.Double" FullNameSP="System_Double" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sequential sealed serializable Double extends System.ValueType implements System.IComparable, System.IFormattable" />
  <TypeSignature Language="C#" Value="public struct Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float64&gt;, class System.IConvertible, class System.IEquatable`1&lt;float64&gt;, class System.IFormattable" />
  <MemberOfLibrary>ExtendedNumerics</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Double" /> value type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.NegativeInfinity" />, and not a number (<see cref="F:System.Double.NaN" />). It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system), The <see cref="T:System.Double" /> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</para>
      <para>This topic consists of the following sections:</para>
      <list type="bullet">
        <item>
          <para>
            <format type="text/html">
              <a href="#Precision">Floating-Point Representation and Precision</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Equality">Testing for Equality</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Exceptions">Floating-Point Values and Exceptions</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Functionality">Floating-Point Functionality</a>
            </format>
          </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Precision" />
      </format>
      <format type="text/html">
        <h2>Floating-Point Representation and Precision</h2>
      </format>
      <para>The <see cref="T:System.Double" /> data type stores double-precision floating-point values in a 64-bit binary format, as shown in the following table: </para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Part</para>
            </term>
            <description>
              <para>Bits</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>Significand or mantissa</para>
          </term>
          <description>
            <para>0-51</para>
          </description>
        </item>
        <item>
          <term>
            <para>Exponent</para>
          </term>
          <description>
            <para>52-62</para>
          </description>
        </item>
        <item>
          <term>
            <para>Sign (0 = Positive, 1 = Negative)</para>
          </term>
          <description>
            <para>63</para>
          </description>
        </item>
      </list>
      <para>Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <see cref="F:System.Math.PI" />), binary fractions are unable to represent some fractional values. For example, 1/10, which is represented precisely by .1 as a decimal fraction, is represented by .001100110011 as a binary fraction, with the pattern "0011" repeating to infinity. In this case, the floating-point value provides an imprecise representation of the number that it represents. Performing additional mathematical operations on the original floating-point value often tends to increase its lack of precision. For example, if we compare the result of multiplying .1 by 10 and adding .1 to .1 nine times, we see that addition, because it has involved eight more operations, has produced the less precise result. Note that this disparity is apparent only if we display the two <see cref="T:System.Double" /> values by using the "R" <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format string</a></format>, which if necessary displays all 17 digits of precision supported by the <see cref="T:System.Double" /> type.</para>
      <para>code reference: System.Double.Structure#3</para>
      <para>Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</para>
      <para>All floating-point numbers also have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.   A <see cref="T:System.Double" /> value has up to 15 decimal digits of precision, although a maximum of 17 digits is maintained internally. This means that some floating-point operations may lack the precision to change a floating point value. The following example provides an illustration. It defines a very large floating-point value, and then adds the product of <see cref="F:System.Double.Epsilon" /> and one quadrillion to it. The product, however, is too small to modify the original floating-point value. Its least significant digit is thousandths, whereas the most significant digit in the product is 1<superscript>-312</superscript>. </para>
      <para>code reference: System.Double.Structure#4</para>
      <para>The limited precision of a floating-point number has several consequences:</para>
      <list type="bullet">
        <item>
          <para>Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different. In the following example, a series of numbers are added together, and their total is compared with their expected total. Although the two values appear to be the same, a call to the Equals method indicates that they are not.</para>
          <para>code reference: System.Double.Structure#6</para>
          <para>If you change the format items in the <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object)" /> statement from {0} and {1} to {0:R} and {1:R} to display all significant digits of the two <see cref="T:System.Double" /> values, it is clear that the two values are unequal because of a loss of precision during the addition operations. In this case, the issue can be resolved by calling the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method to round the <see cref="T:System.Double" /> values to the desired precision before performing the comparison. </para>
        </item>
        <item>
          <para>A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number. A previous example illustrated this by displaying the result of multiplying .1 by 10 and adding .1 times. </para>
          <para>When accuracy in numeric operations with fractional values is important, you can use the <see cref="T:System.Decimal" /> rather than the <see cref="T:System.Double" /> type. When accuracy in numeric operations with integral values beyond the range of the <see cref="T:System.Int64" /> or <see cref="T:System.UInt64" /> types is important, use the <see cref="T:System.Numerics.BigInteger" /> type. </para>
        </item>
        <item>
          <para>A value might not round-trip if a floating-point number is involved. A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is not equal to the original floating-point number. The roundtrip might fail because one or more least significant digits are lost or changed in a conversion. In the following example, three <see cref="T:System.Double" /> values are converted to strings and saved in a file. As the output shows, however, even though the values appear to be identical, the restored values are not equal to the original values. </para>
          <para>code reference: System.Double.Structure#7</para>
          <para>In this case, the values can be successfully round-tripped by using the "R" <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format string</a></format> to preserve the full precision of <see cref="T:System.Double" /> values, as the following example shows.</para>
          <para>code reference: System.Double.Structure#8</para>
        </item>
        <item>
          <para>
            <see cref="T:System.Single" /> values have less precision than <see cref="T:System.Double" /> values. A <see cref="T:System.Single" /> value that is converted to a seemingly equivalent <see cref="T:System.Double" /> often does not equal the <see cref="T:System.Double" /> value because of differences in precision. In the following example, the result of identical division operations is assigned to a <see cref="T:System.Double" /> and a <see cref="T:System.Single" /> value. After the <see cref="T:System.Single" /> value is cast to a <see cref="T:System.Double" />, a comparison of the two values shows that they are unequal. </para>
          <para>code reference: System.Double.Structure#5</para>
          <para>To avoid this problem, use either the <see cref="T:System.Double" /> in place of the <see cref="T:System.Single" /> data type, or use the <see cref="M:System.Math.Round(System.Double)" /> method so that both values have the same precision. </para>
        </item>
      </list>
      <para>In addition, the result of arithmetic and assignment operations with <see cref="T:System.Double" /> values may differ slightly by platform because of the loss of precision of the <see cref="T:System.Double" /> type. For example, the result of assigning a literal <see cref="T:System.Double" /> value may differ in the 32-bit and 64-bit versions of the .NET Framework. The following example illustrates this difference when the literal value -4.42330604244772E-305 and a variable whose value is -4.42330604244772E-305 are assigned to a <see cref="T:System.Double" /> variable. Note that the result of the <see cref="M:System.Double.Parse(System.String)" /> method in this case does not suffer from a loss of precision.</para>
      <para>code reference: System.Double.Class.Precision#1</para>
      <format type="text/html">
        <a href="#Equality" />
      </format>
      <format type="text/html">
        <h2>Testing for Equality</h2>
      </format>
      <para>To be considered equal, two <see cref="T:System.Double" /> values must represent identical values. However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal because of differences in their least significant digits. As a result, calls to the <see cref="M:System.Double.Equals(System.Double)" /> method to determine whether two values are equal, or calls to the <see cref="M:System.Double.CompareTo(System.Double)" /> method to determine the relationship between two <see cref="T:System.Double" /> values, often yield unexpected results. This is evident in the following example, where two apparently equal <see cref="T:System.Double" /> values turn out to be unequal because the first has 15 digits of precision, while the second has 17. </para>
      <para>code reference: System.Double.Structure#9</para>
      <para>Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal. In the following example, one <see cref="T:System.Double" /> value is squared, and then the square root is calculated to restore the original value. A second <see cref="T:System.Double" /> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value. Although the two values appear to be identical, a call to the <see cref="M:System.Double.Equals(System.Double)" /> method indicates that they are not equal. Using the "R" standard format string to return a result string that displays all the significant digits of each Double value shows that the second value is .0000000000001 less than the first. </para>
      <para>code reference: System.Double.Structure#10</para>
      <para>In cases where a loss of precision is likely to affect the result of a comparison, you can adopt any of the following alternatives to calling the <see cref="M:System.Double.Equals(System.Double)" /> or <see cref="M:System.Double.CompareTo(System.Double)" /> method: </para>
      <list type="bullet">
        <item>
          <para>Call the <see cref="M:System.Math.Round(System.Double)" /> method to ensure that both values have the same precision. The following example modifies a previous example to use this approach so that two fractional values are equivalent. </para>
          <para>code reference: System.Double.Structure#11</para>
          <para>Note, though, that the problem of precision still applies to rounding of midpoint values. For more information, see the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method. </para>
        </item>
        <item>
          <para>Test for approximate equality rather than equality. This requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value. </para>
          <block subset="none" type="note">
            <para>
              <see cref="F:System.Double.Epsilon" /> is sometimes used as an absolute measure of the distance between two <see cref="T:System.Double" /> values when testing for equality.  However, <see cref="F:System.Double.Epsilon" /> measures the smallest possible value that can be added to, or subtracted from, a <see cref="T:System.Double" /> whose value is zero. For most positive and negative <see cref="T:System.Double" /> values, the value of <see cref="F:System.Double.Epsilon" /> is too small to be detected. Therefore, except for values that are zero, we do not recommend its use in tests for equality.  </para>
          </block>
          <para>The following example uses the latter approach to define an IsApproximatelyEqual method that tests the relative difference between two values. It also contrasts the result of calls to the IsApproximatelyEqual method and the <see cref="M:System.Double.Equals(System.Double)" /> method.</para>
          <para>code reference: System.Double.Structure#12</para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Exceptions" />
      </format>
      <format type="text/html">
        <h2>Floating-Point Values and Exceptions</h2>
      </format>
      <para>Unlike operations with integral types, which throw exceptions in cases of overflow or illegal operations such as division by zero, operations with floating-point values do not throw exceptions. Instead, in exceptional situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</para>
      <list type="bullet">
        <item>
          <para>If the result of a floating-point operation is too small for the destination format, the result is zero. This can occur when two very small numbers are multiplied, as the following example shows. </para>
          <para>code reference: System.Double.Structure#1</para>
        </item>
        <item>
          <para>If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, as appropriate for the sign of the result. The result of an operation that overflows <see cref="F:System.Double.MaxValue" /> is <see cref="F:System.Double.PositiveInfinity" />, and the result of an operation that overflows <see cref="F:System.Double.MinValue" /> is <see cref="F:System.Double.NegativeInfinity" />, as the following example shows.</para>
          <para>code reference: System.Double.Structure#2</para>
          <para>
            <see cref="F:System.Double.PositiveInfinity" /> also results from a division by zero with a positive dividend, and <see cref="F:System.Double.NegativeInfinity" /> results from a division by zero with a negative dividend. </para>
        </item>
        <item>
          <para>If a floating-point operation is invalid, the result of the operation is <see cref="F:System.Double.NaN" />. For example, <see cref="F:System.Double.NaN" /> results from the following operations:</para>
          <list type="bullet">
            <item>
              <para>Division by zero with a dividend of zero. Note that other cases of division by zero result in either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />. </para>
            </item>
          </list>
        </item>
        <item>
          <para>Any floating-point operation with an invalid input. For example, calling the <see cref="M:System.Math.Sqrt(System.Double)" /> method with a negative value returns <see cref="F:System.Double.NaN" />, as does calling the <see cref="M:System.Math.Acos(System.Double)" /> method with a value that is greater than one or less than negative one. </para>
        </item>
        <item>
          <para>Any operation with an argument whose value is <see cref="F:System.Double.NaN" />. </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Functionality" />
      </format>
      <format type="text/html">
        <h2>Floating-Point Functionality</h2>
      </format>
      <para>The <see cref="T:System.Double" /> structure and related types provide methods to perform operations in the following areas: </para>
      <list type="bullet">
        <item>
          <para>Comparison of values. You can call the <see cref="M:System.Double.Equals(System.Double)" /> method to determine whether two <see cref="T:System.Double" /> values are equal, or the <see cref="M:System.Double.CompareTo(System.Double)" /> method to determine the relationship between two values. </para>
          <para>The <see cref="T:System.Double" /> structure also supports a complete set of comparison operators. For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another. If one of the operands is a numeric type other than a <see cref="T:System.Double" />, it is converted to a <see cref="T:System.Double" /> before performing the comparison. </para>
          <block subset="none" type="note">
            <para>Because of differences in precision, two <see cref="T:System.Double" /> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison. See the <format type="text/html"><a href="874bd404-f7a8-4147-ac57-2d2c5994e1ea#Equality">Testing for Equality</a></format> section for more information about comparing two <see cref="T:System.Double" /> values. </para>
          </block>
          <para>You can also call the <see cref="M:System.Double.IsNaN(System.Double)" />, <see cref="M:System.Double.IsInfinity(System.Double)" />, <see cref="M:System.Double.IsPositiveInfinity(System.Double)" />, and <see cref="M:System.Double.IsNegativeInfinity(System.Double)" /> methods to test for these special values.</para>
        </item>
        <item>
          <para>Mathematical operations. Common arithmetic operations, such as addition, subtraction, multiplication, and division, are implemented by language compilers and Common Intermediate Language (CIL) instructions, rather than by <see cref="T:System.Double" /> methods. If one of the operands in a mathematical operation is a numeric type other than a <see cref="T:System.Double" />, it is converted to a <see cref="T:System.Double" /> before performing the operation. The result of the operation is also a <see cref="T:System.Double" /> value. </para>
          <para>Other mathematical operations can be performed by calling static (Shared in Visual Basic) methods in the <see cref="T:System.Math" /> class. It includes additional methods commonly used for arithmetic (such as <see cref="M:System.Math.Abs(System.Double)" />, <see cref="M:System.Math.Sign(System.Double)" />, and <see cref="M:System.Math.Sqrt(System.Double)" />), geometry (such as <see cref="M:System.Math.Cos(System.Double)" /> and <see cref="M:System.Math.Sin(System.Double)" />), and calculus (such as <see cref="M:System.Math.Log(System.Double)" />).  </para>
          <para>You can also manipulate the individual bits in a <see cref="T:System.Double" /> value. The <see cref="M:System.BitConverter.DoubleToInt64Bits(System.Double)" /> method preserves a <see cref="T:System.Double" /> value's bit pattern in a 64-bit integer. The <see cref="M:System.BitConverter.GetBytes(System.Double)" /> method returns its bit pattern in a byte array. </para>
        </item>
        <item>
          <para>Rounding. Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision. You can round a <see cref="T:System.Double" /> value by calling the <see cref="M:System.Math.Round(System.Double)" /> method. </para>
        </item>
        <item>
          <para>Formatting. You can convert a <see cref="T:System.Double" /> value to its string representation by calling the <see cref="M:System.Double.ToString" /> method or by using the composite formatting feature. For information about how format strings control the string representation of floating-point values, see the <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format> topics.</para>
        </item>
        <item>
          <para>Parsing strings. You can convert the string representation of a floating-point value to a <see cref="T:System.Double" /> value by calling either the <see cref="M:System.Double.Parse(System.String)" /> or <see cref="M:System.Double.TryParse(System.String,System.Double@)" /> method. If the parse operation fails, the <see cref="M:System.Double.Parse(System.String)" /> method throws an exception, whereas the <see cref="M:System.Double.TryParse(System.String,System.Double@)" /> method returns false.</para>
        </item>
        <item>
          <para>Type conversion. The <see cref="T:System.Double" /> structure provides an explicit interface implementation for the <see cref="T:System.IConvertible" /> interface, which supports conversion between any two standard .NET Framework data types. Language compilers also support the implicit conversion of values of all other standard numeric types to <see cref="T:System.Double" /> values. Conversion of a value of any standard numeric type to a <see cref="T:System.Double" /> is a widening conversion and does not require the user of a casting operator or conversion method, </para>
          <para>However, conversion of <see cref="T:System.Int64" /> and <see cref="T:System.Single" /> values can involve a loss of precision. The following table lists the differences in precision for each of these types:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Type</para>
                </term>
                <description>
                  <para>Maximum precision</para>
                </description>
                <description>
                  <para>Internal precision</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="T:System.Double" />
                </para>
              </term>
              <description>
                <para>15</para>
              </description>
              <description>
                <para>17</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Int64" />
                </para>
              </term>
              <description>
                <para>19 decimal digits</para>
              </description>
              <description>
                <para>19 decimal digits</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="T:System.Single" />
                </para>
              </term>
              <description>
                <para>7 decimal digits</para>
              </description>
              <description>
                <para>9 decimal digits</para>
              </description>
            </item>
          </list>
          <para>The problem of precision most frequently affects <see cref="T:System.Single" /> values that are converted to <see cref="T:System.Double" /> values. In the following example, two values produced by identical division operations are unequal because one of the values is a a single-precision floating point value converted to a <see cref="T:System.Double" />.  </para>
          <para>code reference: System.Double.Structure#3</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a double-precision floating-point number.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Values must be identical to be considered equal. Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits. Because of this, the return value of the <see cref="M:System.Double.CompareTo(System.Double)" /> method at times may seem surprising. For example, multiplication by a particular value followed by division by the same value should produce the original value. In the following example, however, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the "R" <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format string</a></format> indicates that the computed value differs from the original value in its least significant digits. For information on handling such comparisons, see the Remarks section of the <see cref="M:System.Double.Equals(System.Double)" /> method. </para>
          <para>code reference: System.Double.CompareTo#1</para>
          <para>This method implements the <see cref="T:System.IComparable`1" /> interface and performs slightly better than the <see cref="M:System.Double.CompareTo(System.Object)" /> method because it does not have to convert the <paramref name="value" /> parameter to an object.</para>
          <para>Note that, although an object whose value is <see cref="F:System.Double.NaN" /> is not considered equal to another object whose value is <see cref="F:System.Double.NaN" /> (even itself), the <see cref="T:System.IComparable`1" /> interface requires that A.CompareTo(A) return zero.</para>
          <format type="text/html">
            <h2>Widening Conversions</h2>
          </format>
          <para>Depending on your programming language, it might be possible to code a <see cref="M:System.Double.CompareTo(System.Double)" /> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</para>
          <para>For example, suppose the instance type is <see cref="T:System.Double" /> and the parameter type is <see cref="T:System.Int32" />. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <see cref="T:System.Double" /> object, then generates a <see cref="M:System.Double.CompareTo(System.Double)" /> method that compares the values of the instance and the widened representation of the parameter.</para>
          <para>Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the <format type="text/html"><a href="0ea65c59-85eb-4a52-94ca-c36d3bd13058">Type Conversion Tables</a></format> topic.</para>
          <format type="text/html">
            <h2>Precision in Comparisons</h2>
          </format>
          <para>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Return Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Less than zero </para>
              </term>
              <description>
                <para>This instance is less than <paramref name="value" />.</para>
                <para>-or- </para>
                <para>This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is equal to <paramref name="value" />.</para>
                <para>-or- </para>
                <para>Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Greater than zero </para>
              </term>
              <description>
                <para>This instance is greater than <paramref name="value" />.</para>
                <para>-or- </para>
                <para>This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number to compare. </param>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual int32 CompareTo(object value)" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <paramref name="value " />is not a null reference and is not of type <see cref="T:System.Double" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="value" /> parameter must be null or an instance of Double; otherwise, an exception is thrown. Any instance of <see cref="T:System.Double" />, regardless of its value, is considered greater than null.</para>
          <para>Values must be identical to be considered equal. Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits. Because of this, the return value of the <see cref="M:System.Double.CompareTo(System.Object)" /> method at times may seem surprising. For example, multiplication by a particular value followed by division by the same value should produce the original value. In the following example, however, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the "R" <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">standard numeric format string</a></format> indicates that the computed value differs from the original value in its least significant digits. For information on handling such comparisons, see the Remarks section of the <see cref="M:System.Double.Equals(System.Double)" /> method. </para>
          <para>code reference: System.Double.CompareTo#2</para>
          <para>This method is implemented to support the <see cref="T:System.IComparable" /> interface. Note that, although a <see cref="F:System.Double.NaN" /> is not considered to be equal to another <see cref="F:System.Double.NaN" /> (even itself), the <see cref="T:System.IComparable" /> interface requires that A.CompareTo(A) return zero.</para>
          <format type="text/html">
            <h2>Precision in Comparisons</h2>
          </format>
          <para>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>A negative integer </para>
              </term>
              <description>
                <para>This instance is less than <paramref name="value" />.</para>
                <para>-or- </para>
                <para>This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. </para>
              </description>
            </item>
            <item>
              <term>
                <para>Zero </para>
              </term>
              <description>
                <para>This instance is equal to <paramref name="value" />.</para>
                <para>-or- </para>
                <para>This instance and <paramref name="value" /> are both Double.NaN, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>A positive integer </para>
              </term>
              <description>
                <para>This instance is greater than <paramref name="value" />.</para>
                <para>-or- </para>
                <para>This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</para>
                <para>-or- </para>
                <para>
                  <paramref name="value" /> is null. </para>
              </description>
            </item>
          </list>
        </returns>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 Epsilon = 4.9406564584124654e-324" />
      <MemberSignature Language="C#" Value="public const double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 Epsilon = float64(4.94065645841247E-324)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>4.94065645841247E-324</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the <see cref="F:System.Double.Epsilon" /> property reflects the smallest positive <see cref="T:System.Double" /> value that is significant in numeric operations or comparisons when the value of the <see cref="T:System.Double" /> instance is zero. For example, the following code shows that zero and <see cref="F:System.Double.Epsilon" /> are considered to be unequal values, whereas zero and half the value of <see cref="F:System.Double.Epsilon" /> are considered to be equal.</para>
          <para>code reference: System.Double.Epsilon#5</para>
          <para>More precisely, the floating point format consists of a sign, a 52-bit mantissa or significand, and an 11-bit exponent. As the following example shows, zero has an exponent of -1022 and a mantissa of 0. <see cref="F:System.Double.Epsilon" /> has an exponent of -1022 and a mantissa of 1. This means that <see cref="F:System.Double.Epsilon" /> is the smallest positive <see cref="T:System.Double" /> value greater than zero and represents the smallest possible value and the smallest possible increment for a <see cref="T:System.Double" /> whose exponent is -1022. </para>
          <para>code reference: System.Double.Epsilon#6</para>
          <para>However, the <see cref="F:System.Double.Epsilon" /> property is not a general measure of precision of the <see cref="T:System.Double" /> type; it applies only to <see cref="T:System.Double" /> instances that have a value of zero or an exponent of -1022. </para>
          <block subset="none" type="note">
            <para>The value of the <see cref="F:System.Double.Epsilon" /> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</para>
          </block>
          <para>The value of this constant is 4.94065645841247e-324. </para>
          <para>Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits. For example, the C# expression, (double)1/3 == (double)0.33333, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits. If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, we do not recommend that you base your algorithm on the value of the <see cref="F:System.Double.Epsilon" /> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.  (Typically, that margin of difference is many times greater than <see cref="F:System.Double.Epsilon" />.) For information about comparing two double-precision floating-point values, see <see cref="T:System.Double" /> and <see cref="M:System.Double.Equals(System.Double)" />. </para>
          <format type="text/html">
            <h2>Platform Notes</h2>
          </format>
          <para>On ARM systems, the value of the <see cref="F:System.Double.Epsilon" /> constant is too small to be detected, so it equates to zero. You can define an alternative epsilon value that equals 2.2250738585072014E-308 instead. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (double obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float64 obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Double" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method implements the <see cref="T:System.IEquatable`1" /> interface, and performs slightly better than <see cref="M:System.Double.Equals(System.Object)" /> because it does not have to convert the <paramref name="obj" /> parameter to an object.</para>
          <format type="text/html">
            <h2>Widening Conversions</h2>
          </format>
          <para>Depending on your programming language, it might be possible to code a <see cref="M:System.Double.Equals(System.Double)" /> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</para>
          <para>For example, suppose the instance type is <see cref="T:System.Double" /> and the parameter type is <see cref="T:System.Int32" />. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <see cref="T:System.Double" /> object, then generates a <see cref="M:System.Double.Equals(System.Double)" /> method that compares the values of the instance and the widened representation of the parameter.</para>
          <para>Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the <format type="text/html"><a href="0ea65c59-85eb-4a52-94ca-c36d3bd13058">Type Conversion Tables</a></format> topic.</para>
          <format type="text/html">
            <h2>Precision in Comparisons</h2>
          </format>
          <para>The <see cref="M:System.Double.Equals(System.Double)" /> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <see cref="T:System.Double" /> value .333333 and the <see cref="T:System.Double" /> value returned by dividing 1 by 3 are unequal.</para>
          <para>code reference: System.Double.Epsilon#1</para>
          <para>Rather than comparing for equality, one technique involves defining an acceptable relative margin of difference between two values (such as .001% of one of the values). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1/3, the two <see cref="T:System.Double" /> values that the previous code example found to be unequal. In this case, the values are equal. </para>
          <para>code reference: System.Double.Epsilon#2</para>
          <block subset="none" type="note">
            <para>Because <see cref="F:System.Double.Epsilon" /> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <see cref="F:System.Double.Epsilon" />. Typically, it is many times greater than <see cref="F:System.Double.Epsilon" />. Because of this, we recommend that you do not use <see cref="F:System.Double.Epsilon" /> when comparing <see cref="T:System.Double" /> values for equality. </para>
          </block>
          <para>A second technique involves comparing the difference between two floating-point numbers with some absolute value. If the difference is less than or equal to that absolute value, the numbers are equal. If it is greater, the numbers are not equal. One alternative is to arbitrarily select an absolute value. This is problematic, however, because an acceptable margin of difference depends on the magnitude of the <see cref="T:System.Double" /> values. A second alternative takes advantage of a design feature of the floating-point format: The difference between the integer representation of two floating-point values indicates the number of possible floating-point values that separates them. For example, the difference between 0.0 and <see cref="F:System.Double.Epsilon" /> is 1, because <see cref="F:System.Double.Epsilon" /> is the smallest representable value when working with a <see cref="T:System.Double" /> whose value is zero. The following example uses this technique to compare .33333 and 1/3, which are the two <see cref="T:System.Double" /> values that the previous code example with the <see cref="M:System.Double.Equals(System.Double)" /> method found to be unequal. Note that the example uses the <see cref="M:System.BitConverter.DoubleToInt64Bits(System.Double)" /> method to convert a double-precision floating-point value to its integer representation. </para>
          <para>code reference: System.Double.Equals#1</para>
          <para>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
          <para>If two <see cref="F:System.Double.NaN" /> values are tested for equality by calling the <see cref="M:System.Double.Equals(System.Double)" /> method, the method returns true. However, if two <see cref="F:System.Double.NaN" /> values are tested for equality by using the equality operator, the operator returns false. When you want to determine whether the value of a <see cref="T:System.Double" /> is not a number (NaN), an alternative is to call the <see cref="M:System.Double.IsNaN(System.Double)" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Double" /> object to compare to this instance.</param>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool Equals(object obj)" />
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.Equals(System.Double)" /> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <see cref="T:System.Double" /> value .3333 and the <see cref="T:System.Double" /> returned by dividing 1 by 3 are unequal.</para>
          <para>code reference: System.Double.Epsilon#3</para>
          <para>For alternatives to calling the <see cref="M:System.Double.Equals(System.Object)" /> method, see the documentation for the <see cref="M:System.Double.Equals(System.Double)" /> overload. </para>
          <block subset="none" type="note">
            <para>Because <see cref="F:System.Double.Epsilon" /> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <see cref="F:System.Double.Epsilon" />. Typically, it is many times greater than <see cref="F:System.Double.Epsilon" />.</para>
          </block>
          <para>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</para>
          <para>If two <see cref="F:System.Double.NaN" /> values are tested for equality by calling the <see cref="M:System.Double.Equals(System.Double)" /> method, the method returns true. However, if two <see cref="F:System.Double.NaN" /> values are tested for equality by using the equality operator, the operator returns false. When you want to determine whether the value of a <see cref="T:System.Double" /> is not a number (NaN), an alternative is to call the <see cref="M:System.Double.IsNaN(System.Double)" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether this instance is equal to a specified object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to compare with this instance. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual int32 GetHashCode()" />
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <para>
 The algorithm used to generate the hash code is
 unspecified.</para>
          <para>
            <block subset="none" type="note">
 
This method overrides <see cref="M:System.Object.GetHashCode" />.
</block>
          </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the hash code for this instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A 32-bit signed integer hash code.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsInfinity(float64 d)" />
      <MemberSignature Language="C#" Value="public static bool IsInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Floating-point operations return <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" /> to signal an overflow condition.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether the specified number evaluates to negative or positive infinity </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsNaN(float64 d)" />
      <MemberSignature Language="C#" Value="public static bool IsNaN (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Floating-point operations return <see cref="F:System.Double.NaN" /> to signal that that result of the operation is undefined. For example, dividing 0.0 by 0.0 results in <see cref="F:System.Double.NaN" />.</para>
          <block subset="none" type="note">
            <para>
              <see cref="M:System.Double.IsNaN(System.Double)" /> returns false if a <see cref="T:System.Double" /> value is either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />. To test for these values, use the <see cref="M:System.Double.IsInfinity(System.Double)" />, <see cref="M:System.Double.IsPositiveInfinity(System.Double)" />, and <see cref="M:System.Double.IsNegativeInfinity(System.Double)" /> methods. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Double.NaN" />).</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, false.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsNegativeInfinity(float64 d)" />
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Floating-point operations return <see cref="F:System.Double.NegativeInfinity" /> to signal an overflow condition.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether the specified number evaluates to negative infinity.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static bool IsPositiveInfinity(float64 d)" />
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float64 d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Floating-point operations return <see cref="F:System.Double.PositiveInfinity" /> to signal an overflow condition.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating whether the specified number evaluates to positive infinity.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, false.</para>
        </returns>
        <param name="d">
          <attribution license="cc4" from="Microsoft" modified="false" />A double-precision floating-point number. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 MaxValue = 1.7976931348623157e+308" />
      <MemberSignature Language="C#" Value="public const double MaxValue = 1.79769313486232E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MaxValue = float64(1.79769313486232E+308)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>1.79769313486232E+308</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is positive 1.7976931348623157E+308.</para>
          <para>The result of an operation that exceeds <see cref="F:System.Double.MaxValue" /> is <see cref="F:System.Double.PositiveInfinity" />. In the following example, <see cref="F:System.Double.PositiveInfinity" /> results from addition, multiplication, and exponentiation operations when the result exceeds <see cref="F:System.Double.MaxValue" />. </para>
          <para>code reference: System.Double.MaxValue#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 MinValue = -1.7976931348623157e+308" />
      <MemberSignature Language="C#" Value="public const double MinValue = -1.79769313486232E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MinValue = float64(-1.79769313486232E+308)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>-1.79769313486232E+308</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is negative 1.7976931348623157E+308.</para>
          <para>The result of an operation that is less than <see cref="F:System.Double.MinValue" />  is <see cref="F:System.Double.NegativeInfinity" />. In the following example, <see cref="F:System.Double.NegativeInfinity" /> results from subtraction and multiplication operations when the result is less than <see cref="F:System.Double.MinValue" />. </para>
          <para>code reference: System.Double.MinValue#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the smallest possible value of a <see cref="T:System.Double" />. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 NaN = (double)0.0 / (double)0.0" />
      <MemberSignature Language="C#" Value="public const double NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NaN = float64(NaN)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>NaN</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A method or operator returns <see cref="F:System.Double.NaN" /> when the result of an operation is undefined. For example, the result of dividing zero by zero is <see cref="F:System.Double.NaN" />, as the following example shows. (But note that dividing a non-zero number by zero returns either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, depending on the sign of the divisor.) </para>
          <para>code reference: System.Double.NaN#1</para>
          <para>In addition, a method call with a <see cref="F:System.Double.NaN" /> value or an operation on a <see cref="F:System.Double.NaN" /> value returns <see cref="F:System.Double.NaN" />, as the following example shows.</para>
          <para>code reference: System.Double.NaN#2</para>
          <para>Use the <see cref="M:System.Double.IsNaN(System.Double)" /> method to determine whether a value is not a number. Two <see cref="F:System.Double.NaN" /> values are considered unequal to one another. Therefore, it is not possible to determine whether a value is not a number by using the equality operator to compare it to another value that is equal to NaN. The comparison returns false, as the following example shows.</para>
          <para>code reference: System.Double.NaN#3</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents a value that is not a number (NaN). This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 NegativeInfinity = (double)-1.0 / (double)(0.0)" />
      <MemberSignature Language="C#" Value="public const double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NegativeInfinity = float64(-Infinity)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is the result of dividing a negative number by zero.</para>
          <para>This constant is returned when the result of an operation is less than <see cref="F:System.Double.MinValue" />.</para>
          <para>Use <see cref="M:System.Double.IsNegativeInfinity(System.Double)" /> to determine whether a value evaluates to negative infinity. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents negative infinity. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float64 left, float64 right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.op_Equality(System.Double,System.Double)" /> method defines the equality operator for <see cref="T:System.Double" /> values.</para>
          <para>If two <see cref="F:System.Double.NaN" /> values are tested for equality by using the equality operator, the result is false; two <see cref="F:System.Double.NaN" /> values are not considered equal. If they are tested for equality by calling the <see cref="M:System.Double.Equals(System.Double)" /> method, the result is true.  When you want to determine whether the value of a <see cref="T:System.Double" /> is not a number (NaN), an alternative is to call the <see cref="M:System.Double.IsNaN(System.Double)" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are equal.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare. </param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float64 left, float64 right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.op_GreaterThan(System.Double,System.Double)" /> method defines the operation of the greater-than operator for <see cref="T:System.Double" /> values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than another specified <see cref="T:System.Double" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)" /> method defines the operation of the greater-than-or-equal operator for <see cref="T:System.Double" /> values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than or equal to another specified <see cref="T:System.Double" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float64 left, float64 right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.op_Inequality(System.Double,System.Double)" /> method defines the inequality operator for <see cref="T:System.Double" /> values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are not equal.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float64 left, float64 right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.op_LessThan(System.Double,System.Double)" /> method defines the operation of the less-than operator for <see cref="T:System.Double" /> values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than another specified <see cref="T:System.Double" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)" /> method defines the operation of the less-than-or-equal operator for <see cref="T:System.Double" /> values.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than or equal to another specified <see cref="T:System.Double" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first value to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second value to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Parse(string s)" />
      <MemberSignature Language="C#" Value="public static double Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a value that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="s" /> parameter can contain the current culture's <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />, or a string of the form: </para>
          <para>[ws][sign][integral-digits[,]]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>A series of white-space characters. </para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>A negative sign symbol (-) or a positive sign symbol (+). Only a leading sign can be used. </para>
              </description>
            </item>
            <item>
              <term>
                <para>integral-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The integral-digits element can be absent if the string contains the fractional-digits element. </para>
              </description>
            </item>
            <item>
              <term>
                <para>,</para>
              </term>
              <description>
                <para>A culture-specific thousands separator symbol.</para>
              </description>
            </item>
            <item>
              <term>
                <para>. </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para>fractional-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the fractional part of the number. </para>
              </description>
            </item>
            <item>
              <term>
                <para>E </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. </para>
              </description>
            </item>
            <item>
              <term>
                <para>exponential-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify an exponent. </para>
              </description>
            </item>
          </list>
          <para>The <paramref name="s" /> parameter is interpreted using a combination of the <see cref="F:System.Globalization.NumberStyles.Float" /> and <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flags. This means that white space and thousands separators are allowed, for example, while currency symbols are not. For finer control over which style elements are permitted in <paramref name="s" /> for the parse operation to succeed, call the <see cref="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)" /> or the <see cref="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> method. </para>
          <para>The <paramref name="s" /> parameter is interpreted using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo" /> object that is initialized for the current thread culture. For more information, see <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />. To parse a string using the formatting information of some other culture, call the <see cref="M:System.Double.Parse(System.String,System.IFormatProvider)" /> or <see cref="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" /> method.</para>
          <para>Ordinarily, if you pass the <see cref="Overload:System.Double.Parse" /> method a string that is created by calling the <see cref="Overload:System.Double.ToString" /> method, the original <see cref="T:System.Double" /> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <see cref="F:System.Double.MinValue" /> or <see cref="F:System.Double.MaxValue" /> throws an <see cref="T:System.OverflowException" />, as the following example illustrates. </para>
          <para>code reference: System.Double.Parse#3</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number to its double-precision floating-point number equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a number to convert. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Parse(string s, valuetype System.Globalization.NumberStyles style)" />
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a value that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="style" /> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <paramref name="s" /> parameter for the parse operation to succeed. It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles" /> enumeration. The following <see cref="T:System.Globalization.NumberStyles" /> members are not supported:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Globalization.NumberStyles.HexNumber" />
              </para>
            </item>
          </list>
          <para>The <paramref name="s" /> parameter can contain the current culture's <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, or <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />. Depending on the value of <paramref name="style" />, it can also take the form: </para>
          <para>[ws][$][sign][integral-digits[,]]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </para>
          <para>Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>A series of white-space characters. White space can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> flag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>$</para>
              </term>
              <description>
                <para>A culture-specific currency symbol. Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" /> properties of the current culture. The current culture's currency symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" /> flag. Parentheses can be used in <paramref name="s" /> to indicate a negative value if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses" /> flag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>integral-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the integral part of the number. The integral-digits element can be absent if the string contains the fractional-digits element. </para>
              </description>
            </item>
            <item>
              <term>
                <para>,</para>
              </term>
              <description>
                <para>A culture-specific group separator. The current culture's group separator symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flag</para>
              </description>
            </item>
            <item>
              <term>
                <para>. </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>fractional-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>E </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>exponential-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify an exponent. </para>
              </description>
            </item>
          </list>
          <para>A string with digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None" /> style) always parses successfully. The remaining <see cref="T:System.Globalization.NumberStyles" /> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <see cref="T:System.Globalization.NumberStyles" /> flags affect the elements that may be present in <paramref name="s" />.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>NumberStyles value</para>
                </term>
                <description>
                  <para>Elements permitted in <paramref name="s" /> in addition to digits</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.None" />
                </para>
              </term>
              <description>
                <para>The integral-digits element only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />
                </para>
              </term>
              <description>
                <para>The decimal point (.) and fractional-digits elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowExponent" />
                </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates exponential notation. This flag by itself supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the beginning of <paramref name="s" />.  </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />
                </para>
              </term>
              <description>
                <para>The sign element at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />
                </para>
              </term>
              <description>
                <para>The sign element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowParentheses" />
                </para>
              </term>
              <description>
                <para>The sign element in the form of parentheses enclosing the numeric value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowThousands" />
                </para>
              </term>
              <description>
                <para>The thousands separator (,) element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" />
                </para>
              </term>
              <description>
                <para>The currency ($) element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Currency" />
                </para>
              </term>
              <description>
                <para>All elements. However, <paramref name="s" /> cannot represent a hexadecimal number or a number in exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Float" />
                </para>
              </term>
              <description>
                <para>The ws element at the beginning or end of <paramref name="s" />, sign at the beginning of <paramref name="s" />, and the decimal point (.) symbol. The <paramref name="s" /> parameter can also use exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Number" />
                </para>
              </term>
              <description>
                <para>The <paramref name="ws" />, <paramref name="sign" />, thousands separator (,) and decimal point (.) elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Any" />
                </para>
              </term>
              <description>
                <para>All elements. However, <paramref name="s" /> cannot represent a hexadecimal number.</para>
              </description>
            </item>
          </list>
          <para>The <paramref name="s" /> parameter is parsed using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo" /> object that is initialized for the current system culture. For more information, see <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</para>
          <para>Ordinarily, if you pass the <see cref="Overload:System.Double.Parse" /> method a string that is created by calling the <see cref="Overload:System.Double.ToString" /> method, the original <see cref="T:System.Double" /> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <see cref="F:System.Double.MinValue" /> or <see cref="F:System.Double.MaxValue" /> throws an <see cref="T:System.OverflowException" />, as the following example illustrates. </para>
          <para>code reference: System.Double.Parse#3</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a number to convert. </param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Parse(string s, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static double Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a value that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="M:System.Double.Parse(System.String,System.IFormatProvider)" /> method is typically used to convert text that can be formatted in a variety of ways to a <see cref="T:System.Double" /> value. For example, it can be used to convert the text that is entered by a user into an HTML text box to a numeric value.</para>
          <para>The <paramref name="s" /> parameter is interpreted using a combination of the <see cref="F:System.Globalization.NumberStyles.Float" /> and <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flags. The <paramref name="s" /> parameter can contain <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, or <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" /> for the culture specified by <paramref name="provider" />, or it can contain a string of the form: </para>
          <para>[ws][sign]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </para>
          <para>Optional elements are framed in square brackets ([ and ]). Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>A series of white-space characters. </para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>A negative sign symbol (-) or a positive sign symbol (+). </para>
              </description>
            </item>
            <item>
              <term>
                <para>integral-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The integral-digits element can be absent if the string contains the fractional-digits element. </para>
              </description>
            </item>
            <item>
              <term>
                <para>. </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para>fractional-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the fractional part of the number. </para>
              </description>
            </item>
            <item>
              <term>
                <para>E </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. </para>
              </description>
            </item>
            <item>
              <term>
                <para>exponential-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify an exponent. </para>
              </description>
            </item>
          </list>
          <para>For more information about numeric formats, see the <format type="text/html"><a href="0D1364DA-5B30-4D42-8E6B-03378343343F">[&lt;topic://cpConFormattingOverview&gt;]</a></format> topic.</para>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object that supplies culture-specific information used in interpreting the format of <paramref name="s" />. Typically, it is a <see cref="T:System.Globalization.NumberFormatInfo" /> or <see cref="T:System.Globalization.CultureInfo" /> object. If <paramref name="provider" /> is null or a <see cref="T:System.Globalization.NumberFormatInfo" /> cannot be obtained, the formatting information for the current system culture is used. </para>
          <para>Ordinarily, if you pass the <see cref="Overload:System.Double.Parse" /> method a string that is created by calling the <see cref="Overload:System.Double.ToString" /> method, the original <see cref="T:System.Double" /> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <see cref="F:System.Double.MinValue" /> or <see cref="F:System.Double.MaxValue" /> throws an <see cref="T:System.OverflowException" />, as the following example illustrates. </para>
          <para>code reference: System.Double.Parse#3</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a number to convert. </param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static float64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is a null reference</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct style.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a value that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="style" /> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <paramref name="s" /> parameter for the parse operation to succeed. It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles" /> enumeration. The following <see cref="T:System.Globalization.NumberStyles" /> members are not supported:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />
              </para>
            </item>
            <item>
              <para>
                <see cref="F:System.Globalization.NumberStyles.HexNumber" />
              </para>
            </item>
          </list>
          <para>The <paramref name="s" /> parameter can contain <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, or <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" /> for the culture specified by <paramref name="provider" />. Depending on the value of <paramref name="style" />, it can also take the form: </para>
          <para>[ws] [$] [sign][integral-digits,]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </para>
          <para>Elements framed in square brackets ([ and ]) are optional. The following table describes each element.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>ws</para>
              </term>
              <description>
                <para>A series of white-space characters. White space can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> flag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>$</para>
              </term>
              <description>
                <para>A culture-specific currency symbol. Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" /> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" /> properties of the current culture. The current culture's currency symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>sign</para>
              </term>
              <description>
                <para>A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flag, and it can appear at the end of <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" /> flag. Parentheses can be used in <paramref name="s" /> to indicate a negative value if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses" /> flag. </para>
              </description>
            </item>
            <item>
              <term>
                <para>integral-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the integral part of the number. The integral-digits element can be absent if the string contains the fractional-digits element. </para>
              </description>
            </item>
            <item>
              <term>
                <para>,</para>
              </term>
              <description>
                <para>A culture-specific group separator. The current culture's group separator symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> flag</para>
              </description>
            </item>
            <item>
              <term>
                <para>. </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>fractional-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <paramref name="s" /> if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>E </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The <paramref name="s" /> parameter can represent a number in exponential notation if <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag.</para>
              </description>
            </item>
            <item>
              <term>
                <para>exponential-digits</para>
              </term>
              <description>
                <para>A series of digits ranging from 0 to 9 that specify an exponent. </para>
              </description>
            </item>
          </list>
          <para>A string with digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None" /> style) always parses successfully. The remaining <see cref="T:System.Globalization.NumberStyles" /> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <see cref="T:System.Globalization.NumberStyles" /> flags affect the elements that may be present in <paramref name="s" />. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>NumberStyles value</para>
                </term>
                <description>
                  <para>Elements permitted in <paramref name="s" /> in addition to digits</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.None" />
                </para>
              </term>
              <description>
                <para>The integral-digits element only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />
                </para>
              </term>
              <description>
                <para>The decimal point (.) and fractional-digits elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowExponent" />
                </para>
              </term>
              <description>
                <para>The "e" or "E" character, which indicates exponential notation. This flag by itself supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the beginning of <paramref name="s" />.  </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />
                </para>
              </term>
              <description>
                <para>The ws element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />
                </para>
              </term>
              <description>
                <para>The sign element at the beginning of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />
                </para>
              </term>
              <description>
                <para>The sign element at the end of <paramref name="s" />.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowParentheses" />
                </para>
              </term>
              <description>
                <para>The sign element in the form of parentheses enclosing the numeric value.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowThousands" />
                </para>
              </term>
              <description>
                <para>The thousands separator (,) element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" />
                </para>
              </term>
              <description>
                <para>The currency ($) element.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Currency" />
                </para>
              </term>
              <description>
                <para>All elements. However, <paramref name="s" /> cannot represent a hexadecimal number or a number in exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Float" />
                </para>
              </term>
              <description>
                <para>The ws element at the beginning or end of <paramref name="s" />, sign at the beginning of <paramref name="s" />, and the decimal point (.) symbol. The <paramref name="s" /> parameter can also use exponential notation.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Number" />
                </para>
              </term>
              <description>
                <para>The <paramref name="ws" />, <paramref name="sign" />, thousands separator (,) and decimal point (.) elements.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="F:System.Globalization.NumberStyles.Any" />
                </para>
              </term>
              <description>
                <para>All elements. However, <paramref name="s" /> cannot represent a hexadecimal number.</para>
              </description>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object that supplies culture-specific information used in interpreting the format of <paramref name="s" />. Typically, it is a <see cref="T:System.Globalization.NumberFormatInfo" /> or <see cref="T:System.Globalization.CultureInfo" /> object. If <paramref name="provider" /> is null or a <see cref="T:System.Globalization.NumberFormatInfo" /> cannot be obtained, the formatting information for the current system culture is used. </para>
          <para>Ordinarily, if you pass the <see cref="Overload:System.Double.Parse" /> method a string that is created by calling the <see cref="Overload:System.Double.ToString" /> method, the original <see cref="T:System.Double" /> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <see cref="F:System.Double.MinValue" /> or <see cref="F:System.Double.MaxValue" /> throws an <see cref="T:System.OverflowException" />, as the following example illustrates. </para>
          <para>code reference: System.Double.Parse#3</para>
          <para>If a separator is encountered in the <paramref name="s" /> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />, <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />, and <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
        </returns>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that contains a number to convert. </param>
        <param name="style">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="ILASM" Value=".field public static literal float64 PositiveInfinity = (double)1.0 / (double)(0.0)" />
      <MemberSignature Language="C#" Value="public const double PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PositiveInfinity = float64(Infinity)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of this constant is the result of dividing a positive number by zero.</para>
          <para>This constant is returned when the result of an operation is greater than <see cref="F:System.Double.MaxValue" />.</para>
          <para>Use <see cref="M:System.Double.IsPositiveInfinity(System.Double)" /> to determine whether a value evaluates to positive infinity. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents positive infinity. This field is constant.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToBoolean(System.Double)" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the value of the current instance is not zero; otherwise, false.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToByte(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Byte" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This conversion is not supported. No value is returned.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToDecimal(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, unchanged.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt16(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to an <see cref="T:System.Int16" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt32(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to an <see cref="T:System.Int32" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToInt64(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to an <see cref="T:System.Int64" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToSByte(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to an <see cref="T:System.SByte" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToSingle(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.Single" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type targetType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type targetType, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="targetType">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the static (Shared in Visual Basic) <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to <paramref name="type" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt16(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored. </param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt32(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.   </param>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Double" /> instance is cast to an <see cref="T:System.IConvertible" /> interface. The recommended alternative is to call the <see cref="M:System.Convert.ToUInt64(System.Double)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />This parameter is ignored.</param>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual string ToString()" />
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.ToString" /> method formats a <see cref="T:System.Double" /> value in the default ("G", or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <see cref="M:System.Double.ToString(System.String)" /> method, as follows: </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.IFormatProvider)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.String)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)" />
                </para>
              </description>
            </item>
          </list>
          <para>   </para>
          <para>The return value can be <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />, or a string of the form: </para>
          <para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </para>
          <para>Optional elements are framed in square brackets ([ and ]). Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9. The elements listed in the following table are supported. </para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para> sign</para>
              </term>
              <description>
                <para>A negative sign or positive sign symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para> integral-digits</para>
              </term>
              <description>
                <para>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </para>
              </description>
            </item>
            <item>
              <term>
                <para> '.' </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para> fractional-digits</para>
              </term>
              <description>
                <para>A series of digits specifying the fractional part of the number. </para>
              </description>
            </item>
            <item>
              <term>
                <para> 'e' </para>
              </term>
              <description>
                <para>A lowercase character 'e', indicating exponential (scientific) notation. </para>
              </description>
            </item>
            <item>
              <term>
                <para> exponential-digits</para>
              </term>
              <description>
                <para>A series of digits specifying an exponent. </para>
              </description>
            </item>
          </list>
          <para>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.ToString(System.IFormatProvider)" /> method formats a <see cref="T:System.Double" /> value in the default ("G", or general) format of a specified culture. If you want to specify a different format or culture, use the other overloads of the <see cref="M:System.Double.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) </para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.String)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)" />
                </para>
              </description>
            </item>
          </list>
          <para>The return value can be <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />, or a string of the form: </para>
          <para>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </para>
          <para>Optional elements are framed in square brackets ([ and ]). Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9. The elements listed in the following table are supported.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Element</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para> sign</para>
              </term>
              <description>
                <para>A negative sign or positive sign symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para> integral-digits</para>
              </term>
              <description>
                <para>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </para>
              </description>
            </item>
            <item>
              <term>
                <para> '.' </para>
              </term>
              <description>
                <para>A culture-specific decimal point symbol. </para>
              </description>
            </item>
            <item>
              <term>
                <para> fractional-digits</para>
              </term>
              <description>
                <para>A series of digits specifying the fractional part of the number. </para>
              </description>
            </item>
            <item>
              <term>
                <para> 'e' </para>
              </term>
              <description>
                <para>A lowercase character 'e', indicating exponential (scientific) notation. </para>
              </description>
            </item>
            <item>
              <term>
                <para> exponential-digits</para>
              </term>
              <description>
                <para>A series of digits specifying an exponent. </para>
              </description>
            </item>
          </list>
          <para>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</para>
          <para>This instance is formatted with the general numeric format specifier ("G").</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object. Typically, <paramref name="provider" /> is a <see cref="T:System.Globalization.CultureInfo" /> object or a <see cref="T:System.Globalization.NumberFormatInfo" /> object. The <paramref name="provider" /> parameter supplies culture-specific information used in formatting. If <paramref name="provider" /> is null, the return value is formatted using the <see cref="T:System.Globalization.NumberFormatInfo" /> object for the current culture.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="provider" />.</para>
        </returns>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public hidebysig instance string ToString(string format)" />
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <example>
          <para>The following example shows the effects of various
      formats on the string returned by <see cref="M:System.Double.ToString" />.</para>
          <code lang="C#">using System;
class test {
  public static void Main() {
    double d = 1234.56789;
    Console.WriteLine(d);
    string[] fmts = {"C","E","e5","F","G","N","P","R"};
    for (int i=0;i&lt;fmts.Length;i++)
      Console.WriteLine("{0}: {1}", 
      fmts[i],d.ToString(fmts[i]));
  }
}
   </code>
          <para>The output is</para>
          <c>
            <para>1234.56789</para>
            <para>C: $1,234.57</para>
            <para>E: 1.234568E+003</para>
            <para>e5: 1.23457e+003</para>
            <para>F: 1234.57</para>
            <para>G: 1234.56789</para>
            <para>N: 1,234.57</para>
            <para>P: 123,456.79 %</para>
            <para>R: 1234.56789</para>
          </c>
        </example>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.ToString(System.String)" /> method formats a <see cref="T:System.Double" /> value in a specified format by using the conventions of the current culture. If you want to specify a different format or culture, use the other overloads of the <see cref="M:System.Double.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.IFormatProvider)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)" />
                </para>
              </description>
            </item>
          </list>
          <para>The return value can be <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />, or the string representation of a number, as specified by <paramref name="format" />. </para>
          <para>The <paramref name="format" /> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If <paramref name="format" /> is null or an empty string, the return value is formatted with the general numeric format specifier ("G").</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally. If the value of this instance has greater than 15 digits, <see cref="Overload:System.Double.ToString" /> returns <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" /> or <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" /> instead of the expected number. If you require more precision, specify <paramref name="format" /> with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric format string.</param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="ILASM" Value=".method public final hidebysig virtual string ToString(string format, class System.IFormatProvider provider)" />
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)" /> method formats a <see cref="T:System.Double" /> value in a specified format of a specified culture. If you want to specify a different format or culture, use the other overloads of the <see cref="M:System.Double.ToString(System.String)" /> method, as follows:</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>To use format</para>
                </term>
                <description>
                  <para>For culture</para>
                </description>
                <description>
                  <para>Use the overload</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Default ("G") format</para>
              </term>
              <description>
                <para>A specific culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.IFormatProvider)" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>A specific format</para>
              </term>
              <description>
                <para>Default (current) culture</para>
              </description>
              <description>
                <para>
                  <see cref="M:System.Double.ToString(System.String)" />
                </para>
              </description>
            </item>
          </list>
          <para>The return value can be <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />, <see cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />, or the string representation of a number, as specified by <paramref name="format" />.</para>
          <para>The <paramref name="format" /> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If <paramref name="format" /> is null or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</para>
          <list type="bullet">
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>The <paramref name="provider" /> parameter is an <see cref="T:System.IFormatProvider" /> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)" /> method returns a <see cref="T:System.Globalization.NumberFormatInfo" /> object. Typically, <paramref name="provider" /> is a <see cref="T:System.Globalization.CultureInfo" /> object or a <see cref="T:System.Globalization.NumberFormatInfo" /> object. The <paramref name="provider" /> parameter supplies culture-specific information used in formatting. If <paramref name="provider" /> is null, the return value is formatted using the <see cref="T:System.Globalization.NumberFormatInfo" /> object for the current culture.</para>
          <para>By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally. If the value of this instance has greater than 15 digits, <see cref="Overload:System.Double.ToString" /> returns <see cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" /> or <see cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" /> instead of the expected number. If you require more precision, specify <paramref name="format" /> with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
        </returns>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A numeric format string.</param>
        <param name="provider">
          <attribution license="cc4" from="Microsoft" modified="false" />An object that supplies culture-specific formatting information. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, float64 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, float64 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>