<?xml version="1.0" encoding="utf-8"?>
<Type Name="Console" FullName="System.Console" FullNameSP="System_Console" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed Console extends System.Object" />
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>This type is safe for multithreaded operations. </ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <example>
      <para>The following example demonstrates the use of basic <see cref="T:System.Console" /> input and output
   functions. The program waits for the user to enter a name.</para>
      <code lang="C#">
using System;

public class ConsoleTest {
   public static void Main() {       
      Console.Write("Hello ");
      Console.WriteLine("World!");
      Console.Write("What is your name: ");
      string name = Console.ReadLine();
      Console.Write("Hello, ");
      Console.Write(name);
      Console.WriteLine("!");
   }
}
</code>
      <para>The output for a user who entered the name "Fred" is</para>
      <c>
        <para>Hello World!</para>
        <para>What is your name: Fred</para>
        <para>Hello, Fred!</para>
      </c>
    </example>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The <see cref="T:System.Console" /> class provides basic support for applications that read characters from, and write characters to, the console. </para>
      <para>For information about developing with the <see cref="T:System.Console" /> class, see the following sections:</para>
      <list type="bullet">
        <item>
          <para>
            <format type="text/html">
              <a href="#Streams">Console I/O Streams</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Buffer">Screen Buffer and Console Window</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Unicode">Unicode Support for the Console</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#Operations">Common Operations</a>
            </format>
          </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#Streams" />
      </format>
      <format type="text/html">
        <h2>Console I/O Streams</h2>
      </format>
      <para>When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <see cref="P:System.Console.In" />, <see cref="P:System.Console.Out" />, and <see cref="P:System.Console.Error" /> properties.</para>
      <para>By default, the value of the <see cref="P:System.Console.In" /> property is a <see cref="T:System.IO.TextReader" /> object, and the values of the <see cref="P:System.Console.Out" /> and <see cref="P:System.Console.Error" /> properties are <see cref="T:System.IO.TextWriter" /> objects. However, you can set these properties to streams that do not represent the console; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <see cref="M:System.Console.SetIn(System.IO.TextReader)" />, <see cref="M:System.Console.SetOut(System.IO.TextWriter)" />, or <see cref="M:System.Console.SetError(System.IO.TextWriter)" /> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams.</para>
      <block subset="none" type="note">
        <para>Do not use the <see cref="T:System.Console" /> class to display output in unattended applications, such as server applications. Calls to methods such as <see cref="Overload:System.Console.Write" /> and <see cref="Overload:System.Console.WriteLine" /> have no effect in GUI applications. </para>
      </block>
      <para>
        <see cref="T:System.Console" /> class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <see cref="T:System.IO.IOException" /> exceptions if you redirect a standard stream. You can also use the <see cref="P:System.Console.IsOutputRedirected" />, <see cref="P:System.Console.IsInputRedirected" />, and <see cref="P:System.Console.IsErrorRedirected" /> properties to determine whether a standard stream is redirected before performing an operation that throws an <see cref="T:System.IO.IOException" /> exception. </para>
      <para>It is sometimes useful to explicitly call the members of the stream objects represented by the <see cref="P:System.Console.In" />, <see cref="P:System.Console.Out" />, and <see cref="P:System.Console.Error" /> properties. For example, by default, the <see cref="M:System.Console.ReadLine" /> method reads input from the standard input stream. Similarly, the <see cref="M:System.Console.WriteLine" /> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed ("\r\n"). However, the <see cref="T:System.Console" /> class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream. </para>
      <para>You can solve this problem by setting the <see cref="P:System.IO.TextWriter.NewLine" /> property of the <see cref="P:System.Console.Out" /> or <see cref="P:System.Console.Error" /> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences: </para>
      <para>Console.Error.NewLine = "\r\n\r\n";</para>
      <para>You can then explicitly call the <see cref="Overload:System.IO.TextWriter.WriteLine" /> method of the error output stream object, as in the following C# statement:</para>
      <para>Console.Error.WriteLine();</para>
      <format type="text/html">
        <a href="#Buffer" />
      </format>
      <format type="text/html">
        <h2>Screen Buffer and Console Window</h2>
      </format>
      <para>Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.</para>
      <para>The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.</para>
      <para>A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.</para>
      <para>The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <see cref="F:System.Int16.MaxValue" />.</para>
      <format type="text/html">
        <a href="#Unicode" />
      </format>
      <format type="text/html">
        <h2>Unicode Support for the Console</h2>
      </format>
      <para>In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.</para>
      <para>code reference: System.Console.Class#1</para>
      <para>In addition to supporting code pages, the <see cref="T:System.Console" /> class supports UTF-8 encoding with the <see cref="T:System.Text.UTF8Encoding" /> class. Beginning with the .NET Framework 4.5, the <see cref="T:System.Console" /> class also supports UTF-16 encoding with the <see cref="T:System.Text.UnicodeEncoding" /> class. To display Unicode characters to the console. you set the <see cref="P:System.Console.OutputEncoding" /> property to either <see cref="T:System.Text.UTF8Encoding" /> or  <see cref="T:System.Text.UnicodeEncoding" />. </para>
      <para>Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.</para>
      <para>code reference: System.Console.Class.Unsafe#3</para>
      <para>However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the <ui>Fonts</ui> applet in Control Panel, choose the <ui>Find a character</ui> option, and choose the font whose character set you'd like to examine in the <ui>Font</ui> list of the <ui>Character Map</ui> window.</para>
      <para>Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see <see cref="http://go.microsoft.com/fwlink/?LinkId=229111">Globalization Step-by-Step: Fonts</see>. Linked fonts are defined in the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form font-file-name,font-name. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.</para>
      <para>code reference: System.Console.Class#2</para>
      <para>Unicode support for the console has the following limitations:</para>
      <list type="bullet">
        <item>
          <para>UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <see cref="T:System.Text.UTF8Encoding" /> and <see cref="T:System.Text.UnicodeEncoding" /> classes, respectively. </para>
        </item>
        <item>
          <para>Bidirectional output is not supported.</para>
        </item>
        <item>
          <para>Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.</para>
        </item>
        <item>
          <para>Display of characters in complex scripts is not supported.</para>
        </item>
        <item>
          <para>Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <see cref="M:System.String.Normalize" /> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <see cref="M:System.String.Normalize" /> method is called.</para>
          <para>code reference: System.Console.Class#5</para>
          <para>Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.</para>
        </item>
        <item>
          <para>If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.</para>
        </item>
      </list>
      <para>The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (false) or UTF-16 encoding (true). It assumes that the console is using a TrueType font.</para>
      <para>code reference: System.Console.Class#4</para>
      <format type="text/html">
        <a href="#Operations" />
      </format>
      <format type="text/html">
        <h2>Common Operations</h2>
      </format>
      <para>The <see cref="T:System.Console" /> class contains the following methods for reading console input and writing console output: </para>
      <list type="bullet">
        <item>
          <para>The overloads of the <see cref="M:System.Console.ReadKey" /> method read an individual character.</para>
        </item>
        <item>
          <para>The <see cref="M:System.Console.ReadLine" /> method reads an entire line of input.</para>
        </item>
        <item>
          <para>The <see cref="M:System.Console.Write(System.Boolean)" /> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.</para>
        </item>
        <item>
          <para>A parallel set of <see cref="M:System.Console.WriteLine" /> method overloads output the same string as the <see cref="M:System.Console.Write(System.Boolean)" /> overloads but also add a line termination string. </para>
        </item>
      </list>
      <para>The <see cref="T:System.Console" /> class also contains methods and properties to perform the following operations:</para>
      <list type="bullet">
        <item>
          <para>Get or set the size of the screen buffer. The <see cref="P:System.Console.BufferHeight" /> and <see cref="P:System.Console.BufferWidth" /> properties let you get or set the buffer height and width, respectively, and the <see cref="M:System.Console.SetBufferSize(System.Int32,System.Int32)" /> method lets you set the buffer size in a single method call.</para>
        </item>
        <item>
          <para>Get or set the size of the console window. The <see cref="P:System.Console.WindowHeight" /> and <see cref="P:System.Console.WindowWidth" /> properties let you get or set the window height and width, respectively, and the <see cref="M:System.Console.SetWindowSize(System.Int32,System.Int32)" /> method lets you set the window size in a single method call.</para>
        </item>
        <item>
          <para>Get or set the size of the cursor. The <see cref="P:System.Console.CursorSize" /> property specifies the height of the cursor in a character cell.</para>
        </item>
        <item>
          <para>Get or set the position of the console window relative to the screen buffer. The <see cref="P:System.Console.WindowTop" /> and <see cref="P:System.Console.WindowLeft" /> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <see cref="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" /> method lets you set these values in a single method call. </para>
        </item>
        <item>
          <para>Get or set the position of the cursor by getting or setting the <see cref="P:System.Console.CursorTop" /> and <see cref="P:System.Console.CursorLeft" /> properties, or set the position of the cursor by calling the <see cref="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" /> method.</para>
        </item>
        <item>
          <para>Move or clear data in the screen buffer by calling the <see cref="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> or <see cref="M:System.Console.Clear" /> method.</para>
        </item>
        <item>
          <para>Get or set the foreground and background colors by using the <see cref="P:System.Console.ForegroundColor" /> and <see cref="P:System.Console.BackgroundColor" /> properties, or reset the background and foreground to their default colors by calling the <see cref="M:System.Console.ResetColor" /> method. </para>
        </item>
        <item>
          <para>Play the sound of a beep through the console speaker by calling the <see cref="M:System.Console.Beep" /> method.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para> A change to the <see cref="P:System.Console.BackgroundColor" /> property affects only output that is written to individual character cells after the background color is changed. To change the background color of the console window as a whole, set the <see cref="P:System.Console.BackgroundColor" /> property and call the <see cref="M:System.Console.Clear" /> method. The following example provides an illustration. </para>
          <para>code reference: System.Console.BackgroundColor#1</para>
          <para>A get operation for a Windows-based application, in which a console does not exist, returns <see cref="F:System.ConsoleColor.Black" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the background color of the console.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds. </para>
          <block subset="none" type="note">
            <para>   The <see cref="Overload:System.Console.Beep" /> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Plays the sound of a beep through the console speaker.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>   The <see cref="Overload:System.Console.Beep" /> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Plays the sound of a beep of a specified frequency and duration through the console speaker.</para>
        </summary>
        <param name="frequency">
          <attribution license="cc4" from="Microsoft" modified="false" />The frequency of the beep, ranging from 37 to 32767 hertz.</param>
        <param name="duration">
          <attribution license="cc4" from="Microsoft" modified="false" />The duration of the beep measured in milliseconds.</param>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <see cref="P:System.Console.WindowHeight" /> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <see cref="P:System.Console.WindowHeight" /> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <see cref="P:System.Console.WindowHeight" /> property and are located anywhere in the buffer.</para>
          <para>If a set operation decreases the value of the <see cref="P:System.Console.BufferHeight" /> property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the height of the buffer area.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If a set operation decreases the value of the <see cref="P:System.Console.BufferWidth" /> property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the width of the buffer area.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is used in conjunction with <see cref="T:System.ConsoleCancelEventHandler" /> and <see cref="T:System.ConsoleCancelEventArgs" />. The <see cref="E:System.Console.CancelKeyPress" /> event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate. For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
          <para>When the user presses either Ctrl+C or Ctrl+Break, the <see cref="E:System.Console.CancelKeyPress" /> event is fired and the application's <see cref="T:System.ConsoleCancelEventHandler" /> event handler is executed. The event handler is passed a <see cref="T:System.ConsoleCancelEventArgs" /> object that has two useful properties: </para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.ConsoleCancelEventArgs.SpecialKey" />, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <see cref="F:System.ConsoleSpecialKey.ControlC" />) or Ctrl+Break (the property value is <see cref="F:System.ConsoleSpecialKey.ControlBreak" />). </para>
            </item>
            <item>
              <para>
                <see cref="P:System.ConsoleCancelEventArgs.Cancel" />, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break. By default, the <see cref="P:System.ConsoleCancelEventArgs.Cancel" /> property is false, which causes program execution to terminate when the event handler exits. Changing its property to true specifies that the application should continue to execute. </para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>If your application has simple requirements, you can use the <see cref="P:System.Console.TreatControlCAsInput" /> property instead of this event. By setting this property to false, you can ensure that your application always exits if the user presses Ctrl+C. By setting it to true, you can ensure that pressing Ctrl+C will not terminate the application. </para>
          </block>
          <para>The event handler for this event is executed on a thread pool thread.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="F:System.ConsoleModifiers.Control" /> modifier key (Ctrl) and either the <see cref="F:System.ConsoleKey.C" /> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Using the <see cref="M:System.Console.Clear" /> method is equivalent invoking the MS-DOS cls command in the command prompt window. When the <see cref="M:System.Console.Clear" /> method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.</para>
          <block subset="none" type="note">
            <para>Attempting to call the <see cref="M:System.Console.Clear" /> method when a console application's output is redirected to a file throws a <see cref="T:System.IO.IOException" />. To prevent this, always wrap a call to the <see cref="M:System.Console.Clear" /> method in a try…catch block.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears the console buffer and corresponding console window of display information.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the column position of the cursor within the buffer area.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the height of the cursor within a character cell.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the row position of the cursor within the buffer area.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the cursor is visible.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="ILASM" Value=".property class System.IO.TextWriter Error { public hidebysig static specialname class System.IO.TextWriter get_Error() }" />
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A synchronized <see cref="T:System.IO.TextWriter" /> object where error
   output is sent.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is set to the standard error stream by default. This property can be set to another stream with the <see cref="M:System.Console.SetError(System.IO.TextWriter)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the standard error output stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A get operation for a Windows-based application, in which a console does not exist, returns <see cref="F:System.ConsoleColor.Gray" />. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the foreground color of the console.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="ILASM" Value=".property class System.IO.TextReader In { public hidebysig static specialname class System.IO.TextReader get_In() }" />
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A synchronized <see cref="T:System.IO.TextReader" /> object from which user input is received.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is set to the standard input stream by default. This property can be set to another stream with the <see cref="M:System.Console.SetIn(System.IO.TextReader)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the standard input stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.</para>
          <para>Starting with the net_v40_long, a property get operation may return a cached value instead of the console's current input encoding. This can occur if the value of the <see cref="P:System.Console.InputEncoding" /> property is modified by some means other than an assignment to the <see cref="P:System.Console.InputEncoding" /> property, such as calling the Windows SetConsoleCP function or using the chcp command from a PowerShell script. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the encoding the console uses to read input. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that indicates whether input has been redirected from the standard input stream.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that indicates whether output has been redirected from the standard output stream.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is returned immediately; that is, the <see cref="P:System.Console.KeyAvailable" /> property does not block input until a key press is available.</para>
          <para>Use the <see cref="P:System.Console.KeyAvailable" /> property in conjunction with only the <see cref="M:System.Console.ReadKey" /> method, not the <see cref="M:System.Console.Read" /> or <see cref="M:System.Console.ReadLine" /> methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether a key press is available in the input stream.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the largest possible number of console window rows, based on the current font and screen resolution.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the largest possible number of console window columns, based on the current font and screen resolution.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.</para>
          <para>The <see cref="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Copies a specified source area of the screen buffer to a specified destination area.</para>
        </summary>
        <param name="sourceLeft">
          <attribution license="cc4" from="Microsoft" modified="false" />The leftmost column of the source area. </param>
        <param name="sourceTop">
          <attribution license="cc4" from="Microsoft" modified="false" />The topmost row of the source area. </param>
        <param name="sourceWidth">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of columns in the source area. </param>
        <param name="sourceHeight">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of rows in the source area. </param>
        <param name="targetLeft">
          <attribution license="cc4" from="Microsoft" modified="false" />The leftmost column of the destination area. </param>
        <param name="targetTop">
          <attribution license="cc4" from="Microsoft" modified="false" />The topmost row of the destination area. </param>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.</para>
          <para>The <see cref="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by <paramref name="sourceChar" />, using the colors specified by <paramref name="sourceForeColor" /> and <paramref name="sourceBackColor" />. Otherwise, the intersected portion of the source area is not filled.</para>
          <para>The <see cref="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> method performs no operation if <paramref name="sourceWidth" /> or <paramref name="sourceHeight" /> is zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Copies a specified source area of the screen buffer to a specified destination area.</para>
        </summary>
        <param name="sourceLeft">
          <attribution license="cc4" from="Microsoft" modified="false" />The leftmost column of the source area. </param>
        <param name="sourceTop">
          <attribution license="cc4" from="Microsoft" modified="false" />The topmost row of the source area. </param>
        <param name="sourceWidth">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of columns in the source area. </param>
        <param name="sourceHeight">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of rows in the source area. </param>
        <param name="targetLeft">
          <attribution license="cc4" from="Microsoft" modified="false" />The leftmost column of the destination area. </param>
        <param name="targetTop">
          <attribution license="cc4" from="Microsoft" modified="false" />The topmost row of the destination area. </param>
        <param name="sourceChar">
          <attribution license="cc4" from="Microsoft" modified="false" />The character used to fill the source area. </param>
        <param name="sourceForeColor">
          <attribution license="cc4" from="Microsoft" modified="false" />The foreground color used to fill the source area. </param>
        <param name="sourceBackColor">
          <attribution license="cc4" from="Microsoft" modified="false" />The background color used to fill the source area. </param>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.IO.Stream OpenStandardError()" />
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to reacquire the standard error stream after it has been changed by the <see cref="M:System.Console.SetError(System.IO.TextWriter)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Acquires the standard error stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The standard error stream.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.IO.Stream OpenStandardError(int32 bufferSize)" />
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to reacquire the standard error stream after it has been changed by the <see cref="M:System.Console.SetError(System.IO.TextWriter)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Acquires the standard error stream, which is set to a specified buffer size.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The standard error stream.</para>
        </returns>
        <param name="bufferSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The internal stream buffer size. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.IO.Stream OpenStandardInput()" />
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to reacquire the standard input stream after it has been changed by the <see cref="M:System.Console.SetIn(System.IO.TextReader)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Acquires the standard input stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The standard input stream.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.IO.Stream OpenStandardInput(int32 bufferSize)" />
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to reacquire the standard output stream after it has been changed by the <see cref="M:System.Console.SetIn(System.IO.TextReader)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Acquires the standard input stream, which is set to a specified buffer size.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The standard input stream.</para>
        </returns>
        <param name="bufferSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The internal stream buffer size. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.IO.Stream OpenStandardOutput()" />
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to reacquire the standard output stream after it has been changed by the <see cref="M:System.Console.SetOut(System.IO.TextWriter)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Acquires the standard output stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The standard output stream.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static class System.IO.Stream OpenStandardOutput(int32 bufferSize)" />
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method can be used to reacquire the standard output stream after it has been changed by the <see cref="M:System.Console.SetOut(System.IO.TextWriter)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Acquires the standard output stream, which is set to a specified buffer size.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The standard output stream.</para>
        </returns>
        <param name="bufferSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The internal stream buffer size. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="ILASM" Value=".property class System.IO.TextWriter Out { public hidebysig static specialname class System.IO.TextWriter get_Out() }" />
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>
          <para>A synchronized <see cref="T:System.IO.TextWriter" /> object where normal output is sent.</para>
        </value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is set to the standard output stream by default. This property can be set to another stream with the <see cref="M:System.Console.SetOut(System.IO.TextWriter)" /> method.</para>
          <para>Note that calls to Console.Out.WriteLine methods are equivalent to calls to the corresponding <see cref="Overload:System.Console.WriteLine" /> methods. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the standard output stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The console uses the output encoding to translate characters written by an application into corresponding console display characters. The default code page that the console uses is determined by the system locale.</para>
          <para>Starting with the net_v40_long, a property get operation may return a cached value instead of the console's current output encoding. This can occur if the value of the <see cref="P:System.Console.OutputEncoding" /> property is modified by some means other than an assignment to the <see cref="P:System.Console.OutputEncoding" /> property, such as calling the Windows SetConsoleOutputCP function. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the encoding the console uses to write output. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static int32 Read()" />
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Console.Read" /> method blocks its return while you type input characters; it terminates when you press the <see cref="F:System.ConsoleKey.Enter" /> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the <see cref="M:System.Console.Read" /> method retrieve your input one character at a time. After the final character is retrieved, <see cref="M:System.Console.Read" /> blocks its return again and the cycle repeats.</para>
          <para>Note that you will not get a property value of -1 unless you perform one of the following actions: simultaneously press the <see cref="F:System.ConsoleModifiers.Control" /> modifier key and <see cref="F:System.ConsoleKey.Z" /> console key (Ctrl+Z), which signals the end-of-file condition; press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows; or  redirect the input stream to a source, such as a text file, that has an actual end-of-file character.</para>
          <para>The <see cref="M:System.Console.ReadLine" /> method, or the <see cref="P:System.Console.KeyAvailable" /> property and <see cref="M:System.Console.ReadKey" /> method are preferable to using the <see cref="M:System.Console.Read" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the next character from the standard input stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Console.ReadKey" /> method waits, that is, blocks on the thread issuing the <see cref="M:System.Console.ReadKey" /> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <see cref="M:System.Console.ReadKey" /> method to return.</para>
          <para>Depending on your application, you might want to use the <see cref="M:System.Console.ReadKey" /> method in conjunction with the <see cref="P:System.Console.KeyAvailable" /> property.</para>
          <para>The <see cref="M:System.Console.ReadKey" /> method reads from the keyboard even if the standard input is redirected to a file with the <see cref="M:System.Console.SetIn(System.IO.TextReader)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.ConsoleKeyInfo" /> object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Console.ReadKey" /> method waits, that is, blocks on the thread issuing the <see cref="M:System.Console.ReadKey" /> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <see cref="M:System.Console.ReadKey" /> method to return.</para>
          <para>If the <paramref name="intercept" /> parameter is true, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.</para>
          <para>Depending on your application, you might want to use the <see cref="M:System.Console.ReadKey" /> method in conjunction with the <see cref="P:System.Console.KeyAvailable" /> property.</para>
          <para>The <see cref="M:System.Console.ReadKey" /> method reads from the keyboard even if the standard input is redirected to a file with the <see cref="M:System.Console.SetIn(System.IO.TextReader)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.ConsoleKeyInfo" /> object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</para>
        </returns>
        <param name="intercept">
          <attribution license="cc4" from="Microsoft" modified="false" />Determines whether to display the pressed key in the console window. true to not display the pressed key; otherwise, false. </param>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static string ReadLine()" />
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <see cref="P:System.Environment.NewLine" /> property. The returned string does not contain the terminating character(s). By default, the method reads input from a 256-character input buffer. Because this includes the <see cref="P:System.Environment.NewLine" /> character(s), the method can read lines that contain up to 254 characters. To read longer lines, call the <see cref="M:System.Console.OpenStandardInput(System.Int32)" /> method. </para>
          <para>If this method throws <see cref="T:System.OutOfMemoryException" />, the reader's position in the underlying <see cref="T:System.IO.Stream" /> is advanced by the number of characters the method was able to read, but the characters already read into the internal <see cref="M:System.Console.ReadLine" /> buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <see cref="T:System.IO.TextReader" />. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <see cref="T:System.IO.Stream" /> also needs to be reinitialized.</para>
          <para>To avoid such a situation and produce robust code you should use the <see cref="M:System.Console.Read" /> method and store the read characters in a preallocated buffer.</para>
          <para>If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns null. This enables the user to prevent further keyboard input when the <see cref="M:System.Console.ReadLine" /> method is called in a loop. The following example illustrates this scenario.</para>
          <para>code reference: System.Console.ReadLine#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Reads the next line of characters from the standard input stream.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The next line of characters from the input stream, or null if no more lines are available.</para>
        </returns>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <see cref="P:System.Console.ForegroundColor" /> and <see cref="P:System.Console.BackgroundColor" /> properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the foreground and background console colors to their defaults.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the height and width of the screen buffer area to the specified values.</para>
        </summary>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />The width of the buffer area measured in columns. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />The height of the buffer area measured in rows. </param>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" /> method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.</para>
          <para>The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <see cref="Overload:System.Console.MoveBufferArea" /> method to move a character to that position. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the position of the cursor.</para>
        </summary>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The column position of the cursor. Columns are numbered from left to right starting at 0. </param>
        <param name="top">
          <attribution license="cc4" from="Microsoft" modified="false" />The row position of the cursor. Rows are numbered from top to bottom starting at 0. </param>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void SetError(class System.IO.TextWriter newError)" />
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> is <see langword="null" />. </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">Requires <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> permission.</permission>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the <see cref="P:System.Console.Error" /> property is set to the standard error output stream.</para>
          <para>A <see cref="T:System.IO.StreamWriter" /> that encapsulates a <see cref="T:System.IO.FileStream" /> can be used to send error messages to a file.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</para>
        </summary>
        <param name="newError">
          <attribution license="cc4" from="Microsoft" modified="false" />A stream that is the new standard error output. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void SetIn(class System.IO.TextReader newIn)" />
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> is <see langword="null" />. </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">Requires permission to execute unmanaged code. See <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> .</permission>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the <see cref="P:System.Console.In" /> property is set to the standard input stream.</para>
          <para>A <see cref="T:System.IO.StreamReader" /> that encapsulates a <see cref="T:System.IO.FileStream" /> can be used to receive input from a file.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the <see cref="P:System.Console.In" /> property to the specified <see cref="T:System.IO.TextReader" /> object.</para>
        </summary>
        <param name="newIn">
          <attribution license="cc4" from="Microsoft" modified="false" />A stream that is the new standard input. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void SetOut(class System.IO.TextWriter newOut)" />
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">Requires permission to execute unmanaged code. See <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> .</permission>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, the <see cref="P:System.Console.Out" /> property is set to the standard output stream.</para>
          <para>A <see cref="T:System.IO.StreamWriter" /> that encapsulates a <see cref="T:System.IO.FileStream" /> can be used to send output to a file. For example:</para>
          <para>code reference: System.Console.SetOut#1</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the <see cref="P:System.Console.Out" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</para>
        </summary>
        <param name="newOut">
          <attribution license="cc4" from="Microsoft" modified="false" />A stream that is the new standard output. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The operating system window displays the console window, and the console window displays a portion of the screen buffer. The <see cref="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" /> method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.</para>
          <para>The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the <see cref="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" /> method affects the position of the operating system window scroll bars.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the position of the console window relative to the screen buffer.</para>
        </summary>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The column position of the upper left  corner of the console window. </param>
        <param name="top">
          <attribution license="cc4" from="Microsoft" modified="false" />The row position of the upper left corner of the console window. </param>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the height and width of the console window to the specified values.</para>
        </summary>
        <param name="width">
          <attribution license="cc4" from="Microsoft" modified="false" />The width of the console window measured in columns. </param>
        <param name="height">
          <attribution license="cc4" from="Microsoft" modified="false" />The height of the console window measured in rows. </param>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the title to display in the console title bar.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the value of the <see cref="P:System.Console.TreatControlCAsInput" /> property is false and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process. This is the default value. </para>
          <block subset="none" type="note">
            <para>Use this property judiciously because setting it to true has such a dramatic effect. Most users expect Ctrl+C to terminate a console application. If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the combination of the <see cref="F:System.ConsoleModifiers.Control" /> modifier key and <see cref="F:System.ConsoleKey.C" /> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the height of the console window area.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <see cref="P:System.Console.BufferHeight" /> and <see cref="P:System.Console.BufferWidth" /> properties. The dimensions of the console area are defined by the <see cref="P:System.Console.WindowHeight" /> and <see cref="P:System.Console.WindowWidth" /> properties. The <see cref="P:System.Console.WindowLeft" /> property determines which column of the buffer area is displayed in the first column of the console window. The value of the <see cref="P:System.Console.WindowLeft" /> property can range from 0 to <see cref="P:System.Console.BufferWidth" /> - <see cref="P:System.Console.WindowWidth" />. Attempting to set it to a value outside that range throws an <see cref="T:System.ArgumentOutOfRangeException" />. </para>
          <para>When a console window first opens, the default value of the <see cref="P:System.Console.WindowLeft" /> property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area. The default width of both the console window and the buffer area is 80 columns. This means that the <see cref="P:System.Console.WindowLeft" /> property can be modified only if the console window is made narrower or the buffer area is made wider.</para>
          <para>Note that if the width of the buffer area exceeds the width of the console window, the value of the <see cref="P:System.Console.WindowLeft" /> property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the leftmost position of the console window area relative to the screen buffer.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <see cref="P:System.Console.BufferHeight" /> and <see cref="P:System.Console.BufferWidth" /> properties. The dimensions of the console area are defined by the <see cref="P:System.Console.WindowHeight" /> and <see cref="P:System.Console.WindowWidth" /> properties. The <see cref="P:System.Console.WindowTop" /> property determines which row of the buffer area is displayed in the first column of the console window. The value of the <see cref="P:System.Console.WindowTop" /> property can range from 0 to <see cref="P:System.Console.BufferHeight" /> - <see cref="P:System.Console.WindowHeight" />. Attempting to set it to a value outside that range throws an <see cref="T:System.ArgumentOutOfRangeException" />. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the top position of the console window area relative to the screen buffer.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the width of the console window.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(bool value)" />
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling <see cref="M:System.Boolean.ToString" />, which outputs either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified Boolean value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(valuetype System.Char value)" />
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified Unicode character value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(class System.Char[] buffer)" />
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <remarks>
          <para>This version of <see cref="M:System.Console.Write(System.String,System.Object)" /> is equivalent to <see cref="P:System.Console.Out" />.<see langword="Write" />( <paramref name="buffer" />
).</para>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified array of Unicode characters to the standard output stream.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />A Unicode character array. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(decimal value)" />
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling <see cref="M:System.Decimal.ToString" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified <see cref="T:System.Decimal" /> value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(float64 value)" />
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Double.ToString" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(int32 value)" />
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Int32.ToString" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(int64 value)" />
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Int64.ToString" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(object value)" />
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="value" /> is null, nothing is written and no exception is thrown. Otherwise, the ToString method of <paramref name="value" /> is called to produce its string representation, and the resulting string is written to the standard output stream.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified object to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write, or null. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(float32 value)" />
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Single.ToString" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(string value)" />
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If value is null, nothing is written to the standard output stream.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified string value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.UInt32.ToString" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.UInt64.ToString" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(string format, object arg0)" />
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to the number of provided objects to be formatted (1).</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified object to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks). </param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(string format, class System.Object[] arg)" />
      <MemberSignature Language="C#" Value="public static void Write (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="format" /> or <paramref name="arg " /> is <see langword="null" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to <paramref name="arg" />.Length.</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of objects to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(class System.Char[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>(<paramref name="index" /> + <paramref name="count" /> ) is greater than the length of <paramref name="buffer" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method writes <paramref name="count" /> characters starting at position <paramref name="index" /> of <paramref name="buffer" /> to the standard output stream.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified subarray of Unicode characters to the standard output stream.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of Unicode characters. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position in <paramref name="buffer" />. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(string format, object arg0, object arg1)" />
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to the number of provided objects to be formatted (2).</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified objects to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to write using <paramref name="format" />. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void Write(string format, object arg0, object arg1, object arg2)" />
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="format" /> is <see langword="null" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to the number of provided objects to be formatted (3).</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified objects to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to write using <paramref name="format" />. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to write using <paramref name="format" />. </param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The third object to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to write using <paramref name="format" />. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to write using <paramref name="format" />. </param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The third object to write using <paramref name="format" />. </param>
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The fourth object to write using <paramref name="format" />. </param>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine()" />
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or vbCrLf in Visual Basic). You can change the line terminator by setting the <see cref="P:System.IO.TextWriter.NewLine" /> property of the <see cref="P:System.Console.Out" /> property to another string. The example provides an illustration.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the current line terminator to the standard output stream.</para>
        </summary>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(bool value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Boolean.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(valuetype System.Char value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(class System.Char[] buffer)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> is <see langword="null" />. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />A Unicode character array. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(decimal value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Decimal.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified <see cref="T:System.Decimal" /> value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(float64 value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Double.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(int32 value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Int32.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(int64 value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Int64.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(object value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If <paramref name="value" /> is null, only the line terminator is written. Otherwise, the ToString method of <paramref name="value" /> is called to produce its string representation, and the resulting string is written to the standard output stream.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(float32 value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.Single.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>1</Excluded>
      <ExcludedLibrary>ExtendedNumerics</ExcludedLibrary>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(string value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If value is null, only the line terminator is written to the standard output stream.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified string value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(unsigned int32 value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.UInt32.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(unsigned int64 value)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The text representation of <paramref name="value" /> is produced by calling the <see cref="M:System.UInt64.ToString" /> method.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(string format, object arg0)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to the number of provided objects to be formatted (1).</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />An object to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(string format, class System.Object[] arg)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="format" /> or <paramref name="arg " /> is <see langword="null" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to <paramref name="arg" />.Length .</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of objects to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(class System.Char[] buffer, int32 index, int32 count)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentException">
          <para>(<paramref name="index" /> + <paramref name="count" /> ) is greater than the length of <paramref name="buffer" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method writes <paramref name="count" /> characters starting at position <paramref name="index" /> of <paramref name="buffer" /> to the standard output stream.</para>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of Unicode characters. </param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The starting position in <paramref name="buffer" />. </param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(string format, object arg0, object arg1)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to the number of provided objects to be formatted (2).</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to write using <paramref name="format" />. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="ILASM" Value=".method public hidebysig static void WriteLine(string format, object arg0, object arg1, object arg2)" />
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.FormatException">
          <para>The format specification in <paramref name="format" /> is invalid.</para>
          <para>-or-</para>
          <para>The number indicating an argument to be formatted is less than zero, or greater than or equal to the number of provided objects to be formatted (3).</para>
        </exception>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to write using <paramref name="format" />. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to write using <paramref name="format" />. </param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The third object to write using <paramref name="format" />. </param>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method uses the <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">composite formatting feature</a></format> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </para>
          <para>The <paramref name="format" /> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </para>
          <para>The syntax of a format item is {index[,alignment][:formatString]}, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</para>
          <para>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</para>
          <list type="bullet">
            <item>
              <para>For more information about the composite formatting feature supported by methods such as <see cref="Overload:System.String.Format" />, <see cref="Overload:System.Text.StringBuilder.AppendFormat" />, and some overloads of <see cref="Overload:System.Console.WriteLine" />, see <format type="text/html"><a href="87b7d528-73f6-43c6-b71a-f23043039a49">Composite Formatting</a></format>. </para>
            </item>
            <item>
              <para>For more information about numeric format specifiers, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format> and <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about date and time format specifiers, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard DateTime Format Strings</a></format> and <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom DateTime Format Strings</a></format>. </para>
            </item>
            <item>
              <para>For more information about enumeration format specifiers, see <format type="text/html"><a href="dd1ff672-1052-42cf-8666-4924fb6cd1a1">Enumeration Format Strings</a></format>.</para>
            </item>
            <item>
              <para>For more information about formatting, see <format type="text/html"><a href="0d1364da-5b30-4d42-8e6b-03378343343f">Formatting Types</a></format>. </para>
            </item>
          </list>
          <para>For more information about the line terminator, see the Remarks section of the <see cref="M:System.Console.WriteLine" /> method that takes no parameters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</para>
        </summary>
        <param name="format">
          <attribution license="cc4" from="Microsoft" modified="false" />A composite format string (see Remarks).</param>
        <param name="arg0">
          <attribution license="cc4" from="Microsoft" modified="false" />The first object to write using <paramref name="format" />. </param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The second object to write using <paramref name="format" />. </param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The third object to write using <paramref name="format" />. </param>
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The fourth object to write using <paramref name="format" />. </param>
      </Docs>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>