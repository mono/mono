<?xml version="1.0" encoding="utf-8"?>
<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Threading.Tasks.TaskFactory" /> class encodes some common <see cref="T:System.Threading.Tasks.Task" /> patterns into methods that pick up default settings, which are configurable through its constructors. A default instance of <see cref="T:System.Threading.Tasks.TaskFactory" /> is available through the <see cref="P:System.Threading.Tasks.Task.Factory" /> property.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor creates a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with a default configuration. The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskCreationOptions.None" />, the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskContinuationOptions.None" />, and the <see cref="T:System.Threading.Tasks.TaskScheduler" /> property is initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This constructor creates a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with a default configuration. The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskCreationOptions.None" />, the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskContinuationOptions.None" />, and the <see cref="T:System.Threading.Tasks.TaskScheduler" /> property is initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</para>
        </summary>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>With this constructor, the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskCreationOptions.None" />, the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <see cref="F:System.Threading.Tasks.TaskContinuationOptions.None" />, and the <see cref="T:System.Threading.Tasks.TaskScheduler" /> property is initialized to <paramref name="scheduler" />, unless it's null, in which case the property is initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</para>
        </summary>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>With this constructor, the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to <paramref name="creationOptions" />, the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <paramref name="continuationOptions" />, and the <see cref="T:System.Threading.Tasks.TaskScheduler" /> property is initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</para>
        </summary>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</param>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>With this constructor, the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> property is initialized to <paramref name="creationOptions" />, the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> property is initialized to <paramref name="continuationOptions" />, and the <see cref="T:System.Threading.Tasks.TaskScheduler" /> property is initialized to <paramref name="scheduler" />, unless it's null, in which case the property is initialized to the current scheduler (see <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />).</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</para>
        </summary>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</param>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property returns the default <see cref="T:System.Threading.CancellationToken" /> that will be assigned to all tasks created by this factory, unless another <see cref="T:System.Threading.CancellationToken" /> value is explicitly specified during the call to the factory methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default cancellation token for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default task continuation options for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" /> method executes the <paramref name="continuationAction" /> delegate when all tasks in the <paramref name="tasks" /> array have completed, regardless of their completion status. </para>
          <para>Exceptions thrown by tasks in the <paramref name="tasks" /> array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <see cref="P:System.Threading.Tasks.Task.Exception" /> property of each task in the <paramref name="tasks" /> array. To use structured exception handling to handle exceptions thrown by tasks in the <paramref name="tasks" /> array, call the <see cref="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" /> method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" /> method executes the <paramref name="continuationAction" /> delegate when all tasks in the <paramref name="tasks" /> array have completed, regardless of their completion status. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation toke to assign to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The object that is used to schedule the new continuation task.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The object that is used to schedule the new continuation task.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The object that is used to schedule the new continuation task.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The cancellation token to assign to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The object that is used to schedule the new continuation task.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The NotOn* and OnlyOn* <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, which constrain for which <see cref="T:System.Threading.Tasks.TaskStatus" /> states a continuation will be executed, are illegal with ContinueWhenAny.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />The array of tasks from which to continue when one task completes.</param>
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default task creation options for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> overloads that take an <paramref name="asyncResult" /> parameter are not as efficient as the overloads that take a <paramref name="beginMethod" /> parameter. If performance is an issue, use the overloads that provide the <paramref name="beginMethod" />/<paramref name="endMethod" /> pattern.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on.  This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> overloads that take an <paramref name="asyncResult" /> parameter are not as efficient as the overloads that take a <paramref name="beginMethod" /> parameter. If performance is an issue, use the overloads that provide the <paramref name="beginMethod" />/<paramref name="endMethod" /> pattern.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate that processes the completed <paramref name="asyncResult" />.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />. The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> values <see cref="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness" />, <see cref="F:System.Threading.Tasks.TaskCreationOptions.LongRunning" /> and <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> are all mutually exclusive. In the FromAsync methods, either LongRunning or AttachedToParent by themselves will cause an <see cref="T:System.ArgumentOutOfRangeException" /> to be thrown.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> overloads that take an <paramref name="asyncResult" /> parameter are not as efficient as the overloads that take a <paramref name="beginMethod" /> parameter. If performance is an issue, use the overloads that provide the <paramref name="beginMethod" />/<paramref name="endMethod" /> pattern.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate that processes the completed <paramref name="asyncResult" />.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> overloads that take an <paramref name="asyncResult" /> parameter are not as efficient as the overloads that take a <paramref name="beginMethod" /> parameter. If performance is an issue, use the overloads that provide the <paramref name="beginMethod" />/<paramref name="endMethod" /> pattern.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate that processes the completed <paramref name="asyncResult" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> overloads that take an <paramref name="asyncResult" /> parameter are not as efficient as the overloads that take a <paramref name="beginMethod" /> parameter. If performance is an issue, use the overloads that provide the <paramref name="beginMethod" />/<paramref name="endMethod" /> pattern.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate that processes the completed <paramref name="asyncResult" />.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>The <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> overloads that take an <paramref name="asyncResult" /> parameter are not as efficient as the overloads that take a <paramref name="beginMethod" /> parameter. If performance is an issue, use the overloads that provide the <paramref name="beginMethod" />/<paramref name="endMethod" /> pattern.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The function delegate that processes the completed <paramref name="asyncResult" />.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="beginMethod" /> delegate is started on the thread that <see cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" /> is running on. This method throws any exceptions thrown by the <paramref name="beginMethod" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</para>
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that begins the asynchronous operation.</param>
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />The delegate that ends the asynchronous operation.</param>
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods. </para>
          <para>If this property value is null, the value of the <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> property is used.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default task scheduler for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling <see cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" /> is functionally equivalent to creating a task by using one of its constructors, and then calling the <see cref="M:System.Threading.Tasks.Task.Start" /> method to schedule the task for execution. Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a task.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started task.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution. Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para>Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="action" /> delegate.</param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="action" /> delegate.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="action" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as  a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />The action delegate to execute asynchronously.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="action" /> delegate.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="function" /> delegate.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="function" /> delegate.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="function" /> delegate.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling StartNew is functionally equivalent to creating a <see cref="T:System.Threading.Tasks.Task`1" /> using one of its constructors and then calling <see cref="M:System.Threading.Tasks.Task.Start" /> to schedule it for execution.</para>
          <para> Starting with the net_v45, you can use the <see cref="Overload:System.Threading.Tasks.Task.Run" /> method with an <see cref="System.Action" /> object as a quick way to call <see cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" /> with default parameters. For more information and code examples, see the entry <see cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />An object containing data to be used by the <paramref name="function" /> delegate.</param>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      </Docs>
    </Member>
  </Members>
</Type>