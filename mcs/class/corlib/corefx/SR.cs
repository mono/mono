//
// This file was generated by resx2sr tool
//

partial class SR
{
	public const string Arg_NonZeroLowerBound = "The lower bound of target array must be zero.";
	public const string Arg_WrongType = "The value '{0}' is not of type '{1}' and cannot be used in this generic collection.";
	public const string Arg_ArrayPlusOffTooSmall = "Destination array is not long enough to copy all the items in the collection. Check array index and length.";
	public const string ArgumentOutOfRange_NeedNonNegNum = "Non-negative number required.";
	public const string ArgumentOutOfRange_SmallCapacity = "capacity was less than the current size.";
	public const string Argument_InvalidOffLen = "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.";
	public const string Argument_AddingDuplicate = "An item with the same key has already been added. Key: {0}";
	public const string InvalidOperation_ConcurrentOperationsNotSupported = "Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection's state is no longer correct.";
	public const string InvalidOperation_EmptyQueue = "Queue empty.";
	public const string InvalidOperation_EnumOpCantHappen = "Enumeration has either not started or has already finished.";
	public const string InvalidOperation_EnumFailedVersion = "Collection was modified; enumeration operation may not execute.";
	public const string InvalidOperation_EmptyStack = "Stack empty.";
	public const string InvalidOperation_EnumNotStarted = "Enumeration has not started. Call MoveNext.";
	public const string InvalidOperation_EnumEnded = "Enumeration already finished.";
	public const string NotSupported_KeyCollectionSet = "Mutating a key collection derived from a dictionary is not allowed.";
	public const string NotSupported_ValueCollectionSet = "Mutating a value collection derived from a dictionary is not allowed.";
	public const string Arg_ArrayLengthsDiffer = "Array lengths must be the same.";
	public const string Arg_BitArrayTypeUnsupported = "Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[].";
	public const string Arg_HSCapacityOverflow = "HashSet capacity is too big.";
	public const string Arg_HTCapacityOverflow = "Hashtable's capacity overflowed and went negative. Check load factor, capacity and the current size of the table.";
	public const string Arg_InsufficientSpace = "Insufficient space in the target location to copy the information.";
	public const string Arg_RankMultiDimNotSupported = "Only single dimensional arrays are supported for the requested action.";
	public const string Argument_ArrayTooLarge = "The input array length must not exceed Int32.MaxValue / {0}. Otherwise BitArray.Length would exceed Int32.MaxValue.";
	public const string Argument_InvalidArrayType = "Target array type is not compatible with the type of items in the collection.";
	public const string ArgumentOutOfRange_BiggerThanCollection = "Must be less than or equal to the size of the collection.";
	public const string ArgumentOutOfRange_Index = "Index was out of range. Must be non-negative and less than the size of the collection.";
	public const string ExternalLinkedListNode = "The LinkedList node does not belong to current LinkedList.";
	public const string LinkedListEmpty = "The LinkedList is empty.";
	public const string LinkedListNodeIsAttached = "The LinkedList node already belongs to a LinkedList.";
	public const string NotSupported_SortedListNestedWrite = "This operation is not supported on SortedList nested types because they require modifying the original SortedList.";
	public const string SortedSet_LowerValueGreaterThanUpperValue = "Must be less than or equal to upperValue.";
	public const string Serialization_InvalidOnDeser = "OnDeserialization method was called while the object was not being deserialized.";
	public const string Serialization_MismatchedCount = "The serialized Count information doesn't match the number of items.";
	public const string Serialization_MissingKeys = "The keys for this dictionary are missing.";
	public const string Serialization_MissingValues = "The values for this dictionary are missing.";
	public const string Arg_KeyNotFoundWithKey = "The given key '{0}' was not present in the dictionary.";
	public const string BlockingCollection_Add_ConcurrentCompleteAdd = "CompleteAdding may not be used concurrently with additions to the collection.";
	public const string BlockingCollection_Add_Failed = "The underlying collection didn't accept the item.";
	public const string BlockingCollection_CantAddAnyWhenCompleted = "At least one of the specified collections is marked as complete with regards to additions.";
	public const string BlockingCollection_CantTakeAnyWhenAllDone = "All collections are marked as complete with regards to additions.";
	public const string BlockingCollection_CantTakeWhenDone = "The collection argument is empty and has been marked as complete with regards to additions.";
	public const string BlockingCollection_Completed = "The collection has been marked as complete with regards to additions.";
	public const string BlockingCollection_CopyTo_IncorrectType = "The array argument is of the incorrect type.";
	public const string BlockingCollection_CopyTo_MultiDim = "The array argument is multidimensional.";
	public const string BlockingCollection_CopyTo_NonNegative = "The index argument must be greater than or equal zero.";
	public const string Collection_CopyTo_TooManyElems = "The number of elements in the collection is greater than the available space from index to the end of the destination array.";
	public const string BlockingCollection_ctor_BoundedCapacityRange = "The boundedCapacity argument must be positive.";
	public const string BlockingCollection_ctor_CountMoreThanCapacity = "The collection argument contains more items than are allowed by the boundedCapacity.";
	public const string BlockingCollection_Disposed = "The collection has been disposed.";
	public const string BlockingCollection_Take_CollectionModified = "The underlying collection was modified from outside of the BlockingCollection<T>.";
	public const string BlockingCollection_TimeoutInvalid = "The specified timeout must represent a value between -1 and {0}, inclusive.";
	public const string BlockingCollection_ValidateCollectionsArray_DispElems = "The collections argument contains at least one disposed element.";
	public const string BlockingCollection_ValidateCollectionsArray_LargeSize = "The collections length is greater than the supported range for 32 bit machine.";
	public const string BlockingCollection_ValidateCollectionsArray_NullElems = "The collections argument contains at least one null element.";
	public const string BlockingCollection_ValidateCollectionsArray_ZeroSize = "The collections argument is a zero-length array.";
	public const string Common_OperationCanceled = "The operation was canceled.";
	public const string ConcurrentBag_Ctor_ArgumentNullException = "The collection argument is null.";
	public const string ConcurrentBag_CopyTo_ArgumentNullException = "The array argument is null.";
	public const string Collection_CopyTo_ArgumentOutOfRangeException = "The index argument must be greater than or equal zero.";
	public const string ConcurrentCollection_SyncRoot_NotSupported = "The SyncRoot property may not be used for the synchronization of concurrent collections.";
	public const string ConcurrentDictionary_ArrayIncorrectType = "The array is multidimensional, or the type parameter for the set cannot be cast automatically to the type of the destination array.";
	public const string ConcurrentDictionary_SourceContainsDuplicateKeys = "The source argument contains duplicate keys.";
	public const string ConcurrentDictionary_ConcurrencyLevelMustBePositive = "The concurrencyLevel argument must be positive.";
	public const string ConcurrentDictionary_CapacityMustNotBeNegative = "The capacity argument must be greater than or equal to zero.";
	public const string ConcurrentDictionary_IndexIsNegative = "The index argument is less than zero.";
	public const string ConcurrentDictionary_ArrayNotLargeEnough = "The index is equal to or greater than the length of the array, or the number of elements in the dictionary is greater than the available space from index to the end of the destination array.";
	public const string ConcurrentDictionary_KeyAlreadyExisted = "The key already existed in the dictionary.";
	public const string ConcurrentDictionary_ItemKeyIsNull = "TKey is a reference type and item.Key is null.";
	public const string ConcurrentDictionary_TypeOfKeyIncorrect = "The key was of an incorrect type for this dictionary.";
	public const string ConcurrentDictionary_TypeOfValueIncorrect = "The value was of an incorrect type for this dictionary.";
	public const string ConcurrentStack_PushPopRange_CountOutOfRange = "The count argument must be greater than or equal to zero.";
	public const string ConcurrentStack_PushPopRange_InvalidCount = "The sum of the startIndex and count arguments must be less than or equal to the collection's Count.";
	public const string ConcurrentStack_PushPopRange_StartOutOfRange = "The startIndex argument must be greater than or equal to zero.";
	public const string Partitioner_DynamicPartitionsNotSupported = "Dynamic partitions are not supported by this partitioner.";
	public const string PartitionerStatic_CanNotCallGetEnumeratorAfterSourceHasBeenDisposed = "Can not call GetEnumerator on partitions after the source enumerable is disposed";
	public const string PartitionerStatic_CurrentCalledBeforeMoveNext = "MoveNext must be called at least once before calling Current.";
	public const string ConcurrentBag_Enumerator_EnumerationNotStartedOrAlreadyFinished = "Enumeration has either not started or has already finished.";
	public const string Argument_AddingDuplicate__ = "Item has already been added. Key in dictionary: '{0}'  Key being added: '{1}'";
	public const string Argument_ImplementIComparable = "At least one object must implement IComparable.";
	public const string Arg_RemoveArgNotFound = "Cannot remove the specified item because it was not found in the specified Collection.";
	public const string ArgumentNull_Dictionary = "Dictionary cannot be null.";
	public const string ArgumentOutOfRange_QueueGrowFactor = "Queue grow factor must be between {0} and {1}.";
	public const string Array = "{0} Array";
	public const string Collection = "(Collection)";
	public const string none = "(none)";
	public const string Null = "(null)";
	public const string Text = "(Text)";
	public const string InvalidColor = "Color '{0}' is not valid.";
	public const string TextParseFailedFormat = "Text \"{0}\" cannot be parsed. The expected text format is \"{1}\".";
	public const string PropertyValueInvalidEntry = "IDictionary parameter contains at least one entry that is not valid. Ensure all values are consistent with the object's properties.";
	public const string ArgumentException_BufferNotFromPool = "The buffer is not associated with this pool and may not be returned to it.";
	public const string InvalidDirName_NotExists = "The directory name '{0}' does not exist.";
	public const string IO_FileExists_Name = "The file '{0}' already exists.";
	public const string ArgumentOutOfRange_FileLengthTooBig = "Specified file length was too large for the file system.";
	public const string IO_PathTooLong = "The specified file name or path is too long, or a component of the specified path is too long.";
	public const string IO_PathNotFound_NoPathName = "Could not find a part of the path.";
	public const string IO_PathNotFound_Path = "Could not find a part of the path '{0}'.";
	public const string IO_FileNotFound = "Unable to find the specified file.";
	public const string IO_FileNotFound_FileName = "Could not find file '{0}'.";
	public const string UnauthorizedAccess_IODenied_NoPathName = "Access to the path is denied.";
	public const string UnauthorizedAccess_IODenied_Path = "Access to the path '{0}' is denied.";
	public const string IO_SharingViolation_File = "The process cannot access the file '{0}' because it is being used by another process.";
	public const string IO_SharingViolation_NoFileName = "The process cannot access the file because it is being used by another process.";
	public const string EventStream_FailedToStart = "Failed to start the EventStream";
	public const string Argument_InvalidPathChars = "Illegal characters in path '{0}'.";
	public const string IOException_INotifyInstanceSystemLimitExceeded = "The system limit on the number of inotify instances has been reached.";
	public const string IOException_INotifyInstanceUserLimitExceeded_Value = "The configured user limit ({0}) on the number of inotify instances has been reached.";
	public const string IOException_INotifyWatchesUserLimitExceeded_Value = "The configured user limit ({0}) on the number of inotify watches has been reached.";
	public const string IOException_INotifyInstanceUserLimitExceeded = "The configured user limit on the number of inotify instances has been reached.";
	public const string IOException_INotifyWatchesUserLimitExceeded = "The configured user limit on the number of inotify watches has been reached.";
	public const string IO_PathTooLong_Path = "The path '{0}' is too long, or a component of the specified path is too long.";
	public const string IO_EOF_ReadBeyondEOF = "Unable to read beyond the end of the stream.";
	public const string BaseStream_Invalid_Not_Open = "The BaseStream is only available when the port is open.";
	public const string PortNameEmpty_String = "The PortName cannot be empty.";
	public const string Port_not_open = "The port is closed.";
	public const string Port_already_open = "The port is already open.";
	public const string Cant_be_set_when_open = "'{0}' cannot be set while the port is open.";
	public const string Max_Baud = "The maximum baud rate for the device is {0}.";
	public const string In_Break_State = "The port is in the break state and cannot be written to.";
	public const string Write_timed_out = "The write timed out.";
	public const string CantSetRtsWithHandshaking = "RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff.";
	public const string NotSupportedEncoding = "SerialPort does not support encoding '{0}'.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation.";
	public const string Arg_InvalidSerialPort = "The given port name does not start with COM/com or does not resolve to a valid serial port.";
	public const string Arg_InvalidSerialPortExtended = "The given port name is invalid.  It may be a valid port, but not a serial port.";
	public const string ArgumentOutOfRange_Bounds_Lower_Upper = "Argument must be between {0} and {1}.";
	public const string ArgumentOutOfRange_Enum = "Enum value was out of legal range.";
	public const string ArgumentOutOfRange_NeedNonNegNumRequired = "Non-negative number required.";
	public const string ArgumentOutOfRange_NeedPosNum = "Positive number required.";
	public const string ArgumentOutOfRange_Timeout = "The timeout must be greater than or equal to -1.";
	public const string ArgumentOutOfRange_WriteTimeout = "The timeout must be either a positive number or -1.";
	public const string IndexOutOfRange_IORaceCondition = "Probable I/O race condition detected while copying memory.  The I/O package is not thread safe by default.  In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's Synchronized methods.  This also applies to classes like StreamWriter and StreamReader.";
	public const string IO_OperationAborted = "The I/O operation has been aborted because of either a thread exit or an application request.";
	public const string NotSupported_UnseekableStream = "Stream does not support seeking.";
	public const string ObjectDisposed_StreamClosed = "Can not access a closed Stream.";
	public const string InvalidNullEmptyArgument = "Argument {0} cannot be null or zero-length.";
	public const string Arg_WrongAsyncResult = "IAsyncResult object did not come from the corresponding async method on this type.";
	public const string InvalidOperation_EndReadCalledMultiple = "EndRead can only be called once for each asynchronous operation.";
	public const string InvalidOperation_EndWriteCalledMultiple = "EndWrite can only be called once for each asynchronous operation.";
	public const string IO_PortNotFound = "The specified port does not exist.";
	public const string IO_PortNotFoundFileName = "The port '{0}' does not exist.";
	public const string PlatformNotSupported_IOPorts = "System.IO.Ports is currently only supported on Windows.";
	public const string PlatformNotSupported_SerialPort_GetPortNames = "Enumeration of serial port names is not supported on the current platform.";
	public const string NotSupported_CannotCallEqualsOnSpan = "Equals() on Span and ReadOnlySpan is not supported. Use operator== instead.";
	public const string NotSupported_CannotCallGetHashCodeOnSpan = "GetHashCode() on Span and ReadOnlySpan is not supported.";
	public const string Argument_InvalidTypeWithPointersNotSupported = "Cannot use type '{0}'. Only value types without pointers or references are supported.";
	public const string Argument_DestinationTooShort = "Destination is too short.";
	public const string MemoryDisposed = "Memory<T> has been disposed.";
	public const string OutstandingReferences = "Release all references before disposing this instance.";
	public const string Argument_BadFormatSpecifier = "Format specifier was invalid.";
	public const string Argument_GWithPrecisionNotSupported = "The 'G' format combined with a precision is not supported.";
	public const string Argument_CannotParsePrecision = "Characters following the format symbol must be a number of {0} or less.";
	public const string Argument_PrecisionTooLarge = "Precision cannot be larger than {0}.";
	public const string Argument_OverlapAlignmentMismatch = "Overlapping spans have mismatching alignment.";
	public const string EndPositionNotReached = "End position was not reached during enumeration.";
	public const string UnexpectedSegmentType = "Unexpected segment type.";
	public const string net_log_listener_delegate_exception = "Sending 500 response, AuthenticationSchemeSelectorDelegate threw an exception: {0}.";
	public const string net_log_listener_unsupported_authentication_scheme = "Received a request with an unsupported authentication scheme, Authorization:{0} SupportedSchemes:{1}.";
	public const string net_log_listener_unmatched_authentication_scheme = "Received a request with an unmatched or no authentication scheme. AuthenticationSchemes:{0}, Authorization:{1}.";
	public const string net_io_invalidasyncresult = "The IAsyncResult object was not returned from the corresponding asynchronous method on this class.";
	public const string net_io_invalidendcall = "{0} can only be called once for each asynchronous operation.";
	public const string net_listener_cannot_set_custom_cbt = "Custom channel bindings are not supported.";
	public const string net_listener_detach_error = "Can't detach Url group from request queue. Status code: {0}.";
	public const string net_listener_scheme = "Only Uri prefixes starting with 'http://' or 'https://' are supported.";
	public const string net_listener_host = "Only Uri prefixes with a valid hostname are supported.";
	public const string net_listener_not_supported = "The request is not supported.";
	public const string net_listener_mustcall = "Please call the {0} method before calling this method.";
	public const string net_listener_slash = "Only Uri prefixes ending in '/' are allowed.";
	public const string net_listener_already = "Failed to listen on prefix '{0}' because it conflicts with an existing registration on the machine.";
	public const string net_log_listener_no_cbt_disabled = "No channel binding check because extended protection is disabled.";
	public const string net_log_listener_no_cbt_http = "No channel binding check for requests without a secure channel.";
	public const string net_log_listener_no_cbt_trustedproxy = "No channel binding check for the trusted proxy scenario.";
	public const string net_log_listener_cbt = "Channel binding check enabled.";
	public const string net_log_listener_no_spn_kerberos = "No explicit service name check because Kerberos authentication already validates the service name.";
	public const string net_log_listener_no_spn_disabled = "No service name check because extended protection is disabled.";
	public const string net_log_listener_no_spn_cbt = "No service name check because the channel binding was already checked.";
	public const string net_log_listener_no_spn_whensupported = "No service name check because the client did not provide a service name and the server was configured for PolicyEnforcement.WhenSupported.";
	public const string net_log_listener_no_spn_loopback = "No service name check because the authentication was from a client on the local machine.";
	public const string net_log_listener_spn = "Client provided service name '{0}'.";
	public const string net_log_listener_spn_passed = "Service name check succeeded.";
	public const string net_log_listener_spn_failed = "Service name check failed.";
	public const string net_log_listener_spn_failed_always = "Service name check failed because the client did not provide a service name and the server was configured for PolicyEnforcement.Always.";
	public const string net_log_listener_spn_failed_empty = "No acceptable service names were configured!";
	public const string net_log_listener_spn_failed_dump = "Dumping acceptable service names:";
	public const string net_log_listener_spn_add = "Adding default service name '{0}' from prefix '{1}'.";
	public const string net_log_listener_spn_not_add = "No default service name added for prefix '{0}'.";
	public const string net_log_listener_spn_remove = "Removing default service name '{0}' from prefix '{1}'.";
	public const string net_log_listener_spn_not_remove = "No default service name removed for prefix '{0}'.";
	public const string net_listener_no_spns = "No service names could be determined from the registered prefixes. Either add prefixes from which default service names can be derived or specify an ExtendedProtectionPolicy object which contains an explicit list of service names.";
	public const string net_ssp_dont_support_cbt = "The Security Service Providers don't support extended protection. Please install the latest Security Service Providers update.";
	public const string net_PropertyNotImplementedException = "This property is not implemented by this class.";
	public const string net_array_too_small = "The target array is too small.";
	public const string net_listener_mustcompletecall = "The in-progress method {0} must be completed first.";
	public const string net_listener_invalid_cbt_type = "Querying the {0} Channel Binding is not supported.";
	public const string net_listener_callinprogress = "Cannot re-call {0} while a previous call is still in progress.";
	public const string net_log_listener_cant_create_uri = "Can't create Uri from string '{0}://{1}{2}{3}'.";
	public const string net_log_listener_cant_convert_raw_path = "Can't convert Uri path '{0}' using encoding '{1}'.";
	public const string net_log_listener_cant_convert_percent_value = "Can't convert percent encoded value '{0}'.";
	public const string net_log_listener_cant_convert_to_utf8 = "Can't convert string '{0}' into UTF-8 bytes: {1}";
	public const string net_log_listener_cant_convert_bytes = "Can't convert bytes '{0}' into UTF-16 characters: {1}";
	public const string net_invalidstatus = "The status code must be exactly three digits.";
	public const string net_WebHeaderInvalidControlChars = "Specified value has invalid Control characters.";
	public const string net_rspsubmitted = "This operation cannot be performed after the response has been submitted.";
	public const string net_nochunkuploadonhttp10 = "Chunked encoding upload is not supported on the HTTP/1.0 protocol.";
	public const string net_cookie_exists = "Cookie already exists.";
	public const string net_clsmall = "The Content-Length value must be greater than or equal to zero.";
	public const string net_wrongversion = "Only HTTP/1.0 and HTTP/1.1 version requests are currently supported.";
	public const string net_noseek = "This stream does not support seek operations.";
	public const string net_writeonlystream = "The stream does not support reading.";
	public const string net_entitytoobig = "Bytes to be written to the stream exceed the Content-Length bytes size specified.";
	public const string net_io_notenoughbyteswritten = "Cannot close stream until all bytes are written.";
	public const string net_listener_close_urlgroup_error = "Can't close Url group. Status code: {0}.";
	public const string net_WebSockets_NativeSendResponseHeaders = "An error occurred when sending the WebSocket HTTP upgrade response during the {0} operation. The HRESULT returned is '{1}'";
	public const string net_WebSockets_ClientAcceptingNoProtocols = "The WebSocket client did not request any protocols, but server attempted to accept '{0}' protocol(s). ";
	public const string net_WebSockets_AcceptUnsupportedProtocol = "The WebSocket client request requested '{0}' protocol(s), but server is only accepting '{1}' protocol(s).";
	public const string net_WebSockets_AcceptNotAWebSocket = "The {0} operation was called on an incoming request that did not specify a '{1}: {2}' header or the {2} header not contain '{3}'. {2} specified by the client was '{4}'.";
	public const string net_WebSockets_AcceptHeaderNotFound = "The {0} operation was called on an incoming WebSocket request without required '{1}' header. ";
	public const string net_WebSockets_AcceptUnsupportedWebSocketVersion = "The {0} operation was called on an incoming request with WebSocket version '{1}', expected '{2}'. ";
	public const string net_WebSockets_InvalidEmptySubProtocol = "Empty string is not a valid subprotocol value. Please use \\\"null\\\" to specify no value.";
	public const string net_WebSockets_InvalidCharInProtocolString = "The WebSocket protocol '{0}' is invalid because it contains the invalid character '{1}'.";
	public const string net_WebSockets_ReasonNotNull = "The close status description '{0}' is invalid. When using close status code '{1}' the description must be null.";
	public const string net_WebSockets_InvalidCloseStatusCode = "The close status code '{0}' is reserved for system use only and cannot be specified when calling this method.";
	public const string net_WebSockets_InvalidCloseStatusDescription = "The close status description '{0}' is too long. The UTF8-representation of the status description must not be longer than {1} bytes.";
	public const string net_WebSockets_ArgumentOutOfRange_TooSmall = "The argument must be a value greater than {0}.";
	public const string net_WebSockets_ArgumentOutOfRange_TooBig = "The value of the '{0}' parameter ({1}) must be less than or equal to {2}.";
	public const string net_WebSockets_UnsupportedPlatform = "The WebSocket protocol is not supported on this platform.";
	public const string net_readonlystream = "The stream does not support writing.";
	public const string net_WebSockets_InvalidState_ClosedOrAborted = "The '{0}' instance cannot be used for communication because it has been transitioned into the '{1}' state.";
	public const string net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync = "The WebSocket is in an invalid state for this operation. The '{0}' method has already been called before on this instance. Use '{1}' instead to keep being able to receive data but close the output channel.";
	public const string net_Websockets_AlreadyOneOutstandingOperation = "There is already one outstanding '{0}' call for this WebSocket instance. ReceiveAsync and SendAsync can be called simultaneously, but at most one outstanding operation for each of them is allowed at the same time.";
	public const string net_WebSockets_InvalidMessageType = "The received message type '{2}' is invalid after calling {0}. {0} should only be used if no more data is expected from the remote endpoint. Use '{1}' instead to keep being able to receive data but close the output channel.";
	public const string net_WebSockets_InvalidBufferType = "The buffer type '{0}' is invalid. Valid buffer types are: '{1}', '{2}', '{3}', '{4}', '{5}'.";
	public const string net_WebSockets_ArgumentOutOfRange_InternalBuffer = "The byte array must have a length of at least '{0}' bytes.  ";
	public const string net_WebSockets_Argument_InvalidMessageType = "The message type '{0}' is not allowed for the '{1}' operation. Valid message types are: '{2}, {3}'. To close the WebSocket, use the '{4}' operation instead. ";
	public const string net_securitypackagesupport = "The requested security package is not supported.";
	public const string net_log_operation_failed_with_error = "{0} failed with error {1}.";
	public const string net_MethodNotImplementedException = "This method is not implemented by this class.";
	public const string event_OperationReturnedSomething = "{0} returned {1}.";
	public const string net_invalid_enum = "The specified value is not valid in the '{0}' enumeration.";
	public const string net_auth_message_not_encrypted = "Protocol error: A received message contains a valid signature but it was not encrypted as required by the effective Protection Level.";
	public const string SSPIInvalidHandleType = "'{0}' is not a supported handle type.";
	public const string net_io_operation_aborted = "I/O operation aborted: '{0}'.";
	public const string net_invalid_path = "Invalid path.";
	public const string net_listener_auth_errors = "Authentication errors.";
	public const string net_listener_close = "Listener closed.";
	public const string net_invalid_port = "Invalid port in prefix.";
	public const string net_WebSockets_InvalidState = "The WebSocket is in an invalid state ('{0}') for this operation. Valid states are: '{1}'";
	public const string net_unknown_prefix = "The URI prefix is not recognized.";
	public const string net_reqsubmitted = "This operation cannot be performed after the request has been submitted.";
	public const string net_io_timeout_use_ge_zero = "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value >= 0.";
	public const string net_writestarted = "This property cannot be set after writing has started.";
	public const string net_badmethod = "Cannot set null or blank methods on request.";
	public const string net_servererror = "The remote server returned an error: ({0}) {1}.";
	public const string net_reqaborted = "The request was aborted: The request was canceled.";
	public const string net_OperationNotSupportedException = "This operation is not supported.";
	public const string net_nouploadonget = "Cannot send a content-body with this verb-type.";
	public const string net_repcall = "Cannot re-call BeginGetRequestStream/BeginGetResponse while a previous call is still in progress.";
	public const string net_securityprotocolnotsupported = "The requested security protocol is not supported.";
	public const string net_requestaborted = "The request was aborted: {0}.";
	public const string net_webstatus_Timeout = "The operation has timed out.";
	public const string net_baddate = "The value of the date string in the header is invalid.";
	public const string net_connarg = "Keep-Alive and Close may not be set using this property.";
	public const string net_fromto = "The From parameter cannot be less than To.";
	public const string net_needchunked = "TransferEncoding requires the SendChunked property to be set to true.";
	public const string net_no100 = "100-Continue may not be set using this property.";
	public const string net_nochunked = "Chunked encoding must be set via the SendChunked property.";
	public const string net_nottoken = "The supplied string is not a valid HTTP token.";
	public const string net_rangetoosmall = "The From or To parameter cannot be less than 0.";
	public const string net_rangetype = "A different range specifier has already been added to this request.";
	public const string net_toosmall = "The specified value must be greater than 0.";
	public const string net_WebHeaderInvalidCRLFChars = "Specified value has invalid CRLF characters.";
	public const string net_WebHeaderInvalidHeaderChars = "Specified value has invalid HTTP Header characters.";
	public const string net_timeout = "The operation has timed out.";
	public const string net_completed_result = "This operation cannot be performed on a completed asynchronous result object.";
	public const string net_PropertyNotSupportedException = "This property is not supported by this class.";
	public const string net_InvalidStatusCode = "The server returned a status code outside the valid range of 100-599.";
	public const string net_io_timeout_use_gt_zero = "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value > 0.";
	public const string net_ftp_servererror = "The remote server returned an error: {0}.";
	public const string net_ftp_active_address_different = "The data connection was made from an address that is different than the address to which the FTP connection was made.";
	public const string net_ftp_invalid_method_name = "FTP Method names cannot be null or empty.";
	public const string net_ftp_invalid_renameto = "The RenameTo filename cannot be null or empty.";
	public const string net_ftp_invalid_response_filename = "The server returned the filename ({0}) which is not valid.";
	public const string net_ftp_invalid_status_response = "The status response ({0}) is not expected in response to '{1}' command.";
	public const string net_ftp_invalid_uri = "The requested URI is invalid for this FTP command.";
	public const string net_ftp_no_defaultcreds = "Default credentials are not supported on an FTP request.";
	public const string net_ftp_response_invalid_format = "The response string '{0}' has invalid format.";
	public const string net_ftp_server_failed_passive = "The server failed the passive mode request with status response ({0}).";
	public const string net_ftp_unsupported_method = "This method is not supported.";
	public const string net_ftp_protocolerror = "The underlying connection was closed: The server committed a protocol violation";
	public const string net_ftp_receivefailure = "The underlying connection was closed: An unexpected error occurred on a receive";
	public const string net_webstatus_NameResolutionFailure = "The remote name could not be resolved";
	public const string net_webstatus_ConnectFailure = "Unable to connect to the remote server";
	public const string net_ftpstatuscode_ServiceNotAvailable = "Service not available, closing control connection.";
	public const string net_ftpstatuscode_CantOpenData = "Can't open data connection";
	public const string net_ftpstatuscode_ConnectionClosed = "Connection closed; transfer aborted";
	public const string net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy = "File unavailable (e.g., file busy)";
	public const string net_ftpstatuscode_ActionAbortedLocalProcessingError = "Local error in processing";
	public const string net_ftpstatuscode_ActionNotTakenInsufficientSpace = "Insufficient storage space in system";
	public const string net_ftpstatuscode_CommandSyntaxError = "Syntax error, command unrecognized";
	public const string net_ftpstatuscode_ArgumentSyntaxError = "Syntax error in parameters or arguments";
	public const string net_ftpstatuscode_CommandNotImplemented = "Command not implemented";
	public const string net_ftpstatuscode_BadCommandSequence = "Bad sequence of commands";
	public const string net_ftpstatuscode_NotLoggedIn = "Not logged in";
	public const string net_ftpstatuscode_AccountNeeded = "Need account for storing files";
	public const string net_ftpstatuscode_ActionNotTakenFileUnavailable = "File unavailable (e.g., file not found, no access)";
	public const string net_ftpstatuscode_ActionAbortedUnknownPageType = "Page type unknown";
	public const string net_ftpstatuscode_FileActionAborted = "Exceeded storage allocation (for current directory or data set)";
	public const string net_ftpstatuscode_ActionNotTakenFilenameNotAllowed = "File name not allowed";
	public const string net_invalid_host = "The specified value is not a valid Host header string.";
	public const string net_http_httpmethod_format_error = "The format of the HTTP method is invalid.";
	public const string net_http_httpmethod_notsupported_error = "The HTTP method '{0}' is not supported on this platform.";
	public const string net_http_reasonphrase_format_error = "The reason phrase must not contain new-line characters.";
	public const string net_http_copyto_array_too_small = "The number of elements is greater than the available space from arrayIndex to the end of the destination array.";
	public const string net_http_headers_not_found = "The given header was not found.";
	public const string net_http_headers_single_value_header = "Cannot add value because header '{0}' does not support multiple values.";
	public const string net_http_headers_invalid_header_name = "The header name format is invalid.";
	public const string net_http_headers_invalid_value = "The format of value '{0}' is invalid.";
	public const string net_http_headers_not_allowed_header_name = "Misused header name. Make sure request headers are used with HttpRequestMessage, response headers with HttpResponseMessage, and content headers with HttpContent objects.";
	public const string net_http_headers_invalid_host_header = "The specified value is not a valid 'Host' header string.";
	public const string net_http_headers_invalid_from_header = "The specified value is not a valid 'From' header string.";
	public const string net_http_headers_invalid_etag_name = "The specified value is not a valid quoted string.";
	public const string net_http_headers_invalid_range = "Invalid range. At least one of the two parameters must not be null.";
	public const string net_http_headers_no_newlines = "New-line characters in header values must be followed by a white-space character.";
	public const string net_http_content_buffersize_exceeded = "Cannot write more bytes to the buffer than the configured maximum buffer size: {0}.";
	public const string net_http_content_no_task_returned = "The async operation did not return a System.Threading.Tasks.Task object.";
	public const string net_http_content_stream_already_read = "The stream was already consumed. It cannot be read again.";
	public const string net_http_content_readonly_stream = "The stream does not support writing.";
	public const string net_http_content_invalid_charset = "The character set provided in ContentType is invalid. Cannot read content as string using an invalid character set.";
	public const string net_http_content_stream_copy_error = "Error while copying content to a stream.";
	public const string net_http_argument_empty_string = "The value cannot be null or empty.";
	public const string net_http_client_request_already_sent = "The request message was already sent. Cannot send the same request message multiple times.";
	public const string net_http_operation_started = "This instance has already started one or more requests. Properties can only be modified before sending the first request.";
	public const string net_http_client_execution_error = "An error occurred while sending the request.";
	public const string net_http_client_absolute_baseaddress_required = "The base address must be an absolute URI.";
	public const string net_http_client_invalid_requesturi = "An invalid request URI was provided. The request URI must either be an absolute URI or BaseAddress must be set.";
	public const string net_http_client_http_baseaddress_required = "Only 'http' and 'https' schemes are allowed.";
	public const string net_http_parser_invalid_base64_string = "Value '{0}' is not a valid Base64 string. Error: {1}";
	public const string net_http_handler_noresponse = "Handler did not return a response message.";
	public const string net_http_handler_norequest = "A request message must be provided. It cannot be null.";
	public const string net_http_message_not_success_statuscode = "Response status code does not indicate success: {0} ({1}).";
	public const string net_http_content_field_too_long = "The field cannot be longer than {0} characters.";
	public const string net_http_log_headers_no_newlines = "Value for header '{0}' contains invalid new-line characters. Value: '{1}'.";
	public const string net_http_log_headers_invalid_quality = "The 'q' value is invalid: '{0}'.";
	public const string net_http_log_headers_wrong_email_format = "Value '{0}' is not a valid email address. Error: {1}";
	public const string net_http_handler_not_assigned = "The inner handler has not been assigned.";
	public const string net_http_invalid_enable_first = "The {0} property must be set to '{1}' to use this property.";
	public const string net_http_content_buffersize_limit = "Buffering more than {0} bytes is not supported.";
	public const string net_http_value_not_supported = "The value '{0}' is not supported for property '{1}'.";
	public const string net_http_io_read = "The read operation failed, see inner exception.";
	public const string net_http_io_read_incomplete = "Unable to read data from the transport connection. The connection was closed before all data could be read. Expected {0} bytes, read {1} bytes.";
	public const string net_http_io_write = "The write operation failed, see inner exception.";
	public const string net_http_chunked_not_allowed_with_empty_content = "'Transfer-Encoding: chunked' header can not be used when content object is not specified.";
	public const string net_http_invalid_cookiecontainer = "When using CookieUsePolicy.UseSpecifiedCookieContainer, the CookieContainer property must not be null.";
	public const string net_http_invalid_proxyusepolicy = "When using a non-null Proxy, the WindowsProxyUsePolicy property must be set to WindowsProxyUsePolicy.UseCustomProxy.";
	public const string net_http_invalid_proxy = "When using WindowsProxyUsePolicy.UseCustomProxy, the Proxy property must not be null.";
	public const string net_http_value_must_be_greater_than = "The specified value must be greater than {0}.";
	public const string net_http_unix_invalid_credential = "The libcurl library in use ({0}) does not support different credentials for different authentication schemes.";
	public const string net_http_unix_https_support_unavailable_libcurl = "The libcurl library in use ({0}) does not support HTTPS.";
	public const string net_http_content_no_concurrent_reads = "The stream does not support concurrent read operations.";
	public const string net_http_username_empty_string = "The username for a credential object cannot be null or empty.";
	public const string net_http_no_concurrent_io_allowed = "The stream does not support concurrent I/O read or write operations.";
	public const string net_http_invalid_response = "The server returned an invalid or unrecognized response.";
	public const string net_http_unix_handler_disposed = "The handler was disposed of while active operations were in progress.";
	public const string net_http_buffer_insufficient_length = "The buffer was not long enough.";
	public const string net_http_response_headers_exceeded_length = "The HTTP response headers length exceeded the set limit of {0} bytes.";
	public const string ArgumentOutOfRange_NeedNonNegativeNum = "Non-negative number required.";
	public const string net_http_libcurl_callback_notsupported_sslbackend = "The handler does not support custom handling of certificates with this combination of libcurl ({0}) and its SSL backend (\"{1}\"). An SSL backend based on \"{2}\" is required. Consider using System.Net.Http.SocketsHttpHandler.";
	public const string net_http_libcurl_callback_notsupported_os = "The handler does not support custom handling of certificates on this operating system. Consider using System.Net.Http.SocketsHttpHandler.";
	public const string net_http_libcurl_clientcerts_notsupported_sslbackend = "The handler does not support client authentication certificates with this combination of libcurl ({0}) and its SSL backend (\"{1}\"). An SSL backend based on \"{2}\" is required. Consider using System.Net.Http.SocketsHttpHandler.";
	public const string net_http_libcurl_clientcerts_notsupported_os = "The handler does not support client authentication certificates on this operating system. Consider using System.Net.Http.SocketsHttpHandler.";
	public const string net_http_libcurl_revocation_notsupported_sslbackend = "The handler does not support changing revocation settings with this combination of libcurl ({0}) and its SSL backend (\"{1}\"). An SSL backend based on \"{2}\" is required. Consider using System.Net.Http.SocketsHttpHandler.";
	public const string net_http_feature_requires_Windows10Version1607 = "Using this feature requires Windows 10 Version 1607.";
	public const string net_http_feature_UWPClientCertSupportRequiresCertInPersonalCertificateStore = "Client certificate was not found in the personal (\\\"MY\\\") certificate store. In UWP, client certificates are only supported if they have been added to that certificate store.";
	public const string net_http_invalid_proxy_scheme = "Only the 'http' scheme is allowed for proxies.";
	public const string net_http_request_invalid_char_encoding = "Request headers must contain only ASCII characters.";
	public const string net_http_ssl_connection_failed = "The SSL connection could not be established, see inner exception.";
	public const string net_http_unsupported_chunking = "HTTP 1.0 does not support chunking.";
	public const string net_http_unsupported_version = "Request HttpVersion 0.X is not supported.  Use 1.0 or above.";
	public const string IO_SeekBeforeBegin = "An attempt was made to move the position before the beginning of the stream.";
	public const string net_http_request_no_host = "CONNECT request must contain Host header.";
	public const string net_http_winhttp_error = "Error {0} calling {1}, '{2}'.";
	public const string net_http_authconnectionfailure = "Authentication failed because the connection could not be reused.";
	public const string net_nego_server_not_supported = "Server implementation is not supported";
	public const string net_nego_protection_level_not_supported = "Requested protection level is not supported with the gssapi implementation currently installed.";
	public const string net_context_buffer_too_small = "Insufficient buffer space. Required: {0} Actual: {1}.";
	public const string net_gssapi_operation_failed_detailed = "GSSAPI operation failed with error - {0} ({1}).";
	public const string net_gssapi_operation_failed = "GSSAPI operation failed with status: {0} (Minor status: {1}).";
	public const string net_nego_channel_binding_not_supported = "No support for channel binding on operating systems other than Windows.";
	public const string net_ntlm_not_possible_default_cred = "NTLM authentication is not possible with default credentials on this platform.";
	public const string net_nego_not_supported_empty_target_with_defaultcreds = "Target name should be non empty if default credentials are passed.";
	public const string Arg_ArgumentOutOfRangeException = "Index was out of bounds:";
	public const string Arg_ElementsInSourceIsGreaterThanDestination = "Number of elements in source vector is greater than the destination array";
	public const string Arg_NullArgumentNullRef = "The method was called with a null array argument.";
	public const string Arg_TypeNotSupported = "Specified type is not supported";
	public const string Arg_InsufficientNumberOfElements = "At least {0} element(s) are expected in the parameter \"{1}\".";
	public const string Argument_EmptyApplicationName = "ApplicationId cannot have an empty string for the name.";
	public const string ArgumentOutOfRange_GenericPositive = "Value must be positive.";
	public const string Argument_PathEmpty = "Path cannot be the empty string or all whitespace.";
	public const string ArgumentOutOfRange_MustBePositive = "'{0}' must be greater than zero.";
	public const string IO_AlreadyExists_Name = "Cannot create '{0}' because a file or directory with the same name already exists.";
	public const string InvalidOperation_ComputerName = "Computer name could not be obtained.";
	public const string InvalidOperation_GetVersion = "OSVersion's call to GetVersionEx failed";
	public const string PersistedFiles_NoHomeDirectory = "The home directory of the current user could not be determined.";
	public const string Argument_BadResourceScopeTypeBits = "Unknown value for the ResourceScope: {0}  Too many resource type bits may be set.";
	public const string Argument_BadResourceScopeVisibilityBits = "Unknown value for the ResourceScope: {0}  Too many resource visibility bits may be set.";
	public const string ArgumentNull_TypeRequiredByResourceScope = "The type parameter cannot be null when scoping the resource's visibility to Private or Assembly.";
	public const string Argument_ResourceScopeWrongDirection = "Resource type in the ResourceScope enum is going from a more restrictive resource type to a more general one.  From: \"{0}\"  To: \"{1}\"";
	public const string AppDomain_Name = "Name:";
	public const string AppDomain_NoContextPolicies = "There are no context policies.";
	public const string Arg_MustBeTrue = "Argument must be true.";
	public const string Arg_CannotUnloadAppDomainException = "Attempt to unload the AppDomain failed.";
	public const string Arg_AppDomainUnloadedException = "Attempted to access an unloaded AppDomain.";
	public const string ZeroLengthString = "String cannot have zero length.";
	public const string EntryPointNotFound = "Entry point not found in assembly";
	public const string Arg_ContextMarshalException = "Attempted to marshal an object across a context boundary.";
	public const string AppDomain_Policy_PrincipalTwice = "Default principal object cannot be set twice.";
	public const string ArgumentNull_Collection = "Collection cannot be null.";
	public const string ArgumentOutOfRange_ArrayListInsert = "Insertion index was out of range. Must be non-negative and less than or equal to size.";
	public const string ArgumentOutOfRange_Count = "Count must be positive and count must refer to a location within the string/array/collection.";
	public const string ArgumentOutOfRange_HashtableLoadFactor = "Load factor needs to be between 0.1 and 1.0.";
	public const string ArgumentOutOfRange_MustBeNonNegNum = "'{0}' must be non-negative.";
	public const string Arg_CannotMixComparisonInfrastructure = "The usage of IKeyComparer and IHashCodeProvider/IComparer interfaces cannot be mixed; use one or the other.";
	public const string InvalidOperation_HashInsertFailed = "Hashtable insert failed. Load factor too high. The most common cause is multiple threads writing to the Hashtable simultaneously.";
	public const string InvalidOperation_UnderlyingArrayListChanged = "This range in the underlying list is invalid. A possible cause is that elements were removed.";
	public const string NotSupported_FixedSizeCollection = "Collection was of a fixed size.";
	public const string NotSupported_RangeCollection = "The specified operation is not supported on Ranges.";
	public const string NotSupported_ReadOnlyCollection = "Collection is read-only.";
	public const string Serialization_KeyValueDifferentSizes = "The keys and values arrays have different sizes.";
	public const string Serialization_NullKey = "One of the serialized keys is null.";
	public const string NotSupported_CannotWriteToBufferedStreamIfReadBufferCannotBeFlushed = "Cannot write to a BufferedStream while the read buffer is not empty if the underlying stream is not seekable. Ensure that the stream underlying this BufferedStream can seek or avoid interleaving read and write operations on this BufferedStream.";
	public const string Argument_EmptyPath = "Empty path name is not legal.";
	public const string Argument_StreamNotReadable = "Stream was not readable.";
	public const string Argument_StreamNotWritable = "Stream was not writable.";
	public const string ObjectDisposed_ReaderClosed = "Cannot read from a closed TextReader.";
	public const string ArgumentNull_Child = "Cannot have a null child.";
	public const string Argument_AttributeNamesMustBeUnique = "Attribute names must be unique.";
	public const string Argument_InvalidElementName = "Invalid element name '{0}'.";
	public const string Argument_InvalidElementTag = "Invalid element tag '{0}'.";
	public const string Argument_InvalidElementText = "Invalid element text '{0}'.";
	public const string Argument_InvalidElementValue = "Invalid element value '{0}'.";
	public const string Argument_InvalidFlag = "Value of flags is invalid.";
	public const string PlatformNotSupported_AppDomains = "Secondary AppDomains are not supported on this platform.";
	public const string PlatformNotSupported_CAS = "Code Access Security is not supported on this platform.";
	public const string PlatformNotSupported_AppDomain_ResMon = "AppDomain resource monitoring is not supported on this platform.";
	public const string Argument_EmptyValue = "Value cannot be empty.";
	public const string PlatformNotSupported_RuntimeInformation = "RuntimeInformation is not supported for Portable Class Libraries.";
	public const string Overflow_Negative_Unsigned = "Negative values do not have an unsigned representation.";
	public const string Cryptography_Oid_InvalidName = "No OID value matches this name.";
	public const string Cryptography_SSE_InvalidDataSize = "NoLength of the data to encrypt is invalid.";
	public const string Cryptography_Der_Invalid_Encoding = "ASN1 corrupted data.";
	public const string ObjectDisposed_Generic = "Cannot access a disposed object.";
	public const string Cryptography_Asn_EnumeratedValueRequiresNonFlagsEnum = "ASN.1 Enumerated values only apply to enum types without the [Flags] attribute.";
	public const string Cryptography_Asn_NamedBitListRequiresFlagsEnum = "Named bit list operations require an enum with the [Flags] attribute.";
	public const string Cryptography_Asn_NamedBitListValueTooBig = "The encoded named bit list value is larger than the value size of the '{0}' enum.";
	public const string Cryptography_Asn_UniversalValueIsFixed = "Tags with TagClass Universal must have the appropriate TagValue value for the data type being read or written.";
	public const string Cryptography_Asn_UnusedBitCountRange = "Unused bit count must be between 0 and 7, inclusive.";
	public const string Cryptography_AsnSerializer_AmbiguousFieldType = "Field '{0}' of type '{1}' has ambiguous type '{2}', an attribute derived from AsnTypeAttribute is required.";
	public const string Cryptography_AsnSerializer_Choice_AllowNullNonNullable = "[Choice].AllowNull=true is not valid because type '{0}' cannot have a null value.";
	public const string Cryptography_AsnSerializer_Choice_ConflictingTagMapping = "The tag ({0} {1}) for field '{2}' on type '{3}' already is associated in this context with field '{4}' on type '{5}'.";
	public const string Cryptography_AsnSerializer_Choice_DefaultValueDisallowed = "Field '{0}' on [Choice] type '{1}' has a default value, which is not permitted.";
	public const string Cryptography_AsnSerializer_Choice_NoChoiceWasMade = "An instance of [Choice] type '{0}' has no non-null fields.";
	public const string Cryptography_AsnSerializer_Choice_NonNullableField = "Field '{0}' on [Choice] type '{1}' can not be assigned a null value.";
	public const string Cryptography_AsnSerializer_Choice_TooManyValues = "Fields '{0}' and '{1}' on type '{2}' are both non-null when only one value is permitted.";
	public const string Cryptography_AsnSerializer_Choice_TypeCycle = "Field '{0}' on [Choice] type '{1}' has introduced a type chain cycle.";
	public const string Cryptography_AsnSerializer_MultipleAsnTypeAttributes = "Field '{0}' on type '{1}' has multiple attributes deriving from '{2}' when at most one is permitted.";
	public const string Cryptography_AsnSerializer_NoJaggedArrays = "Type '{0}' cannot be serialized or deserialized because it is an array of arrays.";
	public const string Cryptography_AsnSerializer_NoMultiDimensionalArrays = "Type '{0}' cannot be serialized or deserialized because it is a multi-dimensional array.";
	public const string Cryptography_AsnSerializer_NoOpenTypes = "Type '{0}' cannot be serialized or deserialized because it is not sealed or has unbound generic parameters.";
	public const string Cryptography_AsnSerializer_Optional_NonNullableField = "Field '{0}' on type '{1}' is declared [OptionalValue], but it can not be assigned a null value.";
	public const string Cryptography_AsnSerializer_PopulateFriendlyNameOnString = "Field '{0}' on type '{1}' has [ObjectIdentifier].PopulateFriendlyName set to true, which is not applicable to a string.  Change the field to '{2}' or set PopulateFriendlyName to false.";
	public const string Cryptography_AsnSerializer_SetValueException = "Unable to set field {0} on type {1}.";
	public const string Cryptography_AsnSerializer_SpecificTagChoice = "Field '{0}' on type '{1}' has specified an implicit tag value via [ExpectedTag] for [Choice] type '{2}'. ExplicitTag must be true, or the [ExpectedTag] attribute removed.";
	public const string Cryptography_AsnSerializer_UnexpectedTypeForAttribute = "Field '{0}' of type '{1}' has an effective type of '{2}' when one of ({3}) was expected.";
	public const string Cryptography_AsnSerializer_UtcTimeTwoDigitYearMaxTooSmall = "Field '{0}' on type '{1}' has a [UtcTime] TwoDigitYearMax value ({2}) smaller than the minimum (99).";
	public const string Cryptography_AsnSerializer_UnhandledType = "Could not determine how to serialize or deserialize type '{0}'.";
	public const string Cryptography_AsnWriter_EncodeUnbalancedStack = "Encode cannot be called while a Sequence or SetOf is still open.";
	public const string Cryptography_AsnWriter_PopWrongTag = "Cannot pop the requested tag as it is not currently in progress.";
	public const string Cryptography_BadHashValue = "The hash value is not correct.";
	public const string Cryptography_BadSignature = "Invalid signature.";
	public const string Cryptography_Cms_CannotDetermineSignatureAlgorithm = "Could not determine signature algorithm for the signer certificate.";
	public const string Cryptography_Cms_IncompleteCertChain = "The certificate chain is incomplete, the self-signed root authority could not be determined.";
	public const string Cryptography_Cms_Invalid_Originator_Identifier_Choice = "Invalid originator identifier choice {0} found in decoded CMS.";
	public const string Cryptography_Cms_InvalidMessageType = "Invalid cryptographic message type.";
	public const string Cryptography_Cms_InvalidSignerHashForSignatureAlg = "SignerInfo digest algorithm '{0}' is not valid for signature algorithm '{1}'.";
	public const string Cryptography_Cms_MissingAuthenticatedAttribute = "The cryptographic message does not contain an expected authenticated attribute.";
	public const string Cryptography_Cms_NoCounterCounterSigner = "Only one level of counter-signatures are supported on this platform.";
	public const string Cryptography_Cms_NoRecipients = "The recipients collection is empty. You must specify at least one recipient. This platform does not implement the certificate picker UI.";
	public const string Cryptography_Cms_NoSignerCert = "No signer certificate was provided. This platform does not implement the certificate picker UI.";
	public const string Cryptography_Cms_NoSignerAtIndex = "The signed cryptographic message does not have a signer for the specified signer index.";
	public const string Cryptography_Cms_RecipientNotFound = "The enveloped-data message does not contain the specified recipient.";
	public const string Cryptography_Cms_RecipientType_NotSupported = "The recipient type '{0}' is not supported for encryption or decryption on this platform.";
	public const string Cryptography_Cms_SignerNotFound = "Cannot find the original signer.";
	public const string Cryptography_Cms_Signing_RequiresPrivateKey = "A certificate with a private key is required.";
	public const string Cryptography_Cms_TrustFailure = "Certificate trust could not be established. The first reported error is: {0}";
	public const string Cryptography_Cms_UnknownAlgorithm = "Unknown algorithm '{0}'.";
	public const string Cryptography_Cms_UnknownKeySpec = "Unable to determine the type of key handle from this keyspec {0}.";
	public const string Cryptography_Cms_WrongKeyUsage = "The certificate is not valid for the requested usage.";
	public const string Cryptography_Pkcs_InvalidSignatureParameters = "Invalid signature paramters.";
	public const string Cryptography_Pkcs_PssParametersMissing = "PSS parameters were not present.";
	public const string Cryptography_Pkcs_PssParametersHashMismatch = "This platform requires that the PSS hash algorithm ({0}) match the data digest algorithm ({1}).";
	public const string Cryptography_Pkcs_PssParametersMgfHashMismatch = "This platform does not support the MGF hash algorithm ({0}) being different from the signature hash algorithm ({1}).";
	public const string Cryptography_Pkcs_PssParametersMgfNotSupported = "Mask generation function '{0}' is not supported by this platform.";
	public const string Cryptography_Pkcs_PssParametersSaltMismatch = "PSS salt size {0} is not supported by this platform with hash algorithm {1}.";
	public const string Cryptography_TimestampReq_BadNonce = "The response from the timestamping server did not match the request nonce.";
	public const string Cryptography_TimestampReq_BadResponse = "The response from the timestamping server was not understood.";
	public const string Cryptography_TimestampReq_Failure = "The timestamping server did not grant the request. The request status is '{0}' with failure info '{1}'.";
	public const string Cryptography_TimestampReq_NoCertFound = "The timestamping request required the TSA certificate in the response, but it was not found.";
	public const string Cryptography_TimestampReq_UnexpectedCertFound = "The timestamping request required the TSA certificate not be included in the response, but certificates were present.";
	public const string InvalidOperation_WrongOidInAsnCollection = "AsnEncodedData element in the collection has wrong Oid value: expected = '{0}', actual = '{1}'.";
	public const string PlatformNotSupported_CryptographyPkcs = "System.Security.Cryptography.Pkcs is only supported on Windows platforms.";
	public const string Cryptography_Invalid_IA5String = "The string contains a character not in the 7 bit ASCII character set.";
	public const string Cryptography_UnknownHashAlgorithm = "'{0}' is not a known hash algorithm.";
	public const string Cryptography_WriteEncodedValue_OneValueAtATime = "The input to WriteEncodedValue must represent a single encoded value with no trailing data.";
	public const string Cryptography_DpApi_ProfileMayNotBeLoaded = "The data protection operation was unsuccessful. This may have been caused by not having the user profile loaded for the current thread's user context, which may be the case when the thread is impersonating.";
	public const string PlatformNotSupported_CryptographyProtectedData = "Windows Data Protection API (DPAPI) is not supported on this platform.";
	public const string Cryptography_Partial_Chain = "A certificate chain could not be built to a trusted root authority.";
	public const string Cryptography_Xml_BadWrappedKeySize = "Bad wrapped key size.";
	public const string Cryptography_Xml_CipherValueElementRequired = "A Cipher Data element should have either a CipherValue or a CipherReference element.";
	public const string Cryptography_Xml_CreateHashAlgorithmFailed = "Could not create hash algorithm object.";
	public const string Cryptography_Xml_CreateTransformFailed = "Could not create the XML transformation identified by the URI {0}.";
	public const string Cryptography_Xml_CreatedKeyFailed = "Failed to create signing key.";
	public const string Cryptography_Xml_DigestMethodRequired = "A DigestMethod must be specified on a Reference prior to generating XML.";
	public const string Cryptography_Xml_DigestValueRequired = "A Reference must contain a DigestValue.";
	public const string Cryptography_Xml_EnvelopedSignatureRequiresContext = "An XmlDocument context is required for enveloped transforms.";
	public const string Cryptography_Xml_InvalidElement = "Malformed element {0}.";
	public const string Cryptography_Xml_InvalidEncryptionProperty = "Malformed encryption property element.";
	public const string Cryptography_Xml_InvalidKeySize = "The key size should be a non negative integer.";
	public const string Cryptography_Xml_InvalidReference = "Malformed reference element.";
	public const string Cryptography_Xml_InvalidSignatureLength = "The length of the signature with a MAC should be less than the hash output length.";
	public const string Cryptography_Xml_InvalidSignatureLength2 = "The length in bits of the signature with a MAC should be a multiple of 8.";
	public const string Cryptography_Xml_InvalidX509IssuerSerialNumber = "X509 issuer serial number is invalid.";
	public const string Cryptography_Xml_KeyInfoRequired = "A KeyInfo element is required to check the signature.";
	public const string Cryptography_Xml_KW_BadKeySize = "The length of the encrypted data in Key Wrap is either 32, 40 or 48 bytes.";
	public const string Cryptography_Xml_LoadKeyFailed = "Signing key is not loaded.";
	public const string Cryptography_Xml_MissingAlgorithm = "Symmetric algorithm is not specified.";
	public const string Cryptography_Xml_MissingCipherData = "Cipher data is not specified.";
	public const string Cryptography_Xml_MissingDecryptionKey = "Unable to retrieve the decryption key.";
	public const string Cryptography_Xml_MissingEncryptionKey = "Unable to retrieve the encryption key.";
	public const string Cryptography_Xml_NotSupportedCryptographicTransform = "The specified cryptographic transform is not supported.";
	public const string Cryptography_Xml_ReferenceElementRequired = "At least one Reference element is required.";
	public const string Cryptography_Xml_ReferenceTypeRequired = "The Reference type must be set in an EncryptedReference object.";
	public const string Cryptography_Xml_SelfReferenceRequiresContext = "An XmlDocument context is required to resolve the Reference Uri {0}.";
	public const string Cryptography_Xml_SignatureDescriptionNotCreated = "SignatureDescription could not be created for the signature algorithm supplied.";
	public const string Cryptography_Xml_SignatureMethodKeyMismatch = "The key does not fit the SignatureMethod.";
	public const string Cryptography_Xml_SignatureMethodRequired = "A signature method is required.";
	public const string Cryptography_Xml_SignatureValueRequired = "Signature requires a SignatureValue.";
	public const string Cryptography_Xml_SignedInfoRequired = "Signature requires a SignedInfo.";
	public const string Cryptography_Xml_TransformIncorrectInputType = "The input type was invalid for this transform.";
	public const string Cryptography_Xml_IncorrectObjectType = "Type of input object is invalid.";
	public const string Cryptography_Xml_UnknownTransform = "Unknown transform has been encountered.";
	public const string Cryptography_Xml_UriNotResolved = "Unable to resolve Uri {0}.";
	public const string Cryptography_Xml_UriNotSupported = " The specified Uri is not supported.";
	public const string Cryptography_Xml_UriRequired = "A Uri attribute is required for a CipherReference element.";
	public const string Cryptography_Xml_XrmlMissingContext = "Null Context property encountered.";
	public const string Cryptography_Xml_XrmlMissingIRelDecryptor = "IRelDecryptor is required.";
	public const string Cryptography_Xml_XrmlMissingIssuer = "Issuer node is required.";
	public const string Cryptography_Xml_XrmlMissingLicence = "License node is required.";
	public const string Cryptography_Xml_XrmlUnableToDecryptGrant = "Unable to decrypt grant content.";
	public const string Log_ActualHashValue = "Actual hash value: {0}";
	public const string Log_BeginCanonicalization = "Beginning canonicalization using \"{0}\" ({1}).";
	public const string Log_BeginSignatureComputation = "Beginning signature computation.";
	public const string Log_BeginSignatureVerification = "Beginning signature verification.";
	public const string Log_BuildX509Chain = "Building and verifying the X509 chain for certificate {0}.";
	public const string Log_CanonicalizationSettings = "Canonicalization transform is using resolver {0} and base URI \"{1}\".";
	public const string Log_CanonicalizedOutput = "Output of canonicalization transform: {0}";
	public const string Log_CertificateChain = "Certificate chain:";
	public const string Log_CheckSignatureFormat = "Checking signature format using format validator \"[{0}] {1}.{2}\".";
	public const string Log_CheckSignedInfo = "Checking signature on SignedInfo with id \"{0}\".";
	public const string Log_FormatValidationSuccessful = "Signature format validation was successful.";
	public const string Log_FormatValidationNotSuccessful = "Signature format validation failed.";
	public const string Log_KeyUsages = "Found key usages \"{0}\" in extension {1} on certificate {2}.";
	public const string Log_NoNamespacesPropagated = "No namespaces are being propagated.";
	public const string Log_PropagatingNamespace = "Propagating namespace {0}=\"{1}\".";
	public const string Log_RawSignatureValue = "Raw signature: {0}";
	public const string Log_ReferenceHash = "Reference {0} hashed with \"{1}\" ({2}) has hash value {3}, expected hash value {4}.";
	public const string Log_RevocationMode = "Revocation mode for chain building: {0}.";
	public const string Log_RevocationFlag = "Revocation flag for chain building: {0}.";
	public const string Log_SigningAsymmetric = "Calculating signature with key {0} using signature description {1}, hash algorithm {2}, and asymmetric signature formatter {3}.";
	public const string Log_SigningHmac = "Calculating signature using keyed hash algorithm {0}.";
	public const string Log_SigningReference = "Hashing reference {0}, Uri \"{1}\", Id \"{2}\", Type \"{3}\" with hash algorithm \"{4}\" ({5}).";
	public const string Log_TransformedReferenceContents = "Transformed reference contents: {0}";
	public const string Log_UnsafeCanonicalizationMethod = "Canonicalization method \"{0}\" is not on the safe list. Safe canonicalization methods are: {1}.";
	public const string Log_UrlTimeout = "URL retrieval timeout for chain building: {0}.";
	public const string Log_VerificationFailed = "Verification failed checking {0}.";
	public const string Log_VerificationFailed_References = "references";
	public const string Log_VerificationFailed_SignedInfo = "SignedInfo";
	public const string Log_VerificationFailed_X509Chain = "X509 chain verification";
	public const string Log_VerificationFailed_X509KeyUsage = "X509 key usage verification";
	public const string Log_VerificationFlag = "Verification flags for chain building: {0}.";
	public const string Log_VerificationTime = "Verification time for chain building: {0}.";
	public const string Log_VerificationWithKeySuccessful = "Verification with key {0} was successful.";
	public const string Log_VerificationWithKeyNotSuccessful = "Verification with key {0} was not successful.";
	public const string Log_VerifyReference = "Processing reference {0}, Uri \"{1}\", Id \"{2}\", Type \"{3}\".";
	public const string Log_VerifySignedInfoAsymmetric = "Verifying SignedInfo using key {0}, signature description {1}, hash algorithm {2}, and asymmetric signature deformatter {3}.";
	public const string Log_VerifySignedInfoHmac = "Verifying SignedInfo using keyed hash algorithm {0}.";
	public const string Log_X509ChainError = "Error building X509 chain: {0}: {1}.";
	public const string Log_XmlContext = "Using context: {0}";
	public const string Log_SignedXmlRecursionLimit = "Signed xml recursion limit hit while trying to decrypt the key. Reference {0} hashed with \"{1}\" and ({2}).";
	public const string Log_UnsafeTransformMethod = "Transform method \"{0}\" is not on the safe list. Safe transform methods are: {1}.";
	public const string Arg_CryptographyException = "Error occurred during a cryptographic operation.";
	public const string Arg_InvalidHandle = "Invalid handle.";
	public const string Arg_InvalidType = "Invalid type.";
	public const string Chain_NoPolicyMatch = "The certificate has invalid policy.";
	public const string Cryptography_BadHashSize_ForAlgorithm = "The provided value of {0} bytes does not match the expected size of {1} bytes for the algorithm ({2}).";
	public const string Cryptography_Cert_AlreadyHasPrivateKey = "The certificate already has an associated private key.";
	public const string Cryptography_CertReq_AlgorithmMustMatch = "The issuer certificate public key algorithm ({0}) does not match the value for this certificate request ({1}), use the X509SignatureGenerator overload.";
	public const string Cryptography_CertReq_BasicConstraintsRequired = "The issuer certificate does not have a Basic Constraints extension.";
	public const string Cryptography_CertReq_DatesReversed = "The provided notBefore value is later than the notAfter value.";
	public const string Cryptography_CertReq_DateTooOld = "The value predates 1950 and has no defined encoding.";
	public const string Cryptography_CertReq_DuplicateExtension = "An X509Extension with OID '{0}' has already been specified.";
	public const string Cryptography_CertReq_IssuerBasicConstraintsInvalid = "The issuer certificate does not have an appropriate value for the Basic Constraints extension.";
	public const string Cryptography_CertReq_IssuerKeyUsageInvalid = "The issuer certificate's Key Usage extension is present but does not contain the KeyCertSign flag.";
	public const string Cryptography_CertReq_IssuerRequiresPrivateKey = "The provided issuer certificate does not have an associated private key.";
	public const string Cryptography_CertReq_NotAfterNotNested = "The requested notAfter value ({0}) is later than issuerCertificate.NotAfter ({1}).";
	public const string Cryptography_CertReq_NotBeforeNotNested = "The requested notBefore value ({0}) is earlier than issuerCertificate.NotBefore ({1}).";
	public const string Cryptography_CertReq_NoKeyProvided = "This method cannot be used since no signing key was provided via a constructor, use an overload accepting an X509SignatureGenerator instead.";
	public const string Cryptography_CertReq_RSAPaddingRequired = "The issuer certificate uses an RSA key but no RSASignaturePadding was provided to a constructor. If one cannot be provided, use the X509SignatureGenerator overload.";
	public const string Cryptography_CSP_NoPrivateKey = "Object contains only the public half of a key pair. A private key must also be provided.";
	public const string Cryptography_CurveNotSupported = "The specified curve '{0}' or its parameters are not valid for this platform.";
	public const string Cryptography_ECC_NamedCurvesOnly = "Only named curves are supported on this platform.";
	public const string Cryptography_Encryption_MessageTooLong = "The message exceeds the maximum allowable length for the chosen options ({0}).";
	public const string Cryptography_HashAlgorithmNameNullOrEmpty = "The hash algorithm name cannot be null or empty.";
	public const string Cryptography_InvalidOID = "Object identifier (OID) is unknown.";
	public const string Cryptography_InvalidPaddingMode = "Specified padding mode is not valid for this algorithm.";
	public const string Cryptography_InvalidPublicKey_Object = "The provided PublicKey object is invalid, valid Oid and EncodedKeyValue property values are required.";
	public const string Cryptography_InvalidRsaParameters = "The specified RSA parameters are not valid; both Exponent and Modulus are required fields.";
	public const string Cryptography_KeyTooSmall = "The key is too small for the requested operation.";
	public const string Cryptography_OAEP_Decryption_Failed = "Error occurred while decoding OAEP padding.";
	public const string Cryptography_OpenInvalidHandle = "Cannot open an invalid handle.";
	public const string Cryptography_PrivateKey_DoesNotMatch = "The provided key does not match the public key for this certificate.";
	public const string Cryptography_PrivateKey_WrongAlgorithm = "The provided key does not match the public key algorithm for this certificate.";
	public const string Cryptography_RSA_DecryptWrongSize = "The length of the data to decrypt is not valid for the size of this key.";
	public const string Cryptography_SignHash_WrongSize = "The provided hash value is not the expected size for the specified hash algorithm.";
	public const string Cryptography_Unix_X509_DisallowedStoreNotEmpty = "The Disallowed store is not supported on this platform, but already has data. All files under '{0}' must be removed.";
	public const string Cryptography_Unix_X509_MachineStoresReadOnly = "Unix LocalMachine X509Stores are read-only for all users.";
	public const string Cryptography_Unix_X509_MachineStoresRootOnly = "Unix LocalMachine X509Store is limited to the Root and CertificateAuthority stores.";
	public const string Cryptography_Unix_X509_NoDisallowedStore = "The Disallowed store is not supported on this platform.";
	public const string Cryptography_Unix_X509_PropertyNotSettable = "The {0} value cannot be set on Unix.";
	public const string Cryptography_UnknownKeyAlgorithm = "'{0}' is not a known key algorithm.";
	public const string Cryptography_Unix_X509_SerializedExport = "X509ContentType.SerializedCert and X509ContentType.SerializedStore are not supported on Unix.";
	public const string Cryptography_Unmapped_System_Typed_Error = "The system cryptographic library returned error '{0}' of type '{1}'";
	public const string Cryptography_X509_InvalidFlagCombination = "The flags '{0}' may not be specified together.";
	public const string Cryptography_X509_PKCS7_NoSigner = "Cannot find the original signer.";
	public const string Cryptography_X509_StoreAddFailure = "The X509 certificate could not be added to the store.";
	public const string Cryptography_X509_StoreNoFileAvailable = "The X509 certificate could not be added to the store because all candidate file names were in use.";
	public const string Cryptography_X509_StoreNotFound = "The specified X509 certificate store does not exist.";
	public const string Cryptography_X509_StoreReadOnly = "The X509 certificate store is read-only.";
	public const string Cryptography_X509_StoreCannotCreate = "The platform does not have a definition for an X509 certificate store named '{0}' with a StoreLocation of '{1}', and does not support creating it.";
	public const string NotSupported_ECDsa_Csp = "CryptoApi ECDsa keys are not supported.";
	public const string NotSupported_Export_MultiplePrivateCerts = "Only one certificate with a private key can be exported in a single PFX.";
	public const string NotSupported_LegacyBasicConstraints = "The X509 Basic Constraints extension with OID 2.5.29.10 is not supported.";
	public const string NotSupported_ImmutableX509Certificate = "X509Certificate is immutable on this platform. Use the equivalent constructor instead.";
	public const string Security_AccessDenied = "Access is denied.";
	public const string Cryptography_FileStatusError = "Unable to get file status.";
	public const string Cryptography_InvalidDirectoryPermissions = "Invalid directory permissions. The directory '{0}' must be readable, writable and executable by the owner.";
	public const string Cryptography_OwnerNotCurrentUser = "The owner of '{0}' is not the current user.";
	public const string Cryptography_InvalidFilePermissions = "Invalid file permissions. The file '{0}' must readable and writable by the current owner and by no one else, and the permissions could not be changed to meet that criteria.";
	public const string Cryptography_Invalid_X500Name = "The string contains an invalid X500 name attribute key, oid, value or delimiter.";
	public const string Cryptography_X509_NoEphemeralPfx = "This platform does not support loading with EphemeralKeySet. Remove the flag to allow keys to be temporarily created on disk.";
	public const string Cryptography_X509Store_WouldModifyUserTrust = "Removing the requested certificate would modify user trust settings, and has been denied.";
	public const string Cryptography_X509Store_WouldModifyAdminTrust = "Removing the requested certificate would modify admin trust settings, and has been denied.";
	public const string Cryptography_InvalidKeySize = "Specified key is not a valid size for this algorithm.";
	public const string Cryptography_DSA_KeyGenNotSupported = "DSA keys can be imported, but new key generation is not supported on this platform.";
	public const string Cryptography_InvalidDsaParameters_MissingFields = "The specified DSA parameters are not valid; P, Q, G and Y are all required.";
	public const string Cryptography_InvalidDsaParameters_MismatchedPGY = "The specified DSA parameters are not valid; P, G and Y must be the same length (the key size).";
	public const string Cryptography_InvalidDsaParameters_MismatchedQX = "The specified DSA parameters are not valid; Q and X (if present) must be the same length.";
	public const string Cryptography_InvalidDsaParameters_MismatchedPJ = "The specified DSA parameters are not valid; J (if present) must be shorter than P.";
	public const string Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey = "The specified DSA parameters are not valid; Seed, if present, must be 20 bytes long for keys shorter than 1024 bits.";
	public const string Cryptography_InvalidDsaParameters_QRestriction_ShortKey = "The specified DSA parameters are not valid; Q must be 20 bytes long for keys shorter than 1024 bits.";
	public const string Cryptography_InvalidDsaParameters_QRestriction_LargeKey = "The specified DSA parameters are not valid; Q's length must be one of 20, 32 or 64 bytes.";
	public const string InvalidEmptyArgument = "Argument {0} cannot be zero-length.";
	public const string PlatformNotSupported_CompileToAssembly = "This platform does not support writing compiled regular expressions to an assembly.";
	public const string Parallel_Invoke_ActionNull = "One of the actions was null.";
	public const string Parallel_ForEach_OrderedPartitionerKeysNotNormalized = "This method requires the use of an OrderedPartitioner with the KeysNormalized property set to true.";
	public const string Parallel_ForEach_PartitionerNotDynamic = "The Partitioner used here must support dynamic partitioning.";
	public const string Parallel_ForEach_PartitionerReturnedNull = "The Partitioner used here returned a null partitioner source.";
	public const string Parallel_ForEach_NullEnumerator = "The Partitioner source returned a null enumerator.";
	public const string ParallelState_Break_InvalidOperationException_BreakAfterStop = "Break was called after Stop was called.";
	public const string ParallelState_Stop_InvalidOperationException_StopAfterBreak = "Stop was called after Break was called.";
	public const string ParallelState_NotSupportedException_UnsupportedMethod = "This method is not supported.";
	public const string ArgumentOutOfRange_InvalidThreshold = "The specified threshold for creating dictionary is out of range.";
	public const string Argument_ItemNotExist = "The specified item does not exist in this KeyedCollection.";
	public const string Arg_AccessException = "Cannot access member.";
	public const string Arg_AccessViolationException = "Attempted to read or write protected memory. This is often an indication that other memory is corrupt.";
	public const string Arg_ApplicationException = "Error in the application.";
	public const string Arg_ArgumentException = "Value does not fall within the expected range.";
	public const string Arg_ArithmeticException = "Overflow or underflow in the arithmetic operation.";
	public const string Arg_ArrayTypeMismatchException = "Attempted to access an element as a type incompatible with the array.";
	public const string Arg_ArrayZeroError = "Array must not be of length zero.";
	public const string Arg_BadImageFormatException = "Format of the executable (.exe) or library (.dll) is invalid.";
	public const string Arg_BogusIComparer = "Unable to sort because the IComparer.Compare() method returns inconsistent results. Either a value does not compare equal to itself, or one value repeatedly compared to another value yields different results. IComparer: '{0}'.";
	public const string Arg_CannotBeNaN = "TimeSpan does not accept floating point Not-a-Number values.";
	public const string Arg_CannotHaveNegativeValue = "String cannot contain a minus sign if the base is not 10.";
	public const string Arg_CopyNonBlittableArray = "Arrays must contain only blittable data in order to be copied to unmanaged memory.";
	public const string Arg_CopyOutOfRange = "Requested range extends past the end of the array.";
	public const string Arg_DataMisalignedException = "A datatype misalignment was detected in a load or store instruction.";
	public const string Arg_DateTimeRange = "Combination of arguments to the DateTime constructor is out of the legal range.";
	public const string Arg_DirectoryNotFoundException = "Attempted to access a path that is not on the disk.";
	public const string Arg_DecBitCtor = "Decimal byte array constructor requires an array of length four containing valid decimal bytes.";
	public const string Arg_DivideByZero = "Attempted to divide by zero.";
	public const string Arg_DlgtNullInst = "Delegate to an instance method cannot have null 'this'.";
	public const string Arg_DlgtTypeMis = "Delegates must be of the same type.";
	public const string Arg_DuplicateWaitObjectException = "Duplicate objects in argument.";
	public const string Arg_EnumAndObjectMustBeSameType = "Object must be the same type as the enum. The type passed in was '{0}'; the enum type was '{1}'.";
	public const string Arg_EntryPointNotFoundException = "Entry point was not found.";
	public const string Arg_EntryPointNotFoundExceptionParameterized = "Unable to find an entry point named '{0}' in DLL '{1}'.";
	public const string Arg_ExecutionEngineException = "Internal error in the runtime.";
	public const string Arg_ExternalException = "External component has thrown an exception.";
	public const string Arg_FieldAccessException = "Attempted to access a field that is not accessible by the caller.";
	public const string Arg_FormatException = "One of the identified items was in an invalid format.";
	public const string Arg_GuidArrayCtor = "Byte array for GUID must be exactly {0} bytes long.";
	public const string Arg_HexStyleNotSupported = "The number style AllowHexSpecifier is not supported on floating point data types.";
	public const string Arg_IndexOutOfRangeException = "Index was outside the bounds of the array.";
	public const string Arg_InsufficientExecutionStackException = "Insufficient stack to continue executing the program safely. This can happen from having too many functions on the call stack or function on the stack using too much stack space.";
	public const string Arg_InvalidBase = "Invalid Base.";
	public const string Arg_InvalidCastException = "Specified cast is not valid.";
	public const string Arg_InvalidHexStyle = "With the AllowHexSpecifier bit set in the enum bit field, the only other valid bits that can be combined into the enum value must be a subset of those in HexNumber.";
	public const string Arg_InvalidOperationException = "Operation is not valid due to the current state of the object.";
	public const string Arg_OleAutDateInvalid = " Not a legal OleAut date.";
	public const string Arg_OleAutDateScale = "OleAut date did not convert to a DateTime correctly.";
	public const string Arg_InvalidRuntimeTypeHandle = "Invalid RuntimeTypeHandle.";
	public const string Arg_IOException = "I/O error occurred.";
	public const string Arg_KeyNotFound = "The given key was not present in the dictionary.";
	public const string Arg_LongerThanSrcString = "Source string was not long enough. Check sourceIndex and count.";
	public const string Arg_LowerBoundsMustMatch = "The arrays' lower bounds must be identical.";
	public const string Arg_MissingFieldException = "Attempted to access a non-existing field.";
	public const string Arg_MethodAccessException = "Attempt to access the method failed.";
	public const string Arg_MissingMemberException = "Attempted to access a missing member.";
	public const string Arg_MissingMethodException = "Attempted to access a missing method.";
	public const string Arg_MulticastNotSupportedException = "Attempted to add multiple callbacks to a delegate that does not support multicast.";
	public const string Arg_MustBeBoolean = "Object must be of type Boolean.";
	public const string Arg_MustBeByte = "Object must be of type Byte.";
	public const string Arg_MustBeChar = "Object must be of type Char.";
	public const string Arg_MustBeDateTime = "Object must be of type DateTime.";
	public const string Arg_MustBeDateTimeOffset = "Object must be of type DateTimeOffset.";
	public const string Arg_MustBeDecimal = "Object must be of type Decimal.";
	public const string Arg_MustBeDouble = "Object must be of type Double.";
	public const string Arg_MustBeEnum = "Type provided must be an Enum.";
	public const string Arg_MustBeGuid = "Object must be of type GUID.";
	public const string Arg_MustBeInt16 = "Object must be of type Int16.";
	public const string Arg_MustBeInt32 = "Object must be of type Int32.";
	public const string Arg_MustBeInt64 = "Object must be of type Int64.";
	public const string Arg_MustBePrimArray = "Object must be an array of primitives.";
	public const string Arg_MustBeSByte = "Object must be of type SByte.";
	public const string Arg_MustBeSingle = "Object must be of type Single.";
	public const string Arg_MustBeStatic = "Method must be a static method.";
	public const string Arg_MustBeString = "Object must be of type String.";
	public const string Arg_MustBeStringPtrNotAtom = "The pointer passed in as a String must not be in the bottom 64K of the process's address space.";
	public const string Arg_MustBeTimeSpan = "Object must be of type TimeSpan.";
	public const string Arg_MustBeUInt16 = "Object must be of type UInt16.";
	public const string Arg_MustBeUInt32 = "Object must be of type UInt32.";
	public const string Arg_MustBeUInt64 = "Object must be of type UInt64.";
	public const string Arg_MustBeVersion = "Object must be of type Version.";
	public const string Arg_NeedAtLeast1Rank = "Must provide at least one rank.";
	public const string Arg_Need2DArray = "Array was not a two-dimensional array.";
	public const string Arg_Need3DArray = "Array was not a three-dimensional array.";
	public const string Arg_NegativeArgCount = "Argument count must not be negative.";
	public const string Arg_NotFiniteNumberException = "Arg_NotFiniteNumberException = Number encountered was not a finite quantity.";
	public const string Arg_NotGenericParameter = "Method may only be called on a Type for which Type.IsGenericParameter is true.";
	public const string Arg_NotImplementedException = "The method or operation is not implemented.";
	public const string Arg_NotSupportedException = "Specified method is not supported.";
	public const string Arg_NotSupportedNonZeroLowerBound = "Arrays with non-zero lower bounds are not supported.";
	public const string Arg_NullReferenceException = "Object reference not set to an instance of an object.";
	public const string Arg_ObjObjEx = "Object of type '{0}' cannot be converted to type '{1}'.";
	public const string Arg_OverflowException = "Arithmetic operation resulted in an overflow.";
	public const string Arg_OutOfMemoryException = "Insufficient memory to continue the execution of the program.";
	public const string Arg_PlatformNotSupported = "Operation is not supported on this platform.";
	public const string Arg_ParamName_Name = "Parameter name: {0}";
	public const string Arg_PathEmpty = "The path is empty.";
	public const string Arg_PathIllegalUNC_Path = "The UNC path '{0}' should be of the form \\\\\\\\server\\\\share.";
	public const string Arg_RankException = "Attempted to operate on an array with the incorrect number of dimensions.";
	public const string Arg_RankIndices = "Indices length does not match the array rank.";
	public const string Arg_RanksAndBounds = "Number of lengths and lowerBounds must match.";
	public const string Arg_RegGetOverflowBug = "RegistryKey.GetValue does not allow a String that has a length greater than Int32.MaxValue.";
	public const string Arg_RegKeyNotFound = "The specified registry key does not exist.";
	public const string Arg_StackOverflowException = "Operation caused a stack overflow.";
	public const string Arg_SynchronizationLockException = "Object synchronization method was called from an unsynchronized block of code.";
	public const string Arg_SystemException = "System error.";
	public const string Arg_TargetInvocationException = "Exception has been thrown by the target of an invocation.";
	public const string Arg_TargetParameterCountException = "Number of parameters specified does not match the expected number.";
	public const string Arg_DefaultValueMissingException = "Missing parameter does not have a default value.";
	public const string Arg_ThreadStartException = "Thread failed to start.";
	public const string Arg_ThreadStateException = "Thread was in an invalid state for the operation being executed.";
	public const string Arg_TimeoutException = "The operation has timed out.";
	public const string Arg_TypeAccessException = "Attempt to access the type failed.";
	public const string Arg_TypeLoadException = "Failure has occurred while loading a type.";
	public const string Arg_UnauthorizedAccessException = "Attempted to perform an unauthorized operation.";
	public const string Arg_VersionString = "Version string portion was too short or too long.";
	public const string Argument_AbsolutePathRequired = "Absolute path information is required.";
	public const string Argument_AdjustmentRulesNoNulls = "The AdjustmentRule array cannot contain null elements.";
	public const string Argument_AdjustmentRulesOutOfOrder = "The elements of the AdjustmentRule array must be in chronological order and must not overlap.";
	public const string Argument_CodepageNotSupported = "{0} is not a supported code page.";
	public const string Argument_CompareOptionOrdinal = "CompareOption.Ordinal cannot be used with other options.";
	public const string Argument_ConflictingDateTimeRoundtripStyles = "The DateTimeStyles value RoundtripKind cannot be used with the values AssumeLocal, AssumeUniversal or AdjustToUniversal.";
	public const string Argument_ConflictingDateTimeStyles = "The DateTimeStyles values AssumeLocal and AssumeUniversal cannot be used together.";
	public const string Argument_ConversionOverflow = "Conversion buffer overflow.";
	public const string Argument_ConvertMismatch = "The conversion could not be completed because the supplied DateTime did not have the Kind property set correctly.  For example, when the Kind property is DateTimeKind.Local, the source time zone must be TimeZoneInfo.Local.";
	public const string Argument_CultureInvalidIdentifier = "{0} is an invalid culture identifier.";
	public const string Argument_CultureIetfNotSupported = "Culture IETF Name {0} is not a recognized IETF name.";
	public const string Argument_CultureIsNeutral = "Culture ID {0} (0x{0:X4}) is a neutral culture; a region cannot be created from it.";
	public const string Argument_CultureNotSupported = "Culture is not supported.";
	public const string Argument_CustomCultureCannotBePassedByNumber = "Customized cultures cannot be passed by LCID, only by name.";
	public const string Argument_DateTimeBadBinaryData = "The binary data must result in a DateTime with ticks between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.";
	public const string Argument_DateTimeHasTicks = "The supplied DateTime must have the Year, Month, and Day properties set to 1.  The time cannot be specified more precisely than whole milliseconds.";
	public const string Argument_DateTimeHasTimeOfDay = "The supplied DateTime includes a TimeOfDay setting.   This is not supported.";
	public const string Argument_DateTimeIsInvalid = "The supplied DateTime represents an invalid time.  For example, when the clock is adjusted forward, any time in the period that is skipped is invalid.";
	public const string Argument_DateTimeIsNotAmbiguous = "The supplied DateTime is not in an ambiguous time range.";
	public const string Argument_DateTimeKindMustBeUnspecified = "The supplied DateTime must have the Kind property set to DateTimeKind.Unspecified.";
	public const string Argument_DateTimeKindMustBeUnspecifiedOrUtc = "The supplied DateTime must have the Kind property set to DateTimeKind.Unspecified or DateTimeKind.Utc.";
	public const string Argument_DateTimeOffsetInvalidDateTimeStyles = "The DateTimeStyles value 'NoCurrentDateDefault' is not allowed when parsing DateTimeOffset.";
	public const string Argument_DateTimeOffsetIsNotAmbiguous = "The supplied DateTimeOffset is not in an ambiguous time range.";
	public const string Argument_EmptyDecString = "Decimal separator cannot be the empty string.";
	public const string Argument_EmptyName = "Empty name is not legal.";
	public const string Argument_EmptyWaithandleArray = "Waithandle array may not be empty.";
	public const string Argument_EncoderFallbackNotEmpty = "Must complete Convert() operation or call Encoder.Reset() before calling GetBytes() or GetByteCount(). Encoder '{0}' fallback '{1}'.";
	public const string Argument_EncodingConversionOverflowBytes = "The output byte buffer is too small to contain the encoded data, encoding '{0}' fallback '{1}'.";
	public const string Argument_EncodingConversionOverflowChars = "The output char buffer is too small to contain the decoded characters, encoding '{0}' fallback '{1}'.";
	public const string Argument_EncodingNotSupported = "'{0}' is not a supported encoding name. For information on defining a custom encoding, see the documentation for the Encoding.RegisterProvider method.";
	public const string Argument_EnumTypeDoesNotMatch = "The argument type, '{0}', is not the same as the enum type '{1}'.";
	public const string Argument_FallbackBufferNotEmpty = "Cannot change fallback when buffer is not empty. Previous Convert() call left data in the fallback buffer.";
	public const string Argument_InvalidArgumentForComparison = "Type of argument is not compatible with the generic comparer.";
	public const string Argument_InvalidArrayLength = "Length of the array must be {0}.";
	public const string Argument_InvalidCalendar = "Not a valid calendar for the given culture.";
	public const string Argument_InvalidCharSequence = "Invalid Unicode code point found at index {0}.";
	public const string Argument_InvalidCharSequenceNoIndex = "String contains invalid Unicode code points.";
	public const string Argument_InvalidCodePageBytesIndex = "Unable to translate bytes {0} at index {1} from specified code page to Unicode.";
	public const string Argument_InvalidCodePageConversionIndex = "Unable to translate Unicode character \\\\u{0:X4} at index {1} to specified code page.";
	public const string Argument_InvalidCultureName = "Culture name '{0}' is not supported.";
	public const string Argument_InvalidDateTimeKind = "Invalid DateTimeKind value.";
	public const string Argument_InvalidDateTimeStyles = "An undefined DateTimeStyles value is being used.";
	public const string Argument_InvalidDigitSubstitution = "The DigitSubstitution property must be of a valid member of the DigitShapes enumeration. Valid entries include Context, NativeNational or None.";
	public const string Argument_InvalidEnumValue = "The value '{0}' is not valid for this usage of the type {1}.";
	public const string Argument_InvalidGroupSize = "Every element in the value array should be between one and nine, except for the last element, which can be zero.";
	public const string Argument_InvalidHighSurrogate = "Found a high surrogate char without a following low surrogate at index: {0}. The input may not be in this encoding, or may not contain valid Unicode (UTF-16) characters.";
	public const string Argument_InvalidId = "The specified ID parameter '{0}' is not supported.";
	public const string Argument_InvalidLowSurrogate = "Found a low surrogate char without a preceding high surrogate at index: {0}. The input may not be in this encoding, or may not contain valid Unicode (UTF-16) characters.";
	public const string Argument_InvalidNativeDigitCount = "The NativeDigits array must contain exactly ten members.";
	public const string Argument_InvalidNativeDigitValue = "Each member of the NativeDigits array must be a single text element (one or more UTF16 code points) with a Unicode Nd (Number, Decimal Digit) property indicating it is a digit.";
	public const string Argument_InvalidNeutralRegionName = "The region name {0} should not correspond to neutral culture; a specific culture name is required.";
	public const string Argument_InvalidNormalizationForm = "Invalid normalization form.";
	public const string Argument_InvalidREG_TZI_FORMAT = "The REG_TZI_FORMAT structure is corrupt.";
	public const string Argument_InvalidResourceCultureName = "The given culture name '{0}' cannot be used to locate a resource file. Resource filenames must consist of only letters, numbers, hyphens or underscores.";
	public const string Argument_InvalidSerializedString = "The specified serialized string '{0}' is not supported.";
	public const string Argument_InvalidTimeSpanStyles = "An undefined TimeSpanStyles value is being used.";
	public const string Argument_MustBeFalse = "Argument must be initialized to false";
	public const string Argument_NoEra = "No Era was supplied.";
	public const string Argument_NoRegionInvariantCulture = "There is no region associated with the Invariant Culture (Culture ID: 0x7F).";
	public const string Argument_NotIsomorphic = "Object contains non-primitive or non-blittable data.";
	public const string Argument_OffsetLocalMismatch = "The UTC Offset of the local dateTime parameter does not match the offset argument.";
	public const string Argument_OffsetPrecision = "Offset must be specified in whole minutes.";
	public const string Argument_OffsetOutOfRange = "Offset must be within plus or minus 14 hours.";
	public const string Argument_OffsetUtcMismatch = "The UTC Offset for Utc DateTime instances must be 0.";
	public const string Argument_OneOfCulturesNotSupported = "Culture name {0} or {1} is not supported.";
	public const string Argument_OnlyMscorlib = "Only mscorlib's assembly is valid.";
	public const string Argument_OutOfOrderDateTimes = "The DateStart property must come before the DateEnd property.";
	public const string ArgumentOutOfRange_HugeArrayNotSupported = "Arrays larger than 2GB are not supported.";
	public const string ArgumentOutOfRange_Length = "The specified length exceeds maximum capacity of SecureString.";
	public const string ArgumentOutOfRange_LengthTooLarge = "The specified length exceeds the maximum value of {0}.";
	public const string ArgumentOutOfRange_NeedValidId = "The ID parameter must be in the range {0} through {1}.";
	public const string Argument_InvalidTypeName = "The name of the type is invalid.";
	public const string Argument_PathFormatNotSupported_Path = "The format of the path '{0}' is not supported.";
	public const string Argument_RecursiveFallback = "Recursive fallback not allowed for character \\\\u{0:X4}.";
	public const string Argument_RecursiveFallbackBytes = "Recursive fallback not allowed for bytes {0}.";
	public const string Argument_ResultCalendarRange = "The result is out of the supported range for this calendar. The result should be between {0} (Gregorian date) and {1} (Gregorian date), inclusive.";
	public const string Argument_TimeSpanHasSeconds = "The TimeSpan parameter cannot be specified more precisely than whole minutes.";
	public const string Argument_TimeZoneNotFound = "The time zone ID '{0}' was not found on the local computer.";
	public const string Argument_TimeZoneInfoBadTZif = "The tzfile does not begin with the magic characters 'TZif'.  Please verify that the file is not corrupt.";
	public const string Argument_TimeZoneInfoInvalidTZif = "The TZif data structure is corrupt.";
	public const string Argument_ToExclusiveLessThanFromExclusive = "fromInclusive must be less than or equal to toExclusive.";
	public const string Argument_TransitionTimesAreIdentical = "The DaylightTransitionStart property must not equal the DaylightTransitionEnd property.";
	public const string Argument_UTCOutOfRange = "The UTC time represented when the offset is applied must be between year 0 and 10,000.";
	public const string ArgumentException_OtherNotArrayOfCorrectLength = "Object is not a array with the same number of elements as the array to compare it to.";
	public const string ArgumentException_TupleIncorrectType = "Argument must be of type {0}.";
	public const string ArgumentException_TupleLastArgumentNotATuple = "The last element of an eight element tuple must be a Tuple.";
	public const string ArgumentException_ValueTupleIncorrectType = "Argument must be of type {0}.";
	public const string ArgumentException_ValueTupleLastArgumentNotAValueTuple = "The last element of an eight element ValueTuple must be a ValueTuple.";
	public const string ArgumentNull_ArrayElement = "At least one element in the specified array was null.";
	public const string ArgumentNull_ArrayValue = "Found a null value within an array.";
	public const string ArgumentNull_Generic = "Value cannot be null.";
	public const string ArgumentNull_Obj = "Object cannot be null.";
	public const string ArgumentNull_String = "String reference not set to an instance of a String.";
	public const string ArgumentNull_Type = "Type cannot be null.";
	public const string ArgumentNull_Waithandles = "The waitHandles parameter cannot be null.";
	public const string ArgumentNull_WithParamName = "Parameter '{0}' cannot be null.";
	public const string ArgumentOutOfRange_AddValue = "Value to add was out of range.";
	public const string ArgumentOutOfRange_ActualValue = "Actual value was {0}.";
	public const string ArgumentOutOfRange_BadYearMonthDay = "Year, Month, and Day parameters describe an un-representable DateTime.";
	public const string ArgumentOutOfRange_BadHourMinuteSecond = "Hour, Minute, and Second parameters describe an un-representable DateTime.";
	public const string ArgumentOutOfRange_CalendarRange = "Specified time is not supported in this calendar. It should be between {0} (Gregorian date) and {1} (Gregorian date), inclusive.";
	public const string ArgumentOutOfRange_Capacity = "Capacity exceeds maximum capacity.";
	public const string ArgumentOutOfRange_DateArithmetic = "The added or subtracted value results in an un-representable DateTime.";
	public const string ArgumentOutOfRange_DateTimeBadMonths = "Months value must be between +/-120000.";
	public const string ArgumentOutOfRange_DateTimeBadTicks = "Ticks must be between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.";
	public const string ArgumentOutOfRange_DateTimeBadYears = "Years value must be between +/-10000.";
	public const string ArgumentOutOfRange_Day = "Day must be between 1 and {0} for month {1}.";
	public const string ArgumentOutOfRange_DayOfWeek = "The DayOfWeek enumeration must be in the range 0 through 6.";
	public const string ArgumentOutOfRange_DayParam = "The Day parameter must be in the range 1 through 31.";
	public const string ArgumentOutOfRange_DecimalRound = "Decimal can only round to between 0 and 28 digits of precision.";
	public const string ArgumentOutOfRange_DecimalScale = "Decimal's scale value must be between 0 and 28, inclusive.";
	public const string ArgumentOutOfRange_EndIndexStartIndex = "endIndex cannot be greater than startIndex.";
	public const string ArgumentOutOfRange_Era = "Time value was out of era range.";
	public const string ArgumentOutOfRange_FileTimeInvalid = "Not a valid Win32 FileTime.";
	public const string ArgumentOutOfRange_GetByteCountOverflow = "Too many characters. The resulting number of bytes is larger than what can be returned as an int.";
	public const string ArgumentOutOfRange_GetCharCountOverflow = "Too many bytes. The resulting number of chars is larger than what can be returned as an int.";
	public const string ArgumentOutOfRange_IndexCount = "Index and count must refer to a location within the string.";
	public const string ArgumentOutOfRange_IndexCountBuffer = "Index and count must refer to a location within the buffer.";
	public const string ArgumentOutOfRange_IndexLength = "Index and length must refer to a location within the string.";
	public const string ArgumentOutOfRange_IndexString = "Index was out of range. Must be non-negative and less than the length of the string.";
	public const string ArgumentOutOfRange_InvalidEraValue = "Era value was not valid.";
	public const string ArgumentOutOfRange_InvalidHighSurrogate = "A valid high surrogate character is between 0xd800 and 0xdbff, inclusive.";
	public const string ArgumentOutOfRange_InvalidLowSurrogate = "A valid low surrogate character is between 0xdc00 and 0xdfff, inclusive.";
	public const string ArgumentOutOfRange_InvalidUTF32 = "A valid UTF32 value is between 0x000000 and 0x10ffff, inclusive, and should not include surrogate codepoint values (0x00d800 ~ 0x00dfff).";
	public const string ArgumentOutOfRange_LengthGreaterThanCapacity = "The length cannot be greater than the capacity.";
	public const string ArgumentOutOfRange_ListInsert = "Index must be within the bounds of the List.";
	public const string ArgumentOutOfRange_ListItem = "Index was out of range. Must be non-negative and less than the size of the list.";
	public const string ArgumentOutOfRange_ListRemoveAt = "Index was out of range. Must be non-negative and less than the size of the list.";
	public const string ArgumentOutOfRange_Month = "Month must be between one and twelve.";
	public const string ArgumentOutOfRange_MonthParam = "The Month parameter must be in the range 1 through 12.";
	public const string ArgumentOutOfRange_MustBeNonNegInt32 = "Value must be non-negative and less than or equal to Int32.MaxValue.";
	public const string ArgumentOutOfRange_NeedNonNegOrNegative1 = "Number must be either non-negative and less than or equal to Int32.MaxValue or -1.";
	public const string ArgumentOutOfRange_NegativeCapacity = "Capacity must be positive.";
	public const string ArgumentOutOfRange_NegativeCount = "Count cannot be less than zero.";
	public const string ArgumentOutOfRange_NegativeLength = "Length cannot be less than zero.";
	public const string ArgumentOutOfRange_NoGCLohSizeGreaterTotalSize = "lohSize can't be greater than totalSize";
	public const string ArgumentOutOfRange_OffsetLength = "Offset and length must refer to a position in the string.";
	public const string ArgumentOutOfRange_OffsetOut = "Either offset did not refer to a position in the string, or there is an insufficient length of destination character array.";
	public const string ArgumentOutOfRange_PartialWCHAR = "Pointer startIndex and length do not refer to a valid string.";
	public const string ArgumentOutOfRange_Range = "Valid values are between {0} and {1}, inclusive.";
	public const string ArgumentOutOfRange_RoundingDigits = "Rounding digits must be between 0 and 15, inclusive.";
	public const string ArgumentOutOfRange_SmallMaxCapacity = "MaxCapacity must be one or greater.";
	public const string ArgumentOutOfRange_StartIndex = "StartIndex cannot be less than zero.";
	public const string ArgumentOutOfRange_StartIndexLargerThanLength = "startIndex cannot be larger than length of string.";
	public const string ArgumentOutOfRange_StartIndexLessThanLength = "startIndex must be less than length of string.";
	public const string ArgumentOutOfRange_UtcOffset = "The TimeSpan parameter must be within plus or minus 14.0 hours.";
	public const string ArgumentOutOfRange_UtcOffsetAndDaylightDelta = "The sum of the BaseUtcOffset and DaylightDelta properties must within plus or minus 14.0 hours.";
	public const string ArgumentOutOfRange_Version = "Version's parameters must be greater than or equal to zero.";
	public const string ArgumentOutOfRange_Week = "The Week parameter must be in the range 1 through 5.";
	public const string ArgumentOutOfRange_Year = "Year must be between 1 and 9999.";
	public const string Arithmetic_NaN = "Function does not accept floating point Not-a-Number values.";
	public const string ArrayTypeMismatch_CantAssignType = "Source array type cannot be assigned to destination array type.";
	public const string BadImageFormatException_CouldNotLoadFileOrAssembly = "Could not load file or assembly '{0}'. An attempt was made to load a program with an incorrect format.";
	public const string CollectionCorrupted = "A prior operation on this collection was interrupted by an exception. Collection's state is no longer trusted.";
	public const string Exception_EndOfInnerExceptionStack = "--- End of inner exception stack trace ---";
	public const string Exception_WasThrown = "Exception of type '{0}' was thrown.";
	public const string Format_BadBase64Char = "The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.";
	public const string Format_BadBase64CharArrayLength = "Invalid length for a Base-64 char array or string.";
	public const string Format_BadBoolean = "String was not recognized as a valid Boolean.";
	public const string Format_BadFormatSpecifier = "Format specifier '{0}' was invalid.";
	public const string Format_NoFormatSpecifier = "No format specifiers were provided.";
	public const string Format_BadQuote = "Cannot find a matching quote character for the character '{0}'.";
	public const string Format_EmptyInputString = "Input string was either empty or contained only whitespace.";
	public const string Format_GuidHexPrefix = "Expected hex 0x in '{0}'.";
	public const string Format_GuidInvLen = "Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).";
	public const string Format_GuidInvalidChar = "Guid string should only contain hexadecimal characters.";
	public const string Format_GuidBrace = "Expected {0xdddddddd, etc}.";
	public const string Format_GuidComma = "Could not find a comma, or the length between the previous token and the comma was zero (i.e., '0x,'etc.).";
	public const string Format_GuidBraceAfterLastNumber = "Could not find a brace, or the length between the previous token and the brace was zero (i.e., '0x,'etc.).";
	public const string Format_GuidDashes = "Dashes are in the wrong position for GUID parsing.";
	public const string Format_GuidEndBrace = "Could not find the ending brace.";
	public const string Format_ExtraJunkAtEnd = "Additional non-parsable characters are at the end of the string.";
	public const string Format_GuidUnrecognized = "Unrecognized Guid format.";
	public const string Format_IndexOutOfRange = "Index (zero based) must be greater than or equal to zero and less than the size of the argument list.";
	public const string Format_InvalidGuidFormatSpecification = "Format String can be only 'D', 'd', 'N', 'n', 'P', 'p', 'B', 'b', 'X' or 'x'.";
	public const string Format_InvalidString = "Input string was not in a correct format.";
	public const string Format_NeedSingleChar = "String must be exactly one character long.";
	public const string Format_NoParsibleDigits = "Could not find any recognizable digits.";
	public const string Format_BadTimeSpan = "String was not recognized as a valid TimeSpan.";
	public const string InsufficientMemory_MemFailPoint = "Insufficient available memory to meet the expected demands of an operation at this time.  Please try again later.";
	public const string InsufficientMemory_MemFailPoint_TooBig = "Insufficient memory to meet the expected demands of an operation, and this system is likely to never satisfy this request.  If this is a 32 bit system, consider booting in 3 GB mode.";
	public const string InsufficientMemory_MemFailPoint_VAFrag = "Insufficient available memory to meet the expected demands of an operation at this time, possibly due to virtual address space fragmentation.  Please try again later.";
	public const string InvalidCast_CannotCastNullToValueType = "Null object cannot be converted to a value type.";
	public const string InvalidCast_DownCastArrayElement = "At least one element in the source array could not be cast down to the destination array type.";
	public const string InvalidCast_FromTo = "Invalid cast from '{0}' to '{1}'.";
	public const string InvalidCast_IConvertible = "Object must implement IConvertible.";
	public const string InvalidCast_StoreArrayElement = "Object cannot be stored in an array of this type.";
	public const string InvalidOperation_Calling = "WinRT Interop has already been initialized and cannot be initialized again.";
	public const string InvalidOperation_DateTimeParsing = "Internal Error in DateTime and Calendar operations.";
	public const string InvalidOperation_HandleIsNotInitialized = "Handle is not initialized.";
	public const string InvalidOperation_IComparerFailed = "Failed to compare two elements in the array.";
	public const string InvalidOperation_NoValue = "Nullable object must have a value.";
	public const string InvalidOperation_NullArray = "The underlying array is null.";
	public const string InvalidOperation_Overlapped_Pack = "Cannot pack a packed Overlapped again.";
	public const string InvalidOperation_ReadOnly = "Instance is read-only.";
	public const string InvalidOperation_ThreadWrongThreadStart = "The thread was created with a ThreadStart delegate that does not accept a parameter.";
	public const string InvalidOperation_UnknownEnumType = "Unknown enum type.";
	public const string InvalidOperation_WriteOnce = "This property has already been set and cannot be modified.";
	public const string InvalidOperation_ArrayCreateInstance_NotARuntimeType = "Array.CreateInstance() can only accept Type objects created by the runtime.";
	public const string InvalidOperation_TooEarly = "Internal Error: This operation cannot be invoked in an eager class constructor.";
	public const string InvalidOperation_NullContext = "Cannot call Set on a null context";
	public const string InvalidOperation_CannotUseAFCOtherThread = "AsyncFlowControl object must be used on the thread where it was created.";
	public const string InvalidOperation_CannotRestoreUnsupressedFlow = "Cannot restore context flow when it is not suppressed.";
	public const string InvalidOperation_CannotSupressFlowMultipleTimes = "Context flow is already suppressed.";
	public const string InvalidOperation_CannotUseAFCMultiple = "AsyncFlowControl object can be used only once to call Undo().";
	public const string InvalidOperation_AsyncFlowCtrlCtxMismatch = "AsyncFlowControl objects can be used to restore flow only on a Context that had its flow suppressed.";
	public const string InvalidOperation_AsyncIOInProgress = "The stream is currently in use by a previous operation on the stream.";
	public const string InvalidProgram_Default = "Common Language Runtime detected an invalid program.";
	public const string InvalidProgram_Specific = "Common Language Runtime detected an invalid program. The body of method '{0}' is invalid.";
	public const string InvalidProgram_Vararg = "Method '{0}' has a variable argument list. Variable argument lists are not supported in .NET Core.";
	public const string InvalidProgram_CallVirtFinalize = "Object.Finalize() can not be called directly. It is only callable by the runtime.";
	public const string InvalidProgram_NativeCallable = "NativeCallable method cannot be called from managed code.";
	public const string InvalidTimeZone_InvalidRegistryData = "The time zone ID '{0}' was found on the local computer, but the registry information was corrupt.";
	public const string InvalidTimeZone_InvalidFileData = "The time zone ID '{0}' was found on the local computer, but the file at '{1}' was corrupt.";
	public const string InvalidTimeZone_JulianDayNotSupported = "Julian dates in POSIX strings are unsupported.";
	public const string InvalidTimeZone_NoTTInfoStructures = "There are no ttinfo structures in the tzfile.  At least one ttinfo structure is required in order to construct a TimeZoneInfo object.";
	public const string InvalidTimeZone_UnparseablePosixMDateString = "'{0}' is not a valid POSIX-TZ-environment-variable MDate rule.  A valid rule has the format 'Mm.w.d'.";
	public const string IO_DriveNotFound_Drive = "Could not find the drive '{0}'. The drive might not be ready or might not be mapped.";
	public const string IO_FileName_Name = "File name: '{0}'";
	public const string IO_FileLoad = "Could not load the specified file.";
	public const string IO_FileLoad_FileName = "Could not load the file '{0}'.";
	public const string Lazy_CreateValue_NoParameterlessCtorForT = "The lazily-initialized type does not have a public, parameterless constructor.";
	public const string Lazy_ctor_ModeInvalid = "The mode argument specifies an invalid value.";
	public const string Lazy_StaticInit_InvalidOperation = "ValueFactory returned null.";
	public const string Lazy_ToString_ValueNotCreated = "Value is not created.";
	public const string Lazy_Value_RecursiveCallsToValue = "ValueFactory attempted to access the Value property of this instance.";
	public const string MissingConstructor_Name = "Constructor on type '{0}' not found.";
	public const string MustUseCCRewrite = "An assembly (probably '{1}') must be rewritten using the code contracts binary rewriter (CCRewrite) because it is calling Contract.{0} and the CONTRACTS_FULL symbol is defined.  Remove any explicit definitions of the CONTRACTS_FULL symbol from your project and rebuild.  CCRewrite can be downloaded from http://go.microsoft.com/fwlink/?LinkID=169180. \\r\\nAfter the rewriter is installed, it can be enabled in Visual Studio from the project's Properties page on the Code Contracts pane.  Ensure that 'Perform Runtime Contract Checking' is enabled, which will define CONTRACTS_FULL.";
	public const string NotSupported_MaxWaitHandles = "The number of WaitHandles must be less than or equal to 64.";
	public const string NotSupported_NoCodepageData = "No data is available for encoding {0}. For information on defining a custom encoding, see the documentation for the Encoding.RegisterProvider method.";
	public const string NotSupported_StringComparison = "The string comparison type passed in is currently not supported.";
	public const string NotSupported_VoidArray = "Arrays of System.Void are not supported.";
	public const string NotSupported_ByRefLike = "Cannot create boxed ByRef-like values.";
	public const string NotSupported_Type = "Type is not supported.";
	public const string NotSupported_WaitAllSTAThread = "WaitAll for multiple handles on a STA thread is not supported.";
	public const string ObjectDisposed_ObjectName_Name = "Object name: '{0}'.";
	public const string Overflow_Byte = "Value was either too large or too small for an unsigned byte.";
	public const string Overflow_Char = "Value was either too large or too small for a character.";
	public const string Overflow_Double = "Value was either too large or too small for a Double.";
	public const string Overflow_TimeSpanElementTooLarge = "The TimeSpan could not be parsed because at least one of the numeric components is out of range or contains too many digits.";
	public const string Overflow_Duration = "The duration cannot be returned for TimeSpan.MinValue because the absolute value of TimeSpan.MinValue exceeds the value of TimeSpan.MaxValue.";
	public const string Overflow_Int16 = "Value was either too large or too small for an Int16.";
	public const string Overflow_NegateTwosCompNum = "Negating the minimum value of a twos complement number is invalid.";
	public const string Overflow_NegativeUnsigned = "The string was being parsed as an unsigned number and could not have a negative sign.";
	public const string Overflow_SByte = "Value was either too large or too small for a signed byte.";
	public const string Overflow_Single = "Value was either too large or too small for a Single.";
	public const string Overflow_TimeSpanTooLong = "TimeSpan overflowed because the duration is too long.";
	public const string Overflow_UInt16 = "Value was either too large or too small for a UInt16.";
	public const string Rank_MultiDimNotSupported = "Only single dimension arrays are supported here.";
	public const string RuntimeWrappedException = "An object that does not derive from System.Exception has been wrapped in a RuntimeWrappedException.";
	public const string SpinWait_SpinUntil_ArgumentNull = "The condition argument is null.";
	public const string Serialization_CorruptField = "The value of the field '{0}' is invalid.  The serialized data is corrupt.";
	public const string Serialization_InvalidData = "An error occurred while deserializing the object.  The serialized data is corrupt.";
	public const string Serialization_InvalidEscapeSequence = "The serialized data contained an invalid escape sequence '\\\\{0}'.";
	public const string Serialization_InvalidType = "Only system-provided types can be passed to the GetUninitializedObject method. '{0}' is not a valid instance of a type.";
	public const string SpinWait_SpinUntil_TimeoutWrong = "The timeout must represent a value between -1 and Int32.MaxValue, inclusive.";
	public const string Threading_AbandonedMutexException = "The wait completed due to an abandoned mutex.";
	public const string Threading_SemaphoreFullException = "Adding the specified count to the semaphore would cause it to exceed its maximum count.";
	public const string Threading_ThreadInterrupted = "Thread was interrupted from a waiting state.";
	public const string Threading_WaitHandleCannotBeOpenedException = "No handle of the given name exists.";
	public const string Threading_WaitHandleCannotBeOpenedException_InvalidHandle = "A WaitHandle with system-wide name '{0}' cannot be created. A WaitHandle of a different type might have the same name.";
	public const string TimeZoneNotFound_MissingData = "The time zone ID '{0}' was not found on the local computer.";
	public const string TypeInitialization_Default = "Type constructor threw an exception.";
	public const string TypeInitialization_Type = "The type initializer for '{0}' threw an exception.";
	public const string TypeInitialization_Type_NoTypeAvailable = "A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property.";
	public const string Verification_Exception = "Operation could destabilize the runtime.";
	public const string Arg_EnumFormatUnderlyingTypeAndObjectMustBeSameType = "Enum underlying type and the object must be same type or object. Type passed in was '{0}'; the enum underlying type was '{1}'.";
	public const string Format_InvalidEnumFormatSpecification = "Format String can be only 'G', 'g', 'X', 'x', 'F', 'f', 'D' or 'd'.";
	public const string Arg_MustBeEnumBaseTypeOrEnum = "The value passed in must be an enum base or an underlying type for an enum, such as an Int32.";
	public const string Arg_EnumUnderlyingTypeAndObjectMustBeSameType = "Enum underlying type and the object must be same type or object must be a String. Type passed in was '{0}'; the enum underlying type was '{1}'.";
	public const string Arg_MustBeType = "Type must be a type provided by the runtime.";
	public const string Arg_MustContainEnumInfo = "Must specify valid information for parsing in the string.";
	public const string Arg_EnumValueNotFound = "Requested value '{0}' was not found.";
	public const string Argument_StringZeroLength = "String cannot be of zero length.";
	public const string Argument_StringFirstCharIsZero = "The first char in the string is the null character.";
	public const string Argument_LongEnvVarValue = "Environment variable name or value is too long.";
	public const string Argument_IllegalEnvVarName = "Environment variable name cannot contain equal character.";
	public const string AssumptionFailed = "Assumption failed.";
	public const string AssumptionFailed_Cnd = "Assumption failed: {0}";
	public const string AssertionFailed = "Assertion failed.";
	public const string AssertionFailed_Cnd = "Assertion failed: {0}";
	public const string PreconditionFailed = "Precondition failed.";
	public const string PreconditionFailed_Cnd = "Precondition failed: {0}";
	public const string PostconditionFailed = "Postcondition failed.";
	public const string PostconditionFailed_Cnd = "Postcondition failed: {0}";
	public const string PostconditionOnExceptionFailed = "Postcondition failed after throwing an exception.";
	public const string PostconditionOnExceptionFailed_Cnd = "Postcondition failed after throwing an exception: {0}";
	public const string InvariantFailed = "Invariant failed.";
	public const string InvariantFailed_Cnd = "Invariant failed: {0}";
	public const string MissingEncodingNameResource = "Could not find a resource entry for the encoding codepage '{0} - {1}'";
	public const string Globalization_cp_1200 = "Unicode";
	public const string Globalization_cp_1201 = "Unicode (Big-Endian)";
	public const string Globalization_cp_12000 = "Unicode (UTF-32)";
	public const string Globalization_cp_12001 = "Unicode (UTF-32 Big-Endian)";
	public const string Globalization_cp_20127 = "US-ASCII";
	public const string Globalization_cp_28591 = "Western European (ISO)";
	public const string Globalization_cp_65000 = "Unicode (UTF-7)";
	public const string Globalization_cp_65001 = "Unicode (UTF-8)";
	public const string DebugAssertBanner = "---- DEBUG ASSERTION FAILED ----";
	public const string DebugAssertLongMessage = "---- Assert Long Message ----";
	public const string DebugAssertShortMessage = "---- Assert Short Message ----";
	public const string InvalidCast_Empty = "Object cannot be cast to Empty.";
	public const string Arg_UnknownTypeCode = "Unknown TypeCode value.";
	public const string Format_BadDatePattern = "Could not determine the order of year, month, and date from '{0}'.";
	public const string Format_BadDateTime = "String '{0}' was not recognized as a valid DateTime.";
	public const string Format_BadDateTimeCalendar = "The DateTime represented by the string '{0}' is not supported in calendar '{1}'.";
	public const string Format_BadDayOfWeek = "String '{0}' was not recognized as a valid DateTime because the day of week was incorrect.";
	public const string Format_DateOutOfRange = "The DateTime represented by the string '{0}' is out of range.";
	public const string Format_MissingIncompleteDate = "There must be at least a partial date with a year present in the input string '{0}'.";
	public const string Format_OffsetOutOfRange = "The time zone offset of string '{0}' must be within plus or minus 14 hours.";
	public const string Format_RepeatDateTimePattern = "DateTime pattern '{0}' appears more than once with different values.";
	public const string Format_UnknownDateTimeWord = "The string '{0}' was not recognized as a valid DateTime. There is an unknown word starting at index '{1}'.";
	public const string Format_UTCOutOfRange = "The UTC representation of the date '{0}' falls outside the year range 1-9999.";
	public const string RFLCT_Ambiguous = "Ambiguous match found.";
	public const string AggregateException_ctor_DefaultMessage = "One or more errors occurred.";
	public const string AggregateException_ctor_InnerExceptionNull = "An element of innerExceptions was null.";
	public const string AggregateException_DeserializationFailure = "The serialization stream contains no inner exceptions.";
	public const string AggregateException_InnerException = "(Inner Exception #{0}) "; // {entry.Item3}
	public const string ArgumentOutOfRange_TimeoutTooLarge = "Time-out interval must be less than 2^32-2.";
	public const string ArgumentOutOfRange_PeriodTooLarge = "Period must be less than 2^32-2.";
	public const string TaskScheduler_FromCurrentSynchronizationContext_NoCurrent = "The current SynchronizationContext may not be used as a TaskScheduler.";
	public const string TaskScheduler_ExecuteTask_WrongTaskScheduler = "ExecuteTask may not be called for a task which was previously queued to a different TaskScheduler.";
	public const string TaskScheduler_InconsistentStateAfterTryExecuteTaskInline = "The TryExecuteTaskInline call to the underlying scheduler succeeded, but the task body was not invoked.";
	public const string TaskSchedulerException_ctor_DefaultMessage = "An exception was thrown by a TaskScheduler.";
	public const string Task_MultiTaskContinuation_FireOptions = "It is invalid to exclude specific continuation kinds for continuations off of multiple tasks.";
	public const string Task_ContinueWith_ESandLR = "The specified TaskContinuationOptions combined LongRunning and ExecuteSynchronously.  Synchronous continuations should not be long running.";
	public const string Task_MultiTaskContinuation_EmptyTaskList = "The tasks argument contains no tasks.";
	public const string Task_MultiTaskContinuation_NullTask = "The tasks argument included a null value.";
	public const string Task_FromAsync_PreferFairness = "It is invalid to specify TaskCreationOptions.PreferFairness in calls to FromAsync.";
	public const string Task_FromAsync_LongRunning = "It is invalid to specify TaskCreationOptions.LongRunning in calls to FromAsync.";
	public const string AsyncMethodBuilder_InstanceNotInitialized = "The builder was not properly initialized.";
	public const string TaskT_TransitionToFinal_AlreadyCompleted = "An attempt was made to transition a task to a final state when it had already completed.";
	public const string TaskT_DebuggerNoResult = "{Not yet computed}";
	public const string OperationCanceled = "The operation was canceled.";
	public const string CancellationToken_CreateLinkedToken_TokensIsEmpty = "No tokens were supplied.";
	public const string CancellationTokenSource_Disposed = "The CancellationTokenSource has been disposed.";
	public const string CancellationToken_SourceDisposed = "The CancellationTokenSource associated with this CancellationToken has been disposed.";
	public const string TaskExceptionHolder_UnknownExceptionType = "(Internal)Expected an Exception or an IEnumerable<Exception>";
	public const string TaskExceptionHolder_UnhandledException = "A Task's exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread.";
	public const string Task_Delay_InvalidMillisecondsDelay = "The value needs to be either -1 (signifying an infinite timeout), 0 or a positive integer.";
	public const string Task_Delay_InvalidDelay = "The value needs to translate in milliseconds to -1 (signifying an infinite timeout), 0 or a positive integer less than or equal to Int32.MaxValue.";
	public const string Task_Dispose_NotCompleted = "A task may only be disposed if it is in a completion state (RanToCompletion, Faulted or Canceled).";
	public const string Task_WaitMulti_NullTask = "The tasks array included at least one null element.";
	public const string Task_ContinueWith_NotOnAnything = "The specified TaskContinuationOptions excluded all continuation kinds.";
	public const string Task_RunSynchronously_AlreadyStarted = "RunSynchronously may not be called on a task that was already started.";
	public const string Task_ThrowIfDisposed = "The task has been disposed.";
	public const string Task_RunSynchronously_TaskCompleted = "RunSynchronously may not be called on a task that has already completed.";
	public const string Task_RunSynchronously_Promise = "RunSynchronously may not be called on a task not bound to a delegate, such as the task returned from an asynchronous method.";
	public const string Task_RunSynchronously_Continuation = "RunSynchronously may not be called on a continuation task.";
	public const string Task_Start_AlreadyStarted = "Start may not be called on a task that was already started.";
	public const string Task_Start_ContinuationTask = "Start may not be called on a continuation task.";
	public const string Task_Start_Promise = "Start may not be called on a promise-style task.";
	public const string Task_Start_TaskCompleted = "Start may not be called on a task that has completed.";
	public const string TaskCanceledException_ctor_DefaultMessage = "A task was canceled.";
	public const string TaskCompletionSourceT_TrySetException_NoExceptions = "The exceptions collection was empty.";
	public const string TaskCompletionSourceT_TrySetException_NullException = "The exceptions collection included at least one null element.";
	public const string Argument_MinMaxValue = "'{0}' cannot be greater than {1}.";
	public const string ExecutionContext_ExceptionInAsyncLocalNotification = "An exception was not handled in an AsyncLocal<T> notification callback.";
	public const string InvalidOperation_WrongAsyncResultOrEndCalledMultiple = "Either the IAsyncResult object did not come from the corresponding async method on this type, or the End method was called multiple times with the same IAsyncResult.";
	public const string SpinLock_IsHeldByCurrentThread = "Thread tracking is disabled.";
	public const string SpinLock_TryEnter_LockRecursionException = "The calling thread already holds the lock.";
	public const string SpinLock_Exit_SynchronizationLockException = "The calling thread does not hold the lock.";
	public const string SpinLock_TryReliableEnter_ArgumentException = "The tookLock argument must be set to false before calling this method.";
	public const string SpinLock_TryEnter_ArgumentOutOfRange = "The timeout must be a value between -1 and Int32.MaxValue, inclusive.";
	public const string ManualResetEventSlim_Disposed = "The event has been disposed.";
	public const string ManualResetEventSlim_ctor_SpinCountOutOfRange = "The spinCount argument must be in the range 0 to {0}, inclusive.";
	public const string ManualResetEventSlim_ctor_TooManyWaiters = "There are too many threads currently waiting on the event. A maximum of {0} waiting threads are supported.";
	public const string InvalidOperation_SendNotSupportedOnWindowsRTSynchronizationContext = "Send is not supported in the Windows Runtime SynchronizationContext";
	public const string SemaphoreSlim_Disposed = "The semaphore has been disposed.";
	public const string SemaphoreSlim_Release_CountWrong = "The releaseCount argument must be greater than zero.";
	public const string SemaphoreSlim_Wait_TimeoutWrong = "The timeout must represent a value between -1 and Int32.MaxValue, inclusive.";
	public const string SemaphoreSlim_ctor_MaxCountWrong = "The maximumCount argument must be a positive number. If a maximum is not required, use the constructor without a maxCount parameter.";
	public const string SemaphoreSlim_ctor_InitialCountWrong = "The initialCount argument must be non-negative and less than or equal to the maximumCount.";
	public const string ThreadLocal_ValuesNotAvailable = "The ThreadLocal object is not tracking values. To use the Values property, use a ThreadLocal constructor that accepts the trackAllValues parameter and set the parameter to true.";
	public const string ThreadLocal_Value_RecursiveCallsToValue = "ValueFactory attempted to access the Value property of this instance.";
	public const string ThreadLocal_Disposed = "The ThreadLocal object has been disposed.";
	public const string LockRecursionException_WriteAfterReadNotAllowed = "Write lock may not be acquired with read lock held. This pattern is prone to deadlocks. Please ensure that read locks are released before taking a write lock. If an upgrade is necessary, use an upgrade lock in place of the read lock.";
	public const string LockRecursionException_RecursiveWriteNotAllowed = "Recursive write lock acquisitions not allowed in this mode.";
	public const string LockRecursionException_ReadAfterWriteNotAllowed = "A read lock may not be acquired with the write lock held in this mode.";
	public const string LockRecursionException_RecursiveUpgradeNotAllowed = "Recursive upgradeable lock acquisitions not allowed in this mode.";
	public const string LockRecursionException_RecursiveReadNotAllowed = "Recursive read lock acquisitions not allowed in this mode.";
	public const string SynchronizationLockException_IncorrectDispose = "The lock is being disposed while still being used. It either is being held by a thread and/or has active waiters waiting to acquire the lock.";
	public const string SynchronizationLockException_MisMatchedWrite = "The write lock is being released without being held.";
	public const string LockRecursionException_UpgradeAfterReadNotAllowed = "Upgradeable lock may not be acquired with read lock held.";
	public const string LockRecursionException_UpgradeAfterWriteNotAllowed = "Upgradeable lock may not be acquired with write lock held in this mode. Acquiring Upgradeable lock gives the ability to read along with an option to upgrade to a writer.";
	public const string SynchronizationLockException_MisMatchedUpgrade = "The upgradeable lock is being released without being held.";
	public const string SynchronizationLockException_MisMatchedRead = "The read lock is being released without being held.";
	public const string InvalidOperation_TimeoutsNotSupported = "Timeouts are not supported on this stream.";
	public const string NotSupported_SubclassOverride = "Derived classes must provide an implementation.";
	public const string InvalidOperation_NoPublicRemoveMethod = "Cannot remove the event handler since no public remove method exists for the event.";
	public const string InvalidOperation_NoPublicAddMethod = "Cannot add the event handler since no public add method exists for the event.";
	public const string SerializationException = "Serialization error.";
	public const string Serialization_NotFound = "Member '{0}' was not found.";
	public const string Serialization_OptionalFieldVersionValue = "Version value must be positive.";
	public const string Serialization_SameNameTwice = "Cannot add the same member twice to a SerializationInfo object.";
	public const string NotSupported_AbstractNonCLS = "This non-CLS method is not implemented.";
	public const string NotSupported_NoTypeInfo = "Cannot resolve {0} to a TypeInfo object.";
	public const string Arg_CustomAttributeFormatException = "Binary format of the specified custom attribute was invalid.";
	public const string Argument_InvalidMemberForNamedArgument = "The member must be either a field or a property.";
	public const string Arg_InvalidFilterCriteriaException = "Specified filter criteria was invalid.";
	public const string Arg_ParmArraySize = "Must specify one or more parameters.";
	public const string Arg_MustBePointer = "Type must be a Pointer.";
	public const string Argument_InvalidEnum = "The Enum type should contain one and only one instance field.";
	public const string Argument_MustHaveAttributeBaseClass = "Type passed in must be derived from System.Attribute or System.Attribute itself.";
	public const string InvalidFilterCriteriaException_CritString = "A String must be provided for the filter criteria.";
	public const string InvalidFilterCriteriaException_CritInt = "An Int32 must be provided for the filter criteria.";
	public const string InvalidOperation_NotSupportedOnWinRTEvent = "Adding or removing event handlers dynamically is not supported on WinRT events.";
	public const string PlatformNotSupported_ReflectionOnly = "ReflectionOnly loading is not supported on this platform.";
	public const string PlatformNotSupported_OSXFileLocking = "Locking/unlocking file regions is not supported on this platform. Use FileShare on the entire file instead.";
	public const string MissingMember_Name = "Member '{0}' not found.";
	public const string MissingMethod_Name = "Method '{0}' not found.";
	public const string MissingField_Name = "Field '{0}' not found.";
	public const string Format_StringZeroLength = "String cannot have zero length.";
	public const string Security_CannotReadFileData = "The time zone ID '{0}' was found on the local computer, but the application does not have permission to read the file.";
	public const string Security_CannotReadRegistryData = "The time zone ID '{0}' was found on the local computer, but the application does not have permission to read the registry information.";
	public const string Security_InvalidAssemblyPublicKey = "Invalid assembly public key.";
	public const string Security_RegistryPermission = "Requested registry access is not allowed.";
	public const string ClassLoad_General = "Could not load type '{0}' from assembly '{1}'.";
	public const string ClassLoad_RankTooLarge = "'{0}' from assembly '{1}' has too many dimensions.";
	public const string ClassLoad_ExplicitGeneric = "Could not load type '{0}' from assembly '{1}' because generic types cannot have explicit layout.";
	public const string ClassLoad_BadFormat = "Could not load type '{0}' from assembly '{1}' because the format is invalid.";
	public const string ClassLoad_ValueClassTooLarge = "Array of type '{0}' from assembly '{1}' cannot be created because base value type is too large.";
	public const string ClassLoad_ExplicitLayout = "Could not load type '{0}' from assembly '{1}' because it contains an object field at offset '{2}' that is incorrectly aligned or overlapped by a non-object field.";
	public const string EE_MissingMethod = "Method not found: '{0}'.";
	public const string EE_MissingField = "Field not found: '{0}'.";
	public const string UnauthorizedAccess_RegistryKeyGeneric_Key = "Access to the registry key '{0}' is denied.";
	public const string UnknownError_Num = "Unknown error '{0}'.";
	public const string Argument_NeedStructWithNoRefs = "The specified Type must be a struct containing no references.";
	public const string ArgumentOutOfRange_AddressSpace = "The number of bytes cannot exceed the virtual address space on a 32 bit machine.";
	public const string ArgumentOutOfRange_UIntPtrMax = "The length of the buffer must be less than the maximum UIntPtr value for your platform.";
	public const string Arg_BufferTooSmall = "Not enough space available in the buffer.";
	public const string InvalidOperation_MustCallInitialize = "You must call Initialize on this object instance before using it.";
	public const string Argument_InvalidSafeBufferOffLen = "Offset and length were greater than the size of the SafeBuffer.";
	public const string Argument_InvalidSeekOrigin = "Invalid seek origin.";
	public const string Argument_NotEnoughBytesToRead = "There are not enough bytes remaining in the accessor to read at this position.";
	public const string Argument_NotEnoughBytesToWrite = "There are not enough bytes remaining in the accessor to write at this position.";
	public const string Argument_OffsetAndCapacityOutOfBounds = "Offset and capacity were greater than the size of the view.";
	public const string ArgumentOutOfRange_UnmanagedMemStreamLength = "UnmanagedMemoryStream length must be non-negative and less than 2^63 - 1 - baseAddress.";
	public const string Argument_UnmanagedMemAccessorWrapAround = "The UnmanagedMemoryAccessor capacity and offset would wrap around the high end of the address space.";
	public const string ArgumentOutOfRange_StreamLength = "Stream length must be non-negative and less than 2^31 - 1 - origin.";
	public const string ArgumentOutOfRange_UnmanagedMemStreamWrapAround = "The UnmanagedMemoryStream capacity would wrap around the high end of the address space.";
	public const string InvalidOperation_CalledTwice = "The method cannot be called twice on the same instance.";
	public const string IO_FixedCapacity = "Unable to expand length of this stream beyond its capacity.";
	public const string IO_StreamTooLong = "Stream was too long.";
	public const string Arg_BadDecimal = "Read an invalid decimal value from the buffer.";
	public const string NotSupported_Reading = "Accessor does not support reading.";
	public const string NotSupported_UmsSafeBuffer = "This operation is not supported for an UnmanagedMemoryStream created from a SafeBuffer.";
	public const string NotSupported_Writing = "Accessor does not support writing.";
	public const string IndexOutOfRange_UMSPosition = "Unmanaged memory stream position was beyond the capacity of the stream.";
	public const string ObjectDisposed_ViewAccessorClosed = "Cannot access a closed accessor.";
	public const string ArgumentOutOfRange_PositionLessThanCapacityRequired = "The position may not be greater or equal to the capacity of the accessor.";
	public const string Arg_EndOfStreamException = "Attempted to read past the end of the stream.";
	public const string ObjectDisposed_FileClosed = "Cannot access a closed file.";
	public const string Arg_InvalidSearchPattern = "Search pattern '{0}' cannot contain \"..\" to move up directories and can be contained only internally in file/directory names, as in \"a..b\".";
	public const string Argument_InvalidHandle = "'handle' has been disposed or is an invalid handle.";
	public const string Argument_AlreadyBoundOrSyncHandle = "'handle' has already been bound to the thread pool, or was not opened for asynchronous I/O.";
	public const string Argument_PreAllocatedAlreadyAllocated = "'preAllocated' is already in use.";
	public const string Argument_NativeOverlappedAlreadyFree = "'overlapped' has already been freed.";
	public const string Argument_NativeOverlappedWrongBoundHandle = "'overlapped' was not allocated by this ThreadPoolBoundHandle instance.";
	public const string Arg_HandleNotAsync = "Handle does not support asynchronous operations. The parameters to the FileStream constructor may need to be changed to indicate that the handle was opened synchronously (that is, it was not opened for overlapped I/O).";
	public const string ArgumentNull_Path = "Path cannot be null.";
	public const string Argument_InvalidFileModeAndAccessCombo = "Combining FileMode: {0} with FileAccess: {1} is invalid.";
	public const string Argument_InvalidAppendMode = "Append access can be requested only in write-only mode.";
	public const string IO_UnknownFileName = "[Unknown]";
	public const string IO_FileStreamHandlePosition = "The OS handle's position is not what FileStream expected. Do not use a handle simultaneously in one FileStream and in Win32 code or another FileStream. This may cause data loss.";
	public const string IO_FileTooLong2GB = "The file is too long. This operation is currently limited to supporting files less than 2 gigabytes in size.";
	public const string NotSupported_FileStreamOnNonFiles = "FileStream was asked to open a device that was not a file. For support for devices like 'com1:' or 'lpt1:', call CreateFile, then use the FileStream constructors that take an OS handle as an IntPtr.";
	public const string IO_BindHandleFailed = "BindHandle for ThreadPool failed on this handle.";
	public const string Arg_HandleNotSync = "Handle does not support synchronous operations. The parameters to the FileStream constructor may need to be changed to indicate that the handle was opened asynchronously (that is, it was opened explicitly for overlapped I/O).";
	public const string IO_SetLengthAppendTruncate = "Unable to truncate data that previously existed in a file opened in Append mode.";
	public const string IO_SeekAppendOverwrite = "Unable seek backward to overwrite data that previously existed in a file opened in Append mode.";
	public const string IO_FileTooLongOrHandleNotSync = "IO operation will not work. Most likely the file will become too long or the handle was not opened to support synchronous IO operations.";
	public const string Arg_ResourceFileUnsupportedVersion = "The ResourceReader class does not know how to read this version of .resources files.";
	public const string Resources_StreamNotValid = "Stream is not a valid resource file.";
	public const string BadImageFormat_ResourcesHeaderCorrupted = "Corrupt .resources file. Unable to read resources from this file because of invalid header information. Try regenerating the .resources file.";
	public const string BadImageFormat_NegativeStringLength = "Corrupt .resources file. String length must be non-negative.";
	public const string BadImageFormat_ResourcesNameInvalidOffset = "Corrupt .resources file. The Invalid offset into name section is .";
	public const string BadImageFormat_TypeMismatch = "Corrupt .resources file.  The specified type doesn't match the available data in the stream.";
	public const string BadImageFormat_ResourceNameCorrupted_NameIndex = "Corrupt .resources file. The resource name for name index that extends past the end of the stream is ";
	public const string BadImageFormat_ResourcesDataInvalidOffset = "Corrupt .resources file. Invalid offset  into data section is ";
	public const string Format_Bad7BitInt32 = "Too many bytes in what should have been a 7 bit encoded Int32.";
	public const string BadImageFormat_InvalidType = "Corrupt .resources file.  The specified type doesn't exist.";
	public const string ResourceReaderIsClosed = "ResourceReader is closed.";
	public const string Arg_MissingManifestResourceException = "Unable to find manifest resource.";
	public const string UnauthorizedAccess_MemStreamBuffer = "MemoryStream's internal buffer cannot be accessed.";
	public const string NotSupported_MemStreamNotExpandable = "Memory stream is not expandable.";
	public const string ArgumentNull_Stream = "Stream cannot be null.";
	public const string IO_InvalidStringLen_Len = "BinaryReader encountered an invalid string length of {0} characters.";
	public const string ArgumentOutOfRange_BinaryReaderFillBuffer = "The number of bytes requested does not fit into BinaryReader's internal buffer.";
	public const string Serialization_InsufficientDeserializationState = "Insufficient state to deserialize the object. Missing field '{0}'.";
	public const string NotSupported_UnitySerHolder = "The UnitySerializationHolder object is designed to transmit information about other types and is not serializable itself.";
	public const string Serialization_UnableToFindModule = "The given module {0} cannot be found within the assembly {1}.";
	public const string Argument_InvalidUnity = "Invalid Unity type.";
	public const string InvalidOperation_InvalidHandle = "The handle is invalid.";
	public const string PlatformNotSupported_NamedSynchronizationPrimitives = "The named version of this synchronization primitive is not supported on this platform.";
	public const string Overflow_MutexReacquireCount = "The current thread attempted to reacquire a mutex that has reached its maximum acquire count.";
	public const string Serialization_InsufficientState = "Insufficient state to return the real object.";
	public const string Serialization_UnknownMember = "Cannot get the member '{0}'.";
	public const string Serialization_NullSignature = "The method signature cannot be null.";
	public const string Serialization_MemberTypeNotRecognized = "Unknown member type.";
	public const string Serialization_BadParameterInfo = "Non existent ParameterInfo. Position bigger than member's parameters length.";
	public const string Serialization_NoParameterInfo = "Serialized member does not have a ParameterInfo.";
	public const string ArgumentNull_Assembly = "Assembly cannot be null.";
	public const string Arg_InvalidNeutralResourcesLanguage_Asm_Culture = "The NeutralResourcesLanguageAttribute on the assembly \"{0}\" specifies an invalid culture name: \"{1}\".";
	public const string Arg_InvalidNeutralResourcesLanguage_FallbackLoc = "The NeutralResourcesLanguageAttribute specifies an invalid or unrecognized ultimate resource fallback location: \"{0}\".";
	public const string Arg_InvalidSatelliteContract_Asm_Ver = "Satellite contract version attribute on the assembly '{0}' specifies an invalid version: {1}.";
	public const string Arg_ResMgrNotResSet = "Type parameter must refer to a subclass of ResourceSet.";
	public const string BadImageFormat_ResourceNameCorrupted = "Corrupt .resources file. A resource name extends past the end of the stream.";
	public const string BadImageFormat_ResourcesNameTooLong = "Corrupt .resources file. Resource name extends past the end of the file.";
	public const string InvalidOperation_ResMgrBadResSet_Type = "'{0}': ResourceSet derived classes must provide a constructor that takes a String file name and a constructor that takes a Stream.";
	public const string InvalidOperation_ResourceNotStream_Name = "Resource '{0}' was not a Stream - call GetObject instead.";
	public const string MissingManifestResource_MultipleBlobs = "A case-insensitive lookup for resource file \"{0}\" in assembly \"{1}\" found multiple entries. Remove the duplicates or specify the exact case.";
	public const string MissingManifestResource_NoNeutralAsm = "Could not find any resources appropriate for the specified culture or the neutral culture.  Make sure \"{0}\" was correctly embedded or linked into assembly \"{1}\" at compile time, or that all the satellite assemblies required are loadable and fully signed.";
	public const string MissingManifestResource_NoNeutralDisk = "Could not find any resources appropriate for the specified culture (or the neutral culture) on disk.";
	public const string MissingManifestResource_NoPRIresources = "Unable to open Package Resource Index.";
	public const string MissingManifestResource_ResWFileNotLoaded = "Unable to load resources for resource file \"{0}\" in package \"{1}\".";
	public const string MissingSatelliteAssembly_Culture_Name = "The satellite assembly named \"{1}\" for fallback culture \"{0}\" either could not be found or could not be loaded. This is generally a setup problem. Please consider reinstalling or repairing the application.";
	public const string MissingSatelliteAssembly_Default = "Resource lookup fell back to the ultimate fallback resources in a satellite assembly, but that satellite either was not found or could not be loaded. Please consider reinstalling or repairing the application.";
	public const string NotSupported_ObsoleteResourcesFile = "Found an obsolete .resources file in assembly '{0}'. Rebuild that .resources file then rebuild that assembly.";
	public const string NotSupported_ResourceObjectSerialization = "Cannot read resources that depend on serialization.";
	public const string ObjectDisposed_ResourceSet = "Cannot access a closed resource set.";
	public const string Arg_ResourceNameNotExist = "The specified resource name \"{0}\" does not exist in the resource file.";
	public const string BadImageFormat_ResourceDataLengthInvalid = "Corrupt .resources file.  The specified data length '{0}' is not a valid position in the stream.";
	public const string BadImageFormat_ResourcesIndexTooLong = "Corrupt .resources file. String for name index '{0}' extends past the end of the file.";
	public const string InvalidOperation_ResourceNotString_Name = "Resource '{0}' was not a String - call GetObject instead.";
	public const string InvalidOperation_ResourceNotString_Type = "Resource was of type '{0}' instead of String - call GetObject instead.";
	public const string NotSupported_WrongResourceReader_Type = "This .resources file should not be read with this reader. The resource reader type is \"{0}\".";
	public const string Arg_MustBeDelegate = "Type must derive from Delegate.";
	public const string NotSupported_GlobalMethodSerialization = "Serialization of global methods (including implicit serialization via the use of asynchronous delegates) is not supported.";
	public const string NotSupported_DelegateSerHolderSerial = "DelegateSerializationHolder objects are designed to represent a delegate during serialization and are not serializable themselves.";
	public const string DelegateSer_InsufficientMetadata = "The delegate cannot be serialized properly due to missing metadata for the target method.";
	public const string Argument_NoUninitializedStrings = "Uninitialized Strings cannot be created.";
	public const string ArgumentOutOfRangeException_NoGCRegionSizeTooLarge = "totalSize is too large. For more information about setting the maximum size, see \\\"Latency Modes\\\" in http://go.microsoft.com/fwlink/?LinkId=522706.";
	public const string InvalidOperationException_AlreadyInNoGCRegion = "The NoGCRegion mode was already in progress.";
	public const string InvalidOperationException_NoGCRegionAllocationExceeded = "Allocated memory exceeds specified memory for NoGCRegion mode.";
	public const string InvalidOperationException_NoGCRegionInduced = "Garbage collection was induced in NoGCRegion mode.";
	public const string InvalidOperationException_NoGCRegionNotInProgress = "NoGCRegion mode must be set.";
	public const string InvalidOperationException_SetLatencyModeNoGC = "The NoGCRegion mode is in progress. End it and then set a different mode.";
	public const string InvalidOperation_NotWithConcurrentGC = "This API is not available when the concurrent GC is enabled.";
	public const string ThreadState_AlreadyStarted = "Thread is running or terminated; it cannot restart.";
	public const string ThreadState_Dead_Priority = "Thread is dead; priority cannot be accessed.";
	public const string ThreadState_Dead_State = "Thread is dead; state cannot be accessed.";
	public const string ThreadState_NotStarted = "Thread has not been started.";
	public const string ThreadState_SetPriorityFailed = "Unable to set thread priority.";
	public const string Serialization_InvalidFieldState = "Object fields may not be properly initialized.";
	public const string Acc_CreateAbst = "Cannot create an abstract class.";
	public const string Acc_CreateGeneric = "Cannot create a type for which Type.ContainsGenericParameters is true.";
	public const string NotSupported_ManagedActivation = "Cannot create uninitialized instances of types requiring managed activation.";
	public const string PlatformNotSupported_ResourceManager_ResWFileUnsupportedMethod = "ResourceManager method '{0}' is not supported when reading from .resw resource files.";
	public const string PlatformNotSupported_ResourceManager_ResWFileUnsupportedProperty = "ResourceManager property '{0}' is not supported when reading from .resw resource files.";
	public const string Serialization_NonSerType = "Type '{0}' in Assembly '{1}' is not marked as serializable.";
	public const string InvalidCast_DBNull = "Object cannot be cast to DBNull.";
	public const string NotSupported_NYI = "This feature is not currently implemented.";
	public const string Delegate_GarbageCollected = "The corresponding delegate has been garbage collected. Please make sure the delegate is still referenced by managed code when you are using the marshalled native function pointer.";
	public const string Arg_AmbiguousMatchException = "Ambiguous match found.";
	public const string NotSupported_ChangeType = "ChangeType operation is not supported.";
	public const string Arg_EmptyArray = "Array may not be empty.";
	public const string MissingMember = "Member not found.";
	public const string MissingField = "Field not found.";
	public const string InvalidCast_FromDBNull = "Object cannot be cast from DBNull to other types.";
	public const string NotSupported_DBNullSerial = "Only one DBNull instance may exist, and calls to DBNull deserialization methods are not allowed.";
	public const string Serialization_StringBuilderCapacity = "The serialized Capacity property of StringBuilder must be positive, less than or equal to MaxCapacity and greater than or equal to the String length.";
	public const string Serialization_StringBuilderMaxCapacity = "The serialized MaxCapacity property of StringBuilder must be positive and greater than or equal to the String length.";
	public const string PlatformNotSupported_Remoting = "Remoting is not supported on this platform.";
	public const string PlatformNotSupported_StrongNameSigning = "Strong-name signing is not supported on this platform.";
	public const string Serialization_MissingDateTimeData = "Invalid serialized DateTime data. Unable to find 'ticks' or 'dateData'.";
	public const string Serialization_DateTimeTicksOutOfRange = "Invalid serialized DateTime data. Ticks must be between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.";
	public const string Arg_InvalidANSIString = "The ANSI string passed in could not be converted from the default ANSI code page to Unicode.";
	public const string Arg_ExpectedNulTermination = "The value passed was not NUL terminated.";
	public const string PlatformNotSupported_ArgIterator = "ArgIterator is not supported on this platform.";
	public const string Arg_TypeUnloadedException = "Type had been unloaded.";
	public const string Overflow_Currency = "Value was either too large or too small for a Currency.";
	public const string PlatformNotSupported_SecureBinarySerialization = "Secure binary serialization is not supported on this platform.";
	public const string Serialization_InvalidPtrValue = "An IntPtr or UIntPtr with an eight byte value cannot be deserialized on a machine with a four byte word size.";
	public const string EventSource_AbstractMustNotDeclareEventMethods = "Abstract event source must not declare event methods ({0} with ID {1}).";
	public const string EventSource_AbstractMustNotDeclareKTOC = "Abstract event source must not declare {0} nested type.";
	public const string EventSource_AddScalarOutOfRange = "Getting out of bounds during scalar addition.";
	public const string EventSource_BadHexDigit = "Bad Hexidecimal digit \"{0}\".";
	public const string EventSource_ChannelTypeDoesNotMatchEventChannelValue = "Channel {0} does not match event channel value {1}.";
	public const string EventSource_DataDescriptorsOutOfRange = "Data descriptors are out of range.";
	public const string EventSource_DuplicateStringKey = "Multiple definitions for string \"{0}\".";
	public const string EventSource_EnumKindMismatch = "The type of {0} is not expected in {1}.";
	public const string EventSource_EvenHexDigits = "Must have an even number of Hexidecimal digits.";
	public const string EventSource_EventChannelOutOfRange = "Channel {0} has a value of {1} which is outside the legal range (16-254).";
	public const string EventSource_EventIdReused = "Event {0} has ID {1} which is already in use.";
	public const string EventSource_EventMustHaveTaskIfNonDefaultOpcode = "Event {0} (with ID {1}) has a non-default opcode but not a task.";
	public const string EventSource_EventMustNotBeExplicitImplementation = "Event method {0} (with ID {1}) is an explicit interface method implementation. Re-write method as implicit implementation.";
	public const string EventSource_EventNameDoesNotEqualTaskPlusOpcode = "Event {0} (with ID {1}) has a name that is not the concatenation of its task name and opcode.";
	public const string EventSource_EventNameReused = "Event name {0} used more than once.  If you wish to overload a method, the overloaded method should have a NonEvent attribute.";
	public const string EventSource_EventParametersMismatch = "Event {0} was called with {1} argument(s), but it is defined with {2} parameter(s).";
	public const string EventSource_EventSourceGuidInUse = "An instance of EventSource with Guid {0} already exists.";
	public const string EventSource_EventTooBig = "The payload for a single event is too large.";
	public const string EventSource_EventWithAdminChannelMustHaveMessage = "Event {0} specifies an Admin channel {1}. It must specify a Message property.";
	public const string EventSource_IllegalKeywordsValue = "Keyword {0} has a value of {1} which is outside the legal range (0-0x0000080000000000).";
	public const string EventSource_IllegalOpcodeValue = "Opcode {0} has a value of {1} which is outside the legal range (11-238).";
	public const string EventSource_IllegalTaskValue = "Task {0} has a value of {1} which is outside the legal range (1-65535).";
	public const string EventSource_IllegalValue = "Illegal value \"{0}\" (prefix strings with @ to indicate a literal string).";
	public const string EventSource_IncorrentlyAuthoredTypeInfo = "Incorrectly-authored TypeInfo - a type should be serialized as one field or as one group";
	public const string EventSource_InvalidCommand = "Invalid command value.";
	public const string EventSource_InvalidEventFormat = "Can't specify both etw event format flags.";
	public const string EventSource_KeywordCollision = "Keywords {0} and {1} are defined with the same value ({2}).";
	public const string EventSource_KeywordNeedPowerOfTwo = "Value {0} for keyword {1} needs to be a power of 2.";
	public const string EventSource_ListenerCreatedInsideCallback = "Creating an EventListener inside a EventListener callback.";
	public const string EventSource_ListenerNotFound = "Listener not found.";
	public const string EventSource_ListenerWriteFailure = "An error occurred when writing to a listener.";
	public const string EventSource_MaxChannelExceeded = "Attempt to define more than the maximum limit of 8 channels for a provider.";
	public const string EventSource_MismatchIdToWriteEvent = "Event {0} was assigned event ID {1} but {2} was passed to WriteEvent.";
	public const string EventSource_NeedGuid = "The Guid of an EventSource must be non zero.";
	public const string EventSource_NeedName = "The name of an EventSource must not be null.";
	public const string EventSource_NeedPositiveId = "Event IDs must be positive integers.";
	public const string EventSource_NoFreeBuffers = "No Free Buffers available from the operating system (e.g. event rate too fast).";
	public const string EventSource_NonCompliantTypeError = "The API supports only anonymous types or types decorated with the EventDataAttribute. Non-compliant type: {0} dataType.";
	public const string EventSource_NoRelatedActivityId = "EventSource expects the first parameter of the Event method to be of type Guid and to be named \"relatedActivityId\" when calling WriteEventWithRelatedActivityId.";
	public const string EventSource_NotSupportedArrayOfBinary = "Arrays of Binary are not supported.";
	public const string EventSource_NotSupportedArrayOfNil = "Arrays of Nil are not supported.";
	public const string EventSource_NotSupportedArrayOfNullTerminatedString = "Arrays of null-terminated string are not supported.";
	public const string EventSource_NotSupportedCustomSerializedData = "Enumerables of custom-serialized data are not supported";
	public const string EventSource_NotSupportedNestedArraysEnums = "Nested arrays/enumerables are not supported.";
	public const string EventSource_NullInput = "Null passed as a event argument.";
	public const string EventSource_OpcodeCollision = "Opcodes {0} and {1} are defined with the same value ({2}).";
	public const string EventSource_PinArrayOutOfRange = "Pins are out of range.";
	public const string EventSource_RecursiveTypeDefinition = "Recursive type definition is not supported.";
	public const string EventSource_SessionIdError = "Bit position in AllKeywords ({0}) must equal the command argument named \"EtwSessionKeyword\" ({1}).";
	public const string EventSource_StopsFollowStarts = "An event with stop suffix must follow a corresponding event with a start suffix.";
	public const string EventSource_TaskCollision = "Tasks {0} and {1} are defined with the same value ({2}).";
	public const string EventSource_TaskOpcodePairReused = "Event {0} (with ID {1}) has the same task/opcode pair as event {2} (with ID {3}).";
	public const string EventSource_TooManyArgs = "Too many arguments.";
	public const string EventSource_TooManyFields = "Too many fields in structure.";
	public const string EventSource_ToString = "EventSource({0}, {1})";
	public const string EventSource_TraitEven = "There must be an even number of trait strings (they are key-value pairs).";
	public const string EventSource_TypeMustBeSealedOrAbstract = "Event source types must be sealed or abstract.";
	public const string EventSource_TypeMustDeriveFromEventSource = "Event source types must derive from EventSource.";
	public const string EventSource_UndefinedChannel = "Use of undefined channel value {0} for event {1}.";
	public const string EventSource_UndefinedKeyword = "Use of undefined keyword value {0} for event {1}.";
	public const string EventSource_UndefinedOpcode = "Use of undefined opcode value {0} for event {1}.";
	public const string EventSource_UnknownEtwTrait = "Unknown ETW trait \"{0}\".";
	public const string EventSource_UnsupportedEventTypeInManifest = "Unsupported type {0} in event source.";
	public const string EventSource_UnsupportedMessageProperty = "Event {0} specifies an illegal or unsupported formatting message (\"{1}\").";
	public const string EventSource_VarArgsParameterMismatch = "The parameters to the Event method do not match the parameters to the WriteEvent method. This may cause the event to be displayed incorrectly.";
	public const string Arg_SurrogatesNotAllowedAsSingleChar = "Unicode surrogate characters must be written out as pairs together in the same call, not individually. Consider passing in a character array instead.";
	public const string CustomAttributeFormat_InvalidFieldFail = "'{0}' field specified was not found.";
	public const string CustomAttributeFormat_InvalidPropertyFail = "'{0}' property specified was not found.";
	public const string ArrayTypeMismatch_ConstrainedCopy = "Array.ConstrainedCopy will only work on array types that are provably compatible, without any form of boxing, unboxing, widening, or casting of each array element.  Change the array types (i.e., copy a Derived[] to a Base[]), or use a mitigation strategy in the CER for Array.Copy's less powerful reliability contract, such as cloning the array or throwing away the potentially corrupt destination array.";
	public const string Arg_DllNotFoundException = "Dll was not found.";
	public const string Arg_DllNotFoundExceptionParameterized = "Unable to load DLL '{0}': The specified module could not be found.";
	public const string Arg_DriveNotFoundException = "Attempted to access a drive that is not available.";
	public const string WrongSizeArrayInNStruct = "Type could not be marshaled because the length of an embedded array instance does not match the declared length in the layout.";
	public const string Arg_InteropMarshalUnmappableChar = "Cannot marshal: Encountered unmappable character.";
	public const string Arg_MarshalDirectiveException = "Marshaling directives are invalid.";
	public const string Arg_RegSubKeyValueAbsent = "No value exists with that name.";
	public const string Arg_RegValStrLenBug = "Registry value names should not be greater than 16,383 characters.";
	public const string Serialization_DelegatesNotSupported = "Serializing delegates is not supported on this platform.";
	public const string Arg_OpenType = "Cannot create an instance of {0} as it is an open type.";
	public const string Arg_PlatformNotSupported_AssemblyName_GetAssemblyName = "AssemblyName.GetAssemblyName() is not supported on this platform.";
	public const string NotSupported_OpenType = "Cannot create arrays of open type.";
	public const string NotSupported_ByRefLikeArray = "Cannot create arrays of ByRef-like values.";
	public const string StackTrace_AtWord = "   at ";
	public const string StackTrace_EndStackTraceFromPreviousThrow = "--- End of stack trace from previous location where exception was thrown ---";
	public const string InvalidAssemblyName = "The given assembly name or codebase was invalid";
	public const string Argument_HasToBeArrayClass = "Must be an array type.";
	public const string Argument_IdnBadBidi = "Left to right characters may not be mixed with right to left characters in IDN labels.";
	public const string Argument_IdnBadLabelSize = "IDN labels must be between 1 and 63 characters long.";
	public const string Argument_IdnBadNameSize = "IDN names must be between 1 and {0} characters long.";
	public const string Argument_IdnBadPunycode = "Invalid IDN encoded string.";
	public const string Argument_IdnBadStd3 = "Label contains character '{0}' not allowed with UseStd3AsciiRules";
	public const string Argument_IdnIllegalName = "Decoded string is not a valid IDN name.";
	public const string InvalidOperation_NotGenericType = "This operation is only valid on generic types.";
	public const string NotSupported_SignatureType = "This method is not supported on signature types.";
	public const string Memory_OutstandingReferences = "Release all references before disposing this instance.";
	public const string HashCode_HashCodeNotSupported = "HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.";
	public const string HashCode_EqualityNotSupported = "HashCode is a mutable struct and should not be compared with other HashCodes.";
	public const string IO_InvalidReadLength = "The read operation returned an invalid length.";
	public const string Arg_BasePathNotFullyQualified = "Basepath argument is not fully qualified.";
	public const string net_uri_BadAuthority = "Invalid URI: The Authority/Host could not be parsed.";
	public const string net_uri_BadAuthorityTerminator = "Invalid URI: The Authority/Host cannot end with a backslash character ('\\\\').";
	public const string net_uri_BadFormat = "Invalid URI: The format of the URI could not be determined.";
	public const string net_uri_NeedFreshParser = "The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.";
	public const string net_uri_AlreadyRegistered = "A URI scheme name '{0}' already has a registered custom parser.";
	public const string net_uri_BadHostName = "Invalid URI: The hostname could not be parsed.";
	public const string net_uri_BadPort = "Invalid URI: Invalid port specified.";
	public const string net_uri_BadScheme = "Invalid URI: The URI scheme is not valid.";
	public const string net_uri_BadString = "Invalid URI: There is an invalid sequence in the string.";
	public const string net_uri_BadUserPassword = "Invalid URI: The username:password construct is badly formed.";
	public const string net_uri_CannotCreateRelative = "A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.";
	public const string net_uri_SchemeLimit = "Invalid URI: The Uri scheme is too long.";
	public const string net_uri_EmptyUri = "Invalid URI: The URI is empty.";
	public const string net_uri_InvalidUriKind = "The value '{0}' passed for the UriKind parameter is invalid.";
	public const string net_uri_MustRootedPath = "Invalid URI: A Dos path must be rooted, for example, 'c:\\\\'.";
	public const string net_uri_NotAbsolute = "This operation is not supported for a relative URI.";
	public const string net_uri_PortOutOfRange = "A derived type '{0}' has reported an invalid value for the Uri port '{1}'.";
	public const string net_uri_SizeLimit = "Invalid URI: The Uri string is too long.";
	public const string net_uri_UserDrivenParsing = "A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.";
	public const string net_uri_NotJustSerialization = "UriComponents.SerializationInfoString must not be combined with other UriComponents.";
	public const string net_uri_BadUnicodeHostForIdn = "An invalid Unicode character by IDN standards was specified in the host.";
	public const string Argument_ExtraNotValid = "Extra portion of URI not valid.";
	public const string Argument_InvalidUriSubcomponent = "The subcomponent, {0}, of this uri is not valid.";
}
