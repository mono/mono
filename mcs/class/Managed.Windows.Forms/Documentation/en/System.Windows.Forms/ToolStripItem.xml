<?xml version="1.0" encoding="utf-8"?>
<Type Name="ToolStripItem" FullName="System.Windows.Forms.ToolStripItem">
  <TypeSignature Language="C#" Value="public abstract class ToolStripItem : System.ComponentModel.Component, System.Windows.Forms.IDropTarget" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ToolStripItemDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>A <see cref="T:System.Windows.Forms.ToolStripItem" /> is an element such as a button, combo box, text box, or label that can be contained in a <see cref="T:System.Windows.Forms.ToolStrip" /> control or a <see cref="T:System.Windows.Forms.ToolStripDropDown" /> control, which is similar to a Windows shortcut menu. The <see cref="T:System.Windows.Forms.ToolStrip" /> class manages the painting and keyboard and mouse input, including drag-and-drop input, for these elements, and the <see cref="T:System.Windows.Forms.ToolStripItem" /> class manages events and layout within the elements themselves.</para>
      <para>
        <see cref="T:System.Windows.Forms.ToolStripItem" /> classes either inherit directly from <see cref="T:System.Windows.Forms.ToolStripItem" />, or they inherit indirectly from <see cref="T:System.Windows.Forms.ToolStripItem" /> through <see cref="T:System.Windows.Forms.ToolStripControlHost" /> or <see cref="T:System.Windows.Forms.ToolStripDropDownItem" />.</para>
      <para>
        <see cref="T:System.Windows.Forms.ToolStripItem" /> controls must be contained in a <see cref="T:System.Windows.Forms.ToolStrip" />, <see cref="T:System.Windows.Forms.MenuStrip" />, <see cref="T:System.Windows.Forms.StatusStrip" />, or <see cref="T:System.Windows.Forms.ContextMenuStrip" /> and cannot be added directly to a form. The various container classes are designed to contain an appropriate subset of <see cref="T:System.Windows.Forms.ToolStripItem" /> controls.</para>
      <para>Note   A given <see cref="T:System.Windows.Forms.ToolStripItem" /> cannot have more than one parent <see cref="T:System.Windows.Forms.ToolStrip" />. You must copy of the <see cref="T:System.Windows.Forms.ToolStripItem" /> and add it to other <see cref="T:System.Windows.Forms.ToolStrip" /> controls.</para>
      <para>The following table shows the elements that derive from the <see cref="T:System.Windows.Forms.ToolStripItem" /> class and which therefore can be hosted in a <see cref="T:System.Windows.Forms.ToolStrip" /> or <see cref="T:System.Windows.Forms.ToolStripDropDown" />.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Element</para>
            </term>
            <description>
              <para>Description </para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="T:System.Windows.Forms.ToolStripButton" />
            </para>
          </term>
          <description>
            <para>A toolbar button that supports images and text. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="T:System.Windows.Forms.ToolStripLabel" /> </para>
          </term>
          <description>
            <para>A text label typically used in a status bar or <see cref="T:System.Windows.Forms.ToolStrip" /> as a comment or title. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="T:System.Windows.Forms.ToolStripSeparator" /> </para>
          </term>
          <description>
            <para>A non-selectable space or space with a vertical bar that visually groups elements. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="T:System.Windows.Forms.ToolStripControlHost" /> </para>
          </term>
          <description>
            <para>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that hosts a <see cref="T:System.Windows.Forms.ToolStripComboBox" />, <see cref="T:System.Windows.Forms.ToolStripTextBox" />, <see cref="T:System.Windows.Forms.ToolStripProgressBar" />, other Windows Forms controls, or custom controls.</para>
            <para>A <see cref="T:System.Windows.Forms.ToolStripComboBox" /> is a text box in which the user can enter text, along with a list from which the user can select text to fill the text box.</para>
            <para>A <see cref="T:System.Windows.Forms.ToolStripTextBox" /> enables the user to enter text. </para>
            <para>A <see cref="T:System.Windows.Forms.ToolStripProgressBar" /> represents a Windows progress bar control contained in a <see cref="T:System.Windows.Forms.StatusStrip" />.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="T:System.Windows.Forms.ToolStripDropDownItem" /> </para>
          </term>
          <description>
            <para>A <see cref="T:System.Windows.Forms.ToolStripItem" /> that hosts a <see cref="T:System.Windows.Forms.ToolStripMenuItem" />, <see cref="T:System.Windows.Forms.ToolStripSplitButton" />, and <see cref="T:System.Windows.Forms.ToolStripDropDownButton" />.</para>
            <para>A <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> is a selectable option displayed on a menu or context menu.</para>
            <para>A <see cref="T:System.Windows.Forms.ToolStripSplitButton" /> is a combination of a regular button and a drop-down button.</para>
            <para>A <see cref="T:System.Windows.Forms.ToolStripDropDownButton" /> is a button that supports drop-down functionality. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="T:System.Windows.Forms.ToolStripStatusLabel" /> </para>
          </term>
          <description>
            <para>A panel in a <see cref="T:System.Windows.Forms.StatusStrip" /> control.</para>
          </description>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents the abstract base class that manages events and layout for all the elements that a <see cref="T:System.Windows.Forms.ToolStrip" /> or <see cref="T:System.Windows.Forms.ToolStripDropDown" /> can contain.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ToolStripItem ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripItem" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ToolStripItem (string text, System.Drawing.Image image, EventHandler onClick);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripItem" /> class with the specified name, image, and event handler.</para>
        </summary>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.String" /> representing the name of the <see cref="T:System.Windows.Forms.ToolStripItem" />.</param>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Drawing.Image" /> to display on the <see cref="T:System.Windows.Forms.ToolStripItem" />.</param>
        <param name="onClick">
          <attribution license="cc4" from="Microsoft" modified="false" />Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event when the user clicks the <see cref="T:System.Windows.Forms.ToolStripItem" />.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ToolStripItem (string text, System.Drawing.Image image, EventHandler onClick, string name);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolStripItem" /> class with the specified display text, image, event handler, and name. </para>
        </summary>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to display on the <see cref="T:System.Windows.Forms.ToolStripItem" />.</param>
        <param name="image">
          <attribution license="cc4" from="Microsoft" modified="false" />The Image to display on the <see cref="T:System.Windows.Forms.ToolStripItem" />.</param>
        <param name="onClick">
          <attribution license="cc4" from="Microsoft" modified="false" />The event handler for the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event.</param>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the <see cref="T:System.Windows.Forms.ToolStripItem" />.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To get or set the <see cref="P:System.Windows.Forms.ToolStripItem.AccessibilityObject" /> property, you must add a reference to the Accessibility assembly installed with the .NET Framework.</para>
          <para>For more information about accessible objects, see the "Active Accessibility" section in the MSDN Library at <see cref="http://msdn.microsoft.com/library">http://msdn.microsoft.com/library</see>.</para>
          <para>For samples, see the <see cref="T:System.Windows.Forms.AccessibleObject" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object's <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleDefaultActionDescription" /> property describes the object's primary method of manipulation from the user's viewpoint. This property should be a verb or a short verb phrase.</para>
          <block subset="none" type="note">
            <para>Not all objects have default actions, and some objects might have a default action that is related to its <see cref="P:System.Windows.Forms.AccessibleObject.Value" /> property, such as in the following examples: </para>
          </block>
          <list type="bullet">
            <item>
              <para>A selected check box has a default action of "Uncheck" and a value of "Checked." </para>
            </item>
            <item>
              <para>A cleared check box has a default action of "Check" and a value of "Unchecked." </para>
            </item>
            <item>
              <para>A button labeled <ui>Print</ui> has a default action of "Press," with no value.</para>
            </item>
            <item>
              <para>A label or a text box control that shows <ui>Printer</ui> has no default action, but would have a value of "Printer." </para>
            </item>
          </list>
          <para>For more information about properties of accessible objects, see "Content of Descriptive Properties" in the "Active Accessibility" section of the MSDN Library, at http://msdn.microsoft.com/library.</para>
          <para>For samples, see the <see cref="T:System.Windows.Forms.AccessibleObject" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the default action description of the control for use by accessibility client applications.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object's <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleDescription" /> property provides a textual description about an object's visual appearance. The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</para>
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleDescription" /> property is needed if the description is not obvious, or if it is not redundant based on the object's <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleName" />, <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleRole" />, <see cref="P:System.Windows.Forms.AccessibleObject.State" />, and <see cref="P:System.Windows.Forms.AccessibleObject.Value" /> properties. For example, a button labeled <ui>OK</ui> would not need additional information, but a button that shows a picture of a cactus would. The <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleName" /> and <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleRole" /> and, perhaps, <see cref="P:System.Windows.Forms.AccessibleObject.Help" /> properties for the cactus button would describe its purpose, but the <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleDescription" /> property would convey information that is less tangible, such as "A button that shows a picture of a cactus." </para>
          <para>For more information about properties of accessible objects, see "Content of Descriptive Properties" in the "Active Accessibility" section of the MSDN Library, at http://msdn.microsoft.com/library.</para>
          <para>For samples, see the <see cref="T:System.Windows.Forms.AccessibleObject" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the description that will be reported to accessibility client applications.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleName" /> property is a label that briefly describes and identifies the object within its container, such as the text in a <see cref="T:System.Windows.Forms.ToolStripButton" />, the name of a <see cref="T:System.Windows.Forms.ToolStripMenuItem" />, or a label displayed next to a <see cref="T:System.Windows.Forms.ToolStripTextBox" /> control.</para>
          <para>For more information about properties of accessible objects, see "Content of Descriptive Properties" in the "Active Accessibility" section of the MSDN Library, at http://msdn.microsoft.com/library.</para>
          <para>For samples, see the <see cref="T:System.Windows.Forms.AccessibleObject" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the name of the control for use by accessibility client applications.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.AccessibleRole.Default)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleRole" /> property describes what kind of user interface element an object is. If the control's role cannot be determined, the <see cref="P:System.Windows.Forms.ToolStripItem.AccessibleRole" /> property is set to <see cref="F:System.Windows.Forms.AccessibleRole.PushButton" />.</para>
          <para>For more information about properties of accessible objects, see "Content of Descriptive Properties" in the "Active Accessibility" section of the MSDN Library, at http://msdn.microsoft.com/library.</para>
          <para>For samples, see the <see cref="T:System.Windows.Forms.AccessibleObject" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the accessible role of the control, which specifies the type of user interface element of the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItemAlignment Alignment { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ToolStripItemAlignment.Left)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItemAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In a stack overflow layout, use the <see cref="P:System.Windows.Forms.ToolStripItem.Alignment" /> property along with the <see cref="P:System.Windows.Forms.ToolStripItem.RightToLeft" /> property to control the end to which items are aligned in a <see cref="T:System.Windows.Forms.ToolStrip" />, or to determine the end to which they are already aligned.</para>
          <para>If the <see cref="P:System.Windows.Forms.ToolStripItem.RightToLeft" /> property is <see cref="F:System.Windows.Forms.RightToLeft.No" />, items marked as <see cref="F:System.Windows.Forms.ToolStripItemAlignment.Left" /> are aligned to the left side of the <see cref="T:System.Windows.Forms.ToolStrip" /> and items marked <see cref="F:System.Windows.Forms.ToolStripItemAlignment.Right" /> are aligned to the right.</para>
          <para>If the <see cref="P:System.Windows.Forms.ToolStripItem.RightToLeft" /> property is <see cref="F:System.Windows.Forms.RightToLeft.Yes" />, items marked as <see cref="F:System.Windows.Forms.ToolStripItemAlignment.Left" /> are aligned to the right side of the <see cref="T:System.Windows.Forms.ToolStrip" /> and items marked <see cref="F:System.Windows.Forms.ToolStripItemAlignment.Right" /> are aligned to the left.</para>
          <block subset="none" type="note">
            <para>In flow and table layouts, the <see cref="P:System.Windows.Forms.ToolStripItem.Alignment" /> property is ignored. In flow or table layout, use the <see cref="P:System.Windows.Forms.ToolStripItem.Dock" /> or <see cref="P:System.Windows.Forms.ToolStripItem.Anchor" /> property to align the items within the row or table cell.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the item aligns towards the beginning or end of the <see cref="T:System.Windows.Forms.ToolStrip" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Set the <see cref="P:System.Windows.Forms.ToolStripItem.AllowDrop" /> property to true and set the <see cref="P:System.Windows.Forms.ToolStrip.AllowItemReorder" /> property to false to respond to drag-and-drop behavior you have defined in the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" />, <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" />, and <see cref="E:System.Windows.Forms.ToolStripItem.DragDrop" /> events.</para>
          <para>Set the <see cref="P:System.Windows.Forms.ToolStripItem.AllowDrop" /> property to false and set the <see cref="P:System.Windows.Forms.ToolStrip.AllowItemReorder" /> property to true to cause the <see cref="T:System.Windows.Forms.ToolStripItem" /> class to handle drag-and-drop and item reordering privately.</para>
          <para>Setting both the <see cref="P:System.Windows.Forms.ToolStripItem.AllowDrop" /> and the <see cref="P:System.Windows.Forms.ToolStrip.AllowItemReorder" /> properties to true throws an exception.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether drag-and-drop and item reordering are handled through events that you implement.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AnchorStyles Anchor { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.Anchor" /> property to define how a <see cref="T:System.Windows.Forms.ToolStripItem" /> is automatically resized as its parent control is resized. Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Anchor" /> and <see cref="P:System.Windows.Forms.ToolStripItem.Dock" /> properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the edges of the container to which a <see cref="T:System.Windows.Forms.ToolStripItem" /> is bound and determines how a <see cref="T:System.Windows.Forms.ToolStripItem" />  is resized with its parent.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public bool AutoSize { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Set the <see cref="P:System.Windows.Forms.ToolStripItem.AutoSize" /> property to true to cause the <see cref="T:System.Windows.Forms.ToolStripItem" /> to adjust either its height or width, depending on the orientation of the <see cref="T:System.Windows.Forms.ToolStrip" />, to ensure that the <see cref="T:System.Windows.Forms.ToolStripItem" /> uses only the required amount of space.</para>
          <para>A <see cref="T:System.Windows.Forms.ToolStripItem" /> has a minimum size if the <see cref="P:System.Windows.Forms.ToolStripItem.AutoSize" /> property is true. Set the <see cref="P:System.Windows.Forms.ToolStripItem.AutoSize" /> property to false if you want a <see cref="T:System.Windows.Forms.ToolStripItem" /> to be smaller than the system-defined minimum size or to have a <see cref="T:System.Windows.Forms.ToolStripItem" /> size of zero.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the item is automatically sized.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AutoToolTip">
      <MemberSignature Language="C#" Value="public bool AutoToolTip { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="T:System.Windows.Forms.ToolStripItem" /> uses the <see cref="P:System.Windows.Forms.ToolStripItem.Text" /> property as the default source for the <see cref="T:System.Windows.Forms.ToolTip" /> content. Set <see cref="P:System.Windows.Forms.ToolStripItem.AutoToolTip" /> to false to use <see cref="P:System.Windows.Forms.ToolStripItem.ToolTipText" /> as the source for <see cref="T:System.Windows.Forms.ToolTip" /> content.</para>
          <para>To use this property, you must also set <see cref="P:System.Windows.Forms.ToolStrip.ShowItemToolTips" /> to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to use the <see cref="P:System.Windows.Forms.ToolStripItem.Text" /> property or the <see cref="P:System.Windows.Forms.ToolStripItem.ToolTipText" /> property for the <see cref="T:System.Windows.Forms.ToolStripItem" /> ToolTip. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public bool Available { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Available" /> property is different from the <see cref="P:System.Windows.Forms.ToolStripItem.Visible" /> property in that <see cref="P:System.Windows.Forms.ToolStripItem.Available" /> indicates whether the <see cref="T:System.Windows.Forms.ToolStripItem" /> is shown, while <see cref="P:System.Windows.Forms.ToolStripItem.Visible" /> indicates whether the <see cref="T:System.Windows.Forms.ToolStripItem" /> and its parent are shown. Setting either <see cref="P:System.Windows.Forms.ToolStripItem.Available" /> or <see cref="P:System.Windows.Forms.ToolStripItem.Visible" /> to true or false sets the other property to true or false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripItem" /> should be placed on a <see cref="T:System.Windows.Forms.ToolStrip" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AvailableChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AvailableChanged;" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripItem.Available" /> property changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.BackColor" /> property does not support transparent colors unless the SupportsTransparentBackColor value of <see cref="T:System.Windows.Forms.ControlStyles" /> is set to true.</para>
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.BackColor" /> property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <see cref="T:System.Windows.Forms.Button" /> has the same <see cref="P:System.Windows.Forms.ToolStripItem.BackColor" /> as its parent <see cref="T:System.Windows.Forms.Form" /> by default. For more information about ambient properties, see the <see cref="T:System.Windows.Forms.AmbientProperties" /> class or the <see cref="T:System.Windows.Forms.Control" /> class overview.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the background color for the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is raised if the <see cref="P:System.Windows.Forms.ToolStripItem.BackColor" /> property is changed by either a programmatic modification or user interaction.</para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.BackColorChanged" /> event. Raise this event with specific property settings.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripItem.BackColor" /> property changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.BackgroundImage" /> property to place a graphic image onto an item. </para>
          <block subset="none" type="note">
            <para>Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</para>
            <para>This property is not supported on child controls whose <see cref="P:System.Windows.Forms.Form.RightToLeftLayout" /> property is true.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the background image displayed in the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ImageLayout.Tile)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the background image layout used for the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle Bounds { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.Bounds" /> property to determine the size and location of a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
          <para>Unlike other controls, a <see cref="T:System.Windows.Forms.ToolStripItem" /> has no property that enables you to set the upper-left corner of a <see cref="T:System.Windows.Forms.ToolStripItem" /> relative to the upper-left corner of the <see cref="T:System.Windows.Forms.ToolStrip" />. If you need to set the absolute position of a <see cref="T:System.Windows.Forms.ToolStripItem" />, you must override the <see cref="T:System.Windows.Forms.ToolStrip" /> and define a custom implementation of the <see cref="M:System.Windows.Forms.ToolStrip.SetItemLocation(System.Windows.Forms.ToolStripItem,System.Drawing.Point)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the size and location of the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public virtual bool CanSelect { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the item can be selected.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event passes an <see cref="T:System.EventArgs" /> to its event handler, so it only indicates that a click has occurred. If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> and <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> events which pass a <see cref="T:System.Windows.Forms.MouseEventArgs" /> to the event handler.</para>
          <para>A double-click is determined by the mouse settings of the user's operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event is raised every time a control is double-clicked. For example, if you have two event handlers for the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> and <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> events of a <see cref="T:System.Windows.Forms.Form" />, the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> and <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> events are raised when the form is double-clicked and both methods are called. If an item is double-clicked that does not support the <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> event, the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event might be raised twice.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="T:System.Windows.Forms.ToolStripItem" /> is clicked.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ContentRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ContentRectangle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.ContentRectangle" /> property to do custom painting of a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the area where content, such as text and icons, can be placed within a <see cref="T:System.Windows.Forms.ToolStripItem" /> without overwriting background borders.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new accessibility object for the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="DefaultAutoToolTip">
      <MemberSignature Language="C#" Value="protected virtual bool DefaultAutoToolTip { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether to display the <see cref="T:System.Windows.Forms.ToolTip" /> that is defined as the default.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DefaultDisplayStyle">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ToolStripItemDisplayStyle DefaultDisplayStyle { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItemDisplayStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating what is displayed on the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Override the <see cref="P:System.Windows.Forms.ToolStripItem.DefaultMargin" /> property to configure a default margin for a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default margin of an item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can override the <see cref="P:System.Windows.Forms.ToolStripItem.DefaultPadding" /> property to configure a default size for a <see cref="T:System.Windows.Forms.ToolStripItem" />. This is more efficient than setting the size in the constructor of the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the internal spacing characteristics of the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStrip.DefaultSize" /> property represents the <see cref="T:System.Drawing.Size" /> of the <see cref="T:System.Windows.Forms.ToolStripItem" /> when it is initially created. If the <see cref="P:System.Windows.Forms.ToolStripItem.AutoSize" /> property is true, the <see cref="T:System.Windows.Forms.ToolStripItem" /> is sized automatically in accordance with the <see cref="T:System.Windows.Forms.ToolStrip" /> orientation. You can manually adjust the size of the <see cref="T:System.Windows.Forms.ToolStripItem" /> by setting its <see cref="P:System.Windows.Forms.ToolStripItem.AutoSize" /> property value to false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default size of the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DismissWhenClicked">
      <MemberSignature Language="C#" Value="protected virtual bool DismissWhenClicked { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether items on a <see cref="T:System.Windows.Forms.ToolStripDropDown" /> are hidden after they are clicked.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DisplayStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolStripItemDisplayStyle DisplayStyle { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItemDisplayStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use <see cref="P:System.Windows.Forms.ToolStripItem.DisplayStyle" /> to set the values of an item's Text and Image properties while displaying only what you want. This is typically used to change only the display style when showing the same item in a different context.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets whether text and images are displayed on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DisplayStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DisplayStyleChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.DisplayStyleChanged" /> event. Raise this event with specific property settings.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ToolStripItem.DisplayStyle" /> has changed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called by the public Dispose method and the <see cref="M:System.Object.Finalize" /> method. Dispose invokes the protected Dispose(Boolean) method with the <paramref name="disposing" /> parameter set to true. <see cref="M:System.Object.Finalize" /> invokes Dispose with <paramref name="disposing" /> set to false.</para>
          <para>When the <paramref name="disposing" /> parameter is true, this method releases all resources held by any managed objects that this <see cref="T:System.Windows.Forms.ToolStripItem" /> references. This method invokes the Dispose method of each referenced object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ToolStripItem" /> and optionally releases the managed resources.</para>
        </summary>
        <param name="disposing">
          <attribution license="cc4" from="Microsoft" modified="false" />true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DockStyle Dock { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.DockStyle.None)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property applies only to flow layouts.</para>
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.Dock" /> property to define how a <see cref="T:System.Windows.Forms.ToolStripItem" /> is automatically resized as its parent control is resized. For example, setting <see cref="P:System.Windows.Forms.ToolStripItem.Dock" /> to <see cref="F:System.Windows.Forms.DockStyle.Left" /> causes the <see cref="T:System.Windows.Forms.ToolStripItem" /> to align itself with the left edges of its parent control and to resize as the parent control is resized. Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</para>
          <para>A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Anchor" /> and <see cref="P:System.Windows.Forms.ToolStripItem.Dock" /> properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets which <see cref="T:System.Windows.Forms.ToolStripItem" /> borders are docked to its parent control and determines how a <see cref="T:System.Windows.Forms.ToolStripItem" /> is resized with its parent.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the drag operation needs to interact with applications in another process, the <paramref name="data" /> parameter must either be a base managed class (such as <see cref="T:System.String" />, <see cref="T:System.Drawing.Bitmap" />, or <see cref="T:System.Drawing.Imaging.Metafile" />), an object that implements <see cref="T:System.Runtime.Serialization.ISerializable" />, or an object that implements <see cref="T:System.Windows.Forms.IDataObject" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Begins a drag-and-drop operation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>One of the <see cref="T:System.Windows.Forms.DragDropEffects" /> values.</para>
        </returns>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to be dragged. </param>
        <param name="allowedEffects">
          <attribution license="cc4" from="Microsoft" modified="false" />The drag operations that can occur. </param>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A double-click is determined by the mouse settings of the user's operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event is raised every time a control is double-clicked. For example, if you have two event handlers for the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> and <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> events of a <see cref="T:System.Windows.Forms.Form" />, the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> and <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> events are raised when the form is double-clicked and both methods are called. If an item is double-clicked that does not support the <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> event, the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event might be raised twice.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the item is double-clicked with the mouse.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DoubleClickEnabled">
      <MemberSignature Language="C#" Value="public bool DoubleClickEnabled { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripItem" /> can be activated by double-clicking the mouse. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.DragEventArgs.X" /> and <see cref="P:System.Windows.Forms.DragEventArgs.Y" /> properties of the <see cref="T:System.Windows.Forms.DragEventArgs" /> are in screen coordinates, not client coordinates. For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user drags an item and the user releases the mouse button, indicating that the item should be dropped into this item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> event is raised when the user first drags the mouse cursor over the item during a drag-and-drop operation.</para>
          <para>The following remarks describe how and when events related to drag-and-drop operations are raised.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method determines the item under the current cursor location. It then checks to see if the item is a valid drop target.</para>
          <para>If the item is a valid drop target, the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration.</para>
          <para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked in the following manner:</para>
          <list type="bullet">
            <item>
              <para>If the user moves out of a window, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
            <item>
              <para>If the mouse enters another item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> for that control is raised.</para>
            </item>
            <item>
              <para>If the mouse moves but stays within the same item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised.</para>
            </item>
          </list>
          <para>If there is a change in the keyboard or mouse button state, the <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <see cref="P:System.Windows.Forms.QueryContinueDragEventArgs.Action" /> property of the event's <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />.</para>
          <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Continue" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised to continue the operation and the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration. </para>
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> and <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position, as follows:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Drop" />, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</para>
            </item>
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Cancel" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Windows.Forms.DragEventArgs.X" /> and <see cref="P:System.Windows.Forms.DragEventArgs.Y" /> properties of the <see cref="T:System.Windows.Forms.DragEventArgs" /> are in screen coordinates, not client coordinates.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user drags an item into the client area of this item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</para>
          <para>The following remarks describe how and when events related to drag-and-drop operations are raised.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method determines the item under the current cursor location. It then checks to see if the item is a valid drop target.</para>
          <para>If the item is a valid drop target, the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration.</para>
          <para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked in the following manner:</para>
          <list type="bullet">
            <item>
              <para>If the user moves out of a window, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
            <item>
              <para>If the mouse enters another item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> for that control is raised.</para>
            </item>
            <item>
              <para>If the mouse moves but stays within the same item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised.</para>
            </item>
          </list>
          <para>If there is a change in the keyboard or mouse button state, the <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <see cref="P:System.Windows.Forms.QueryContinueDragEventArgs.Action" /> property of the event's <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />.</para>
          <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Continue" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised to continue the operation and the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration. </para>
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> and <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position, as follows:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Drop" />, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</para>
            </item>
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Cancel" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user drags an item and the mouse pointer is no longer over the client area of this item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</para>
          <para>The following remarks describe how and when events related to drag-and-drop operations are raised.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method determines the item under the current cursor location. It then checks to see if the item is a valid drop target.</para>
          <para>If the item is a valid drop target, the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration.</para>
          <para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked in the following manner:</para>
          <list type="bullet">
            <item>
              <para>If the user moves out of a window, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
            <item>
              <para>If the mouse enters another item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> for that control is raised.</para>
            </item>
            <item>
              <para>If the mouse moves but stays within the same item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised.</para>
            </item>
          </list>
          <para>If there is a change in the keyboard or mouse button state, the <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <see cref="P:System.Windows.Forms.QueryContinueDragEventArgs.Action" /> property of the event's <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />.</para>
          <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Continue" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised to continue the operation and the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration. </para>
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> and <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position, as follows:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Drop" />, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</para>
            </item>
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Cancel" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user drags an item over the client area of this item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the parent control of the <see cref="T:System.Windows.Forms.ToolStripItem" /> is enabled. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is raised if the <see cref="P:System.Windows.Forms.ToolStripItem.Enabled" /> property is changed by either a programmatic modification or user interaction.</para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.EnabledChanged" /> event. Raise this event with specific property settings.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ToolStripItem.Enabled" /> property value has changed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.Font" /> property to get or set the font that will be used by default for painting and text in the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the font of the text displayed by the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the foreground color of the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is raised if the <see cref="P:System.Windows.Forms.ToolStripItem.ForeColor" /> property is changed by either a programmatic modification or through interaction.</para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.ForeColorChanged" /> event. Raise this event with specific property settings.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ToolStripItem.ForeColor" /> property value changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetCurrentParent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStrip GetCurrentParent ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStrip</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.ToolStripItem.GetCurrentParent" /> is a read-only accessor to the <see cref="P:System.Windows.Forms.ToolStripItem.Parent" /> property. A parent differs from an owner in that a parent denotes the returned current <see cref="T:System.Windows.Forms.ToolStrip" /> in which the item is displayed, which might be in the overflow area.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the <see cref="T:System.Windows.Forms.ToolStrip" /> that is the container of the current <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Windows.Forms.ToolStrip" /> that is the container of the current <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size constrainingSize);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constrainingSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the size of a rectangular area into which a control can be fit.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Size" /> ordered pair, representing the width and height of a rectangle.</para>
        </returns>
        <param name="constrainingSize">
          <attribution license="cc4" from="Microsoft" modified="false" />The custom-sized area for a control. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event is raised when a drag-and-drop operation is started. The <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</para>
          <para>The following remarks describe how and when events related to drag-and-drop operations are raised.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method determines the item under the current cursor location. It then checks to see if the item is a valid drop target.</para>
          <para>If the item is a valid drop target, the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration.</para>
          <para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked in the following manner:</para>
          <list type="bullet">
            <item>
              <para>If the user moves out of a window, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
            <item>
              <para>If the mouse enters another item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> for that control is raised.</para>
            </item>
            <item>
              <para>If the mouse moves but stays within the same item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised.</para>
            </item>
          </list>
          <para>If there is a change in the keyboard or mouse button state, the <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <see cref="P:System.Windows.Forms.QueryContinueDragEventArgs.Action" /> property of the event's <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />.</para>
          <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Continue" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised to continue the operation and the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration. </para>
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> and <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position, as follows:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Drop" />, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</para>
            </item>
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is <see cref="F:System.Windows.Forms.DragAction.Cancel" />, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs during a drag operation.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the height, in pixels, of a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image Image { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Image" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" />, and <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> properties pertain to various aspects of image handling. Use images in <see cref="T:System.Windows.Forms.ToolStrip" /> controls by setting these properties directly or by setting the run-time–only <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> property.</para>
          <para>Image scaling is determined by the interaction of properties in both <see cref="T:System.Windows.Forms.ToolStrip" /> and <see cref="T:System.Windows.Forms.ToolStripItem" />, as follows:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ToolStrip.ImageScalingSize" /> is the scale of the final image as determined by the combination of the image's <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> setting and the container's <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> setting.</para>
              <list type="bullet">
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is true (the default) and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.SizeToFit" />, no image scaling occurs, and the <see cref="T:System.Windows.Forms.ToolStrip" /> size is that of the largest item, or a prescribed minimum size.</para>
                </item>
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is false and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.None" />, neither image nor <see cref="T:System.Windows.Forms.ToolStrip" /> scaling occurs.</para>
                </item>
              </list>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the image that is displayed on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ImageAlign">
      <MemberSignature Language="C#" Value="public System.Drawing.ContentAlignment ImageAlign { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Drawing.ContentAlignment.MiddleCenter)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" /> property to get or set image alignment on a <see cref="T:System.Windows.Forms.ToolStripItem" />. Use the <see cref="P:System.Windows.Forms.ToolStripItem.TextAlign" /> property to get or set text alignment on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Image" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" />, and <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> properties pertain to various aspects of image handling. Use images in <see cref="T:System.Windows.Forms.ToolStrip" /> controls by setting these properties directly or by setting the run-time–only <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> property.</para>
          <para>Image scaling is determined by the interaction of properties in both <see cref="T:System.Windows.Forms.ToolStrip" /> and <see cref="T:System.Windows.Forms.ToolStripItem" />, as follows:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ToolStrip.ImageScalingSize" /> is the scale of the final image as determined by the combination of the image's <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> setting and the container's <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> setting.</para>
              <list type="bullet">
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is true (the default) and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.SizeToFit" />, no image scaling occurs, and the <see cref="T:System.Windows.Forms.ToolStrip" /> size is that of the largest item, or a prescribed minimum size.</para>
                </item>
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is false and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.None" />, neither image nor <see cref="T:System.Windows.Forms.ToolStrip" /> scaling occurs.</para>
                </item>
              </list>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the alignment of the image on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ImageIndex">
      <MemberSignature Language="C#" Value="public int ImageIndex { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ToolStripImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.NoneExcludedImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("Owner.ImageList")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" /> property specifies the position of the image in the image list. The <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" /> property specifies the image itself.</para>
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Image" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" />, and <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> properties pertain to various aspects of image handling. Use images in <see cref="T:System.Windows.Forms.ToolStrip" /> controls by setting these properties directly or by setting the run-time–only <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> property.</para>
          <para>Image scaling is determined by the interaction of properties in both <see cref="T:System.Windows.Forms.ToolStrip" /> and <see cref="T:System.Windows.Forms.ToolStripItem" />, as follows:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ToolStrip.ImageScalingSize" /> is the scale of the final image as determined by the combination of the image's <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> setting and the container's <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> setting.</para>
              <list type="bullet">
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is true (the default) and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.SizeToFit" />, no image scaling occurs, and the <see cref="T:System.Windows.Forms.ToolStrip" /> size is that of the largest item, or a prescribed minimum size.</para>
                </item>
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is false and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.None" />, neither image nor <see cref="T:System.Windows.Forms.ToolStrip" /> scaling occurs.</para>
                </item>
              </list>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the index value of the image that is displayed on the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ImageKey">
      <MemberSignature Language="C#" Value="public string ImageKey { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ToolStripImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("Owner.ImageList")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" /> property specifies the position of the image in the image list. The <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" /> property specifies the image itself.</para>
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Image" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" />, and <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> properties pertain to various aspects of image handling. Use images in <see cref="T:System.Windows.Forms.ToolStrip" /> controls by setting these properties directly or by setting the run-time–only <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> property.</para>
          <para>Image scaling is determined by the interaction of properties in both <see cref="T:System.Windows.Forms.ToolStrip" /> and <see cref="T:System.Windows.Forms.ToolStripItem" />, as follows:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ToolStrip.ImageScalingSize" /> is the scale of the final image as determined by the combination of the image's <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> setting and the container's <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> setting.</para>
              <list type="bullet">
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is true (the default) and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.SizeToFit" />, no image scaling occurs, and the <see cref="T:System.Windows.Forms.ToolStrip" /> size is that of the largest item, or a prescribed minimum size.</para>
                </item>
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is false and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.None" />, neither image nor <see cref="T:System.Windows.Forms.ToolStrip" /> scaling occurs.</para>
                </item>
              </list>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the key accessor for the image in the <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> that is displayed on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ImageScaling">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItemImageScaling ImageScaling { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ToolStripItemImageScaling.SizeToFit)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItemImageScaling</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Image" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageIndex" />, <see cref="P:System.Windows.Forms.ToolStripItem.ImageKey" />, and <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> properties pertain to various aspects of image handling. Use images in <see cref="T:System.Windows.Forms.ToolStrip" /> controls by setting these properties directly or by setting the run-time–only <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> property.</para>
          <para>Image scaling is determined by the interaction of properties in both <see cref="T:System.Windows.Forms.ToolStrip" /> and <see cref="T:System.Windows.Forms.ToolStripItem" />, as follows:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ToolStrip.ImageScalingSize" /> is the scale of the final image as determined by the combination of the image's <see cref="P:System.Windows.Forms.ToolStripItem.ImageScaling" /> setting and the container's <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> setting.</para>
              <list type="bullet">
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is true (the default) and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.SizeToFit" />, no image scaling occurs, and the <see cref="T:System.Windows.Forms.ToolStrip" /> size is that of the largest item, or a prescribed minimum size.</para>
                </item>
                <item>
                  <para>If <see cref="P:System.Windows.Forms.ToolStrip.AutoSize" /> is false and <see cref="T:System.Windows.Forms.ToolStripItemImageScaling" /> is <see cref="F:System.Windows.Forms.ToolStripItemImageScaling.None" />, neither image nor <see cref="T:System.Windows.Forms.ToolStrip" /> scaling occurs.</para>
                </item>
              </list>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether an image on a <see cref="T:System.Windows.Forms.ToolStripItem" /> is automatically resized to fit in a container.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ImageTransparentColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ImageTransparentColor { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the color to treat as transparent in a <see cref="T:System.Windows.Forms.ToolStripItem" /> image.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invalidates the entire surface of the <see cref="T:System.Windows.Forms.ToolStripItem" /> and causes it to be redrawn.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle r);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invalidates the specified region of the <see cref="T:System.Windows.Forms.ToolStripItem" /> by adding it to the update region of the <see cref="T:System.Windows.Forms.ToolStripItem" />, which is the area that will be repainted at the next paint operation, and causes a paint message to be sent to the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
        <param name="r">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the object has been disposed of.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called during window message preprocessing to determine whether the given input character should be preprocessed or sent directly to the <see cref="T:System.Windows.Forms.ToolStripItem" />. If the <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> method returns true, the specified character is sent directly to the <see cref="T:System.Windows.Forms.ToolStripItem" />. However, if the method returns false, the character is preprocessed and only sent to the <see cref="T:System.Windows.Forms.ToolStripItem" /> if it is not consumed by the preprocessing phase. The preprocessing of a character includes checking whether the character is a mnemonic of another control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether a character is an input character that the item recognizes.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the character should be sent directly to the item and not preprocessed; otherwise, false.</para>
        </returns>
        <param name="charCode">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to test. </param>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call the <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> method during window-message preprocessing to determine whether the specified key is a regular input key that should be sent directly to the <see cref="T:System.Windows.Forms.ToolStripItem" /> or a special key (such as PAGE UP, PAGE DOWN, ENTER, ESC, TAB, or arrow keys) that should be preprocessed. In the latter case, the key is sent to the <see cref="T:System.Windows.Forms.ToolStripItem" /> only if it is not consumed by the preprocessing phase.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified key is a regular input key; otherwise, false.</para>
        </returns>
        <param name="keyData">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.Keys" /> values. </param>
      </Docs>
    </Member>
    <Member MemberName="IsOnDropDown">
      <MemberSignature Language="C#" Value="public bool IsOnDropDown { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the container of the current <see cref="T:System.Windows.Forms.Control" /> is a <see cref="T:System.Windows.Forms.ToolStripDropDown" />. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsOnOverflow">
      <MemberSignature Language="C#" Value="public bool IsOnOverflow { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the <see cref="P:System.Windows.Forms.ToolStripItem.Placement" /> property is set to <see cref="F:System.Windows.Forms.ToolStripItemPlacement.Overflow" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is raised if the <see cref="T:System.Windows.Forms.ToolStripItem" /> is updated by either a programmatic modification or through interaction.</para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.LocationChanged" /> event. Raise this event with specific property settings.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the location of a <see cref="T:System.Windows.Forms.ToolStripItem" /> is updated.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the space between the item and adjacent items.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MergeAction">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MergeAction MergeAction { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.MergeAction.Append)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MergeAction</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets how child menus are merged with parent menus. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MergeIndex">
      <MemberSignature Language="C#" Value="public int MergeIndex { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.MergeIndex" /> property to get or set the index of a <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> so that you can access it for menu-merging operations.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the position of a merged item within the current <see cref="T:System.Windows.Forms.ToolStrip" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mouse events occur in the following order: </para>
          <list type="ordered">
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> or <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> </para>
            </item>
          </list>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse pointer is over the item and a mouse button is pressed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mouse events occur in the following order: </para>
          <list type="ordered">
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> or <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> </para>
            </item>
          </list>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse pointer enters the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mouse events occur in the following order: </para>
          <list type="ordered">
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> or <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> </para>
            </item>
          </list>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse pointer hovers over the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mouse events occur in the following order: </para>
          <list type="ordered">
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> or <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> </para>
            </item>
          </list>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse pointer leaves the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mouse events occur in the following order: </para>
          <list type="ordered">
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> or <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> </para>
            </item>
          </list>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse pointer is moved over the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mouse events occur in the following order: </para>
          <list type="ordered">
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> or <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> </para>
            </item>
            <item>
              <para>
                <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> </para>
            </item>
          </list>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse pointer is over the item and a mouse button is released.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Name" /> property can be used as a key into the <see cref="T:System.Windows.Forms.ToolStripItemCollection" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the name of the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnAvailableChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAvailableChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnAvailableChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the AvailableChanged event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnBackColorChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.BackColorChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="OnBoundsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBoundsChanged ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnBoundsChanged" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ToolStripItem.Bounds" /> property changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnClick(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnDisplayStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayStyleChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnDisplayStyleChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DisplayStyleChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnDoubleClick(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DoubleClick" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs dragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragDrop" /> event.</para>
        </summary>
        <param name="dragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs dragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> event.</para>
        </summary>
        <param name="dragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnDragLeave(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs dragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnDragOver(System.Windows.Forms.DragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event.</para>
        </summary>
        <param name="dragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnEnabledChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.EnabledChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnFontChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnForeColorChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.ForeColorChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs giveFeedbackEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="giveFeedbackEvent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event.</para>
        </summary>
        <param name="giveFeedbackEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnLocationChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.LocationChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseDown" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnMouseEnter(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseEnter" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnMouseHover(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseHover" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnMouseLeave(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseLeave" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs mea);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mea" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseMove" /> event.</para>
        </summary>
        <param name="mea">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.MouseUp" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnOwnerChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnOwnerChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnOwnerChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.OwnerChanged" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnOwnerFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnOwnerFontChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Windows.Forms.ToolStripItem.OnOwnerFontChanged(System.EventArgs)" /> method to notify inheritors of the <see cref="P:System.Windows.Forms.ToolStripItem.Font" /> property that the font has changed.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnOwnerFontChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event when the <see cref="P:System.Windows.Forms.ToolStripItem.Font" /> property has changed on the parent of the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.Paint" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnParentBackColorChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.BackColorChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (System.Windows.Forms.ToolStrip oldParent, System.Windows.Forms.ToolStrip newParent);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.Forms.ToolStrip" />
        <Parameter Name="newParent" Type="System.Windows.Forms.ToolStrip" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnParentChanged(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</para>
        </summary>
        <param name="oldParent">
          <attribution license="cc4" from="Microsoft" modified="false" />The original parent of the item. </param>
        <param name="newParent">
          <attribution license="cc4" from="Microsoft" modified="false" />The new parent of the item. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnParentEnabledChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.EnabledChanged" /> event when the <see cref="P:System.Windows.Forms.ToolStripItem.Enabled" /> property value of the item's container changes.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnParentForeColorChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.ForeColorChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnParentRightToLeftChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.RightToLeftChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs queryContinueDragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryContinueDragEvent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event.</para>
        </summary>
        <param name="queryContinueDragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnRightToLeftChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.RightToLeftChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnTextChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.TextChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.OnVisibleChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.VisibleChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Overflow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItemOverflow Overflow { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ToolStripItemOverflow.AsNeeded)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItemOverflow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.Overflow" /> property in stack layouts. In flow and table layouts, the <see cref="T:System.Windows.Forms.ToolStrip" /> overflow button is not rendered, and therefore the <see cref="P:System.Windows.Forms.ToolStripItem.Overflow" /> property is ignored.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets whether the item is attached to the <see cref="T:System.Windows.Forms.ToolStrip" /> or <see cref="T:System.Windows.Forms.ToolStripOverflowButton" /> or can float between the two.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStrip Owner { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Windows.Forms.ToolStripItem.Owner" /> returns the <see cref="T:System.Windows.Forms.ToolStrip" /> whose Items collection contains the current <see cref="T:System.Windows.Forms.ToolStripItem" />. This is the best way to reference <see cref="P:System.Windows.Forms.ToolStrip.ImageList" /> or other properties in the top-level <see cref="T:System.Windows.Forms.ToolStrip" /> without writing special code to handle overflow.</para>
          <para>The <see cref="P:System.Windows.Forms.ToolStripItem.Owner" /> remains the same even if the item falls into the <see cref="T:System.Windows.Forms.ToolStripOverflow" />. The <see cref="P:System.Windows.Forms.ToolStripItem.Owner" /> can be null for certain elements that are in the <see cref="P:System.Windows.Forms.ToolStrip.DisplayedItems" /> collection but not in the <see cref="P:System.Windows.Forms.ToolStrip.Items" /> collection.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the owner of this item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OwnerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler OwnerChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.OwnerChanged" /> event. Raise this event with specific property settings.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ToolStripItem.Owner" /> property changes. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OwnerItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItem OwnerItem { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItem</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For example, the <see cref="P:System.Windows.Forms.ToolStripItem.OwnerItem" /> of an <ui>Open</ui> <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> would typically be a <ui>File</ui> <see cref="T:System.Windows.Forms.ToolStripMenuItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the parent <see cref="T:System.Windows.Forms.ToolStripItem" /> of this <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Padding Padding { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the internal spacing, in pixels, between the item's contents and its edges.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the item is redrawn.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ToolStrip Parent { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.ToolStripItem.GetCurrentParent" /> is a read-only accessor to the <see cref="P:System.Windows.Forms.ToolStripItem.Parent" /> property. A parent differs from an owner in that a parent denotes the returned current <see cref="T:System.Windows.Forms.ToolStrip" /> in which the item is displayed, which might be in the overflow area.</para>
          <para>The parent <see cref="T:System.Windows.Forms.ToolStrip" /> raises paint events and so on, while the owner <see cref="T:System.Windows.Forms.ToolStrip" /> contains shared data such as image lists. Typically, the <see cref="P:System.Windows.Forms.ToolStripItem.Parent" /> property is set by the layout manager on the <see cref="T:System.Windows.Forms.ToolStrip" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the parent container of the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Activates the <see cref="T:System.Windows.Forms.ToolStripItem" /> when it is clicked with the mouse.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Placement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolStripItemPlacement Placement { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripItemPlacement</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inspect the <see cref="P:System.Windows.Forms.ToolStripItem.Placement" /> property in a <see cref="E:System.Windows.Forms.ToolStrip.LayoutCompleted" /> event to determine whether an item was placed on the main <see cref="T:System.Windows.Forms.ToolStrip" />, the overflow <see cref="T:System.Windows.Forms.ToolStrip" />, or if it is not currently showing at all. The typical reasons why an item is not displayed are that the item did not fit on the main <see cref="T:System.Windows.Forms.ToolStrip" /> and its <see cref="P:System.Windows.Forms.ToolStripItem.Overflow" /> property was set to <see cref="F:System.Windows.Forms.ToolStripItemOverflow.Never" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current layout of the item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Pressed">
      <MemberSignature Language="C#" Value="public virtual bool Pressed { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the state of the item is pressed. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <param name="keyData">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called during message preprocessing to handle the ENTER and SPACEBAR keys in order to raise the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event. This method is called only if the <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> method indicates that the item is not processing the key. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Processes a dialog key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the key was processed by the item; otherwise, false.</para>
        </returns>
        <param name="keyData">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process. </param>
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessMnemonic (char charCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is called to give an item the opportunity to process a mnemonic character. The method should determine whether the item is in a state to process mnemonics and if whether the given character represents a mnemonic. If so, the method should perform the action associated with the mnemonic and return true. If not, the method should return false. </para>
          <para>This base-class implementation relies on the host <see cref="T:System.Windows.Forms.ToolStrip" /> control to call the <see cref="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" /> method to determine whether the given character matches a mnemonic in the item's text. In this case, the method raises the <see cref="E:System.Windows.Forms.ToolStripItem.Click" /> event and returns true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Processes a mnemonic character.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true in all cases.</para>
        </returns>
        <param name="charCode">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to process. </param>
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You should use the <see cref="T:System.Windows.Forms.HelpProvider" /> class to allow users to invoke help on your accessible object by pressing the F1 key. Using the <see cref="T:System.Windows.Forms.HelpProvider" /> provides you with complete information in the <see cref="T:System.Windows.Forms.QueryAccessibilityHelpEventArgs" /> object.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an accessibility client application invokes help for the <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation. The <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event allows the drag source to determine whether the drag-and-drop operation should be canceled.</para>
          <para>The following remarks describe how and when events related to drag-and-drop operations are raised.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method determines the item under the current cursor location. It then checks to see if the item is a valid drop target.</para>
          <para>If the item is a valid drop target, the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration.</para>
          <para>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked in the following manner:</para>
          <list type="bullet">
            <item>
              <para>If the user moves out of a window, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
            <item>
              <para>If the mouse enters another item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> for that control is raised.</para>
            </item>
            <item>
              <para>If the mouse moves but stays within the same item, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised.</para>
            </item>
          </list>
          <para>If there is a change in the keyboard or mouse button state, the <see cref="E:System.Windows.Forms.ToolStripItem.QueryContinueDrag" /> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <see cref="P:System.Windows.Forms.QueryContinueDragEventArgs.Action" /> property of the event's <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />.</para>
          <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is Continue, the <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> event is raised to continue the operation and the <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration. </para>
          <para>The <see cref="E:System.Windows.Forms.ToolStripItem.DragOver" /> and <see cref="E:System.Windows.Forms.ToolStripItem.GiveFeedback" /> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position, as follows:</para>
          <list type="bullet">
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is Drop, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</para>
            </item>
            <item>
              <para>If the value of <see cref="T:System.Windows.Forms.DragAction" /> is Cancel, the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event is raised.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs during a drag-and-drop operation and allows the drag source to determine whether the drag-and-drop operation should be canceled.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetDisplayStyle">
      <MemberSignature Language="C#" Value="public virtual void ResetDisplayStyle ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetImage">
      <MemberSignature Language="C#" Value="public virtual void ResetImage ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetMargin">
      <MemberSignature Language="C#" Value="public void ResetMargin ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetPadding">
      <MemberSignature Language="C#" Value="public void ResetPadding ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ResetTextDirection">
      <MemberSignature Language="C#" Value="public virtual void ResetTextDirection ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not relevant to this class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether items are to be placed from right to left and text is to be written from right to left.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftAutoMirrorImage">
      <MemberSignature Language="C#" Value="public bool RightToLeftAutoMirrorImage { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Mirrors automatically the <see cref="T:System.Windows.Forms.ToolStripItem" /> image when the <see cref="P:System.Windows.Forms.ToolStripItem.RightToLeft" /> property is set to <see cref="F:System.Windows.Forms.RightToLeft.Yes" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.RightToLeftChanged" /> event. Raise this event with specific property settings.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ToolStripItem.RightToLeft" /> property value changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Selects the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the item is selected.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="protected virtual void SetBounds (System.Drawing.Rectangle bounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the size and location of the item.</para>
        </summary>
        <param name="bounds">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Drawing.Rectangle" /> that represents the size and location of the <see cref="T:System.Windows.Forms.ToolStripItem" /> </param>
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool visible);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You typically override this method to change the visibility behavior of the control.</para>
          <block subset="none" type="note">
            <para>When overriding <see cref="M:System.Windows.Forms.ToolStripItem.SetVisibleCore(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ToolStripItem.SetVisibleCore(System.Boolean)" /> method to force the visibility of the control to change.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the <see cref="T:System.Windows.Forms.ToolStripItem" /> to the specified visible state. </para>
        </summary>
        <param name="visible">
          <attribution license="cc4" from="Microsoft" modified="false" />true to make the <see cref="T:System.Windows.Forms.ToolStripItem" /> visible; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected virtual bool ShowKeyboardCues { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Shortcut keys, such as CTRL+C for copying, provide keyboard alternatives to selecting a command with a mouse or other pointing device.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether to show or hide shortcut keys.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size Size { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the size of the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs dragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragDrop" /> event.</para>
        </summary>
        <param name="dragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs dragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragEnter" /> event.</para>
        </summary>
        <param name="dragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ToolStripItem.DragLeave" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs dragEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ToolStripItem.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the DragOver event.</para>
        </summary>
        <param name="dragEvent">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the object that contains data about the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can create an access key to the item by adding an ampersand ("&amp;") before a letter in the text value. For more information, see <format type="text/html"><a href="4faa0991-28ec-4eca-91db-51dc2cd6a7ac">How to: Create Access Keys for Windows Forms Controls</a></format>.</para>
          <para>
            <see cref="T:System.Windows.Forms.ToolStripItem" /> uses the <see cref="P:System.Windows.Forms.ToolStripItem.Text" /> property as the default source for the <see cref="T:System.Windows.Forms.ToolTip" /> content. Set <see cref="P:System.Windows.Forms.ToolStripItem.AutoToolTip" /> to false to use <see cref="P:System.Windows.Forms.ToolStripItem.ToolTipText" /> as the source for <see cref="T:System.Windows.Forms.ToolTip" /> content.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text that is to be displayed on the item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.ContentAlignment TextAlign { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Drawing.ContentAlignment.MiddleCenter)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.TextAlign" /> property to get or set text alignment on a <see cref="T:System.Windows.Forms.ToolStripItem" />. Use the <see cref="P:System.Windows.Forms.ToolStripItem.ImageAlign" /> property to get or set image alignment on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the alignment of the text on a <see cref="T:System.Windows.Forms.ToolStripLabel" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.TextChanged" /> event. Raise this event with specific property settings.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripItem.Text" /> property changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TextDirection">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolStripTextDirection TextDirection { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolStripTextDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the orientation of text used on a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TextImageRelation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TextImageRelation TextImageRelation { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.TextImageRelation.ImageBeforeText)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TextImageRelation</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.ToolStripItem.TextImageRelation" /> property to define or determine the relative placement of the image with respect to the text on a <see cref="T:System.Windows.Forms.ToolStripItem" />. Items that lack an image, text, or both are treated as special cases so that the <see cref="T:System.Windows.Forms.ToolStripItem" /> does not display a blank spot for the missing element or elements.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the position of <see cref="T:System.Windows.Forms.ToolStripItem" /> text and image relative to each other.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ToolTipText">
      <MemberSignature Language="C#" Value="public string ToolTipText { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Windows.Forms.ToolStripItem.ToolTipText" /> works only if <see cref="P:System.Windows.Forms.ToolStrip.ShowItemToolTips" /> is set to true. If <see cref="P:System.Windows.Forms.ToolStripItem.AutoToolTip" /> is set to true, the <see cref="P:System.Windows.Forms.Control.Text" /> property for the item is used as the <see cref="P:System.Windows.Forms.ToolStripItem.ToolTipText" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text that appears as a <see cref="T:System.Windows.Forms.ToolTip" /> for a control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the item is displayed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
          <block subset="none" type="note">
            <para>Changing the <see cref="P:System.Windows.Forms.Control.Enabled" /> property of a <see cref="T:System.Windows.Forms.ToolStrip" /> does not raise the <see cref="E:System.Windows.Forms.ToolStripItem.VisibleChanged" /> event. Raise this event with specific property settings.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Windows.Forms.ToolStripItem.Visible" /> property changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the width in pixels of a <see cref="T:System.Windows.Forms.ToolStripItem" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>