<?xml version="1.0" encoding="utf-8"?>
<Type Name="BindingManagerBase" FullName="System.Windows.Forms.BindingManagerBase">
  <TypeSignature Language="C#" Value="public abstract class BindingManagerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Windows.Forms.BindingManagerBase" /> enables the synchronization of data-bound controls on a Windows Form that are bound to the same data source. (For more information about simple binding a control to a data source, see the <see cref="T:System.Windows.Forms.Binding" /> class.) For example, suppose that a form contains two <see cref="T:System.Windows.Forms.TextBox" /> controls that are bound to the same data source but to different columns. The data source might be a <see cref="T:System.Data.DataTable" /> that contains customer names, while the columns might contain the first and last names. The two controls must be synchronized in order to display the correct first and last names together for the same customer. The <see cref="T:System.Windows.Forms.CurrencyManager" />, which inherits from the <see cref="T:System.Windows.Forms.BindingManagerBase" /> class, accomplishes this synchronization by maintaining a pointer to the current item in the data source. The <see cref="T:System.Windows.Forms.TextBox" /> controls are bound to the current item so they display the information for the same row. When the current item changes, the <see cref="T:System.Windows.Forms.CurrencyManager" /> notifies all the bound controls so that they can refresh their data. Furthermore, you can set the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> property to specify the row in the <see cref="T:System.Data.DataTable" /> that the controls point to. To determine how many rows exist in the data source, use the <see cref="P:System.Windows.Forms.BindingManagerBase.Count" /> property.</para>
      <para>The <see cref="T:System.Windows.Forms.CurrencyManager" /> is necessary because data sources do not necessarily maintain a current-item pointer. For instance, arrays and <see cref="T:System.Collections.ArrayList" /> objects can be data sources, but they do not have a property that returns the current item. To get the current item, use the <see cref="P:System.Windows.Forms.BindingManagerBase.Current" /> property.</para>
      <para>The <see cref="T:System.Windows.Forms.PropertyManager" /> also inherits from the <see cref="T:System.Windows.Forms.BindingManagerBase" />, and it is used to maintain the current property of an object, rather than the property of a current object in a data source. For this reason, trying to set the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> or <see cref="P:System.Windows.Forms.BindingManagerBase.Count" /> property for a <see cref="T:System.Windows.Forms.PropertyManager" /> has no effect.</para>
      <para>To create a <see cref="T:System.Windows.Forms.BindingManagerBase" />, use the <see cref="T:System.Windows.Forms.BindingContext" /> class, which returns either a <see cref="T:System.Windows.Forms.CurrencyManager" /> or a <see cref="T:System.Windows.Forms.PropertyManager" />, depending on the data source being managed.</para>
      <para>Solutions programmers are encouraged to bind controls directly to a <see cref="T:System.Windows.Forms.BindingSource" /> component, which acts as both a data source and data connector to the actual target data source. <see cref="T:System.Windows.Forms.BindingSource" /> greatly simplifies both simple and complex data binding, including managing currency between the control and its target.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Manages all <see cref="T:System.Windows.Forms.Binding" /> objects that are bound to the same data source and data member. This class is abstract.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingManagerBase ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default constructor sets the <see cref="P:System.Windows.Forms.BindingManagerBase.Bindings" /> property to null. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.BindingManagerBase" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public abstract void AddNew ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.AddNew" /> method adds a new item to the underlying list by using the default constructor for that item's type. <see cref="M:System.Windows.Forms.BindingManagerBase.AddNew" /> is intended primarily to be used by programmers adding complex data-binding support to their custom component.</para>
          <para>
            <see cref="M:System.Windows.Forms.BindingManagerBase.AddNew" /> is commonly implemented using the following pattern that allows application programmers to inject their own code for creating customized items:</para>
          <list type="ordered">
            <item>
              <para>
                <see cref="M:System.Windows.Forms.BindingManagerBase.AddNew" /> raises the <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> event.</para>
            </item>
            <item>
              <para>The programmer can supply a custom item by handling the <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> event and setting the <see cref="P:System.ComponentModel.AddingNewEventArgs.NewObject" /> property of the <see cref="T:System.ComponentModel.AddingNewEventArgs" /> parameter to the new item. Otherwise, the component should create an item using the default constructor.</para>
            </item>
            <item>
              <para>If the data source does not implement the <see cref="T:System.ComponentModel.IEditableObject" /> interface, the item is immediately added to the data source and underlying list. If this interface is supported, then the addition is transacted by the <see cref="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" /> and <see cref="M:System.Windows.Forms.BindingManagerBase.EndCurrentEdit" /> methods.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, adds a new item to the underlying list.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" /> event occurs after the completion of a data-binding operation, which may include the following: </para>
          <list type="bullet">
            <item>
              <para>Pushing information from the data source into the property of its bound control.</para>
            </item>
            <item>
              <para>Pulling information from a bound control into its associated data source.</para>
            </item>
          </list>
          <para>Note that this event is raised regardless of the completion status of the binding operation, although this status can be determined by examining the <see cref="P:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState" /> property of the <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> parameter associated with the event. <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> may also contain error and exception information. For example, a binding operation that attempts to push a null value from a data source into a <see cref="T:System.Windows.Forms.DateTimePicker" /> control will generate an exception, since a <see cref="T:System.DateTime" /> cannot be null. In this case, although the binding operation does not successfully complete, the <see cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" /> event will be raised, and the event will contain information on the failed binding attempt.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs at the completion of a data-binding operation.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Bindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingsCollection Bindings { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the collection of bindings being managed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CancelCurrentEdit">
      <MemberSignature Language="C#" Value="public abstract void CancelCurrentEdit ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is supported only if the data source implements the <see cref="T:System.ComponentModel.IEditableObject" /> interface. If the object does not implement the <see cref="T:System.ComponentModel.IEditableObject" /> interface, changes made to the data will not be discarded.</para>
          <para>Calling the <see cref="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" /> method causes the <see cref="E:System.Windows.Forms.Binding.Format" /> event to occur.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, cancels the current edit.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public abstract int Count { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.BindingManagerBase.Count" /> property to determine the last item in the list of rows maintained by the <see cref="T:System.Windows.Forms.BindingManagerBase" />. To go to the last item, set the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> property to the <see cref="P:System.Windows.Forms.BindingManagerBase.Count" /> property value minus 1.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the number of rows managed by the <see cref="T:System.Windows.Forms.BindingManagerBase" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public abstract object Current { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.BindingManagerBase.Current" /> object contains the value of the current item in the data source. To use the value of the current item, you must cast the item to the <see cref="T:System.Type" /> of the object contained by the <see cref="P:System.Windows.Forms.Binding.DataSource" />. For example, a <see cref="T:System.Data.DataTable" /> contains <see cref="T:System.Data.DataRowView" /> objects. To determine the type of the current object, use the <see cref="M:System.Object.GetType" /> and <see cref="M:System.Type.ToString" /> methods.</para>
          <block subset="none" type="note">
            <para>When the <see cref="P:System.Windows.Forms.Binding.DataSource" /> is a <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataViewManager" />, or <see cref="T:System.Data.DataTable" />, you are actually binding to a <see cref="T:System.Data.DataView" />. Consequently, each <see cref="P:System.Windows.Forms.BindingManagerBase.Current" /> object is a <see cref="T:System.Data.DataRowView" /> object.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the current object.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CurrentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> event is raised whenever the <see cref="P:System.Windows.Forms.BindingManagerBase.Current" /> property changes or the <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> event occurs.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the currently bound item changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CurrentItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentItemChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> event occurs whenever there is a change in the state in the currently bound item. This can occur if one of the properties of this item is changed or if the item itself is replaced or moved.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the state of the currently bound item changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DataError">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingManagerDataErrorEventHandler DataError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerDataErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is informational and reports Common Language Specification (CLS)-compliant exceptions only. To determine what type of exception occurred, handle this event and check the <see cref="P:System.Windows.Forms.BindingManagerDataErrorEventArgs.Exception" /> property of the <see cref="T:System.Windows.Forms.BindingManagerDataErrorEventArgs" />.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an <see cref="T:System.Exception" /> is silently handled by the <see cref="T:System.Windows.Forms.BindingManagerBase" />. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EndCurrentEdit">
      <MemberSignature Language="C#" Value="public abstract void EndCurrentEdit ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is supported only if the data source implements the <see cref="T:System.ComponentModel.IEditableObject" /> interface. In that case, changes will be saved. If the object does not implement the <see cref="T:System.ComponentModel.IEditableObject" /> interface, changes made to the data will not be saved.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, ends the current edit.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the collection of property descriptors for the binding.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the property descriptors for the binding.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.Collections.ArrayList dataSources, System.Collections.ArrayList listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSources" Type="System.Collections.ArrayList" />
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is used by developers creating data-bound controls.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the collection of property descriptors for the binding using the specified <see cref="T:System.Collections.ArrayList" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the property descriptors for the binding.</para>
        </returns>
        <param name="dataSources">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.ArrayList" /> containing the data sources. </param>
        <param name="listAccessors">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.ArrayList" /> containing the table's bound properties. </param>
      </Docs>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties (Type listType, int offset, System.Collections.ArrayList dataSources, System.Collections.ArrayList listAccessors);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listType" Type="System.Type" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="dataSources" Type="System.Collections.ArrayList" />
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload is used by developers to create data-bound controls.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the list of properties of the items managed by this <see cref="T:System.Windows.Forms.BindingManagerBase" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the property descriptors for the binding.</para>
        </returns>
        <param name="listType">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Type" /> of the bound list. </param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />A counter used to recursively call the method. </param>
        <param name="dataSources">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.ArrayList" /> containing the data sources. </param>
        <param name="listAccessors">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.ArrayList" /> containing the table's bound properties. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="protected abstract string GetListName (System.Collections.ArrayList listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets the name of the list supplying the data for the binding.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name of the list supplying the data for the binding.</para>
        </returns>
        <param name="listAccessors">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.ArrayList" /> containing the table's bound properties. </param>
      </Docs>
    </Member>
    <Member MemberName="IsBindingSuspended">
      <MemberSignature Language="C#" Value="public bool IsBindingSuspended { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether binding is suspended.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" /> event. </para>
        </summary>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" />  that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentChanged">
      <MemberSignature Language="C#" Value="protected abstract void OnCurrentChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="onCurrentChangedHandler">
      <MemberSignature Language="C#" Value="protected EventHandler onCurrentChangedHandler;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies the event handler for the <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> event.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnCurrentItemChanged">
      <MemberSignature Language="C#" Value="protected abstract void OnCurrentItemChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDataError">
      <MemberSignature Language="C#" Value="protected void OnDataError (Exception e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.OnDataError(System.Exception)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.BindingManagerBase.DataError" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Exception" /> that caused the <see cref="E:System.Windows.Forms.BindingManagerBase.DataError" /> event to occur.</param>
      </Docs>
    </Member>
    <Member MemberName="onPositionChangedHandler">
      <MemberSignature Language="C#" Value="protected EventHandler onPositionChangedHandler;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Specifies the event handler for the <see cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" /> event.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract int Position { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> property to iterate through the underlying list maintained by the <see cref="T:System.Windows.Forms.BindingManagerBase" />. To go to the first item, set the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> to 0. To go to the end of the list, set the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> to the value of the <see cref="P:System.Windows.Forms.BindingManagerBase.Count" /> property minus 1.</para>
          <para>The <see cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" /> event occurs when the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> property value changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, gets or sets the position in the underlying list that controls bound to this data source point to.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PositionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PositionChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs after the value of the <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> property has changed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PullData">
      <MemberSignature Language="C#" Value="protected void PullData ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.PullData" /> method is a programmatic way to pull information from the data-bound control back into the data source. It is not required for standard operation of a control, since normally a control automatically updates its bound data source when focus leaves it. </para>
          <para>
            <see cref="M:System.Windows.Forms.BindingManagerBase.PullData" /> raises the <see cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" /> event and change events on the data source as appropriate.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Pulls data from the data-bound control into the data source, returning no information.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PushData">
      <MemberSignature Language="C#" Value="protected void PushData ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.PushData" /> method is a programmatic way to push information from the data source into the data-bound control. This method is not required if the data source implements the <see cref="T:System.ComponentModel.IBindingList" /> interface, because the <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event should automatically cause the control to be updated through its currency manager.</para>
          <para>If this method is issued when a <see cref="M:System.Windows.Forms.BindingManagerBase.PullData" /> operation is being performed, the <see cref="M:System.Windows.Forms.BindingManagerBase.PushData" /> method returns immediately with a value of true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Pushes data from the data source into the data-bound control, returning no information.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public abstract void RemoveAt (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.RemoveAt(System.Int32)" /> method relies on the underlying data source to determine how the method behaves. (See the <see cref="T:System.Windows.Forms.Binding" /> class for a list of supported data sources.) For classes that implement <see cref="T:System.Collections.IList" />, <see cref="T:System.ComponentModel.IBindingList" />, or <see cref="T:System.ComponentModel.ITypedList" />, as well as strongly typed classes that implement <see cref="T:System.Collections.IList" />, the <see cref="M:System.Windows.Forms.BindingManagerBase.RemoveAt(System.Int32)" /> method actually deletes the row in the underlying list instead of removing its contents.</para>
          <para>If the underlying list implements the <see cref="T:System.ComponentModel.IBindingList" /> interface, the <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> property must return true. If the underlying list implements the <see cref="T:System.Collections.IList" /> interface, the <see cref="P:System.Collections.IList.IsFixedSize" /> property must return false.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, deletes the row at the specified index from the underlying list.</para>
        </summary>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the row to delete. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ResumeBinding">
      <MemberSignature Language="C#" Value="public abstract void ResumeBinding ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" /> and <see cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" /> are two methods that allow the temporary suspension and resumption of data binding. You would typically suspend data binding if the user must be allowed to edit data fields before validation occurs. For example, the user might need to change a field to be in accordance with a second field; otherwise, validating the first field would cause the second field to be in error.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, resumes data binding.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SuspendBinding">
      <MemberSignature Language="C#" Value="public abstract void SuspendBinding ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" /> and <see cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" /> are two methods that allow the temporary suspension and resumption of data binding. You would typically suspend data binding if the user must be allowed to edit data fields before validation occurs. For example, the user might need to change a field to be in accordance with a second field; otherwise, validating the first field would cause the second field to be in error.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, suspends data binding.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="UpdateIsBinding">
      <MemberSignature Language="C#" Value="protected abstract void UpdateIsBinding ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" /> method updates the data binding between the bound control and its data source. For complex data-binding scenarios, it also resets the current position to the beginning of the underlying list.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, updates the binding.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>