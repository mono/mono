<?xml version="1.0" encoding="utf-8"?>
<Type Name="HtmlDocument" FullName="System.Windows.Forms.HtmlDocument">
  <TypeSignature Language="C#" Value="public sealed class HtmlDocument" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>
        <see cref="T:System.Windows.Forms.HtmlDocument" /> provides a managed wrapper around Internet Explorer's document object, also known as the HTML Document Object Model (DOM). You obtain an instance of <see cref="T:System.Windows.Forms.HtmlDocument" /> through the <see cref="P:System.Windows.Forms.WebBrowser.Document" /> property of the <see cref="T:System.Windows.Forms.WebBrowser" /> control. </para>
      <para>HTML tags inside of an HTML document can be nested inside one another. <see cref="T:System.Windows.Forms.HtmlDocument" /> thus represents a document tree, whose children are instances of the <see cref="T:System.Windows.Forms.HtmlElement" /> class. The following code example shows a simple HTML file.</para>
      <code>&lt;HTML&gt;
    &lt;BODY&gt;
        &lt;DIV name="Span1"&gt;Simple HTML Form&lt;/DIV&gt;
        &lt;FORM&gt;
            &lt;SPAN name="TextLabel"&gt;Enter Your Name:&lt;/SPAN&gt;
            &lt;INPUT type="text" size="20" name="Text1"&gt;
        &lt;/FORM&gt;
    &lt;/BODY&gt;
&lt;/HTML&gt;</code>
      <para>In this example, <see cref="T:System.Windows.Forms.HtmlDocument" /> represents the entire document inside the HTML tags. The BODY, DIV, FORM and SPAN tags are represented by individual <see cref="T:System.Windows.Forms.HtmlElement" /> objects. </para>
      <para>There are several ways you can access the elements in this tree. Use the <see cref="P:System.Windows.Forms.HtmlDocument.Body" /> property to access the BODY tag and all of its children. The <see cref="P:System.Windows.Forms.HtmlDocument.ActiveElement" /> property gives you the <see cref="T:System.Windows.Forms.HtmlElement" /> for the element on an HTML page that has user input focus. All elements within an HTML page can have a name; the <see cref="P:System.Windows.Forms.HtmlDocument.All" /> collection provides access to each <see cref="T:System.Windows.Forms.HtmlElement" /> using its name as an index. <see cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" /> will return an <see cref="T:System.Windows.Forms.HtmlElementCollection" /> of all <see cref="T:System.Windows.Forms.HtmlElement" /> objects with a given HTML tag name, such as DIV or TABLE. <see cref="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" /> will return the single <see cref="T:System.Windows.Forms.HtmlElement" /> corresponding to the unique ID that you supply. <see cref="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" /> will return the <see cref="T:System.Windows.Forms.HtmlElement" /> that can be found on the screen at the supplied mouse pointer coordinates. </para>
      <para>You can also use the <see cref="P:System.Windows.Forms.HtmlDocument.Forms" /> and <see cref="P:System.Windows.Forms.HtmlDocument.Images" /> collection to iterate through elements that represent user input forms and graphics, respectively. </para>
      <para>
        <see cref="T:System.Windows.Forms.HtmlDocument" /> is based on the unmanaged interfaces implemented by Internet Explorer's DHTML DOM: IHTMLDocument, IHTMLDocument2, IHTMLDocument3, and IHTMLDocument4. Only the most frequently used properties and methods on these unmanaged interfaces are exposed by <see cref="T:System.Windows.Forms.HtmlDocument" />. You can access all other properties and methods directly using the <see cref="P:System.Windows.Forms.HtmlDocument.DomDocument" /> property, which you can cast to the desired unmanaged interface pointer. </para>
      <para>An HTML document may contain frames, which are different windows inside of the <see cref="T:System.Windows.Forms.WebBrowser" /> control. Each frame displays its own HTML page. The <see cref="P:System.Windows.Forms.HtmlWindow.Frames" /> collection is available through the <see cref="P:System.Windows.Forms.HtmlDocument.Window" /> property. You may also use the <see cref="P:System.Windows.Forms.HtmlDocument.Window" /> property to resize the displayed page, scroll the document, or display alerts and prompts to the user. </para>
      <para>
        <see cref="T:System.Windows.Forms.HtmlDocument" /> exposes the most common events you would expect to handle when hosting HTML pages. For events not exposed directly by the interface, you can add a handler for the event using <see cref="M:System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)" />.</para>
      <para>HTML files may contain SCRIPT tags that encapsulate code written in one of the Active Scripting languages, such as JScript or VBScript. The <see cref="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" /> method provides for execution of properties and methods defined in a SCRIPT tag. </para>
      <block subset="none" type="note">
        <para>While most of the properties, methods, and events on <see cref="T:System.Windows.Forms.HtmlDocument" /> have kept the same names as they have on the unmanaged DOM, some have been changed for consistency with the dnprdnshort. </para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides top-level programmatic access to an HTML document hosted by the <see cref="T:System.Windows.Forms.WebBrowser" /> control.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="ActiveElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement ActiveElement { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the document has focus, but no element of the document has been given focus, <see cref="P:System.Windows.Forms.HtmlDocument.ActiveElement" /> returns the element corresponding to the &lt;BODY&gt; tag. </para>
          <para>If the document does not have focus, <see cref="P:System.Windows.Forms.HtmlDocument.ActiveElement" /> returns null. </para>
          <para>If the current element with input focus is a cell (TD) in an HTML TABLE tag, <see cref="P:System.Windows.Forms.HtmlDocument.ActiveElement" /> will return the element that contains the TABLE element. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Provides the <see cref="T:System.Windows.Forms.HtmlElement" /> which currently has user input focus. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A link is active when a user is clicking on it. Change this property to change the color of the link prior to navigation. </para>
          <para>The <see cref="T:System.Drawing.Color" /> type in the dnprdnshort supports an Alpha value, but the HTML DOM does not. Therefore, Alpha will have no effect when assigned to this property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Drawing.Color" /> of a hyperlink when clicked by a user. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.HtmlDocument.All" /> collection provides random access to any element in the HTML document, regardless of its position in the document tree. Use it to access any element in an HTML document by name, ID, or index. You may also iterate over all of the elements within a document. </para>
          <para>Some elements, such as HEAD and TITLE, will never have names associated with them. All other elements will have names only if the author of the HTML file assigned them. You can access elements without names by ID or index. </para>
          <para>You cannot add elements directly to the <see cref="P:System.Windows.Forms.HtmlDocument.All" /> collection, because all elements in an HTML file outside of the HTML tag must have a parent element. Use the <see cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" /> method or the <see cref="P:System.Windows.Forms.HtmlElement.InnerHtml" /> property on <see cref="T:System.Windows.Forms.HtmlElement" /> to add new elements to the tree.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an instance of <see cref="T:System.Windows.Forms.HtmlElementCollection" />, which stores all <see cref="T:System.Windows.Forms.HtmlElement" /> objects for the document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You should not attach an event to the document or one of its objects until the document has completed loading. The earliest you should call this method is in the <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted" /> event of the <see cref="T:System.Windows.Forms.WebBrowser" /> control. </para>
          <para>This method allows you to attach handlers to unmanaged DOM events not exposed by <see cref="T:System.Windows.Forms.HtmlDocument" />. For more information about available unmanaged DOM events, see <format type="text/html"><a href="762295bd-2355-4aa7-b43c-5bff997a33e6">Accessing Unexposed Members on the Managed HTML Document Object Model</a></format> and the IHTMLDocument interfaces: <see cref="http://go.microsoft.com/fwlink/?LinkId=104882">IHTMLDocument</see>, <see cref="http://go.microsoft.com/fwlink/?LinkId=104884">IHTMLDocument2</see>, <see cref="http://go.microsoft.com/fwlink/?LinkId=104886">IHTMLDocument3</see>, <see cref="http://go.microsoft.com/fwlink/?LinkId=104887">IHTMLDocument4</see>, <see cref="http://go.microsoft.com/fwlink/?LinkId=104888">IHTMLDocument5</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds an event handler for the named HTML DOM event.</para>
        </summary>
        <param name="eventName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the event you want to handle.</param>
        <param name="eventHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The managed code that handles the event. </param>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Windows.Forms.HtmlDocument.BackColor" /> will display when no other element occupies that area of the screen.</para>
          <para>The <see cref="T:System.Drawing.Color" /> type in the dnprdnshort supports an Alpha value, but the HTML DOM does not. Therefore, Alpha will have no effect when assigned to this property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the background color of the HTML document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Body { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An HTML document is split into two major sections: </para>
          <list type="bullet">
            <item>
              <para>HEAD, which contains the document's title, any document meta-data, and SCRIPT elements. </para>
            </item>
            <item>
              <para>BODY, which contains all of the elements involved in the on-screen appearance of the document.</para>
            </item>
          </list>
          <para>There is no equivalent Head property on <see cref="T:System.Windows.Forms.HtmlDocument" />. To obtain the HEAD element, use <see cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Windows.Forms.HtmlElement" /> for the BODY tag. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user clicks anywhere on the document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, if you right-click your mouse on a document or an element in a document, it will display a default context menu particular to the element. Use this event to cancel the display of the context menu and display one of your own. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user requests to display the document's context menu. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Cookie">
      <MemberSignature Language="C#" Value="public string Cookie { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.HtmlDocument.Cookie" /> property of <see cref="T:System.Windows.Forms.HtmlDocument" /> exposes all cookies set for a Web page.</para>
          <para>A <newTerm>cookie</newTerm> is an arbitrary name/value pair associated with a given Web page. Web developers use cookies to track when users visit or return to a Web site. A cookie is composed of multiple parts, called cookie crumbs, that determine the following:</para>
          <list type="bullet">
            <item>
              <para>The document set to which the cookie applies; its domain and path.</para>
            </item>
            <item>
              <para>The name and value of the cookie. </para>
            </item>
            <item>
              <para>The expiration date of the cookie. </para>
            </item>
            <item>
              <para>Whether the cookie can only be sent using a secure connection.</para>
            </item>
          </list>
          <para>The <see cref="P:System.Windows.Forms.HtmlDocument.Cookie" /> property may contain multiple cookies.</para>
          <para>You can only use the <see cref="P:System.Windows.Forms.HtmlDocument.Cookie" /> property to set one cookie at a time.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the HTTP cookies associated with this document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement CreateElement (string elementTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTag" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <paramref name="elementTag" /> may be one of any of the supported HTML tags in Internet Explorer, except for FRAME or IFRAME.</para>
          <para>
            <see cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" /> returns an element unattached to the current document tree. To add the element to the document, use either the <see cref="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" /> or <see cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" /> methods.</para>
          <para>This method will not affect the state of an existing document's source code when you use the <see cref="T:System.Windows.Forms.WebBrowser" /> control's <ui>View Source</ui> context menu command or the <see cref="P:System.Windows.Forms.WebBrowser.DocumentText" /> and <see cref="P:System.Windows.Forms.WebBrowser.DocumentStream" /> properties of the <see cref="T:System.Windows.Forms.WebBrowser" /> control. </para>
          <para>When you create new elements with <see cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />, you will not be able to set certain properties, such as Name. In cases where you need to set the Name attribute, assign them as HTML to the <see cref="P:System.Windows.Forms.HtmlElement.InnerHtml" /> property of another object in the document.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a new HtmlElement of the specified HTML tag type. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new element of the specified tag type. </para>
        </returns>
        <param name="elementTag">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the HTML element to create. </param>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncoding">
      <MemberSignature Language="C#" Value="public string DefaultEncoding { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default encoding is the encoding the managed HTML Document Object Model (DOM) will attempt to use when the page is initially loaded. This encoding is derived either from Internet Explorer's <ui>Encoding</ui> settings, or from a META tag embedded within the page.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the encoding used by default for the current document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes an event handler from a named event on the HTML DOM. </para>
        </summary>
        <param name="eventName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the event you want to cease handling.</param>
        <param name="eventHandler">
          <attribution license="cc4" from="Microsoft" modified="false" />The managed code that handles the event.</param>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>By default, two Web pages in different frames are prevented from accessing each other's content using script; even www.microsoft.com and msdn.microsoft.com are, in this instance, considered different domains. To enable cross-frame scripting for pages from the same top-level domain, you can assign a new value to the <see cref="P:System.Windows.Forms.HtmlDocument.Domain" /> property. In the pervious URL example, setting <see cref="P:System.Windows.Forms.HtmlDocument.Domain" /> to microsoft.com would allow both pages to communicate with one another.</para>
          <para>Strings assigned to the <see cref="P:System.Windows.Forms.HtmlDocument.Domain" /> property must be valid top-level domains. In the previous URL example, you can set <see cref="P:System.Windows.Forms.HtmlDocument.Domain" /> to microsoft.com, but not to .com, which would enable any page on the Internet to script a page's contents. </para>
          <para>You cannot use the <see cref="P:System.Windows.Forms.HtmlDocument.Domain" /> property to enable cross-frame scripting for pages accessed using two different protocols. If one frame in your page comes from a Web server (the http:// protocol) and another comes from the file system (the file://) protocol, they will not be able to communicate with one another regardless of the value of the <see cref="P:System.Windows.Forms.HtmlDocument.Domain" /> property. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string describing the domain of this document for security purposes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DomDocument">
      <MemberSignature Language="C#" Value="public object DomDocument { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="T:System.Windows.Forms.HtmlDocument" /> is a wrapper for the Internet Explorer Document Object Model (DOM), which is written in COM. If you need to access unexposed properties or methods on the underlying COM interfaces, such as IHTMLDocument2, you can use this object to query for them.</para>
          <para>To use the unmanaged interfaces, import the MSHTML library (mshtml.dll) into your application. However, you can also execute unexposed properties and methods using the IDispatch::Invoke method. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the unmanaged interface pointer for this <see cref="T:System.Windows.Forms.HtmlDocument" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public string Encoding { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the character encoding for this document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Tests the object for equality against the current object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the objects are equal; otherwise, false.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />The object to test.</param>
      </Docs>
    </Member>
    <Member MemberName="ExecCommand">
      <MemberSignature Language="C#" Value="public void ExecCommand (string command, bool showUI, object value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" /> exposes a large array of commands for which there are no methods exposed on <see cref="T:System.Windows.Forms.HtmlDocument" />. Using <see cref="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" /> you can insert new HTML elements, select and format text, and clear any cached authentication credentials. For a full list of commands, see <see cref="http://go.microsoft.com/fwlink/?LinkId=198814">Command Identifiers</see>.</para>
          <block subset="none" type="note">
            <para>Certain commands, such as copy, have return values. In the current implementation of <see cref="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" />, you cannot obtain a return value from your call. To retrieve return values, use the corresponding unmanaged method on a <see cref="P:System.Windows.Forms.HtmlDocument.DomDocument" /> reference instead.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Executes the specified command against the document. </para>
        </summary>
        <param name="command">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the command to execute.</param>
        <param name="showUI">
          <attribution license="cc4" from="Microsoft" modified="false" />Whether or not to show command-specific dialog boxes or message boxes to the user. </param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to assign using the command. Not applicable for all commands.</param>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling <see cref="M:System.Windows.Forms.HtmlDocument.Focus" /> will set focus on the <see cref="T:System.Windows.Forms.WebBrowser" /> control, if the control currently does not have focus. If the document is hosted inside of a FRAME, this method will put focus on that FRAME within the FRAMESET. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets user input focus on the current document.</para>
        </summary>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public bool Focused { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the document has user input focus. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs before focus is given to the document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Drawing.Color" /> <see cref="T:System.Drawing.Color" /> type in the dnprdnshort supports an Alpha value, but the HTML DOM does not. Therefore, Alpha will have no effect when assigned to this property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text color for the document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Forms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Forms { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An HTML document may have one or more FORM elements with input fields for submitting data back to a server. </para>
          <para>You can programmatically submit a FORM by obtaining its <see cref="T:System.Windows.Forms.HtmlElement" /> and calling its Submit method using the <see cref="Overload:System.Windows.Forms.HtmlElement.InvokeMember" /> method.</para>
          <para>To add a new FORM to a document, you can either create a new FORM tag as a string, and assign it to the <see cref="P:System.Windows.Forms.HtmlElement.InnerHtml" /> property of an element previously added to the HTML DOM; or you can use the <see cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" /> method, set its properties using <see cref="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />, and add it as a child of an existing element using <see cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a collection of all of the &lt;FORM&gt; elements in the document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementById (string id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If there are multiple elements in the document with the same ID value, <see cref="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" /> will return the first one it finds.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves a single <see cref="T:System.Windows.Forms.HtmlElement" /> using the element's ID attribute as a search key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the first object with the same ID attribute as the specified value, or null if the <paramref name="id" /> cannot be found. </para>
        </returns>
        <param name="id">
          <attribution license="cc4" from="Microsoft" modified="false" />The ID attribute of the element to retrieve.</param>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" /> uses client coordinates, in which the upper-left corner of the document is assigned the value (0,0). Client coordinates for the current position of the cursor can be obtained using the <see cref="P:System.Windows.Forms.HtmlWindow.Position" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the HTML element located at the specified client coordinates.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.HtmlElement" /> at the specified screen location in the document.</para>
        </returns>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />The x,y position of the element on the screen, relative to the top-left corner of the document. </param>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieve a collection of elements with the specified HTML tag.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The collection of elements who tag name is equal to the <paramref name="tagName" /> argument.</para>
        </returns>
        <param name="tagName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the HTML tag for the <see cref="T:System.Windows.Forms.HtmlElement" /> objects you want to retrieve.</param>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the hash code for this object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Int32" /> representing an in-memory hash of this object.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Images { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Windows.Forms.HtmlDocument.Images" /> returns a collection of <see cref="T:System.Windows.Forms.HtmlElement" /> objects. To access attributes, such as ALT and SRC, that are not directly exposed by <see cref="T:System.Windows.Forms.HtmlElement" />, use the <see cref="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" /> method.</para>
          <para>To add a new image to a document, either create a new IMG tag as a string, and assign it to the <see cref="P:System.Windows.Forms.HtmlElement.InnerHtml" /> property of an element previously added to the HTML DOM; or use the <see cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" /> method, set its properties using <see cref="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />, and add it as a child of an existing element using <see cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a collection of all image tags in the document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The underlying type of the object returned by <see cref="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" /> will vary. If the called Active Scripting function returns scalar data, such as a string or an integer, it will be returned as a string. If it returns a script-based object, such as an object created using JScript or VBScript's new operator, it will be of type Object. (You can make calls on such objects by calling <see cref="M:System.Object.GetType" /> and using <see cref="Overload:System.Type.InvokeMember" />.) If it returns an HTML DOM element, such as a DIV or a TABLE, it will be of type Object; if you have added a project reference to MSHTML.DLL, however, it will be cast to its specific unmanaged DOM type.</para>
          <para>You may call any function written in any Active Scripting language installed on the user's computer, including JScript and VBScript. </para>
          <para>The <see cref="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" /> will do nothing if the user has explicitly turned off script execution in Internet Explorer, or if the current security configuration for the Web page does not allow it. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Executes an Active Scripting function defined in an HTML page.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The object returned by the Active Scripting call. </para>
        </returns>
        <param name="scriptName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the script method to invoke.</param>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, object[] args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The underlying type of the object returned by <see cref="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])" /> will vary. If the called Active Scripting function returns scalar data, such as a string or an integer, it will be returned as a string. If it returns a script-based object, such as an object created using JScript or VBScript's new operator, it will be of type Object. (You can make calls on such objects by calling <see cref="M:System.Object.GetType" /> and using <see cref="Overload:System.Type.InvokeMember" />.) If it returns an HTML DOM element, such as a DIV or a TABLE, it will be of type Object; if you have added a project reference to MSHTML.DLL, however, it will be cast to its specific unmanaged DOM type.</para>
          <para>You may call any function written in any Active Scripting language installed on the user's machine, including JScript and VBScript. </para>
          <para>This method will do nothing if the user has explicitly turned off script execution in Internet Explorer, or if the current security configuration for the Web page does not allow it.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Executes an Active Scripting function defined in an HTML page.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The object returned by the Active Scripting call. </para>
        </returns>
        <param name="scriptName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the script method to invoke.</param>
        <param name="args">
          <attribution license="cc4" from="Microsoft" modified="false" />The arguments to pass to the script method. </param>
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Drawing.Color" /> type in the dnprdnshort supports an Alpha value, but the HTML DOM does not. Therefore, Alpha will have no effect when assigned to this property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the color of hyperlinks.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Links { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This collection will contain all links created using the A, LINK, and AREA tags in HTML. </para>
          <para>The <see cref="T:System.Windows.Forms.HtmlElement" /> objects contained within this collection encapsulate the unmanaged IHTMLLinkElement interface. To access the properties of the underlying interface safely, use the <see cref="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a list of all the hyperlinks within this HTML document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs while focus is leaving a control.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.HtmlDocument.MouseDown" /> event occurs before the <see cref="E:System.Windows.Forms.HtmlDocument.Click" /> event. </para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user clicks the left mouse button.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse is no longer hovering over the document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse is moved over the document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse is moved over the document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user releases the left mouse button.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether the specified <see cref="T:System.Windows.Forms.HtmlDocument" /> instances represent the same value. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified instances are equal; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first instance to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second instance to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value that indicates whether the specified <see cref="T:System.Windows.Forms.HtmlDocument" /> instances do not represent the same value. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified instances are not equal; otherwise, false.</para>
        </returns>
        <param name="left">
          <attribution license="cc4" from="Microsoft" modified="false" />The first instance to compare.</param>
        <param name="right">
          <attribution license="cc4" from="Microsoft" modified="false" />The second instance to compare.</param>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replaceInHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" /> will clear the previous loaded document, including any associated state, such as variables. It will not cause navigation events in <see cref="T:System.Windows.Forms.WebBrowser" /> to be raised.</para>
          <para>
            <see cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" /> always creates a new document in the current window. To open a document in a new window, use the <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> method on the <see cref="T:System.Windows.Forms.HtmlWindow" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a new <see cref="T:System.Windows.Forms.HtmlDocument" /> to use with the <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" /> method.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new document for writing.</para>
        </returns>
        <param name="replaceInHistory">
          <attribution license="cc4" from="Microsoft" modified="false" />Whether the new window's navigation should replace the previous element in the navigation history of the DOM. </param>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Windows.Forms.HtmlDocument.RightToLeft" /> will not have any value unless it has been set explicitly, either in code or in HTML.</para>
          <para>Unlike the <see cref="P:System.Windows.Forms.HtmlDocument.RightToLeft" /> property on Windows Forms controls, <see cref="P:System.Windows.Forms.HtmlDocument.RightToLeft" /> on the managed HTML DOM will not affect the direction of Latin text.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the direction of text in the current document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Stop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The loading of a Web page will halt if program code calls the <see cref="M:System.Windows.Forms.WebBrowser.Stop" /> method of the <see cref="T:System.Windows.Forms.WebBrowser" /> control. Navigation failures caused by network outages or malfunctioning Web sites will not cause <see cref="E:System.Windows.Forms.HtmlDocument.Stop" /> to occur. </para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when navigation to another Web page is halted.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Windows.Forms.HtmlDocument.Title" /> property to identify the document by way of a human-readable name.</para>
          <para>Changes to this property will also reflect in the <see cref="P:System.Windows.Forms.WebBrowser.DocumentTitle" /> property of the <see cref="T:System.Windows.Forms.WebBrowser" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text value of the &lt;TITLE&gt; tag in the current HTML document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is read-only. To navigate to a new document, use the <see cref="P:System.Windows.Forms.WebBrowser.Url" /> property on the <see cref="T:System.Windows.Forms.WebBrowser" /> control. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the URL describing the location of this document. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Color type in the dnprdnshort supports an Alpha value, but the HTML DOM does not. Therefore, Alpha will have no effect when assigned to this property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the Color of links to HTML pages that the user has already visited. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Window { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All HTML documents have an HTML DOM object called a window, which can be used to manipulate the screen size of the document and open new windows, as well as access other important objects, such as an <see cref="T:System.Windows.Forms.HtmlHistory" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Windows.Forms.HtmlWindow" /> associated with this document.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>All calls to <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" /> should be preceded by a call to <see cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />, which will clear the current document and all of its variables. Your calls to <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" /> will create a new HTML document in its place. To change only a specific portion of the document, obtain the appropriate <see cref="T:System.Windows.Forms.HtmlElement" /> and set its <see cref="P:System.Windows.Forms.HtmlElement.InnerHtml" /> property. </para>
          <para>It is recommended that you write an entire valid HTML document using the <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" /> method, including HTML and BODY tags. However, if you write just HTML elements, the Document Object Model (DOM) will supply these elements for you. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a new HTML page.</para>
        </summary>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The HTML text to write into the document.</param>
      </Docs>
    </Member>
  </Members>
</Type>