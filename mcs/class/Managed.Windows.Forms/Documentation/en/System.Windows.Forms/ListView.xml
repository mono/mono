<?xml version="1.0" encoding="utf-8"?>
<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>A <see cref="T:System.Windows.Forms.ListView" /> control allows you to display a list of items with item text and, optionally, an icon to identify the type of item. For example, the Windows Explorer list of files is similar in appearance to a <see cref="T:System.Windows.Forms.ListView" /> control. It displays a list of the files and folders currently selected in the tree. Each file and folder displays an icon associated with it to help identify the type of file or folder. The <see cref="T:System.Windows.Forms.ListViewItem" /> class represents an item within a <see cref="T:System.Windows.Forms.ListView" /> control. The items that are displayed in the list can be shown in one of five different views. Items can be displayed as large icons, as small icons, or as small icons in a vertical list. Items can also have subitems which contain information that is related to the parent item. The details view allows you to display the item and its subitems in a grid with column headers that identify the information being displayed in a subitem. The tile view, which has limited availability as described below, allows you to display the item and its subitems as a tile that contains a large icon next to the textual information. <see cref="T:System.Windows.Forms.ListView" /> supports single or multiple selection. The multiple selection feature lets the user select from a list of items in a way similar to a <see cref="T:System.Windows.Forms.ListBox" /> control. Additionally, the user can activate selected items to perform a task. For example, you could use a <see cref="T:System.Windows.Forms.ListView" /> control to display a list of files that the application can then open and utilize. The user can select the files to open and then double-click them to activate the items and open the files in the application. The <see cref="T:System.Windows.Forms.ListView" /> can also display check boxes, using the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property, to allow the user to check the items that they want to perform an action on. You can use the <see cref="T:System.Windows.Forms.ListView" /> control in a variety of ways. The control can be used to display information from an application, a database, or a text file. The <see cref="T:System.Windows.Forms.ListView" /> can also be used to obtain information from the user, such as selecting a set of files to process.</para>
      <para>
        <see cref="T:System.Windows.Forms.ListView" /> provides a large number of properties that provide flexibility in appearance and behavior. The <see cref="P:System.Windows.Forms.ListView.View" /> property allows you to change the way in which items are displayed. The <see cref="P:System.Windows.Forms.ListView.LargeImageList" />, <see cref="P:System.Windows.Forms.ListView.SmallImageList" />, and <see cref="P:System.Windows.Forms.ListView.StateImageList" /> properties allow you to specify the <see cref="T:System.Windows.Forms.ImageList" /> objects that contain the images displayed for items and, in the case of the <see cref="P:System.Windows.Forms.ListView.StateImageList" />, the check boxes that are displayed when the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property is set to true. To determine which items are checked, you can use the <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> property to access the <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> collection. The <see cref="P:System.Windows.Forms.ListView.Columns" /> property allows access to the <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />, which stores the column headers that are displayed when the <see cref="P:System.Windows.Forms.ListView.View" /> property of the control is set to <see cref="F:System.Windows.Forms.View.Details" />. Items are added and removed from the <see cref="T:System.Windows.Forms.ListView" /> through the <see cref="P:System.Windows.Forms.ListView.Items" /> property. The <see cref="P:System.Windows.Forms.ListView.Items" /> property allows you to access the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> of the control, which provides methods for manipulating the items in the control. If you want to allow the user to edit the text of an item, you can use the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property. When your control contains a large number of items, it is often easier for the user to see them in a sorted list. You can use the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property to sort the items alphabetically. You can also completely customize the appearance of a <see cref="T:System.Windows.Forms.ListView" /> control. To do this, set the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property to true and handle one or more of the following events: <see cref="E:System.Windows.Forms.ListView.DrawItem" />, <see cref="E:System.Windows.Forms.ListView.DrawSubItem" />, <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />.</para>
      <para>Many of the properties of the <see cref="T:System.Windows.Forms.ListView" /> control are used when the <see cref="P:System.Windows.Forms.ListView.View" /> property of the control is set to <see cref="F:System.Windows.Forms.View.Details" />. The <see cref="P:System.Windows.Forms.ListView.AllowColumnReorder" /> property allows the user of your <see cref="T:System.Windows.Forms.ListView" /> control to reconfigure the order of columns at run time. The <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> property allows an item and its subitems to be selected instead of just the item. To display gridlines in the details view to identify the boundaries of items and subitems in the <see cref="T:System.Windows.Forms.ListView" />, you can use the <see cref="P:System.Windows.Forms.ListView.GridLines" /> property. The <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property allows you to specify the type of column headers to display.</para>
      <para>A <see cref="T:System.Windows.Forms.ListView" /> control can operate in virtual mode, where <see cref="T:System.Windows.Forms.ListViewItem" /> objects are generated dynamically instead of being stored in the <see cref="P:System.Windows.Forms.ListView.Items" /> collection. This can be useful for dealing with very large lists or lists whose contents frequently change. To enable Virtual mode, set the <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> property to true and handle the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />, <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" />, and <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> events.</para>
      <para>In addition to the many properties that are available for a <see cref="T:System.Windows.Forms.ListView" /> control, there are methods and events that your application can use to provide additional capabilities to the <see cref="T:System.Windows.Forms.ListView" />. The <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> and <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> methods allow you to improve performance when you add many items to a <see cref="T:System.Windows.Forms.ListView" /> by preventing the control from repainting every time that an item is added. If your <see cref="T:System.Windows.Forms.ListView" /> control is displaying items and subitems, you may want to provide functionality when the user right-clicks a subitem. To determine the item whose subitem is being clicked, you can use the <see cref="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" /> method. When performing validation of the items after the user has edited them, you may want to display a specific item to the user to change. The <see cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" /> method can be called to ensure that the specific item is in the visible area of the control.</para>
      <para>If the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property set to true, you can perform tasks such as validating the text being edited before and after the text changed by creating an event handler for the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> and <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> events. To perform tasks such as opening a file or displaying a dialog box to edit an item displayed in a <see cref="T:System.Windows.Forms.ListView" />, you can create an event handler for the <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event. If you allow the user to sort the items in a <see cref="T:System.Windows.Forms.ListView" /> when they click a column header, you can create an event handler for the <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event to perform the sorting. When the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property is set to true, you can determine when a change in an item's check state has occurred by handling the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event.</para>
      <para>You can also set a background image for the <see cref="T:System.Windows.Forms.ListView" /> with the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property. Your application must have the <see cref="T:System.STAThreadAttribute" /> on its Main method to correctly display the background image for the <see cref="T:System.Windows.Forms.ListView" /> control. In addition, if a <see cref="T:System.Windows.Forms.ListView" /> control with a background image is hosted in Internet Explorer, specify comctl32.dll version 6.0 as a dependent assembly in the application manifest file to ensure the background image is property displayed.</para>
      <block subset="none" type="note">
        <para>Setting the <see cref="P:System.Windows.Forms.Control.Cursor" /> property for a <see cref="T:System.Windows.Forms.ListView" /> control has no affect on the appearance of the cursor in dnprdnshort versions 1.1 and earlier.</para>
      </block>
      <para>Windows XP and Windows Server 2003 provide three features that enhance the <see cref="T:System.Windows.Forms.ListView" /> control when your application calls the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method: tile view, grouping, and the insertion mark. </para>
      <para>The tile view lets you balance graphical and textual information by displaying item and subitem text next to large icons. Set the <see cref="P:System.Windows.Forms.ListView.View" /> property to <see cref="F:System.Windows.Forms.View.Tile" /> to enable this behavior. </para>
      <para>The grouping feature lets you visually group items into related categories. Use the <see cref="P:System.Windows.Forms.ListView.Groups" /> property to add <see cref="T:System.Windows.Forms.ListViewGroup" /> objects to the <see cref="T:System.Windows.Forms.ListView" /> control when you want to enable this feature. To temporarily disable the feature, set the <see cref="P:System.Windows.Forms.ListView.ShowGroups" /> property to false. </para>
      <para>The insertion mark feature lets you provide drag-and-drop item repositioning with visual feedback to indicate drop locations. Use the <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> object retrieved through the <see cref="P:System.Windows.Forms.ListView.InsertionMark" /> property to display the insertion mark. </para>
      <para>These features are available only under Windows XP and Windows Server 2003. On earlier operating systems, the code that relate to these features has no effect, the tile view appears as the large icon view, and the insertion mark and groups do not display. In some cases, you might want to include code that determines whether these features are available, and provide alternate functionality when they are unavailable. These features are provided by the same library that provides the operating system themes feature. To check for the availability of this library, call the <see cref="M:System.Windows.Forms.FeatureSupport.IsPresent(System.Object)" /> method overload and pass in the <see cref="F:System.Windows.Forms.OSFeature.Themes" /> value.</para>
      <para>The following table shows some of the <see cref="T:System.Windows.Forms.ListView" /> members and the views they are valid in.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>ListView member</para>
            </term>
            <description>
              <para>View</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="P:System.Windows.Forms.ListView.Alignment" /> property</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" /> </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Windows.Forms.ListView.AutoArrange" /> property</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> method</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.Details" /> </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Windows.Forms.ListView.Columns" /> property</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.Details" /> or <see cref="F:System.Windows.Forms.View.Tile" /> </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.Details" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> method</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.Details" />, <see cref="F:System.Windows.Forms.View.List" />, or <see cref="F:System.Windows.Forms.View.Tile" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="Overload:System.Windows.Forms.ListView.FindNearestItem" /> method</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" /> method</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.Details" /> or <see cref="F:System.Windows.Forms.View.Tile" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Windows.Forms.ListView.Groups" /> property</para>
          </term>
          <description>
            <para>All views except <see cref="F:System.Windows.Forms.View.List" /></para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.Details" />
            </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Windows.Forms.ListView.InsertionMark" /> property</para>
          </term>
          <description>
            <para>
              <see cref="F:System.Windows.Forms.View.LargeIcon" />, <see cref="F:System.Windows.Forms.View.SmallIcon" />, or <see cref="F:System.Windows.Forms.View.Tile" /></para>
          </description>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a Windows list view control, which displays a collection of items that can be displayed using one of four different views. </para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ListView" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ItemActivation.Standard)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.Activation" /> property allows you to specify how the user will activate an item in the <see cref="T:System.Windows.Forms.ListView" /> control. Activating an item in a <see cref="T:System.Windows.Forms.ListView" /> differs from just selecting an item. When an item is activated, an action is typically performed in an event handler for the <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event. For example, when an item is activated you might open a file or display a dialog box that allows the item to be edited. Typically, an item is double-clicked by the user to activate it. If the <see cref="P:System.Windows.Forms.ListView.Activation" /> property is set to <see cref="F:System.Windows.Forms.ItemActivation.OneClick" />, clicking the item one time activates it. Setting the <see cref="P:System.Windows.Forms.ListView.Activation" /> property to <see cref="F:System.Windows.Forms.ItemActivation.TwoClick" /> differs from the standard double-click because the two clicks can have any duration between them.</para>
          <block subset="none" type="note">
            <para>If the <see cref="P:System.Windows.Forms.ListView.Activation" /> property is set to <see cref="F:System.Windows.Forms.ItemActivation.OneClick" /> or <see cref="F:System.Windows.Forms.ItemActivation.TwoClick" />, label editing will not be allowed regardless of the value of the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the type of action the user must take to activate an item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> event occurs when the user finishes modifying the text for an item. The new string that the user types for the item is passed to the event, and the event handler can reject the change. If the event handler rejects the change, the text reverts to the text as it was before the user began editing the item. </para>
          <block subset="none" type="note">
            <para>Because the <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> event takes place before the label edit is committed, calling the <see cref="M:System.Windows.Forms.ListView.Sort" /> method in a handler for this event will sort the item using the original value.</para>
          </block>
          <para>In order for the <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> event to be raised, the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control must be set to true. </para>
          <para>You can create an event handler for the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> event to perform tasks before the user edits the text of an item.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the label for an item is edited by the user.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ListViewAlignment.Top)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.Alignment" /> property only affects alignment when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" /> or <see cref="F:System.Windows.Forms.View.SmallIcon" />.</para>
          <block subset="none" type="note">
            <para>This property has no effect with the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.List" />.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the alignment of items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Setting the value of the <see cref="P:System.Windows.Forms.ListView.AllowColumnReorder" /> property has no effect unless the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />. You can use this property to allow users to reposition columns in the control at run time. When the <see cref="P:System.Windows.Forms.ListView.AllowColumnReorder" /> property is set to true, users can position the columns in the control to display the item and its subitems in a way that meets their needs within your application.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the user can drag column headers to reorder columns in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" /> method is only useful when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" /> or <see cref="F:System.Windows.Forms.View.SmallIcon" />. Calling this version of the <see cref="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" /> method arranges the items based on the value of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property. To cause the items to be aligned based on a value that differs from that of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property, use the other version of the <see cref="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Arranges items in the control when they are displayed as icons based on the value of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" /> method is only useful when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" /> or <see cref="F:System.Windows.Forms.View.SmallIcon" />. This version of the <see cref="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" /> method arranges the icons in the <see cref="T:System.Windows.Forms.ListView" /> based on the <see cref="T:System.Windows.Forms.ListViewAlignment" /> value specified in the <paramref name="value" /> parameter. Calling this method does not change the value of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property of the control. This method is used to arrange icons on the control using a different value than that of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property. To cause the items to be aligned based on the value of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property, use the other version of the <see cref="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Arranges items in the control when they are displayed as icons with a specified alignment setting.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> values. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.AutoArrange" /> property only arranges items in the <see cref="T:System.Windows.Forms.ListView" /> control when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" /> or <see cref="F:System.Windows.Forms.View.SmallIcon" />. To change the alignment of items in the <see cref="T:System.Windows.Forms.ListView" /> control, use the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property. You can use <see cref="P:System.Windows.Forms.ListView.AutoArrange" /> to ensure that all items in your <see cref="T:System.Windows.Forms.ListView" /> control are automatically arranged to avoid overlapping at run time.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets whether icons are automatically kept arranged.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling this method is only effective once the <see cref="T:System.Windows.Forms.ListView" /> and containing <see cref="T:System.Windows.Forms.Form" /> have been constructed, and the <see cref="T:System.Windows.Forms.ListView" /> column headers and columns are populated with items. If new items are added to the <see cref="T:System.Windows.Forms.ListView" />, the columns will not resize unless <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> is called again.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resizes the width of the given column as indicated by the resize style.</para>
        </summary>
        <param name="columnIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the column to resize.</param>
        <param name="headerAutoResize">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> values.</param>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling this method is only effective once the <see cref="T:System.Windows.Forms.ListView" /> and containing <see cref="T:System.Windows.Forms.Form" /> have been constructed, and the <see cref="T:System.Windows.Forms.ListView" /> column headers and columns are populated with items. If new items are added to the <see cref="T:System.Windows.Forms.ListView" />, the columns will not resize unless <see cref="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> is called again.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resizes the width of the columns as indicated by the resize style.</para>
        </summary>
        <param name="headerAutoResize">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> values.</param>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the background color.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(State=System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(Browsable=False)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property has no effect on the layout of the background image of the <see cref="T:System.Windows.Forms.ListView" /> control, therefore it is not shown in the designer or by IntelliSense. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an <see cref="T:System.Windows.Forms.ImageLayout" /> value.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> property changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.BackgroundImageTiled" /> property returns false if an image is not set.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the background image of the <see cref="T:System.Windows.Forms.ListView" /> should be tiled.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> event occurs when the user starts modifying the text for an item. If the event handler cancels this event, the user cannot edit the text. You can use this event to prevent the user from editing specific items in the <see cref="T:System.Windows.Forms.ListView" /> control. If the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to false, the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> event is not raised; all user attempts to edit item labels are automatically rejected.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user starts editing the label of an item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The preferred way to add multiple items to a <see cref="T:System.Windows.Forms.ListView" /> is to use the <see cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" /> method of the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> (accessed through the <see cref="P:System.Windows.Forms.ListView.Items" /> property of the <see cref="T:System.Windows.Forms.ListView" />). This enables you to add an array of items to the list in a single operation. However, if you want to add items one at a time using the <see cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" /> method of the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> class, you can use the <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> method to prevent the control from repainting the <see cref="T:System.Windows.Forms.ListView" /> every time that an item is added. When you have completed the task of adding items to the control, call the <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> method to enable the <see cref="T:System.Windows.Forms.ListView" /> to repaint. This way of adding items can prevent flickered drawing of the <see cref="T:System.Windows.Forms.ListView" /> when lots of items are being added to the control.</para>
          <para>If <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> is called more than once, <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> must be called an equivalent number of times. Until the last call to <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> the <see cref="T:System.Windows.Forms.ListView" /> will not repaint. Other than this, multiple calls to <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> have no effect.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Prevents the control from drawing until the <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> method is called.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.BorderStyle.Fixed3D)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use the <see cref="P:System.Windows.Forms.ListView.BorderStyle" /> property to change the border style of the <see cref="T:System.Windows.Forms.ListView" /> control to match the border style settings of other controls on the form. For example, if none of the other controls on your form displays a border, you can set the <see cref="P:System.Windows.Forms.ListView.BorderStyle" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control to <see cref="F:System.Windows.Forms.BorderStyle.None" /> to match the other controls.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the border style of the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event only occurs when <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is true. Handling this event allows the <see cref="T:System.Windows.Forms.ListView" /> to update the item information held in the cache so that it is readily available. This can improve performance on large lists, or lists whose items are expensive to calculate.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the contents of the display area for a <see cref="T:System.Windows.Forms.ListView" /> in virtual mode has changed, and the <see cref="T:System.Windows.Forms.ListView" /> determines that a new range of items is needed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property allows you to display a check box next to each item in the list. This enables your application to display a list of items (and subitems if the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to View.Details) that the user can select by clicking the check box. The <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property offers a way to select multiple items in the <see cref="T:System.Windows.Forms.ListView" /> control without using the CTRL key. Depending on your application, using check boxes to select items rather than the standard multiple selection method may be easier for the user. Even if the <see cref="P:System.Windows.Forms.ListView.MultiSelect" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to false, you can still display checkboxes and provide multiple selection capabilities to the user. This feature can be useful if you do not want multiple items to be selected yet still want to allow the user to choose multiple items from the list to perform an operation within your application.</para>
          <para>To determine when an item has been checked, create an event handler for the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event. To get all the items that are checked in the <see cref="T:System.Windows.Forms.ListView" />, use the <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> property to access the <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> for the control. To get the indexes of all items that are checked in the <see cref="T:System.Windows.Forms.ListView" />, use the <see cref="P:System.Windows.Forms.ListView.CheckedIndices" /> property.</para>
          <para>If an <see cref="T:System.Windows.Forms.ImageList" /> is specified in the <see cref="P:System.Windows.Forms.ListView.StateImageList" /> property, the images at index positions 0 and 1 in the <see cref="T:System.Windows.Forms.ImageList" /> are displayed instead of the check box. The image at index position 0 is displayed instead of the unchecked check box, and the image at index position 1 is displayed instead of the checked check box.</para>
          <block subset="none" type="note">
            <para>When you set this property to true, the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event occurs.</para>
            <para>Check boxes are not displayed when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Tile" />.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether a check box appears next to each item in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is only useful when the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to true. The <see cref="P:System.Windows.Forms.ListView.CheckedIndices" /> property returns a collection that contains the index positions in the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> of all items that are checked in the control. For more information about how to manipulate the items in the collection, see <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />.</para>
          <para>If you want to obtain a collection of the items that are checked in the <see cref="T:System.Windows.Forms.ListView" /> control, instead of the index positions of the items that are checked, use the <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the indexes of the currently checked items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is only useful when the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to true. The <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> property returns a collection that contains all items that are checked in the control. For more information about how to manipulate the items in the collection, see <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />.</para>
          <para>If you want to obtain a collection of the index positions within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> of the items that are checked in the <see cref="T:System.Windows.Forms.ListView" /> control, instead of the items that are checked, use the <see cref="P:System.Windows.Forms.ListView.CheckedIndices" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the currently checked items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use this method to remove all items and columns from the <see cref="T:System.Windows.Forms.ListView" /> control without having to call the individual Clear methods from the <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" /> and <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> classes.</para>
          <block subset="none" type="note">
            <para>The <see cref="M:System.Windows.Forms.ListView.Clear" /> method does not clear <see cref="P:System.Windows.Forms.ListView.Groups" /> specified for the <see cref="T:System.Windows.Forms.ListView" /> control. To clear <see cref="P:System.Windows.Forms.ListView.Groups" /> call <see cref="M:System.Windows.Forms.ListViewGroupCollection.Clear" />.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes all items and columns from the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event occurs when the user clicks one of the column headers in a details view of the items in a <see cref="T:System.Windows.Forms.ListView" /> control (when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />). The <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event is typically handled to sort the items in the <see cref="T:System.Windows.Forms.ListView" /> using the clicked column as the column to sort by.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user clicks a column header within the list view control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> event is a cancelable event and can be canceled by handling the event and setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property to true. However, if the event is canceled, the <see cref="P:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex" /> of the <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" /> will not change to the <see cref="P:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex" /> value.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the column header order is changed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.Columns" /> property returns a collection that contains the <see cref="T:System.Windows.Forms.ColumnHeader" /> objects that are displayed in the <see cref="T:System.Windows.Forms.ListView" /> control. <see cref="T:System.Windows.Forms.ColumnHeader" /> objects define the columns that are displayed in the <see cref="T:System.Windows.Forms.ListView" /> control when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />. Each column is used to display subitem information for each item in the <see cref="T:System.Windows.Forms.ListView" />. For more information about how to manipulate the items in the collection, see <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />.</para>
          <block subset="none" type="note">
            <para>If your <see cref="T:System.Windows.Forms.ListView" /> control does not have any column headers specified and you set the <see cref="P:System.Windows.Forms.ListView.View" /> property to <see cref="F:System.Windows.Forms.View.Details" />, the <see cref="T:System.Windows.Forms.ListView" /> control will not display any items.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the collection of all column headers that appear in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event will not occur if the column width change is canceled in the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> event</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs after the width of a column is successfully changed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event allows you to check the new column width with the <see cref="P:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth" /> property, and cancel the event if you choose by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property to true.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the width of a column is changing.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a handle for the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is not relevant for this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is not relevant for this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default size of the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call the <see cref="Overload:System.Windows.Forms.ListView.Dispose" /> method when the component is no longer needed. This method removes the component from its container (if the component has a site) and triggers the dispose event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ListView" /> and optionally releases the managed resources. </para>
        </summary>
        <param name="disposing">
          <attribution license="cc4" from="Microsoft" modified="false" />true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event lets you customize the appearance of a <see cref="T:System.Windows.Forms.ListView" /> control using owner drawing. It is raised only when the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to true and the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />. This event can occur for each column header in the control. For more information on owner drawing, see the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property reference topic.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the details view of a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to true. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event lets you customize the appearance of a <see cref="T:System.Windows.Forms.ListView" /> control using owner drawing. It is raised only when the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to true. For more information about owner drawing, see the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property reference topic.</para>
          <para>The <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event can occur for each <see cref="T:System.Windows.Forms.ListView" /> item. When the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />, the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> and <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> events also occur. In this case, you can handle the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event to draw elements common to all items, such as the background, and handle the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event to draw elements for individual subitems, such as text values. You can also draw all items in the <see cref="T:System.Windows.Forms.ListView" /> control using only one of the two events, although this may be less convenient. To draw column headers in the details view, you must handle the <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> event.</para>
          <block subset="none" type="note">
            <para>Because of a bug in the underlying Win32 control, the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event occurs without accompanying <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> events once per row in the details view when the mouse pointer moves over the row, causing anything painted in a <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event handler to be painted over by a custom background drawn in a <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event handler. See the example in the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> reference topic for a workaround that invalidates each row when the extra event occurs. An alternative workaround is to put all your custom drawing code in a <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event handler and paint the background for the entire item (including subitems) only when the <see cref="P:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex" /> value is 0. </para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to true.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event lets you customize the appearance of a <see cref="T:System.Windows.Forms.ListView" /> control using owner drawing. It is raised only when the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to true and the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />. For more information on owner drawing, see the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property reference topic.</para>
          <block subset="none" type="note">
            <para>Subitem information typically appears in the tile view as well as the details view, but in the tile view, it must be drawn in a handler for the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event.</para>
          </block>
          <para>The <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event can occur for each <see cref="T:System.Windows.Forms.ListView" /> subitem. You can handle the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event to draw elements common to all subitems, such as the background, and handle the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event to draw elements for individual subitems, such as text values. You can also draw all items in the <see cref="T:System.Windows.Forms.ListView" /> control using only one of the two events, although this may be less convenient. To draw column headers in the details view, you must handle the <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> event.</para>
          <block subset="none" type="note">
            <para>The <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event does not occur for any subitems for which no <see cref="T:System.Windows.Forms.ColumnHeader" /> object has been added to the <see cref="P:System.Windows.Forms.ListView.Columns" /> collection. Note also that the first subitem of each <see cref="T:System.Windows.Forms.ListViewItem" /> object represents the parent item itself, and is displayed in the first column.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the details view of a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to true.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The preferred way to add multiple items to a <see cref="T:System.Windows.Forms.ListView" /> is to use the <see cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" /> method of the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> (accessed through the <see cref="P:System.Windows.Forms.ListView.Items" /> property of the <see cref="T:System.Windows.Forms.ListView" />). This enables you to add an array of items to the list in a single operation. However, if you want to add items one at a time using the <see cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" /> method of the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> class, you can use the <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> method to prevent the control from repainting the <see cref="T:System.Windows.Forms.ListView" /> each time an item is added. Once you have completed the task of adding items to the control, call the <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> method to enable the <see cref="T:System.Windows.Forms.ListView" /> to repaint. This way of adding items can prevent flickered drawing of the <see cref="T:System.Windows.Forms.ListView" /> when a large number of items are being added to the control.</para>
          <para>If <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> is called more than once, <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> must be called an equivalent number of times. Until the last call to <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> the <see cref="T:System.Windows.Forms.ListView" /> will not repaint. Other than this, multiple calls to <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> have no effect.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Resumes drawing of the list view control after drawing is suspended by the <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> method.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use this method to ensure that a specific item is visible within the <see cref="T:System.Windows.Forms.ListView" /> control. When performing validation on the items in a <see cref="T:System.Windows.Forms.ListView" />, you can call the <see cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" /> method to ensure that an item that failed validation is displayed in the <see cref="T:System.Windows.Forms.ListView" /> control to allow the user to perform changes on the item. If the item that you want to ensure is visible is located above the viewable region of the <see cref="T:System.Windows.Forms.ListView" /> control, calling the <see cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" /> method will scroll the contents of the control until it is the first item in the viewable area of the control. If the item is below the viewable region of the <see cref="T:System.Windows.Forms.ListView" /> control, calling the <see cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" /> method will scroll the contents of the <see cref="T:System.Windows.Forms.ListView" /> control until the item is the last item in the viewable area of the control.</para>
          <para>To determine if an item is located at the top of the display area of a <see cref="T:System.Windows.Forms.ListView" /> control, use the <see cref="P:System.Windows.Forms.ListView.TopItem" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.</para>
        </summary>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the item to scroll into view. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The search is case-insensitive.</para>
          <para>The <paramref name="text" /> parameter can specify a substring of the desired matching text. In addition, this method will return the first item that starts with the specified text. For example, if a <see cref="T:System.Windows.Forms.ListView" /> contains two list items—the first item's text set to "angle bracket" and the second item's text set to "bracket"—a call to <see cref="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" /> passing <paramref name="brack" /> as the parameter will return the item whose text is "bracket".</para>
          <para>The <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> method returns null if the list is empty or there is no matching item.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to search for.</param>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The search is case-insensitive.</para>
          <para>The <paramref name="text" /> parameter can specify a substring of the desired matching text. In addition, this method will return the first item that starts with the specified text. For example, if a <see cref="T:System.Windows.Forms.ListView" /> contains two list items—the first item's text set to "angle bracket" and the second item's text set to "bracket"—a call to <see cref="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" /> passing "brack" as the parameter will return the item whose text is "bracket".</para>
          <para>The <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> method returns null if the list is empty or there is no matching item.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> or <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, if indicated, that begins with the specified text value. The search starts at the specified index.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to search for.</param>
        <param name="includeSubItemsInSearch">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include subitems in the search; otherwise, false. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the item at which to start the search.</param>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> method returns null if the list is empty or there is no matching item.</para>
          <para>The search is case-insensitive.</para>
          <para>The <paramref name="text" /> parameter can specify a substring of the desired matching text. This method will return the first item that starts with the specified text, unless false is passed in for <paramref name="isPrefixSearch" />. For example, if a <see cref="T:System.Windows.Forms.ListView" /> contains two list items—the first item's text set to "angle bracket" and the second item's text set to "bracket"—a call to <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> passing "brack" as the search text will return the item whose text is "bracket". If <paramref name="isPrefixSearch" /> is set to false, this call will return null.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> or <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, if indicated, that begins with the specified text value. The search starts at the specified index.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to search for.</param>
        <param name="includeSubItemsInSearch">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include subitems in the search; otherwise, false. </param>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The index of the item at which to start the search.</param>
        <param name="isPrefixSearch">
          <attribution license="cc4" from="Microsoft" modified="false" />true to allow partial matches; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Windows.Forms.ListView.FindNearestItem" /> method returns null if no item is found in the given direction. Identifying the nearest item can vary depending on the operating system the application is running on, and will affect the results of <see cref="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Finds the next item from the given point, searching in the specified direction</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.ListViewItem" /> that is closest to the given point, searching in the specified direction.</para>
        </returns>
        <param name="dir">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.SearchDirectionHint" /> values.</param>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />The point at which to begin searching.</param>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="Overload:System.Windows.Forms.ListView.FindNearestItem" /> method returns null if no item is found in the given direction. Identifying the nearest item can vary depending on the operating system the application is running on, and will affect the results of <see cref="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Finds the next item from the given x- and y-coordinates, searching in the specified direction. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.ListViewItem" /> that is closest to the given coordinates, searching in the specified direction.</para>
        </returns>
        <param name="searchDirection">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.SearchDirectionHint" /> values.</param>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate for the point at which to begin searching.</param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate for the point at which to begin searching.</param>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.FocusedItem" /> property returns the <see cref="T:System.Windows.Forms.ListViewItem" /> that represents the item currently displaying the focus rectangle for the <see cref="T:System.Windows.Forms.ListView" /> control. Because a <see cref="T:System.Windows.Forms.ListView" /> control has no directly editable areas other than the items it displays, when the <see cref="T:System.Windows.Forms.ListView" /> control has focus, an item within the <see cref="T:System.Windows.Forms.ListView" /> displays the focus reticle around its item text. Typically, the last selected item in the <see cref="T:System.Windows.Forms.ListView" /> control is the item with focus. Although an item may be the one displaying the focus reticle, it may not actually be a selected item in the <see cref="T:System.Windows.Forms.ListView" />. Use the <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> or <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> properties to obtain the selected items in the <see cref="T:System.Windows.Forms.ListView" /> control, the <see cref="P:System.Windows.Forms.ListView.FocusedItem" /> property is not necessarily selected. You can use the <see cref="P:System.Windows.Forms.ListView.FocusedItem" /> property to determine which item was last clicked in the <see cref="T:System.Windows.Forms.ListView" /> control, regardless of selection state.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the item in the control that currently has focus.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the foreground color.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> property has no effect unless the <see cref="P:System.Windows.Forms.ListView.View" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to <see cref="F:System.Windows.Forms.View.Details" />. The <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> property is typically used when a <see cref="T:System.Windows.Forms.ListView" /> displays items with many subitems and it is important to be able to see selected items when the item text is not visible due to horizontal scrolling of the control's contents.</para>
          <block subset="none" type="note">
            <para>When <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> is set to true, ToolTips for a <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" /> will not be shown; only the ToolTip for the parent <see cref="T:System.Windows.Forms.ListViewItem" /> is displayed.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether clicking an item selects all its subitems.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" /> method lets you determine which item is located at a specific location within the client region of the <see cref="T:System.Windows.Forms.ListView" /> control. You can use this method when the user clicks or right-clicks a subitem (when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to View.Details) and you want to determine which item owns the subitem that was clicked based on the mouse coordinates at the time the user clicked the mouse.</para>
          <block subset="none" type="note">
            <para>When the <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> property value is false, this method returns an item only when the specified location is within the bounds of the parent item (which is displayed in the first column when the control is in details mode). You must set the <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> property to true to retrieve an item with this method given a location within the bounds of a subitem. You can also use the <see cref="Overload:System.Windows.Forms.ListView.HitTest" /> method to retrieve detailed information about the item at a particular location.</para>
          </block>
          <para>To do drag-and-drop repositioning of items within a <see cref="T:System.Windows.Forms.ListView" />, you might want to use the <see cref="M:System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)" /> method rather than the <see cref="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" /> method. The <see cref="M:System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)" /> method finds the closest item regardless of where the mouse pointer is located. The <see cref="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" /> method, on the other hand, returns null if there is no item at the specified location.</para>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> class is supported only on Windows XP and Windows Server 2003 when your application calls the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the item at the specified location.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Windows.Forms.ListViewItem" /> that represents the item at the specified position. If there is no item at the specified location, the method returns null.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate of the location to search for an item (expressed in client coordinates). </param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate of the location to search for an item (expressed in client coordinates). </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The bounding rectangle returned by this version of the <see cref="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" /> method represents the entire item, including the icon, item text, and subitem text. To specify a specific portion of the item's bounding rectangle, use the other version of the <see cref="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the bounding rectangle for a specific item within the list view control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle of the specified <see cref="T:System.Windows.Forms.ListViewItem" />.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> whose bounding rectangle you want to return. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The bounding rectangle returned by this version of the <see cref="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" /> method represents only the section of the item specified in the <paramref name="portion" /> parameter. To return the bounding rectangle of the entire item, use the other version of the <see cref="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the specified portion of the bounding rectangle for a specific item within the list view control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle for the specified portion of the specified <see cref="T:System.Windows.Forms.ListViewItem" />.</para>
        </returns>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> whose bounding rectangle you want to return. </param>
        <param name="portion">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> values that represents a portion of the <see cref="T:System.Windows.Forms.ListViewItem" /> for which to retrieve the bounding rectangle. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.GridLines" /> property has no effect unless the <see cref="P:System.Windows.Forms.ListView.View" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to <see cref="F:System.Windows.Forms.View.Details" />. The <see cref="P:System.Windows.Forms.ListView.GridLines" /> property allows you to display lines to identify the rows and columns that are displayed in the <see cref="T:System.Windows.Forms.ListView" /> control when it displays items and their subitems. The grid lines that are displayed do not provide the ability to resize rows and columns as an application such as Microsoft Excel does. Only columns can be resized, if column headers are displayed, by moving the mouse pointer to the right side of the column to resize and then clicking and dragging until the column is the size you want. The grid lines feature is used to provide the user of the control with visible boundaries around items and subitems.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether grid lines appear between the rows and columns containing the items and subitems in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.ListView" /> grouping feature lets you create visual groups of logically related <see cref="T:System.Windows.Forms.ListView" /> items. Each group consists of a textual header followed by a horizontal line and the items assigned to that group. You can align the header text to the left, right, or center of the control. Any groups assigned to a <see cref="T:System.Windows.Forms.ListView" /> control appear whenever the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to a value other than <see cref="F:System.Windows.Forms.View.List" />.</para>
          <para>
            <see cref="T:System.Windows.Forms.ListView" /> groups help your users find the items they are looking for by separating the items into useful categories. You can create whatever categories you need. One typical approach is to group the items based on the way the list is sorted. For example, you can group the items by the initial letter of the item name when the list is sorted alphabetically or by subitems such as type or date when the list is sorted by clicking a column header in the details view. Windows Explorer uses this type of grouping.</para>
          <para>To use the grouping feature, add one or more <see cref="T:System.Windows.Forms.ListViewGroup" /> objects to the <see cref="P:System.Windows.Forms.ListView.Groups" /> collection of a <see cref="T:System.Windows.Forms.ListView" /> control. Set the group header text and header alignment in the <see cref="M:System.Windows.Forms.ListViewGroup.#ctor" /> constructor, or set them using the <see cref="P:System.Windows.Forms.ListViewGroup.Header" /> and <see cref="P:System.Windows.Forms.ListViewGroup.HeaderAlignment" /> properties.</para>
          <para>To temporarily disable the grouping feature, set the <see cref="P:System.Windows.Forms.ListView.ShowGroups" /> property to false.</para>
          <para>You can assign an item to a group by specifying the group in the <see cref="M:System.Windows.Forms.ListViewItem.#ctor" /> constructor, by setting the <see cref="P:System.Windows.Forms.ListViewItem.Group" /> property, or by directly adding the item to the <see cref="P:System.Windows.Forms.ListViewGroup.Items" /> collection of a group. All items should be assigned to groups before they are displayed. Any items that are not assigned to a group will appear in the default group, which has the header label "DefaultGroup{0}". The default group is not contained in the <see cref="P:System.Windows.Forms.ListView.Groups" /> collection, and cannot be altered. It is primarily useful in debugging to ensure that all items have been properly added to groups.</para>
          <para>An item can only be in one group at a time. You can change the group to which an item belongs by setting the <see cref="P:System.Windows.Forms.ListViewItem.Group" /> property at run time or by adding it to the <see cref="P:System.Windows.Forms.ListViewGroup.Items" /> collection of another group, which automatically removes it from the previous group.</para>
          <para>The insertion mark feature is disabled when using groups. This is because the grouping feature orders items by group membership, while the insertion mark feature is used with drag-and-drop repositioning in a <see cref="T:System.Windows.Forms.ListView" /> control that does not already order its items.</para>
          <para>
            <see cref="T:System.Windows.Forms.ListView" /> groups are available only on Windows XP and Windows Server 2003 when your application calls the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method. On earlier operating systems, any code relating to groups has no effect and the groups will not appear. As a result, any code that depends on the grouping feature might not work correctly. </para>
          <para>You might want to include code that determines whether the grouping feature is available, and provide alternate functionality when it is unavailable. For example, you might want to provide alternate sorting when running on operating systems that do not support sorting by group. </para>
          <para>The grouping feature is provided by the same library that provides the operating system themes feature. To check for the availability of this library, call the <see cref="M:System.Windows.Forms.FeatureSupport.IsPresent(System.Object)" /> method overload and pass in the <see cref="F:System.Windows.Forms.OSFeature.Themes" /> value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the collection of <see cref="T:System.Windows.Forms.ListViewGroup" /> objects assigned to the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.ColumnHeaderStyle.Clickable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property allows you to specify the type of column headers to display when the <see cref="P:System.Windows.Forms.ListView.View" /> property of the <see cref="T:System.Windows.Forms.ListView" /> control is set to <see cref="F:System.Windows.Forms.View.Details" /> and the <see cref="T:System.Windows.Forms.ListView" /> control has <see cref="T:System.Windows.Forms.ColumnHeader" /> objects specified in the <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />. <see cref="T:System.Windows.Forms.ColumnHeader" /> objects define the columns that are displayed in the <see cref="T:System.Windows.Forms.ListView" /> control. Each column is used to display subitem information for each item in the <see cref="T:System.Windows.Forms.ListView" />.</para>
          <para>The <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property allows you to specify whether the column headers are visible or, if they are visible, whether they will function as clickable buttons. If the <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property is set to <see cref="F:System.Windows.Forms.ColumnHeaderStyle.None" />, the column headers are not displayed, although the items and subitems of the <see cref="T:System.Windows.Forms.ListView" /> control are still arranged in columns. If the <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property is set to <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />, the column headers act like buttons that users can click to carry out an action, such as sorting the items in the <see cref="T:System.Windows.Forms.ListView" /> control using the items in the clicked column as a key. You can implement this behavior in a handler for the <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event. If the <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property is set to <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Nonclickable" />, the column headers appear, but cannot be clicked.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the column header style.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this property is set to false, selected items in the <see cref="T:System.Windows.Forms.ListView" /> control remain highlighted in a different color than the current selection color specified by the operating system when the <see cref="T:System.Windows.Forms.ListView" /> control loses focus. You can use this property to keep items that are selected by the user visible when the user clicks a different control on the form or moves to a different window.</para>
          <block subset="none" type="note">
            <para>If you are concerned with the accessibility of your applications, it is recommended that you set the <see cref="P:System.Windows.Forms.ListView.HideSelection" /> property to false.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the selected item in the control remains highlighted when the control loses focus.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method to determine whether a point is in an item or subitem and where in the item the point is located, such as on the label or image area. If the coordinates are located outside the control, the returned <see cref="T:System.Windows.Forms.ListViewHitTestInfo" /> object has a <see cref="P:System.Windows.Forms.ListViewHitTestInfo.Location" /> property of "None"; and the <see cref="P:System.Windows.Forms.ListViewHitTestInfo.Item" /> and <see cref="P:System.Windows.Forms.ListViewHitTestInfo.SubItem" /> properties are set to null.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Provides item information, given a point.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The item information, given a point.</para>
        </returns>
        <param name="point">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Drawing.Point" /> at which to retrieve the item information. The coordinates are relative to the upper-left corner of the control.</param>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this method to determine whether a point is in an item or subitem, and where in the item the point is located, such as on the label or image area. If the coordinates are located outside the control, the returned <see cref="T:System.Windows.Forms.ListViewHitTestInfo" /> object has a <see cref="P:System.Windows.Forms.ListViewHitTestInfo.Location" /> property of "None"; and the <see cref="P:System.Windows.Forms.ListViewHitTestInfo.Item" /> and <see cref="P:System.Windows.Forms.ListViewHitTestInfo.SubItem" /> properties are set to null.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Provides item information, given x- and y-coordinates.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The item information, given x- and y- coordinates.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />The x-coordinate at which to retrieve the item information. The coordinate is relative to the upper-left corner of the control.</param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />The y-coordinate at which to retrieve the item information. The coordinate is relative to the upper-left corner of the control.</param>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enabling hot tracking will cause the <see cref="P:System.Windows.Forms.ListView.Activation" /> property to be set to <see cref="F:System.Windows.Forms.ItemActivation.OneClick" /> and the <see cref="P:System.Windows.Forms.ListView.HoverSelection" /> property to be set to true. In addition, run-time label editing is not allowed when hot tracking is enabled.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the text of an item or subitem has the appearance of a hyperlink when the mouse pointer passes over it.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this property is set to true, the user can point to an item in the <see cref="T:System.Windows.Forms.ListView" /> control to select the item. Multiple items can be selected (when the <see cref="P:System.Windows.Forms.ListView.MultiSelect" /> property is set to true) by holding down the CTRL key while pointing to each item. You can use this feature to provide an easier method for the user of your application to select items in the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether an item is automatically selected when the mouse pointer remains over the item for a few seconds.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.ListView" /> insertion mark feature lets you visually indicate the expected drop location in a drag-and-drop operation when an item is dragged to a new position. This feature works only when the <see cref="P:System.Windows.Forms.ListView.AutoArrange" /> property is set to true and when the <see cref="T:System.Windows.Forms.ListView" /> control does not sort the items automatically. To prevent automatic sorting, the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property must be set to <see cref="F:System.Windows.Forms.SortOrder.None" /> and the <see cref="P:System.Windows.Forms.ListView.View" /> property must be set to <see cref="F:System.Windows.Forms.View.LargeIcon" />, <see cref="F:System.Windows.Forms.View.SmallIcon" />, or <see cref="F:System.Windows.Forms.View.Tile" />. Additionally, the insertion mark feature may not be visible with the <see cref="T:System.Windows.Forms.ListView" /> grouping feature because the grouping feature orders the items by group membership.</para>
          <para>The <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> class is typically used in a handler for the <see cref="E:System.Windows.Forms.Control.DragOver" /> or <see cref="E:System.Windows.Forms.Control.MouseMove" /> event to update the position of the insertion mark as an item is dragged. It is also used in a handler for the <see cref="E:System.Windows.Forms.Control.DragDrop" /> or <see cref="E:System.Windows.Forms.Control.MouseUp" /> event to insert a dragged item at the correct location. For more information, see <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> and <format type="text/html"><a href="88d0a15b-25fd-4dc3-a685-297351311940">How to: Display an Insertion Mark in a Windows Forms ListView Control</a></format>.</para>
          <block subset="none" type="note">
            <para>The insertion mark feature is available only on Windows XP and Windows Server 2003 when your application calls the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method. On earlier operating systems, any code relating to the insertion mark has no effect and the insertion mark will not appear. As a result, any code that depends on the insertion mark feature might not work correctly. You might want to include code that determines whether this feature is available, and provide alternate functionality when it is unavailable. For example, you might want to bypass all code that implements drag-and-drop item repositioning when running on operating systems that do not support insertion marks. </para>
            <para>The insertion mark feature is provided by the same library that provides the operating system themes feature. To check for the availability of this library, call the <see cref="M:System.Windows.Forms.FeatureSupport.IsPresent(System.Object)" /> method overload and pass in the <see cref="F:System.Windows.Forms.OSFeature.Themes" /> value.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an object used to indicate the expected drop location when an item is dragged within a <see cref="T:System.Windows.Forms.ListView" /> control.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified key is a regular input key; otherwise, false.</para>
        </returns>
        <param name="keyData">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event occurs when the user activates one or more items in the <see cref="T:System.Windows.Forms.ListView" /> control. The user can activate an item with either a single-click or double-click, depending on the value of the <see cref="P:System.Windows.Forms.ListView.Activation" /> property, or with the keyboard. From within the event handler for the <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event, you can reference the <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> or <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> properties to access the collection of items selected in the <see cref="T:System.Windows.Forms.ListView" /> to determine which items are being activated.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an item is activated.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property must be set to true in order for check boxes to be displayed next to each item in the <see cref="T:System.Windows.Forms.ListView" /> control. The <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event occurs when the check state of an item changes or when the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property is set to true. You can create an event handler for the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event to perform tasks such as changing the state of an item's icon or another application-specific task each time an item is checked in the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
          <block subset="none" type="note">
            <para>If the window handle has not been created when the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event is raised, the event will be delayed. Once the window handle is created (when the form is shown), any delayed <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> events will be raised. For more information, see <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the check state of an item changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event is similar to the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event, but is raised after the item has been checked. </para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the checked state of an item changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> event occurs when the user begins dragging an item. Typically the event handler for the <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> event performs the task of dragging by calling the <see cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" /> method. You can use this event to perform the tasks necessary to drag items into and out of your application's <see cref="T:System.Windows.Forms.ListView" /> control.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the user begins dragging an item.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the mouse hovers over an item.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Using the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> returned by this property, you can add items, remove items, and obtain a count of items. For more information on the tasks that can be performed with the items in the collection, see the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> class reference topics.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a collection containing all items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In virtual mode, the <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> event will occur when the selection state of multiple items changes.</para>
          <para>The <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> event occurs whether the item state changes from selected to deselected or deselected to selected.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the selection state of an item changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property is set to true, the user is able to modify the text of an item by clicking the item text to select it and then clicking the item text again to put the label text into edit mode. The user can then modify or replace the item's text label. You can use the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> and <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> events to perform tasks before and after the user edits an item's text. The text of subitems cannot be modified if this property is set to true. To change the text of subitems, you can display a dialog box to users when they double-click a subitem in the control.</para>
          <block subset="none" type="note">
            <para>If the <see cref="P:System.Windows.Forms.ListView.Activation" /> property is set to <see cref="F:System.Windows.Forms.ItemActivation.OneClick" /> or <see cref="F:System.Windows.Forms.ItemActivation.TwoClick" />, label editing will not be allowed regardless of the value of the <see cref="P:System.Windows.Forms.ListView.LabelEdit" /> property.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the user can edit the labels of items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="P:System.Windows.Forms.ListView.LabelWrap" /> property is set to true, the item text is wrapped to the next line of text if needed. If the text is longer than two lines of text, the text is shortened. If the user selects the item, all the item text is displayed. If the <see cref="P:System.Windows.Forms.ListView.LabelWrap" /> property is set to false, all item text is displayed on a single line. The entire item text is displayed when the <see cref="P:System.Windows.Forms.ListView.LabelWrap" /> is set to false. This property is only used when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" /> or <see cref="F:System.Windows.Forms.View.SmallIcon" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether item labels wrap when items are displayed in the control as icons.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> property allows you to specify an <see cref="T:System.Windows.Forms.ImageList" /> object that contains icons to use when displaying items with large icons (when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" />). The <see cref="T:System.Windows.Forms.ListView" /> control can accept any graphics format that the <see cref="T:System.Windows.Forms.ImageList" /> control supports when displaying icons. The <see cref="T:System.Windows.Forms.ListView" /> control is not limited to .ico files. Once an <see cref="T:System.Windows.Forms.ImageList" /> is assigned to the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> property, you can set the <see cref="P:System.Windows.Forms.ListViewItem.ImageIndex" /> property of each <see cref="T:System.Windows.Forms.ListViewItem" /> in the <see cref="T:System.Windows.Forms.ListView" /> control to the index position of the appropriate image in the <see cref="T:System.Windows.Forms.ImageList" />. The size of the icons for the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> is specified by the <see cref="P:System.Windows.Forms.ImageList.ImageSize" />.</para>
          <para>Because only one index can be specified for the <see cref="P:System.Windows.Forms.ListViewItem.ImageIndex" /> property, the <see cref="T:System.Windows.Forms.ImageList" /> objects specified in the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> and <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> properties should have the same index positions for the images to display. For example, if the <see cref="P:System.Windows.Forms.ListViewItem.ImageIndex" /> property of a <see cref="T:System.Windows.Forms.ListViewItem" /> is set to 0, the images to use for both small and large icons should be at the same index position in the <see cref="T:System.Windows.Forms.ImageList" /> objects specified in the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> and <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> properties.</para>
          <block subset="none" type="note">
            <para>When the images are specified with keys, you still need to place small and large versions of the image at the same index location in their respective image lists. When switching between views, the index location of the image in one list is used to locate the image in the other list, regardless of the key value specified. </para>
          </block>
          <para>To set the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items with small icons (all view modes other than <see cref="F:System.Windows.Forms.View.LargeIcon" />), use the <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> property. If you want to use images to display item state, use the <see cref="P:System.Windows.Forms.ListView.StateImageList" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items as large icons in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property allows you to specify the object that performs the sorting of items in a <see cref="T:System.Windows.Forms.ListView" /> control when the <see cref="M:System.Windows.Forms.ListView.Sort" /> method is called or when items are added to the list. Note that items are not sorted automatically when their label text changes.</para>
          <para>The specified object must be an instance of a class that implements the <see cref="T:System.Collections.IComparer" /> interface, which has a single method called <see cref="M:System.Collections.Comparer.Compare(System.Object,System.Object)" />.</para>
          <para>You can use this property to provide custom sorting, for example, when a column header is clicked in the details view. To do this, create a class that implements the <see cref="T:System.Collections.IComparer" /> interface and provides a constructor that accepts the index of a column to sort by. You can then implement a handler for the <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event that creates an instance of this class using the index of the clicked column. When you set the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property to the new instance, the <see cref="T:System.Windows.Forms.ListView" /> control is automatically sorted using the specified object. Subsequent calls to the <see cref="M:System.Windows.Forms.ListView.Sort" /> method use the same object.</para>
          <block subset="none" type="note">
            <para>When you set the value of the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property, the <see cref="M:System.Windows.Forms.ListView.Sort" /> method is called automatically.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the sorting comparer for the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="P:System.Windows.Forms.ListView.MultiSelect" /> property is set to true, multiple items can be selected in the <see cref="T:System.Windows.Forms.ListView" /> control. To select multiple items, the user must hold down the CTRL key while clicking the items to select. Consecutive items can be selected by clicking the first item to select and then, while holding down the SHIFT key, clicking the last item to select. You can use the multiple selection feature to select multiple items in the <see cref="T:System.Windows.Forms.ListView" /> control and perform an operation on all the items selected. For example, the user could select multiple items and then right-click a selected item to display a shortcut menu that displays a set of tasks that can be performed on the selected items.</para>
          <para>To determine which items are selected in the <see cref="T:System.Windows.Forms.ListView" /> control, use the <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> property. The <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> property allows you to access the <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> that contains a list of the selected items. If you want the index positions in the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> instead of the items, you can use the <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> property to access the <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />.</para>
          <para>If you do not want to allow multiple selections in the <see cref="T:System.Windows.Forms.ListView" />, yet still want to offer the user a way for multiple items to be chosen, you can display check boxes by setting the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property to true.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether multiple items can be selected.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.ColumnClickEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> event will not occur if the Window's full drag feature, the "Show Window Contents While Dragging" option, is disabled.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" />  that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the FontChanged event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event.</para>
        </summary>
        <param name="ice">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ItemChecked" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> method is called when the mouse is hovering over a <see cref="T:System.Windows.Forms.ListViewItem" />, the method raises the <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> event.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="F2ADAF01-1ED1-42E1-8C31-8D467E7E0EE2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> event. </para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" /> that contains the event data. </param>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Windows.Forms.ListView" /> control is normally drawn by the operating system. In order to customize the appearance of <see cref="T:System.Windows.Forms.ListView" /> items, subitems, and column headers, set the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property to true and provide a handler for one or more of the following events: <see cref="E:System.Windows.Forms.ListView.DrawItem" />, <see cref="E:System.Windows.Forms.ListView.DrawSubItem" />, <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />. This is called owner drawing. When the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />, all three events occur; otherwise, only the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event occurs.</para>
          <block subset="none" type="note">
            <para>Subitem information typically appears in the tile view as well as the details view, but in the tile view, it must be drawn in a handler for the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event. The <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event does not occur for any subitems for which no <see cref="T:System.Windows.Forms.ColumnHeader" /> object has been added to the <see cref="P:System.Windows.Forms.ListView.Columns" /> collection. Note also that the first subitem of each <see cref="T:System.Windows.Forms.ListViewItem" /> object represents the parent item itself, and is displayed in the first column.</para>
          </block>
          <para>In the details view, you can handle the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event to draw elements common to all subitems, such as the background, and handle the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event to draw elements for individual subitems, such as text values. You can also draw all items in the <see cref="T:System.Windows.Forms.ListView" /> control using only one of the two events, although this may be less convenient. To draw column headers in the details view, you must handle the <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> event.</para>
          <block subset="none" type="note">
            <para>To avoid issues with graphics flickering when owner drawing, override the <see cref="T:System.Windows.Forms.ListView" /> control and set the <see cref="P:System.Windows.Forms.ListView.DoubleBuffered" /> property to true.</para>
          </block>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ListView" /> control is drawn by the operating system or by code that you provide.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is not relevant for this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the space between the <see cref="T:System.Windows.Forms.ListView" /> control and its contents.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Windows.Forms.ListView.Padding" /> property changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.ListView" /> control is drawn by the operating system or is owner drawn, so the <see cref="E:System.Windows.Forms.ListView.Paint" /> event is never raised. For more information about owner-drawing, see the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> control is painted.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes the properties of the <see cref="T:System.Windows.Forms.ListView" /> control that manage the appearance of the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" /> method can be used whether the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode or regular mode.</para>
          <para>If the <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> method has been called prior to the call to <see cref="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />, the redraw will not occur.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Forces a range of <see cref="T:System.Windows.Forms.ListViewItem" /> objects to be redrawn.</para>
        </summary>
        <param name="startIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The index for the first item in the range to be redrawn.</param>
        <param name="endIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The index for the last item of the range to be redrawn.</param>
        <param name="invalidateOnly">
          <attribution license="cc4" from="Microsoft" modified="false" />true to invalidate the range of items; false to invalidate and repaint the items.</param>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When a <see cref="T:System.Windows.Forms.ListView" /> object is in virtual mode, it creates <see cref="T:System.Windows.Forms.ListViewItem" /> objects dynamically instead of using the <see cref="P:System.Windows.Forms.ListView.Items" /> collection. This event is raised when the object must create a <see cref="T:System.Windows.Forms.ListViewItem" /> object. A handler for this event should create the appropriate <see cref="T:System.Windows.Forms.ListViewItem" /> or retrieve it from the cache, and pass it back by way of the <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> property.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and requires a <see cref="T:System.Windows.Forms.ListViewItem" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Windows.Forms.ListView" /> property is for use with international applications where the language is read from right to left. If you set <see cref="T:System.Windows.Forms.ListView" /> and <see cref="T:System.Windows.Forms.RightToLeft" /> to true the control's contents and text will be laid out from right to left.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the control is laid out from right to left.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> property changes.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this property is set to true, the <see cref="T:System.Windows.Forms.ListView" /> displays a vertical scroll bar to use when the number of items exceeds the size of the client area of the control. You can use this property to ensure that the user can access all items that are available in the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
          <block subset="none" type="note">
            <para>In versions of the dnprdnshort prior to version 2.0, the column headers were not painted correctly when setting this property to false and resizing the control to make it larger. To work around this issue, set this property to true in a <see cref="E:System.Windows.Forms.Form.ResizeBegin" /> event handler and set it back to false in a <see cref="E:System.Windows.Forms.Form.ResizeEnd" /> event handler.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether a scroll bar is added to the control when there is not enough room to display all items.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This event occurs when a <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and the <see cref="Overload:System.Windows.Forms.ListView.FindNearestItem" /> or <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> method is called. When handling this event, you should calculate which item from the list of items supplied by the <see cref="P:System.Windows.Forms.ListView.Items" /> property matches the search criteria and set the <see cref="P:System.Windows.Forms.SearchForVirtualItemEventArgs.Index" /> property to the index of the <see cref="T:System.Windows.Forms.ListViewItem" />. If an item is not provided, <see cref="Overload:System.Windows.Forms.ListView.FindNearestItem" /> and <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> will return null.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and a search is taking place.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> collection changes whenever the <see cref="P:System.Windows.Forms.ListViewItem.Selected" /> property of a <see cref="T:System.Windows.Forms.ListViewItem" /> changes. The property change can occur programmatically or when the user selects an item or clears the selection of an item. When the user selects an item without pressing CTRL to perform a multiple selection, the control first clears the previous selection. In this case, this event occurs one time for each item that was previously selected and one time for the newly selected item. </para>
          <para>To determine which items are selected in the <see cref="T:System.Windows.Forms.ListView" /> control, use the <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> property to access the <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />. You can create an event handler for this event to perform tasks whenever there is a change to the selected items in the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01E4F1BC-E55E-413F-98C7-6588493E5F67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> collection changes. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> property will not contain any indexes if the property is accessed before the <see cref="T:System.Windows.Forms.ListView" /> handle is created, which typically occurs when the <see cref="T:System.Windows.Forms.ListView" /> is initially loaded for display in the form. You can check to see if the handle is created with the <see cref="P:System.Windows.Forms.Control.IsHandleCreated" /> property. When the <see cref="P:System.Windows.Forms.ListView.MultiSelect" /> property is set to true, this property returns a collection containing the indexes of all items that are selected in the <see cref="T:System.Windows.Forms.ListView" />. For a single-selection <see cref="T:System.Windows.Forms.ListView" />, this property returns a collection containing a single element containing the index of the only selected item in the <see cref="T:System.Windows.Forms.ListView" />. For more information on the tasks that can be performed with the items in the collection, see <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />.</para>
          <para>If you want to obtain a collection of the items that are selected in the <see cref="T:System.Windows.Forms.ListView" /> control, instead of the index positions of the items that are selected, use the <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the indexes of the selected items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> property will not contain any items if the property is accessed before the <see cref="T:System.Windows.Forms.ListView" /> handle is created, which typically occurs when <see cref="T:System.Windows.Forms.ListView" /> is initially loaded for display in the form. You can check to see if the handle is created with the <see cref="P:System.Windows.Forms.Control.IsHandleCreated" /> property. When the <see cref="P:System.Windows.Forms.ListView.MultiSelect" /> property is set to true, this property returns a collection containing the items that are selected in the <see cref="T:System.Windows.Forms.ListView" />. For a single-selection <see cref="T:System.Windows.Forms.ListView" />, this property returns a collection containing the only selected item in the <see cref="T:System.Windows.Forms.ListView" />. For more information on the tasks that can be performed with the items in the collection, see <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />.</para>
          <para>If you want to obtain a collection of the index positions within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> of the items that are selected in the <see cref="T:System.Windows.Forms.ListView" /> control, instead of the items that are selected, use the <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the items that are selected in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Any groups assigned to a <see cref="T:System.Windows.Forms.ListView" /> control appear whenever the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to a value other than <see cref="F:System.Windows.Forms.View.List" />. The <see cref="T:System.Windows.Forms.ListView" /> grouping feature lets you create visual groups of logically related <see cref="T:System.Windows.Forms.ListView" /> items on Windows XP and Windows Server 2003. To enable this feature, your application must call the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method. For more information, see the <see cref="P:System.Windows.Forms.ListView.Groups" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether items are displayed in groups.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the <see cref="P:System.Windows.Forms.ListView.ShowItemToolTips" /> property is set to true, any <see cref="T:System.Windows.Forms.ListViewItem" /> that has a ToolTip will display it; otherwise, nothing is displayed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether ToolTips are shown for the <see cref="T:System.Windows.Forms.ListViewItem" /> objects contained in the <see cref="T:System.Windows.Forms.ListView" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> property allows you to specify an <see cref="T:System.Windows.Forms.ImageList" /> object that contains icons to use when displaying items with small icons (when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to any value other than <see cref="F:System.Windows.Forms.View.LargeIcon" />). The <see cref="T:System.Windows.Forms.ListView" /> control can accept any graphics format that the <see cref="T:System.Windows.Forms.ImageList" /> control supports when displaying icons. The <see cref="T:System.Windows.Forms.ListView" /> control is not limited to .ico files. Once an <see cref="T:System.Windows.Forms.ImageList" /> is assigned to the <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> property, you can set the <see cref="P:System.Windows.Forms.ListViewItem.ImageIndex" /> property of each <see cref="T:System.Windows.Forms.ListViewItem" /> in the <see cref="T:System.Windows.Forms.ListView" /> control to the index position of the appropriate image in the <see cref="T:System.Windows.Forms.ImageList" />. The size of the icons for the <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> is specified by the <see cref="P:System.Windows.Forms.ImageList.ImageSize" /> property.</para>
          <para>Because only one index can be specified for the <see cref="P:System.Windows.Forms.ListViewItem.ImageIndex" /> property, the <see cref="T:System.Windows.Forms.ImageList" /> objects specified in the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> and <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> properties should have the same index positions for the images to display. For example, if the <see cref="P:System.Windows.Forms.ListViewItem.ImageIndex" /> property of a <see cref="T:System.Windows.Forms.ListViewItem" /> is set to 0, the images to use for both small and large icons should be at the same index position in the <see cref="T:System.Windows.Forms.ImageList" /> objects specified in the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> and <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> properties. </para>
          <block subset="none" type="note">
            <para>When the images are specified with keys, you still need to place small and large versions of the image at the same index location in their respective image lists. When switching between views, the index location of the image in one list is used to locate the image in the other list, regardless of the key value specified. </para>
          </block>
          <para>To set the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items with large icons (when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" />), use the <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> property. If you want to use images to display item state, use the <see cref="P:System.Windows.Forms.ListView.StateImageList" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items as small icons in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Typically items are sorted using the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property, which sorts items based on the item text. To customize the sort order, you must write a class that implements the <see cref="T:System.Collections.IComparer" /> interface and set the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property to an object of that class. This is useful, for example, when you want to sort items by subitem text. For more information on performing manual sorting of items, see the example for the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property.</para>
          <para>If the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property is set to a value other than <see cref="F:System.Windows.Forms.SortOrder.None" /> or if the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property is set, the list is sorted automatically when items are added. Items are not sorted automatically when the label text changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sorts the items of the list view.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.SortOrder.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.Sorting" /> property allows you to specify whether or not items are sorted in the <see cref="T:System.Windows.Forms.ListView" /> control. By default, no sorting is performed. When the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property is set to <see cref="F:System.Windows.Forms.SortOrder.Ascending" /> or <see cref="F:System.Windows.Forms.SortOrder.Descending" />, the items in the <see cref="T:System.Windows.Forms.ListView" /> are sorted automatically in ascending alphabetical order (when the property is set to <see cref="F:System.Windows.Forms.SortOrder.Ascending" />) or descending alphabetical order (when the property is set to <see cref="F:System.Windows.Forms.SortOrder.Descending" />). You can use this property to automatically sort items that are displayed in your <see cref="T:System.Windows.Forms.ListView" /> control to make it easier for users to find items when a large number of items are available.</para>
          <para>If you want to perform your own item sorting instead of using the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property, use the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property in combination with the <see cref="M:System.Windows.Forms.ListView.Sort" /> method.</para>
          <para>If the <see cref="P:System.Windows.Forms.ListView.Sorting" /> property is set to a value other than <see cref="F:System.Windows.Forms.SortOrder.None" /> or if the <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter" /> property is set, the list is sorted automatically when items is added. Items are not sorted automatically when the label text changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the sort order for items in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.StateImageList" /> property allows you to specify an <see cref="T:System.Windows.Forms.ImageList" /> that contains images to use to represent an application-specific state of an item in a <see cref="T:System.Windows.Forms.ListView" /> control. State images are displayed to the left of an icon for the item. You can use state images, such as checked and unchecked check boxes, to indicate application-defined item states. State images are visible in all views of the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
          <para>If an <see cref="T:System.Windows.Forms.ImageList" /> is specified in the <see cref="P:System.Windows.Forms.ListView.StateImageList" /> property and the <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> property is set to true, the images at index positions 0 and 1 in the <see cref="T:System.Windows.Forms.ImageList" /> are displayed instead of the check box. The image at index position 0 is displayed instead of the unchecked check box, and the image at index position 1 is displayed instead of the checked check box.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> associated with application-defined states in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is not relevant for this class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is not relevant for this class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="P:System.Windows.Forms.ListView.Text" /> property changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property controls the size of tiles when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Tile" />. Setting this property is useful to prevent line-wrapping when subitem text is too long to be displayed on a single line. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the size of the tiles shown in tile view.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initially, the item with the index position of zero (0) is at the top of the <see cref="T:System.Windows.Forms.ListView" /> control. If the <see cref="T:System.Windows.Forms.ListView" /> control contents are scrolled, a different item can be at the top of the control. You can use this property to indicate or determine which item is visible at the top of the <see cref="T:System.Windows.Forms.ListView" /> control. The value of the <see cref="P:System.Windows.Forms.ListView.TopItem" /> property will not always persist, depending on where the desired top item is in the list view.</para>
          <para>The number of items visible in a <see cref="T:System.Windows.Forms.ListView" /> control at any time depends on the height of the list view and the size of the items it contains. If the items exceed the height of the list view, the items will continue onto multiple pages, which the user can scroll through. If you set the <see cref="P:System.Windows.Forms.ListView.TopItem" /> property to an item in the last page of the <see cref="T:System.Windows.Forms.ListView" />, the item will automatically be scrolled into view; however, <see cref="P:System.Windows.Forms.ListView.TopItem" /> will be set to the actual top item of the last page.</para>
          <para>To ensure that a specific item is in the visible region of the control (but not necessarily in the top position), use the <see cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" /> method.</para>
          <block subset="none" type="note">
            <para>Setting this property has no effect when the <see cref="P:System.Windows.Forms.ListView.Scrollable" /> property value is false.</para>
            <para>Setting this property is not supported in versions of the dnprdnshort prior to version 2.0. </para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the first visible item in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string representation of the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that states the control type, the count of items in the <see cref="T:System.Windows.Forms.ListView" /> control, and the type of the first item in the <see cref="T:System.Windows.Forms.ListView" />, if the count is not 0.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use the <see cref="M:System.Windows.Forms.ListView.UpdateExtendedStyles" /> method in your derived class to override the extended styles used by the <see cref="T:System.Windows.Forms.ListView" /> control. If you call this method, you should ensure that the extended styles set by properties on the <see cref="T:System.Windows.Forms.ListView" /> control are utilized in your derived version of the control.</para>
          <para>The following are the properties that apply an extended style to the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ListView.Activation" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ListView.AllowColumnReorder" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ListView.GridLines" /> </para>
            </item>
            <item>
              <para>
                <see cref="P:System.Windows.Forms.ListView.HoverSelection" /> </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the extended styles applied to the list view control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes to the <see cref="T:System.Windows.Forms.ListView" /> control in the dnprdnshort 2.0 enable custom state images to be set to indicate whether an item is checked or unchecked or in an indeterminate state. With the addition of this feature, the dnprdnshort 2.0 has different behavior than the .NET Framework 1.1. If you have created applications that depend on the behavior in the dnprdnshort 1.1, be sure that the <see cref="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" /> property is set to true, which is the default value. In order to fully take advantage of custom state images, set <see cref="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" /> to false.</para>
          <block subset="none" type="note">
            <para>If you are using the vsprvsext designer, the <see cref="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" /> property will be set to false.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ListView" /> uses state image behavior that is compatible with the dnprdnshort 1.1 or the dnprdnshort 2.0.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Windows.Forms.View.LargeIcon)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Windows.Forms.ListView.View" /> property allows you to specify the type of display the <see cref="T:System.Windows.Forms.ListView" /> control uses to display items. You can set the <see cref="P:System.Windows.Forms.ListView.View" /> property to display each item with large or small icons or display items in a vertical list. The richest option is the details view, which allows you to view not only the items but any subitems specified for each item. Each item is displayed in a grid, with each item listed vertically and the subitems for each item displayed in a column, with column headers. The details view is a perfect way to display database information to a user. With Windows XP and Windows Server 2003, you can also display items as tiles that balance graphical and textual information by showing a large icon along with subitem information of your choosing. To enable tile view, your application must call the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method. The small-image view displays each item with an icon and textual information to the right of the icon. The large-image view displays each item with an icon and textual information below the icon. The size of the icons for the image list is specified by the <see cref="P:System.Windows.Forms.ImageList.ImageSize" /> property of the <see cref="T:System.Windows.Forms.ImageList" /> for the <see cref="P:System.Windows.Forms.ListView.SmallImageList" /> or <see cref="P:System.Windows.Forms.ListView.LargeImageList" /> properties.</para>
          <block subset="none" type="note">
            <para>If you are using multiple image lists, for small and large icon view, with a <see cref="T:System.Windows.Forms.ListView" /> control, you should place small and large versions of the image at the same index location in their respective image lists. When switching between views, the index location of the image in one list is used to locate the image in the other list, regardless of the key value specified. </para>
          </block>
          <para>Most of the properties in the <see cref="T:System.Windows.Forms.ListView" /> control affect how the different views behave or are displayed. Some properties that affect the views of the items are only useful when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to a specific value, while others are useful in all views. For example, properties such as <see cref="P:System.Windows.Forms.ListView.GridLines" /> and <see cref="P:System.Windows.Forms.ListView.FullRowSelect" /> are only useful when the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Details" />, while the <see cref="P:System.Windows.Forms.ListView.MultiSelect" /> and <see cref="P:System.Windows.Forms.ListView.CheckBoxes" /> properties are useful in all views.</para>
          <para>The following table shows some of the <see cref="T:System.Windows.Forms.ListView" /> members and the views they are valid in.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>ListView member</para>
                </term>
                <description>
                  <para>View</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.Alignment" /> property</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.AutoArrange" /> property</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" /></para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> method</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.Details" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.CheckBoxes" />
                </para>
              </term>
              <description>
                <para>All views except <see cref="F:System.Windows.Forms.View.Tile" /></para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.Columns" /> property</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.Details" /> or <see cref="F:System.Windows.Forms.View.Tile" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.Details" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="Overload:System.Windows.Forms.ListView.FindItemWithText" /> method</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.Details" />, <see cref="F:System.Windows.Forms.View.List" />, or <see cref="F:System.Windows.Forms.View.Tile" /></para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="Overload:System.Windows.Forms.ListView.FindNearestItem" /> method</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" /></para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" /> method</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.Details" /> or <see cref="F:System.Windows.Forms.View.Tile" /></para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.Groups" /> property</para>
              </term>
              <description>
                <para>All views except <see cref="F:System.Windows.Forms.View.List" /></para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.HeaderStyle" /> property</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.Details" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Windows.Forms.ListView.InsertionMark" /> property</para>
              </term>
              <description>
                <para>
                  <see cref="F:System.Windows.Forms.View.LargeIcon" />, <see cref="F:System.Windows.Forms.View.SmallIcon" />, or <see cref="F:System.Windows.Forms.View.Tile" /></para>
              </description>
            </item>
          </list>
          <para>You can use the <see cref="P:System.Windows.Forms.ListView.View" /> property to provide different views of data in your application, or to lock a specific view to utilize that view's benefits. For example, the <see cref="P:System.Windows.Forms.ListView.View" /> property is often set to <see cref="F:System.Windows.Forms.View.Details" /> because the details view provides a number of viewing options not available in the other views.</para>
          <block subset="none" type="note">
            <para>If your <see cref="T:System.Windows.Forms.ListView" /> control does not have any column headers specified and you set the <see cref="P:System.Windows.Forms.ListView.View" /> property to <see cref="F:System.Windows.Forms.View.Details" />, the <see cref="T:System.Windows.Forms.ListView" /> control will not display any items. If your <see cref="T:System.Windows.Forms.ListView" /> control does not have any column headers specified and you set the <see cref="P:System.Windows.Forms.ListView.View" /> property to <see cref="F:System.Windows.Forms.View.Tile" />, the <see cref="T:System.Windows.Forms.ListView" /> control will not display any subitems.</para>
          </block>
          <para>The tile view displays each item with a large icon on the left and textual information on the right. The textual information consists of the item label followed by subitems. By default, only the first subitem is displayed, which corresponds to the item label. To display additional subitems, you must add <see cref="T:System.Windows.Forms.ColumnHeader" /> objects to the <see cref="P:System.Windows.Forms.ListView.Columns" /> collection. Each subitem in the tile corresponds to a column header. To control which subitems are displayed and the order in which they are displayed, you must set the <see cref="P:System.Windows.Forms.ListViewItem.ListViewSubItem.Name" /> property for each item and the <see cref="P:System.Windows.Forms.ColumnHeader.Name" /> property for each header. You can then add, remove, and rearrange headers in the <see cref="P:System.Windows.Forms.ListView.Columns" /> collection to achieve the desired result. </para>
          <para>To control the size of the tiles in the tile view, set the <see cref="P:System.Windows.Forms.ListView.TileSize" /> property. This is useful to prevent line-wrapping when subitem text is too long for a single line.</para>
          <para>For an example of the tile view, see the <see cref="P:System.Windows.Forms.ListView.TileSize" /> property.</para>
          <block subset="none" type="note">
            <para>Although columns are only displayed in the details view, subitems without column headers will not display in either the details view or the tile view.</para>
          </block>
          <para>The tile view is available only on Windows XP and Windows Server 2003 when your application calls the <see cref="M:System.Windows.Forms.Application.EnableVisualStyles" /> method. On earlier operating systems, any code related to the tile view has no effect, and the <see cref="T:System.Windows.Forms.ListView" /> control displays in the large icon view. As a result, any code that depends on the tile view might not work correctly. </para>
          <para>You might want to include code that determines whether tile view is available, and provide alternate functionality when it is unavailable. For example, when you use owner drawing to customize the appearance of <see cref="T:System.Windows.Forms.ListView" /> items in the tile view, you might want to use drawing code appropriate to the large icon view when running on operating systems that do not support the tile view.</para>
          <para>The tile view feature is provided by the same library that provides the operating system themes feature. To check for the availability of this library, call the <see cref="M:System.Windows.Forms.FeatureSupport.IsPresent(System.Object)" /> method overload and pass in the <see cref="F:System.Windows.Forms.OSFeature.Themes" /> value.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets how items are displayed in the control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the <see cref="T:System.Windows.Forms.ListView" /> is not in virtual mode, the <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> event will occur.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and the selection state of a range of items has changed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Getting or setting the <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> property when <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> set to false will have no effect on the <see cref="T:System.Windows.Forms.ListView" />.</para>
          <para>If <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is set to true, and the <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> property is greater than 0, you must handle the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event, providing a valid <see cref="T:System.Windows.Forms.ListViewItem" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the number of <see cref="T:System.Windows.Forms.ListViewItem" /> objects contained in the list when in virtual mode.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Setting the <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> property to true puts the <see cref="T:System.Windows.Forms.ListView" /> into virtual mode. In Virtual mode, the normal <see cref="P:System.Windows.Forms.ListView.Items" /> collection is unused. Instead, <see cref="T:System.Windows.Forms.ListViewItem" /> objects are created dynamically as the <see cref="T:System.Windows.Forms.ListView" /> requires them.</para>
          <para>Virtual mode can be useful under many circumstances. If a <see cref="T:System.Windows.Forms.ListView" /> object must be populated from a very large collection already in memory, creating a <see cref="T:System.Windows.Forms.ListViewItem" /> object for each entry can be wasteful. In virtual mode, only the items required are created. In other cases, the values of the <see cref="T:System.Windows.Forms.ListViewItem" /> objects may need to be recalculated frequently, and doing this for the whole collection would produce unacceptable performance. In virtual mode, only the required items are calculated.</para>
          <para>In order to use virtual mode, you must handle the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event, which is raised every time the <see cref="T:System.Windows.Forms.ListView" /> requires an item. This event handler should create the <see cref="T:System.Windows.Forms.ListViewItem" /> object that belongs at the specified index. In addition, the <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> property must be set to the size of the virtual list.</para>
          <para>Handling the <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> event enables searching in virtual mode. If this event is not handled, the <see cref="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" /> and <see cref="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" /> methods will return null.</para>
          <para>You can handle the <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> event in order to maintain a cache of <see cref="T:System.Windows.Forms.ListViewItem" /> objects. If the calculation or lookup to create a <see cref="T:System.Windows.Forms.ListViewItem" /> object is expensive, maintaining a cache can improve performance.</para>
          <para>If the <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.Tile" />, the value will automatically be changed to <see cref="F:System.Windows.Forms.View.LargeIcon" /> when <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is set to true.</para>
          <para>In virtual mode, the <see cref="P:System.Windows.Forms.ListView.Items" /> collection is disabled. Attempting to access it results in an <see cref="T:System.InvalidOperationException" />. The same is true of the <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> collection and the <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> collection. If you want to retrieve the selected or checked items, use the <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> and <see cref="P:System.Windows.Forms.ListView.CheckedIndices" /> collections instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:System.Windows.Forms.ListView" /> control.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>