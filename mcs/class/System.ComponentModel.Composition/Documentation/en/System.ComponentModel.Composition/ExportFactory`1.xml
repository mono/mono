<?xml version="1.0" encoding="utf-8"?>
<Type Name="ExportFactory&lt;T&gt;" FullName="System.ComponentModel.Composition.ExportFactory&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ExportFactory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportFactory`1&lt;T&gt; extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>When you refer indirectly to a part by using a <see cref="T:System.Lazy`1" /> object, the <see cref="P:System.Lazy`1.Value" /> property always returns a reference to the same object. In some circumstances, you might want each reference to result in the creation of a new object. <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> is designed for those scenarios.</para>
      <para>
        <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> can be used in a similar fashion to <see cref="T:System.Lazy`1" /> when creating attributed parts. That is, an import contract that is defined on <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> with a generic parameter of <paramref name="T" /> will match an export that is defined on <paramref name="T" />. For example, the follow export and import match:</para>
      <code>[Export]
public String myData = "Example Data.";

[Import]
public ExportFactory&lt;String&gt; theData { get; set; }</code>
      <code>&lt;Export()&gt;
Public myData As String = "Example Data."

&lt;Import()&gt;
Public Property theData As ExportFactory(Of String)</code>
      <para>The <see cref="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" /> method returns an <see cref="T:System.ComponentModel.Composition.ExportLifetimeContext`1" /> object, which has two pieces. The <see cref="P:System.ComponentModel.Composition.ExportLifetimeContext`1.Value" /> property provides access to the created part. Calling the <see cref="M:System.ComponentModel.Composition.ExportLifetimeContext`1.Dispose" /> method of the <see cref="T:System.ComponentModel.Composition.ExportLifetimeContext`1" /> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>A factory that creates new instances of a part that provides the specified export.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportFactory (Func&lt;Tuple&lt;T,Action&gt;&gt; exportLifetimeContextCreator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Tuple`2&lt;!T, class System.Action&gt;&gt; exportLifetimeContextCreator) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exportLifetimeContextCreator" Type="System.Func&lt;System.Tuple&lt;T,System.Action&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="exportLifetimeContextCreator">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExport">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt; CreateExport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.ExportLifetimeContext`1&lt;!T&gt; CreateExport() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an instance of the factory's export type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A valid instance of the factory's exported type.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="OnFilterScopedCatalog">
      <MemberSignature Language="C#" Value="protected virtual bool OnFilterScopedCatalog (System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFilterScopedCatalog(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="composablePartDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When overridden in a derived class, filters part definitions in the scope of the <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the part definition should be included in the scope; otherwise, false.</para>
        </returns>
        <param name="composablePartDefinition">
          <attribution license="cc4" from="Microsoft" modified="false" />The part definition to filter.</param>
      </Docs>
    </Member>
  </Members>
</Type>