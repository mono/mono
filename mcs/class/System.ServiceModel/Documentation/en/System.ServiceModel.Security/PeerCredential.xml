<?xml version="1.0" encoding="utf-8"?>
<Type Name="PeerCredential" FullName="System.ServiceModel.Security.PeerCredential">
  <TypeSignature Language="C#" Value="public class PeerCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PeerCredential extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Instances of this class are used to specify the credentials needed for the particular security mode of a peer mesh. An instance of this type can be accessed using <see cref="P:System.ServiceModel.ChannelFactory.Credentials" /> or <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" />.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Contains the credentials used when authenticating a peer node within a peer mesh.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Certificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property contains a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> instance used when authenticating neighbors in the peer mesh. An instance must be specified if the credential type chosen is PeerTransportCredentialType.<see cref="P:System.ServiceModel.Security.PeerCredential.Certificate" />. If PeerTransportCredentialType.<see cref="F:System.ServiceModel.PeerTransportCredentialType.Password" /> is chosen, this property is optional.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an X509 certificate for the peer.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MeshPassword">
      <MemberSignature Language="C#" Value="public string MeshPassword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MeshPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the password used by the peer to authenticate with the peer mesh.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="MessageSenderAuthentication">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509PeerCertificateAuthentication MessageSenderAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509PeerCertificateAuthentication MessageSenderAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509PeerCertificateAuthentication</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property must be populated if message authentication is chosen. This property specifies a validator, which will be invoked during message security verification. The credential specified in the message is passed to the validator specified in this property. The validator can either accept or reject the credential.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the message sender authentication validator.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PeerAuthentication">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509PeerCertificateAuthentication PeerAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509PeerCertificateAuthentication PeerAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509PeerCertificateAuthentication</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property specifies a validator, which is invoked during neighbor-to-neighbor authentication in the mesh. When a new peer tries to establish a neighbor connection, it passes its own credential to the responding peer. The validator of the responder is invoked to verify the credential of the remote party. Whenever a peer connection is established in the mesh, both peers are mutually authenticated, meaning validators on both ends are invoked.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the peer authentication object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SetCertificate">
      <MemberSignature Language="C#" Value="public void SetCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCertificate(string subjectName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subjectName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload is used to specify a certificate credential of the peer. It is provided as a shortcut to load the certificate from one of the available certificate stores that the user has access to.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the certificate.</para>
        </summary>
        <param name="subjectName">
          <attribution license="cc4" from="Microsoft" modified="false" />The subject name of the certificate.</param>
        <param name="storeLocation">
          <attribution license="cc4" from="Microsoft" modified="false" />The location of the certificate store.</param>
        <param name="storeName">
          <attribution license="cc4" from="Microsoft" modified="false" />The certificate store name.</param>
      </Docs>
    </Member>
    <Member MemberName="SetCertificate">
      <MemberSignature Language="C#" Value="public void SetCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCertificate(valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, valuetype System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="findType" Type="System.Security.Cryptography.X509Certificates.X509FindType" />
        <Parameter Name="findValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the certificate with the specified search criteria.</para>
        </summary>
        <param name="storeLocation">
          <attribution license="cc4" from="Microsoft" modified="false" />The location of the certificate store.</param>
        <param name="storeName">
          <attribution license="cc4" from="Microsoft" modified="false" />The certificate store name.</param>
        <param name="findType">
          <attribution license="cc4" from="Microsoft" modified="false" />The search criteria.</param>
        <param name="findValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The value to search on.</param>
      </Docs>
    </Member>
  </Members>
</Type>