<?xml version="1.0" encoding="utf-8"?>
<Type Name="OperationBehaviorAttribute" FullName="System.ServiceModel.OperationBehaviorAttribute">
  <TypeSignature Language="C#" Value="public sealed class OperationBehaviorAttribute : Attribute, System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationBehaviorAttribute extends System.Attribute implements class System.ServiceModel.Description.IOperationBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Description.IOperationBehavior</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Use the <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> attribute to indicate what operation-specific execution behavior the operation has when executed. (To specify execution behavior at the service level, use the <see cref="T:System.ServiceModel.ServiceBehaviorAttribute" /> attribute.) </para>
      <block subset="none" type="note">
        <para>You can also use <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> to configure a callback contract operation in a duplex client application. When used on a callback operation, the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property must be <see cref="F:System.ServiceModel.ReleaseInstanceMode.None" /> or an <see cref="T:System.InvalidOperationException" /> exception is thrown at runtime.</para>
      </block>
      <para>The <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> attribute is a indigo1 programming model feature that enables common features that developers otherwise must implement themselves. </para>
      <list type="bullet">
        <item>
          <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters" /> property controls whether parameter objects passed to an operation are disposed when the operation completes.</para>
        </item>
        <item>
          <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete" /> property specifies whether the transaction in which the method executes is automatically committed if no unhandled exceptions occur.</para>
        </item>
        <item>
          <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired" /> property specifies whether a method must execute within a transaction.</para>
        </item>
        <item>
          <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation" /> property specifies whether the service operation can, must, or cannot impersonate the caller's identity.</para>
        </item>
        <item>
          <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property specifies when service objects are recycled during the method invocation process.</para>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Specifies the local execution behavior of a service method.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationBehaviorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The default constructor creates an instance of the class with the following defaults:</para>
          <list type="bullet">
            <item>
              <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete" /> property is true.</para>
            </item>
            <item>
              <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired" /> property is false.</para>
            </item>
            <item>
              <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property is <see cref="F:System.ServiceModel.ReleaseInstanceMode.None" />.</para>
            </item>
            <item>
              <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation" /> is <see cref="F:System.ServiceModel.ImpersonationOption.NotAllowed" />.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> class.  </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="AutoDisposeParameters">
      <MemberSignature Language="C#" Value="public bool AutoDisposeParameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoDisposeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property determines whether the service disposes all disposable parameters (input, output or reference parameters) that were created while processing a message. The default value is true. Set this property to false if you want to prevent the system from disposing of resources and cache them if required.</para>
          <para>For example, if <see cref="P:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters" /> is false, then the sender is responsible for closing the stream on the sending side.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets whether parameters are to be automatically disposed.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Impersonation">
      <MemberSignature Language="C#" Value="public System.ServiceModel.ImpersonationOption Impersonation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.ImpersonationOption Impersonation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ImpersonationOption</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation" /> property (together with a binding configuration that supports impersonation) to enable specified methods (those marked with the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation" /> property set to <see cref="F:System.ServiceModel.ImpersonationOption.Allowed" /> or <see cref="F:System.ServiceModel.ImpersonationOption.Required" />) to execute under the caller's identity. For details, including how impersonation is performed when using <see cref="F:System.ServiceModel.ImpersonationOption.Allowed" /> together with the <see cref="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations" /> property, see <format type="text/html"><a href="110e60f7-5b03-4b69-b667-31721b8e3152">Delegation and Impersonation with WCF</a></format> and <format type="text/html"><a href="431db851-a75b-4009-9fe2-247243d810d3">How To: Impersonate a Client on a Service</a></format>.</para>
          <block subset="none" type="note">
            <para>When programmatically adding a service endpoint that performs impersonation, you must either use one of the <see cref="Overload:System.ServiceModel.ServiceHost.AddServiceEndpoint" /> methods or the <see cref="M:System.ServiceModel.Description.ContractDescription.GetContract(System.Type,System.Type)" /> method to properly load the contract into a new <see cref="T:System.ServiceModel.Description.ServiceDescription" /> object. Using a configuration file requires no extra step.</para>
          </block>
          <para>There may be specific scenarios when impersonation is not supported. crdefault <format type="text/html"><a href="72027d0f-146d-40c5-9d72-e94392c8bb40">Unsupported Scenarios</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that indicates the level of caller impersonation that the operation supports.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstanceMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.ReleaseInstanceMode ReleaseInstanceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.ReleaseInstanceMode ReleaseInstanceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ReleaseInstanceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property to specify when indigo1 recycles a service object in the course of executing a method. The default behavior is to recycle a service object according to the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> value. Setting the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property changes that default behavior.</para>
          <para>The <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> makes no threading guarantees. If you must have a new, unmodified object when your service runs, set the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property to <see cref="F:System.ServiceModel.InstanceContextMode.PerCall" />. </para>
          <para>In transaction scenarios, the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property is often used to ensure that old data associated with the service object is cleaned up prior to processing a method call. You can also ensure that service objects associated with transactions are recycled after the transaction successfully completes by setting the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete" /> property to true.</para>
          <para>You can choose the following behaviors:</para>
          <list type="bullet">
            <item>
              <para>Recycle a service object before an operation is called.</para>
            </item>
            <item>
              <para>Recycle a service object after an operation is called.</para>
            </item>
            <item>
              <para>Recycle a service object both before and after an operation is called.</para>
            </item>
            <item>
              <para>No recycling behavior.</para>
            </item>
          </list>
          <para>You can also use <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> to configure a callback contract operation in a duplex client application. When used on a callback operation, the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode" /> property must be <see cref="F:System.ServiceModel.ReleaseInstanceMode.None" /> or an <see cref="T:System.InvalidOperationException" /> exception is thrown at runtime.</para>
          <para>In addition, it is important to realize that if the service is created by passing a service object to the <see cref="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])" /> constructor, the value of this property is treated as if it were <see cref="F:System.ServiceModel.ReleaseInstanceMode.None" />. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that indicates when in the course of an operation invocation to recycle the service object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IOperationBehavior.AddBindingParameters">
      <MemberSignature Language="C#" Value="void IOperationBehavior.AddBindingParameters (System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(class System.ServiceModel.Description.OperationDescription description, class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="parameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Implements the <see cref="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" /> method.</para>
        </summary>
        <param name="description">
          <attribution license="cc4" from="Microsoft" modified="false" />The operation description modified to support <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> properties.</param>
        <param name="parameters">
          <attribution license="cc4" from="Microsoft" modified="false" />Binding parameters passed to support binding behaviors.</param>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior">
      <MemberSignature Language="C#" Value="void IOperationBehavior.ApplyClientBehavior (System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.ClientOperation proxy);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription description, class System.ServiceModel.Dispatcher.ClientOperation proxy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="proxy" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Implements the client operation behavior.</para>
        </summary>
        <param name="description">
          <attribution license="cc4" from="Microsoft" modified="false" />The operation description modified to support <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> properties.</param>
        <param name="proxy">
          <attribution license="cc4" from="Microsoft" modified="false" />The extensibility access point to insert custom client modifications for this operation.</param>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="void IOperationBehavior.ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription description, System.ServiceModel.Dispatcher.DispatchOperation dispatch);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription description, class System.ServiceModel.Dispatcher.DispatchOperation dispatch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatch" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Implements the service operation behavior.</para>
        </summary>
        <param name="description">
          <attribution license="cc4" from="Microsoft" modified="false" />The operation description modified to support <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> properties.</param>
        <param name="dispatch">
          <attribution license="cc4" from="Microsoft" modified="false" />The extensibility point to insert custom service modifications for this operation.</param>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IOperationBehavior.Validate">
      <MemberSignature Language="C#" Value="void IOperationBehavior.Validate (System.ServiceModel.Description.OperationDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IOperationBehavior.Validate(class System.ServiceModel.Description.OperationDescription description) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Implements the validation behavior.</para>
        </summary>
        <param name="description">
          <attribution license="cc4" from="Microsoft" modified="false" />The operation description to validate.</param>
      </Docs>
    </Member>
    <Member MemberName="TransactionAutoComplete">
      <MemberSignature Language="C#" Value="public bool TransactionAutoComplete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransactionAutoComplete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Set the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete" /> property to false to complete or abort transactions directly in the code for the operation. </para>
          <para>Handled exceptions can be thrown in the course of the operation without automatically aborting the transaction. Only unhandled exceptions trigger an automatic abort.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that indicates whether to automatically complete the current transaction scope if no unhandled exceptions occur.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="TransactionScopeRequired">
      <MemberSignature Language="C#" Value="public bool TransactionScopeRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransactionScopeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Set the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired" /> to true to require your operation to execute within a transaction scope. If a flowed transaction is available, the operation executes within that transaction. If one is not available, a new transaction is created and used for the operation execution. The binding specified in the endpoint controls whether flowed transactions are supported. Therefore, to obtain the proper behavior you must understand the interaction between whether transaction flow is permitted by the binding and the <see cref="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired" /> property. The following table shows the possible behavior.</para>
          <list type="table">
            <item>
              <term>
                <para>TransactionScopeRequired</para>
              </term>
              <description>
                <para>Binding permits transaction flow</para>
              </description>
              <description>
                <para>Caller flows transaction </para>
              </description>
              <description>
                <para>Result</para>
              </description>
            </item>
            <item>
              <term>
                <para>False</para>
              </term>
              <description>
                <para>False</para>
              </description>
              <description>
                <para>No</para>
              </description>
              <description>
                <para>Method executes without a transaction.</para>
              </description>
            </item>
            <item>
              <term>
                <para>True</para>
              </term>
              <description>
                <para>False</para>
              </description>
              <description>
                <para>No</para>
              </description>
              <description>
                <para>Method creates and executes within a new transaction.</para>
              </description>
            </item>
            <item>
              <term>
                <para>True or False</para>
              </term>
              <description>
                <para>False</para>
              </description>
              <description>
                <para>Yes</para>
              </description>
              <description>
                <para>A SOAP fault is returned for the transaction header.</para>
              </description>
            </item>
            <item>
              <term>
                <para>False</para>
              </term>
              <description>
                <para>True</para>
              </description>
              <description>
                <para>Yes</para>
              </description>
              <description>
                <para>Method executes without a transaction.</para>
              </description>
            </item>
            <item>
              <term>
                <para>True</para>
              </term>
              <description>
                <para>True</para>
              </description>
              <description>
                <para>Yes</para>
              </description>
              <description>
                <para>Method executes under the flowed transaction.</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that indicates whether the method requires a transaction scope for its execution.</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>