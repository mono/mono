<?xml version="1.0" encoding="utf-8"?>
<Type Name="UriTemplateEquivalenceComparer" FullName="System.UriTemplateEquivalenceComparer">
  <TypeSignature Language="C#" Value="public class UriTemplateEquivalenceComparer : System.Collections.Generic.IEqualityComparer&lt;UriTemplate&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UriTemplateEquivalenceComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;class System.UriTemplate&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.UriTemplate&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>
        <see cref="T:System.UriTemplate" /> instances are compared using reference equality by default. The <see cref="T:System.UriTemplateEquivalenceComparer" /> class evaluates equivalence using <see cref="M:System.UriTemplate.IsEquivalentTo(System.UriTemplate)" /> instead of the default reference equality check. This class is useful when you wish to compare two <see cref="T:System.UriTemplate" /> instances based on the URIs they match instead of strict reference equality.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>A class used to compare <see cref="T:System.UriTemplate" /> instances for structural (instead of reference) equivalence.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UriTemplateEquivalenceComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.UriTemplateEquivalenceComparer" /> class.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (UriTemplate x, UriTemplate y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.UriTemplate x, class System.UriTemplate y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UriTemplate" />
        <Parameter Name="y" Type="System.UriTemplate" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not normally called directly. It is called by another class that is comparing two <see cref="T:System.UriTemplate" /> instances.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares two <see cref="T:System.UriTemplate" /> instances for equivalence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A value that indicates whether the two <see cref="T:System.UriTemplate" /> instances are equivalent.</para>
        </returns>
        <param name="x">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.UriTemplate" /> instance.</param>
        <param name="y">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.UriTemplate" /> instance.</param>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (UriTemplate obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.UriTemplate obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.UriTemplate" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is not normally called directly. It is called by another class that requires a hash of a <see cref="T:System.UriTemplate" /> instance.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a hash code for the specified <see cref="T:System.UriTemplate" /> instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The hash code.</para>
        </returns>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.UriTemplate" /> instance.</param>
      </Docs>
    </Member>
  </Members>
</Type>