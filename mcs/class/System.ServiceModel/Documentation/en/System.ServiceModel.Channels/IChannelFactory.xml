<?xml version="1.0" encoding="utf-8"?>
<Type Name="IChannelFactory" FullName="System.ServiceModel.Channels.IChannelFactory">
  <TypeSignature Language="C#" Value="public interface IChannelFactory : System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelFactory implements class System.ServiceModel.ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.ServiceModel.Channels.IChannelFactory" /> interface represents the base interface for channel factories.</para>
      <para>Channel factories and their associated channels are generally used by the clients of a service that initiate communication. Listener factories that implement the <see cref="T:System.ServiceModel.Channels.IChannelListener" /> interface and their associated listeners, by contrast, provide the mechanisms used to accept the channels through which communications with a service is initiated. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Defines the interface that must be implemented by a channel factory to produce channels.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="GetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetProperty&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T GetProperty&lt;class T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack. If a layer supports returning the requested object, it returns it. If not, it delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns null.</para>
          <para>You must implement <see cref="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1" /> whenever you implement a channel factory. <see cref="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1" /> is an excellent way to communicate information along the channel factory stack without having to know what channel factories are below you, or what channel factories above you are interested in performing queries. Define interfaces for people to query on for any interesting information you have. Whenever you do not recognize the type argument for <see cref="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1" />, delegate down to the next channel factory in the stack or return null if you are creating a new transport channel at the bottom of the stack. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The typed object <paramref name="T" /> requested, if it is present, or null if it is not.</para>
        </returns>
        <typeparam name="T">
          <attribution license="cc4" from="Microsoft" modified="false" />The typed object for which the method is querying.</typeparam>
      </Docs>
    </Member>
  </Members>
</Type>