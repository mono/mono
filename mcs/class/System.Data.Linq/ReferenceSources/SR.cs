//
// This file was generated by txt2sr tool
//

partial class SR
{
	public const string OwningTeam = "DLinq";
	public const string CannotAddChangeConflicts = "Cannot add change conflicts. They are added automatically during SubmitChanges.";
	public const string CannotRemoveChangeConflicts = "Cannot remove change conflicts.";
	public const string InconsistentAssociationAndKeyChange = "The member '{0}' was changed to be inconsistent with the association member '{1}'.";
	public const string UnableToDetermineDataContext = "Unable to determine DataContext for compiled query execution.";
	public const string ArgumentTypeHasNoIdentityKey = "The type '{0}' has no identity key.";
	public const string CouldNotConvert = "Could not convert from type '{0}' to type '{1}'.";
	public const string CannotRemoveUnattachedEntity = "Cannot remove an entity that has not been attached.";
	public const string ColumnMappedMoreThanOnce = "Mapping Problem: The database column '{0}' is mapped more than once.";
	public const string CouldNotAttach = "Item already exists in data context.";
	public const string CouldNotGetTableForSubtype = "Could not retrieve a Table for inheritance subtype '{0}', try Table of {1} instead.";
	public const string CouldNotRemoveRelationshipBecauseOneSideCannotBeNull = "An attempt was made to remove a relationship between a {0} and a {1}. However, one of the relationship's foreign keys ({2}) cannot be set to null.";
	public const string EntitySetAlreadyLoaded = "The EntitySet is already loaded and the source cannot be changed.";
	public const string EntitySetModifiedDuringEnumeration = "EntitySet was modified during enumeration.";
	public const string ExpectedQueryableArgument = "Argument {0} does not implement {1}.";
	public const string ExpectedUpdateDeleteOrChange = "Expected update, delete, or change.";
	public const string KeyIsWrongSize = "Key is the wrong size. Expected {0}. Actual {1}.";
	public const string KeyValueIsWrongType = "Key value is the wrong type. Expected assignable from {0}. Actual {1}.";
	public const string IdentityChangeNotAllowed = "Value of member '{0}' of an object of type '{1}' changed.\r\nA member defining the identity of the object cannot be changed.\r\nConsider adding a new object with new identity and deleting the existing one instead.";
	public const string DbGeneratedChangeNotAllowed = "Value of member '{0}' of an object of type '{1}' changed.\r\nA member that is computed or generated by the database cannot be changed.";
	public const string ModifyDuringAddOrRemove = "Could not modify EntitySet.";
	public const string ProviderDoesNotImplementRequiredInterface = "Specified provider type '{0}' does not implement '{1}'.";
	public const string ProviderTypeNull = "Non-null provider type expected.";
	public const string TypeCouldNotBeAdded = "Instance of type '{0}' could not be added. This type is not part of the mapped type system.";
	public const string TypeCouldNotBeRemoved = "Instance of type '{0}' could not be removed. This type is not part of the mapped type system.";
	public const string TypeCouldNotBeTracked = "Instance of type '{0}' could not be tracked. This type is not part of the mapped type system.";
	public const string TypeIsNotEntity = "The type '{0}' is not an entity.";
	public const string UnrecognizedRefreshObject = "An object specified for refresh is not recognized.";
	public const string UnhandledExpressionType = "Unhandled Expression Type: {0}";
	public const string UnhandledBindingType = "Unhandled Binding Type: {0}";
	public const string ObjectTrackingRequired = "Object tracking is not enabled for the current data context instance.";
	public const string OptionsCannotBeModifiedAfterQuery = "Data context options cannot be modified after results have been returned from a query.";
	public const string DeferredLoadingRequiresObjectTracking = "Deferred loading requires that object tracking is also enabled.";
	public const string SubqueryDoesNotSupportOperator = "The operator '{0}' is not supported in Subquery.";
	public const string SubqueryNotSupportedOn = "Subquery is not supported on '{0}'.";
	public const string SubqueryNotSupportedOnType = "Subquery is not supported on '{0}' of type '{1}'.";
	public const string SubqueryNotAllowedAfterFreeze = "SetSubquery is not allowed after freeze or attach to DataContext.";
	public const string IncludeNotAllowedAfterFreeze = "LoadWith is not allowed after freeze or attach to DataContext.";
	public const string LoadOptionsChangeNotAllowedAfterQuery = "Setting load options is not allowed after results have been returned from a query.";
	public const string IncludeCycleNotAllowed = "Cycles not allowed in LoadOptions LoadWith type graph.";
	public const string SubqueryMustBeSequence = "Subquery must be a sequence expression.";
	public const string RefreshOfDeletedObject = "Unable to refresh the specified object.  The object no longer exists in the database.";
	public const string RefreshOfNewObject = "An object specified for refresh is pending insert and cannot be refreshed.";
	public const string CannotChangeInheritanceType = "Not allowed: Inheritance discriminator change from '{0}' to '{1}' would change type from '{2}' to '{3}'.";
	public const string DataContextCannotBeUsedAfterDispose = "DataContext accessed after Dispose.";
	public const string TypeIsNotMarkedAsTable = "The type '{0}' is not mapped as a Table.";
	public const string NonEntityAssociationMapping = "Invalid association mapping for member '{0}.{1}'.  '{2}' is not an entity.";
	public const string CannotPerformCUDOnReadOnlyTable = "Can't perform Create, Update, or Delete operations on '{0}' because it has no primary key.";
	public const string InsertCallbackComment = "--Callback into user code for insert.";
	public const string UpdateCallbackComment = "--Callback into user code for update.";
	public const string DeleteCallbackComment = "--Callback into user code for delete.";
	public const string RowNotFoundOrChanged = "Row not found or changed.";
	public const string UpdatesFailedMessage = "{0} of {1} updates failed.";
	public const string CycleDetected = "A cycle was detected in the set of changes";
	public const string CantAddAlreadyExistingItem = "Cannot add an entity that already exists.";
	public const string CantAddAlreadyExistingKey = "Cannot add an entity with a key that is already in use.";
	public const string DatabaseGeneratedAlreadyExistingKey = "The database generated a key that is already in use.";
	public const string InsertAutoSyncFailure = "Member AutoSync failure. For members to be AutoSynced after insert, the type must either have an auto-generated identity, or a key that is not modified by the database after insert.";
	public const string EntitySetDataBindingWithAbstractBaseClass = "Cannot add an instance of an abstract class to EntitySet<{0}>.";
	public const string EntitySetDataBindingWithNonPublicDefaultConstructor = "{0} must have a parameterless constructor when using IBindingList to add new instances.";
	public const string InvalidLoadOptionsLoadMemberSpecification = "The expression specified must be of the form p.A, where p is the parameter and A is a property or field member.";
	public const string EntityIsTheWrongType = "The entity is not of the correct type.";
	public const string OriginalEntityIsWrongType = "The original state instance has the wrong type.";
	public const string CannotAttachAlreadyExistingEntity = "Cannot attach an entity that already exists.";
	public const string CannotAttachAsModifiedWithoutOriginalState = "An entity can only be attached as modified without original state if it declares a version member or does not have an update check policy.";
	public const string CannotPerformOperationDuringSubmitChanges = "The operation cannot be performed during a call to SubmitChanges.";
	public const string CannotPerformOperationOutsideSubmitChanges = "The operation can only be performed inside a user override method during a call to SubmitChanges.";
	public const string CannotPerformOperationForUntrackedObject = "The operation cannot be performed for the entity because it is not being change tracked.";
	public const string CannotAttachAddNonNewEntities = "An attempt has been made to Attach or Add an entity that is not new, perhaps having been loaded from another DataContext.  This is not supported.";
	public const string QueryWasCompiledForDifferentMappingSource = "Query was compiled for a different mapping source than the one associated with the specified DataContext.";

	// manually harvested
	public const string AbstractClassAssignInheritanceDiscriminator = "Abstract class '{0}' should not be assigned an inheritance discriminator key.";
	public const string ArgumentEmpty = "The string parameter '{0}' was expected to have length greater than zero.";
	public const string ArgumentTypeMismatch = "One or more type mismatches in argument '{0}'.";
	public const string ArgumentWrongType = "The argument '{0}' was the wrong type. Expected '{1}'. Actual '{2}'.";
	public const string ArgumentWrongValue = "The argument '{0}' was the wrong value.";
	public const string BadFunctionTypeInMethodMapping = "Mapping Problem: Bad function type in mapping for method '{0}'.";
	public const string BadKeyMember = "Could not find key member '{0}' of key '{1}' on type '{2}'. The key may be wrong or the field or property on '{2}' has changed names.";
	public const string BadParameterType = "A query parameter cannot be of type '{0}'.";
	public const string BadProjectionInSelect = "Bad projection in Select.";
	public const string BadStorageProperty = "Bad Storage property: '{0}' on member '{1}.{2}'.";
	public const string BinaryOperatorNotRecognized = "Binary operator not recognized: {0}";
	public const string CannotAggregateType = "The type '{0}' is not supported in aggregation operations.";
	public const string CannotAssignNull = "The null value cannot be assigned to a member with type {0} which is a non-nullable value type.";
	public const string CannotAssignToMember = "Cannot assign value to member '{0}'. It does not define a setter.";
	public const string CannotCompareItemsAssociatedWithDifferentTable = "Cannot compare entities associated with different tables.";
	public const string CannotConvertToEntityRef = "Cannot convert type '{0}' to EntityRef/Link.";
	public const string CannotDeleteTypesOf = "Cannot delete items of type {0}.";
	public const string CannotEnumerateResultsMoreThanOnce = "The query results cannot be enumerated more than once.";
	public const string CannotGetInheritanceDefaultFromNonInheritanceClass = "Mapping Problem: Cannot get inheritance default from class not mapped into an inheritance hierarchy.";
	public const string CannotMaterializeEntityType = "Explicit construction of entity type '{0}' in query is not allowed.";
	public const string CannotMaterializeList = "Cannot create a query result of type '{0}'.";
	public const string CannotTranslateExpressionToSql = "Cannot translate expression to SQL for this server version.";
	public const string CapturedValuesCannotBeSequences = "Local sequence cannot be used in LINQ to SQL implementations of query operators except the Contains operator.";
	public const string ClassLiteralsNotAllowed = "Class literals are not allowed: {0}.";
	public const string ClientCaseShouldNotHold = "Client case should not hold '{0}'. It should probably have been SqlSimpleCase.";
	public const string ClrBoolDoesNotAgreeWithSqlType = "Expected Node with CLR Type of 'bool' to have SQL type of 'Bit' or 'Predicate'. Instead, it was type '{0}'.";
	public const string ColumnCannotReferToItself = "Column cannot refer to itself.";
	public const string ColumnClrTypeDoesNotAgreeWithExpressionsClrType = "The ClrType of the column did not agree with the ClrType of the expression.";
	public const string ColumnIsDefinedInMultiplePlaces = "Column '{0}' is defined in multiple places.";
	public const string ColumnIsNotAccessibleThroughDistinct = "Column '{0}' is not accessible through distinct.";
	public const string ColumnIsNotAccessibleThroughGroupBy = "Column '{0}' is not accessible through group by.";
	public const string ColumnReferencedIsNotInScope = "Column referenced is not in scope: '{0}'.";
	public const string ComparisonNotSupportedForType = "Comparison operators not supported for type '{0}'.";
	public const string CompiledQueryAgainstMultipleShapesNotSupported = "Compiled queries across DataContexts with different LoadOptions not supported.";
	public const string CompiledQueryCannotReturnType = "A compiled query cannot return type '{0}'.";
	public const string ConstructedArraysNotSupported = "Constructed arrays are only supported for Contains.";
	public const string ContextNotInitialized = "SqlContext is not initialized.";
	public const string ConvertToCharFromBoolNotSupported = "There is no supported conversion from a Boolean to a Character type.";
	public const string ConvertToDateTimeOnlyForDateTimeOrString = "Only DateTimes or strings can be converted to DateTime.";
	public const string CouldNotAssignSequence = "Could not assign sequence of {0} to type {1}.";
	public const string CouldNotConvertToPropertyOrField = "MemberInfo '{0}' had no corresponding field or property.";
	public const string CouldNotCreateAccessorToProperty = "Could not create PropertyAccessor<{0},{1}> to {2}.";
	public const string CouldNotDetermineCatalogName = "Unable to determine catalog name.";
	public const string CouldNotDetermineDbGeneratedSqlType = "Unable to determine SQL type for '{0}' that can also be generated by the server.";
	public const string CouldNotDetermineSqlType = "Unable to determine SQL type for '{0}'.";
	public const string CouldNotFindElementTypeInModel = "Mapping Problem: Could not find element type in model for '{0}'.";
	public const string CouldNotFindRequiredAttribute = "Mapping Problem: Could not find required attribute '{0}': {1}.";
	public const string CouldNotFindRuntimeTypeForMapping = "Mapping Problem: Cannot find runtime type for type mapping '{0}'.";
	public const string CouldNotFindTypeFromMapping = "Mapping Problem: Cannot find type '{0}' from mapping.";
	public const string CouldNotGetClrType = "Could not get the ClrType.";
	public const string CouldNotGetSqlType = "Could not get the SqlType.";
	public const string CouldNotHandleAliasRef = "Could not handle alias ref of {0}.";
	public const string CouldNotTranslateExpressionForReading = "Could not translate expression '{0}' into SQL and could not treat it as a local expression.";
	public const string CreateDatabaseFailedBecauseOfClassWithNoMembers = "Unable to create database because mapped class '{0}' has zero members.";
	public const string CreateDatabaseFailedBecauseOfContextWithNoTables = "Unable to create database because data context '{0}' has no tables.";
	public const string CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists = "Unable to create database because the database '{0}' already exists.";
	public const string DatabaseDeleteThroughContext = "Operation not allowed after DeleteDatabase call.";
	public const string DatabaseNodeNotFound = "Database node not found.  Is the mapping namespace ({0}) correctly specified?";
	public const string DeferredMemberWrongType = "Deferred member not one of EntitySet, EntityRef, or Link.";
	public const string DidNotExpectAs = "Did not expect 'as' operator in '{0}'.";
	public const string DidNotExpectTypeBinding = "Did not expect type binding back. This should result in a type case not a simple case.";
	public const string DidNotExpectTypeChange = "Did not expect operation to change result type. Original type was '{0}' new type is '{1}'.";
	public const string DiscriminatorClrTypeNotSupported = "Discriminator '{0}.{1}' may not be type '{2}'.";
	public const string DistributedTransactionsAreNotAllowed = "Distributed transactions are not allowed.";
	public const string EmptyCaseNotSupported = "Empty case is not supported.";
	public const string EntityRefAlreadyLoaded = "The EntityRef is already loaded and the source cannot be changed.";
	public const string ExceptNotSupportedForHierarchicalTypes = "Except is not supported for hierarchical result types.";
	public const string ExpectedBitFoundPredicate = "Expected a Bit here but found a Predicate.";
	public const string ExpectedClrTypesToAgree = "Expected ClrTypes to agree. One was '{0}' the other was '{1}'.";
	public const string ExpectedEmptyElement = "Element '{0}' must be empty, but contains a node of type {1} named '{2}'.";
	public const string ExpectedNoObjectType = "Expected no ObjectType nodes to remain.";
	public const string ExpectedPredicateFoundBit = "Expected a Predicate here but found a Bit.";
	public const string ExpressionNotDeferredQuerySource = "Expression is not a deferred query source.";
	public const string GeneralCollectionMaterializationNotSupported = "General collection materialization is not supported.";
	public const string GroupingNotSupportedAsOrderCriterion = "A grouping cannot be used as an order criterion; you may want to use its key instead.";
	public const string IQueryableCannotReturnSelfReferencingConstantExpression = "An IQueryable that returns a self-referencing Constant expression is not supported.";
	public const string IdentityClrTypeNotSupported = "Invalid type mapping for Identity member '{0}.{1}'.  Type '{2}' is not supported for identity members.";
	public const string IifReturnTypesMustBeEqual = "The IIF method returns two separate types: {0}, {1}.  Translation to SQL does not support different return types.";
	public const string Impossible = "Should not have reached this point.";
	public const string IncorrectAutoSyncSpecification = "Incorrect AutoSync specification for member '{0}'.";
	public const string IncorrectNumberOfParametersMappedForMethod = "Mapping Problem: Incorrect number of parameters mapped for method '{0}'.";
	public const string IndexOfWithStringComparisonArgNotSupported = "The translation of String.IndexOf to SQL does not support versions with a StringComparison argument.";
	public const string InfiniteDescent = "Descent limit exceeded.";
	public const string InheritanceCodeMayNotBeNull = "Inheritance code value may not be null.";
	public const string InheritanceCodeUsedForMultipleTypes = "The inheritance code '{0}' is used for multiple types.";
	public const string InheritanceHierarchyDoesNotDefineDefault = "The inheritance hierarchy rooted at '{0}' does not define a default.";
	public const string InheritanceSubTypeIsAlsoRoot = "The inheritance subtype '{0}' is also declared as a root type.";
	public const string InheritanceTypeDoesNotDeriveFromRoot = "Inheritance type '{0}' does not derive from inheritance root type '{1}'.";
	public const string InheritanceTypeHasMultipleDefaults = "The inheritance type '{0}' has multiple defaults.";
	public const string InheritanceTypeHasMultipleDiscriminators = "The inherited type '{0}' cannot have multiple discriminator key values.";
	public const string InsertItemMustBeConstant = "The item of an Insert must be a constant value expression.";
	public const string IntersectNotSupportedForHierarchicalTypes = "Intersect is not supported for hierarchical result types.";
	public const string InvalidConnectionArgument = "'{0}' must be string, SqlConnection, SqlCeConnection, SqlTransaction, or SqlCeTransaction.";
	public const string InvalidDbGeneratedType = "The primary key column of type '{0}' cannot be generated by the server.";
	public const string InvalidDeleteOnNullSpecification = "Invalid DeleteOnNull specification for member '{0}'. DeleteOnNull can only be true for singleton association members mapped to non-nullable foreign key columns.";
	public const string InvalidFieldInfo = "Could not create FieldAccessor<{0},{1}> from FieldInfo '{2}'.";
	public const string InvalidFormatNode = "Could not format node '{0}' for execution as SQL.";
	public const string InvalidGroupByExpression = "The group by operation contains an expression that cannot be translated.";
	public const string InvalidGroupByExpressionType = "A group by expression can only contain non-constant scalars that are comparable by the server. The expression with type '{0}' is not comparable.";
	public const string InvalidMethodExecution = "The method '{0}' is not mapped as a stored procedure or user-defined function.";
	public const string InvalidOrderByExpression = "An order by expression can only contain non-constant scalars that are order comparable by the server. The expression with type '{0}' is not order comparable.";
	public const string InvalidProviderType = "The specified type '{0}' is not a valid provider type.";
	public const string InvalidReferenceToRemovedAliasDuringDeflation = "Reference to removed alias discovered during deflation.";
	public const string InvalidReturnFromSproc = "'{0}' is not a valid return type for a mapped stored procedure method.";
	public const string InvalidSequenceOperatorCall = "Sequence operator call is only valid for Sequence, Queryable, or DataQueryExtensions not for '{0}'.";
	public const string InvalidUseOfGenericMethodAsMappedFunction = "Invalid use of generic method '{0}' as mapped function.";
	public const string LastIndexOfWithStringComparisonArgNotSupported = "The translation of String.LastIndexOf to SQL does not support versions with a StringComparison argument.";
	public const string LenOfTextOrNTextNotSupported = "Translation would contain LEN of Text or NText arguments: {0}";
	public const string LinkAlreadyLoaded = "The Link is already loaded and the source cannot be changed.";
	public const string LogAttemptingToDeleteDatabase = "Attempting to delete the database '{0}'.";
	public const string LogGeneralInfoMessage = "{0}: {1}.";
	public const string LogStoredProcedureExecution = "Execute stored procedure: {0}({1}).";
	public const string MappedMemberHadNoCorrespondingMemberInType = "The column or association '{0}' in the mapping had no corresponding member in type '{1}'. Mapping members from above root type is not supported.";
	public const string MappedTypeMustHaveDefaultConstructor = "The type '{0}' must declare a default (parameterless) constructor in order to be constructed during mapping.";
	public const string MappingForTableUndefined = "Mapping Problem: Mapping for table '{0}' is not defined.";
	public const string MappingOfInterfacesMemberIsNotSupported = "The mapping of interface member {0}.{1} is not supported.";
	public const string MathRoundNotSupported = "For translation to SQL, the Math.Round method needs a MidpointRounding parameter. Use 'AwayFromZero' to specify the SQL function ROUND.";
	public const string MaxSizeNotSupported = "Translation would contain an out parameter of type Text, NText, or Image: {0}";
	public const string MemberAccessIllegal = "Member access '{0}' of '{1}' not legal on type '{2}.";
	public const string MemberCannotBeTranslated = "The member '{0}.{1}' has no supported translation to SQL.";
	public const string MemberCouldNotBeTranslated = "Member '{0}.{1}' could not be translated.";
	public const string MemberMappedMoreThanOnce = "The member '{0}' is mapped more than once.";
	public const string MemberNotPartOfProjection = "Binding error: Member '{0}.{1}' not found in projection.";
	public const string MethodCannotBeFound = "Method '{0}' cannot be found.";
	public const string MethodFormHasNoSupportConversionToSql = "The method '{0}' has a translation to SQL, but the overload '{1}' does not.";
	public const string MethodHasNoSupportConversionToSql = "Method '{0}' has no supported translation to SQL.";
	public const string MethodNotMappedToStoredProcedure = "The method specified ({0}) is not mapped to a stored procedure.";
	public const string MismatchedThisKeyOtherKey = "The number of ThisKey columns is different from the number of OtherKey columns for the association property '{0}' in the type '{1}'.";
	public const string NoDiscriminatorFound = "The inheritance type '{0}' does not declare a discriminator column.";
	public const string NoMethodInTypeMatchingArguments = "No method in type '{0}' matching arguments.";
	public const string NoResultTypesDeclaredForFunction = "No result types declared for function '{0}' that returns IMultipleResults.";
	public const string NonConstantExpressionsNotSupportedFor = "Only arguments that can be evaluated on the client are supported for the {0} method.";
	public const string NonConstantExpressionsNotSupportedForRounding = "Only arguments that can be evaluated on the client are supported for the MidpointRounding argument in Math.Round.";
	public const string NonCountAggregateFunctionsAreNotValidOnProjections = "Parameterless aggregate operator '{0}' is not supported over projections.";
	public const string NonInheritanceClassHasDiscriminator = "The inheritance type '{0}' has a discriminator but is not part of a mapped inheritance hierarchy.";
	public const string ParameterNotInScope = "The parameter '{0}' is not in scope.";
	public const string ParametersCannotBeSequences = "Parameters cannot be sequences.";
	public const string PrimaryKeyInSubTypeNotSupported = "The subtype '{0}' cannot contain the primary key member '{1}'.";
	public const string ProviderCannotBeUsedAfterDispose = "Provider cannot be accessed after Dispose.";
	public const string ProviderNotInstalled = "Cannot open '{0}'. Provider '{1}' not installed.";
	public const string ProviderTypeNotFound = "Specified provider type '{0}' not found.";
	public const string QueryOnLocalCollectionNotSupported = "Queries with local collections are not supported.";
	public const string QueryOperatorNotSupported = "The query operator '{0}' is not supported.";
	public const string QueryOperatorOverloadNotSupported = "Unsupported overload used for query operator '{0}'.";
	public const string ReaderUsedAfterDispose = "Reader used after dispose.";
	public const string RequiredColumnDoesNotExist = "The required column '{0}' does not exist in the results.";
	public const string ResultTypeNotMappedToFunction = "Result type '{0}' is not mapped to function '{1}'.";
	public const string SelectManyDoesNotSupportStrings = "SelectMany does not support strings.";
	public const string SequenceOperatorsNotSupportedForType = "Sequence operators not supported for type '{0}'.";
	public const string SimpleCaseShouldNotHold = "Simple case should not hold '{0}' should probably have been SqlClientCase.";
	public const string SkipIsValidOnlyOverOrderedQueries = "The Skip operator is valid only over ordered queries.";
	public const string SkipNotSupportedForSequenceTypes = "The Skip operator is not supported for sequences containing sequences (with the exception of IGrouping under SQL Server 2005).";
	public const string SkipRequiresSingleTableQueryWithPKs = "This provider supports Skip only over ordered queries returning entities or projections that contain all identity columns, where the query is a single-table (non-join) query, or is a Distinct, Except, Intersect, or Union (not Concat) operation.";
	public const string SourceExpressionAnnotation = "Source Expression: {0}";
	public const string SprocsCannotBeComposed = "Stored procedures cannot be used inside queries.";
	public const string SqlMethodOnlyForSql = "Method '{0}' cannot be used on the client; it is only for translation to SQL.";
	public const string TextNTextAndImageCannotOccurInDistinct = "Translation would contain an expression of type Text, NText, or Image in a SELECT DISTINCT clause: {0}";
	public const string TextNTextAndImageCannotOccurInUnion = "Translation would contain an expression of type Text, NText, or Image in a SELECT within a UNION: {0}";
	public const string ToStringOnlySupportedForPrimitiveTypes = "Method ToString can only be translated to SQL for primitive types.";
	public const string TooManyResultTypesDeclaredForFunction = "More than one result type declared for function '{0}' that does not return IMultipleResults.";
	public const string TransactionDoesNotMatchConnection = "Transaction does not match connection.";
	public const string TwoMembersMarkedAsInheritanceDiscriminator = "Members '{0}' and '{1}' both marked as inheritance discriminator.";
	public const string TwoMembersMarkedAsPrimaryKeyAndDBGenerated = "Members '{0}' and '{1}' both marked as IsPrimaryKey and IsDbGenerated.";
	public const string TwoMembersMarkedAsRowVersion = "Members '{0}' and '{1}' both marked as row version.";
	public const string TypeBinaryOperatorNotRecognized = "Type Binary operator not recognized.";
	public const string TypeCannotBeOrdered = "Cannot order by type '{0}'.";
	public const string TypeColumnWithUnhandledSource = "Type column with unhandled source";
	public const string UnableToAssignValueToReadonlyProperty = "Unable to assign value to read only property '{0}'.";
	public const string UnableToBindUnmappedMember = "Binding error: Member '{0}.{1}' is not a mapped member of '{2}'.";
	public const string UnableToResolveRootForType = "Mapping Problem: Unable to resolve root for type '{0}'.";
	public const string UnexpectedElement = "Expected element '{0}', but found '{1}'.";
	public const string UnexpectedFloatingColumn = "Column declaration found outside row or table declaration.";
	public const string UnexpectedNode = "Unexpected node: {0}";
	public const string UnexpectedNull = "Unexpected null '{0}'.";
	public const string UnexpectedSharedExpression = "Unexpected shared-expression found.";
	public const string UnexpectedSharedExpressionReference = "Unexpected shared-expression reference found.";
	public const string UnexpectedTypeCode = "Unexpected type code: {0}";
	public const string UnhandledDeferredStorageType = "Unhandled deferred storage type: {0}.";
	public const string UnhandledMemberAccess = "Member '{0}' on node type '{1}' does not have a known translation to SQL.";
	public const string UnhandledStringTypeComparison = "SQL Server does not handle comparison of NText, Text, Xml, or Image data types.";
	public const string UnionDifferentMemberOrder = "Types in Union or Concat have members assigned in different order.";
	public const string UnionDifferentMembers = "Types in Union or Concat have different members assigned.";
	public const string UnionIncompatibleConstruction = "Types in Union or Concat are constructed incompatibly.";
	public const string UnionOfIncompatibleDynamicTypes = "Sources of type GetType or typeof are incompatible for Union-like operation.";
	public const string UnionWithHierarchy = "Types in Union or Concat cannot be constructed with hierarchy.";
	public const string UnmappedClassMember = "Class member {0}.{1} is unmapped.";
	public const string UnmappedDataMember = "Data member '{0}' of type '{1}' is not part of the mapping for type '{2}'. Is the member above the root of an inheritance hierarchy?";
	public const string UnrecognizedAttribute = "Unrecognized attribute '{0}' in mapping file.";
	public const string UnrecognizedElement = "Unrecognized element '{0}' in mapping file.";
	public const string UnrecognizedExpressionNode = "Unrecognized expression node: {0}";
	public const string UnrecognizedProviderMode = "'{0}' is not a valid provider mode.";
	public const string UnsafeStringConversion = "Unsafe string conversion from {0} to {1} may lead to implicit truncation.  Try reshaping the string explicitly with a Substring operation.";
	public const string UnsupportedDateTimeConstructorForm = "DateTime constructor form is not supported.";
	public const string UnsupportedDateTimeOffsetConstructorForm = "DateTimeOffset constructor form is not supported.";
	public const string UnsupportedNodeType = "The node type '{0}' is not supported.";
	public const string UnsupportedStringConstructorForm = "String constructor form is not supported.";
	public const string UnsupportedTimeSpanConstructorForm = "TimeSpan constructor form is not supported.";
	public const string UnsupportedTypeConstructorForm = "Constructor for server type '{0}' is not supported.";
	public const string UpdateItemMustBeConstant = "The item of an Update must be a constant value expression.";
	public const string ValueHasNoLiteralInSql = "Value has no literal in SQL: {0}";
	public const string VbLikeDoesNotSupportMultipleCharacterRanges = "Cannot translate multiple character ranges in the pattern argument.";
	public const string VbLikeUnclosedBracket = "Pattern contains unclosed bracket.";
	public const string WrongDataContext = "The query contains references to items defined on a different data context.";
	public const string WrongNumberOfValuesInCollectionArgument = "Wrong number of values in '{0}'. Expected {1}. Actually {2}.";
}
