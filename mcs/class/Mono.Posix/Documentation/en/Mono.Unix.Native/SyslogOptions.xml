<Type Name="SyslogOptions" FullName="Mono.Unix.Native.SyslogOptions">
  <TypeSignature Language="C#" Value="public enum SyslogOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SyslogOptions extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Posix</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>System logging options.</summary>
    <remarks>Possible <see cref="M:Mono.Unix.Native.Syscall.openlog" /><paramref name="option" /> values.</remarks>
    <altmember cref="M:Mono.Unix.Native.Syscall.openlog" />
  </Docs>
  <Members>
    <Member MemberName="LOG_CONS">
      <MemberSignature Language="C#" Value="LOG_CONS" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.Native.SyslogOptions LOG_CONS = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.Native.SyslogOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <see cref="M:Mono.Unix.Native.Syscall.syslog" />
        cannot pass the message to <c>syslogd</c>(8) it will attempt to write
        the message to the console ("/dev/console").</summary>
      </Docs>
    </Member>
    <Member MemberName="LOG_NDELAY">
      <MemberSignature Language="C#" Value="LOG_NDELAY" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.Native.SyslogOptions LOG_NDELAY = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.Native.SyslogOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Open the connection to <c>syslogd</c>(8) immediately.
        Normally the open is delayed until the first message is logged.
        Useful for programs that need to manage the order in which file
        descriptors are allocated.</summary>
      </Docs>
    </Member>
    <Member MemberName="LOG_NOWAIT">
      <MemberSignature Language="C#" Value="LOG_NOWAIT" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.Native.SyslogOptions LOG_NOWAIT = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.Native.SyslogOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="LOG_ODELAY">
      <MemberSignature Language="C#" Value="LOG_ODELAY" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.Native.SyslogOptions LOG_ODELAY = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.Native.SyslogOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Open the connection to <c>syslogd</c>(8) when the first
        message is logged.  This is the default, and need not be specified.</summary>
      </Docs>
    </Member>
    <Member MemberName="LOG_PERROR">
      <MemberSignature Language="C#" Value="LOG_PERROR" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.Native.SyslogOptions LOG_PERROR = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.Native.SyslogOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Write the message to standard error output as well as to the
        system log.</summary>
      </Docs>
    </Member>
    <Member MemberName="LOG_PID">
      <MemberSignature Language="C#" Value="LOG_PID" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.Native.SyslogOptions LOG_PID = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.Native.SyslogOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Log the process id with each message: useful for identiying
        instantiations of daemons.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
