<Type Name="FileSpecialAttributes" FullName="Mono.Unix.FileSpecialAttributes">
  <TypeSignature Language="C#" Value="public enum FileSpecialAttributes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FileSpecialAttributes extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Posix</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Unix file special attributes.</summary>
    <remarks>
      Unix file special attributes are a part of the Unix file system entry 
      (see <see cref="P:Mono.Unix.UnixFileSystemInfo.FileSpecialAttributes" />)
      and control filesystem- and operating system-specific behavior.
    </remarks>
    <altmember cref="P:Mono.Unix.UnixFileSystemInfo.FileSpecialAttributes" />
    <altmember cref="P:Mono.Unix.UnixStream.FileSpecialAttributes" />
  </Docs>
  <Members>
    <Member MemberName="SetGroupId">
      <MemberSignature Language="C#" Value="SetGroupId" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.FileSpecialAttributes SetGroupId = int32(1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.FileSpecialAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When the file is executed (either as a new process or via
          <see cref="M:Mono.Unix.Native.Syscall.exec" />), set the effective 
          group-id of the process 
          (<see cref="P:Mono.Unix.UnixEnvironment.EffectiveGroupId" />)
          to the owner group of the file
          (<see cref="P:Mono.Unix.UnixFileSystemInfo.OwnerGroupId" />).
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SetUserId">
      <MemberSignature Language="C#" Value="SetUserId" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.FileSpecialAttributes SetUserId = int32(2048)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.FileSpecialAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When the file is executed (either as a new process or via
          <see cref="M:Mono.Unix.Native.Syscall.exec" />), set the effective 
          user-id of the process 
          (<see cref="P:Mono.Unix.UnixEnvironment.EffectiveUserId" />)
          to the owner of the file
          (<see cref="P:Mono.Unix.UnixFileSystemInfo.OwnerUserId" />).
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Sticky">
      <MemberSignature Language="C#" Value="Sticky" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Mono.Unix.FileSpecialAttributes Sticky = int32(512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.Unix.FileSpecialAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Sticky bit.</para>
          <para>
          If set on a file, this is currently meaningless, but in years past it
          requested that the operating system keep the program's code in
          memory, thus speeding up further program invocations.  This is no
          longer necessary with virtual memory.
        </para>
          <para>
          If set on a directory, a file in the directory can be removed
          or renamed only if the user has write permission for the directory,
          and either:
        </para>
          <list type="bullet">
            <item>
              <term>owns the file</term>
            </item>
            <item>
              <term>owns the directory, or</term>
            </item>
            <item>
              <term>is the superuser (<c>root</c>).</term>
            </item>
          </list>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
