//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Web.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class WCFModelStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal WCFModelStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Web.Resources.WCFModelStrings", typeof(WCFModelStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} Line {1}, position {2}..
        /// </summary>
        internal static string ReferenceGroup_AppendLinePosition {
            get {
                return ResourceManager.GetString("ReferenceGroup_AppendLinePosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is listed as a shared data contract type, but is also listed in the type sharing exclusion list..
        /// </summary>
        internal static string ReferenceGroup_DataContractExcludedAndIncluded {
            get {
                return ResourceManager.GetString("ReferenceGroup_DataContractExcludedAndIncluded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The global {0} (&apos;{1}&apos;) has been defined in both &apos;{2}&apos; and &apos;{3}&apos;. They are different at &apos;{4}&apos;..
        /// </summary>
        internal static string ReferenceGroup_DuplicatedSchemaItems {
            get {
                return ResourceManager.GetString("ReferenceGroup_DuplicatedSchemaItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The global {0} (&apos;{1}&apos;) has been defined in both &apos;{2}&apos; and &apos;{3}&apos;. The difference between them (&apos;{4}&apos;) is ignored..
        /// </summary>
        internal static string ReferenceGroup_DuplicatedSchemaItemsIgnored {
            get {
                return ResourceManager.GetString("ReferenceGroup_DuplicatedSchemaItemsIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Address must be specified..
        /// </summary>
        internal static string ReferenceGroup_EmptyAddress {
            get {
                return ResourceManager.GetString("ReferenceGroup_EmptyAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Protocol must be specified..
        /// </summary>
        internal static string ReferenceGroup_EmptyProtocol {
            get {
                return ResourceManager.GetString("ReferenceGroup_EmptyProtocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to generate code for the service reference &apos;{0}&apos;.
        ///{1}.
        /// </summary>
        internal static string ReferenceGroup_FailedToGenerateCode {
            get {
                return ResourceManager.GetString("ReferenceGroup_FailedToGenerateCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shared assembly &apos;{0}&apos; could not be loaded. If this is a referenced project, please make sure that you have built the project first..
        /// </summary>
        internal static string ReferenceGroup_FailedToLoadAssembly {
            get {
                return ResourceManager.GetString("ReferenceGroup_FailedToLoadAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message part &apos;{0}&apos; in message contract &apos;{1}&apos; is different in &apos;{2}&apos; and &apos;{3}&apos;..
        /// </summary>
        internal static string ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage {
            get {
                return ResourceManager.GetString("ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message contract &apos;{0}&apos; is defined in both &apos;{1}&apos; and &apos;{2}&apos;, but only one contains message part &apos;{3}&apos;..
        /// </summary>
        internal static string ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage {
            get {
                return ResourceManager.GetString("ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is invalid file name.  Absolute or relative path is not supported..
        /// </summary>
        internal static string ReferenceGroup_InvalidFileName {
            get {
                return ResourceManager.GetString("ReferenceGroup_InvalidFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SourceId of a metadata source should be a positive integer..
        /// </summary>
        internal static string ReferenceGroup_InvalidSourceId {
            get {
                return ResourceManager.GetString("ReferenceGroup_InvalidSourceId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; in service contract &apos;{1}&apos; is different in &apos;{2}&apos; and &apos;{3}&apos;. Check the input, output and fault messages of the operation..
        /// </summary>
        internal static string ReferenceGroup_OperationDefinedDifferently {
            get {
                return ResourceManager.GetString("ReferenceGroup_OperationDefinedDifferently", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service contract &apos;{0}&apos; is defined in both &apos;{1}&apos; and &apos;{2}&apos;, but only one of them contains the operation &apos;{3}&apos;..
        /// </summary>
        internal static string ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract {
            get {
                return ResourceManager.GetString("ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; in the service contract mapping has different TargetNamespace(&apos;{1}&apos;) and Name(&apos;{2}&apos;) than the TargetNamespace(&apos;{3}&apos;) and Name(&apos;{4}&apos;) in the service reference file..
        /// </summary>
        internal static string ReferenceGroup_ServiceContractMappingMissMatch {
            get {
                return ResourceManager.GetString("ReferenceGroup_ServiceContractMappingMissMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; cannot be used in type sharing because it is not public..
        /// </summary>
        internal static string ReferenceGroup_SharedTypeMustBePublic {
            get {
                return ResourceManager.GetString("ReferenceGroup_SharedTypeMustBePublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two metadata items or extension items in the .svcmap file have the same file name &apos;{0}&apos;..
        /// </summary>
        internal static string ReferenceGroup_TwoExternalFilesWithSameName {
            get {
                return ResourceManager.GetString("ReferenceGroup_TwoExternalFilesWithSameName", resourceCulture);
            }
        }
    }
}
