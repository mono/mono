<?xml version="1.0" encoding="utf-8"?>
<Type Name="BoundField" FullName="System.Web.UI.WebControls.BoundField">
  <TypeSignature Language="C#" Value="public class BoundField : System.Web.UI.WebControls.DataControlField" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.DataControlField</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Web.UI.WebControls.BoundField" /> class is used by data-bound controls (such as <see cref="T:System.Web.UI.WebControls.GridView" /> and <see cref="T:System.Web.UI.WebControls.DetailsView" />) to display the value of a field as text. The <see cref="T:System.Web.UI.WebControls.BoundField" /> object is displayed differently depending on the data-bound control in which it is used. For example, the <see cref="T:System.Web.UI.WebControls.GridView" /> control displays a <see cref="T:System.Web.UI.WebControls.BoundField" /> object as a column, while the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control displays it as a row.</para>
      <para>To specify the field to display in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object, set the <see cref="P:System.Web.UI.WebControls.BoundField.DataField" /> property to the field's name. The field's value can be HTML-encoded before it is displayed by setting the <see cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" /> property to true. You can apply a custom formatting string to the field's value by setting the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property. When the <see cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" /> property is true, the encoded string value of the field is used in the custom format string. By default, the formatting string is applied to field values only when the data-bound control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the <see cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" /> property to true. If a field's value is null, you can display a custom caption by setting the <see cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" /> property. The <see cref="T:System.Web.UI.WebControls.BoundField" /> object can also automatically convert empty string ("") field values to null values by setting the <see cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" /> property to true.</para>
      <para>You can hide a <see cref="T:System.Web.UI.WebControls.BoundField" /> object in a data-bound control by setting the <see cref="P:System.Web.UI.WebControls.DataControlField.Visible" /> property to false. To prevent the value of a field from being modified in edit mode, set the <see cref="P:System.Web.UI.WebControls.BoundField.ReadOnly" /> property to true. In data-bound controls that support inserting records (such as the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control), you can hide a <see cref="T:System.Web.UI.WebControls.BoundField" /> object by setting the <see cref="P:System.Web.UI.WebControls.DataControlField.InsertVisible" /> property to false. This is commonly done when you want to hide an automatically generated key field in insert mode.</para>
      <para>You can customize the header and footer sections of a <see cref="T:System.Web.UI.WebControls.BoundField" /> object. To display a caption in the header or footer sections, set the <see cref="P:System.Web.UI.WebControls.DataControlField.HeaderText" /> or <see cref="P:System.Web.UI.WebControls.DataControlField.FooterText" /> properties, respectively. Instead of displaying text in the header section, you can display an image by setting the <see cref="P:System.Web.UI.WebControls.DataControlField.HeaderImageUrl" /> property. The header section can be hidden in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object by setting the <see cref="P:System.Web.UI.WebControls.DataControlField.ShowHeader" /> property to false.</para>
      <block subset="none" type="note">
        <para>Some data-bound controls (such as the <see cref="T:System.Web.UI.WebControls.GridView" /> control) can show or hide only the entire header section of the control. These data-bound controls do not support the <see cref="P:System.Web.UI.WebControls.DataControlField.ShowHeader" /> property for an individual bound field. To show or hide the entire header section of a data-bound control (if available), use the control's ShowHeader property.</para>
      </block>
      <para>You also can customize the appearance of the <see cref="T:System.Web.UI.WebControls.BoundField" /> object (font color, background color, and so on) by setting the style properties for the different parts of the field. The following table lists the different style properties.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Style property </para>
            </term>
            <description>
              <para>Description </para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.DataControlField.ControlStyle" /> </para>
          </term>
          <description>
            <para>The style settings for the child Web server controls of the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.DataControlField.FooterStyle" /> </para>
          </term>
          <description>
            <para>The style settings for the footer section of the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.DataControlField.HeaderStyle" /> </para>
          </term>
          <description>
            <para>The style settings for the header section of the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. </para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.DataControlField.ItemStyle" /> </para>
          </term>
          <description>
            <para>The style settings for the data items in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. </para>
          </description>
        </item>
      </list>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a field that is displayed as text in a data-bound control.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundField ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this constructor to initialize a new instance of the <see cref="T:System.Web.UI.WebControls.BoundField" /> class. This constructor is commonly used when adding fields to a dynamically created data-bound control.</para>
          <para>To dynamically add a <see cref="T:System.Web.UI.WebControls.BoundField" /> object to a data-bound control, create a new <see cref="T:System.Web.UI.WebControls.BoundField" /> object, set its properties, and then add it to the data-bound control's field collection. For example, if you are using the <see cref="T:System.Web.UI.WebControls.GridView" /> control, add the <see cref="T:System.Web.UI.WebControls.BoundField" /> object to the <see cref="P:System.Web.UI.WebControls.GridView.Columns" /> collection.</para>
          <block subset="none" type="note">
            <para>Although you can dynamically add fields to a data-bound control, it is strongly recommended that fields be statically declared and then shown or hidden, as appropriate. Statically declaring all of your fields reduces the size of the view state for the parent data-bound control.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.BoundField" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public virtual bool ApplyFormatInEditMode { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Data-bound controls (such as <see cref="T:System.Web.UI.WebControls.DetailsView" />, <see cref="T:System.Web.UI.WebControls.FormView" />, and <see cref="T:System.Web.UI.WebControls.GridView" />) have different display modes that allow the user to read, edit, or insert records. By default, the formatting string specified by the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property is applied to field values only when the data-bound control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the <see cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" /> property to true.</para>
          <block subset="none" type="note">
            <para>A <see cref="T:System.Web.UI.WebControls.BoundField" /> object does not automatically remove the formatting when the field is updated in the data source. If you do not want the formatting as part of the value stored, you will need to remove the formatting programmatically.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the formatting string specified by the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property is applied to field values when the data-bound control that contains the <see cref="T:System.Web.UI.WebControls.BoundField" /> object is in edit mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public virtual bool ConvertEmptyStringToNull { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sometimes the user might enter an empty string for a field value when updating or inserting records. Use the <see cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" /> property to specify whether an empty string value is automatically converted to null when the data field is updated in the data source.</para>
          <block subset="none" type="note">
            <para>By default, a <see cref="T:System.Web.UI.WebControls.BoundField" /> object displays null values as empty strings. To display a different value, set the <see cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" /> property.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether empty string values ("") are automatically converted to null values when the data field is updated in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CopyProperties">
      <MemberSignature Language="C#" Value="protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newField" Type="System.Web.UI.WebControls.DataControlField" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.CopyProperties(System.Web.UI.WebControls.DataControlField)" /> method is a helper method used by the <see cref="M:System.Web.UI.WebControls.DataControlField.CloneField" /> method to copy the properties of the current <see cref="T:System.Web.UI.WebControls.BoundField" /> object to the <see cref="T:System.Web.UI.WebControls.DataControlField" /> object created by the method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Copies the properties of the current <see cref="T:System.Web.UI.WebControls.BoundField" /> object to the specified <see cref="T:System.Web.UI.WebControls.DataControlField" /> object.</para>
        </summary>
        <param name="newField">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.WebControls.DataControlField" /> to copy the properties of the current <see cref="T:System.Web.UI.WebControls.BoundField" /> to.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.DataControlField CreateField ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.CreateField" /> method is a helper method used by the <see cref="M:System.Web.UI.WebControls.DataControlField.CloneField" /> method to create an empty <see cref="T:System.Web.UI.WebControls.BoundField" /> object to copy the properties of the current <see cref="T:System.Web.UI.WebControls.BoundField" /> object to.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates an empty <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An empty <see cref="T:System.Web.UI.WebControls.BoundField" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public virtual string DataField { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BoundField.DataField" /> property to specify the name of the data field to bind to the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. The values of the specified field are displayed in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object as text. You can optionally format the displayed text by setting the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property.</para>
          <block subset="none" type="note">
            <para>If a field's value is null, an empty string ("") is displayed for the value by default. To specify an alternate caption, set the <see cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" /> property.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the name of the data field to bind to the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public virtual string DataFormatString { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property to specify a custom display format for the values that are displayed in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. If the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property is not set, the field's value is displayed without any special formatting. </para>
          <block subset="none" type="note">
            <para>In versions of ASP.NET earlier than 3.5, you must set the <see cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" /> property to false in order to format fields that are not string data types. Otherwise, the field value is converted to a string by the default conversion method before the format string that is stored in the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property is applied.</para>
          </block>
          <para>By default, the formatting string is applied to the field value only when the data-bound control that contains the <see cref="T:System.Web.UI.WebControls.BoundField" /> object is in read-only mode. To apply the formatting string to field values while in edit mode, set the <see cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" /> property to true.</para>
          <para>The formatting string can be any literal string and usually includes a placeholder for the field's value. For example, in the formatting string Item Value: {0}, the field's value is substituted for the {0} placeholder when the string is displayed in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object. The rest of the formatting string is displayed as literal text. </para>
          <para>If the formatting string does not include a placeholder, only the formatting string itself is included in the final display text (the field's value from the data source is not included). If the placeholder is a 0 (zero) enclosed in curly braces as shown in the preceding example, the field value is converted to a string by the default method. You can append to the zero a string that specifies how the field value should be formatted. For example, the placeholder {0:C} for a numeric field specifies that value of the field should be converted to a currency format.</para>
          <para>Formatting is applied by using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. The number that follows the left curly brace is part of the syntax used by that method and indicates which one of a series of values the placeholder should use. Because there is only one field value in each cell, the number that follows the left curly brace can only be set to 0.</para>
          <para>The following table lists the standard format characters for numeric fields. These format characters are not case-sensitive, except for X, which displays hexadecimal characters in the case that is specified. You can append a number to most format characters in order to specify how many significant digits or decimal places you want to display. </para>
          <block subset="none" type="note">
            <para>In most cases, formatting depends on the server's culture setting. The examples are for a culture setting of en-US.</para>
          </block>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Format character </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
                <description>
                  <para>Example</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>C or c </para>
              </term>
              <description>
                <para>Displays numeric values in currency format. You can specify the number of decimal places.</para>
              </description>
              <description>
                <para>Format: {0:C}</para>
                <para>123.456 -&gt; $123.46</para>
                <para>Format: {0:C3}</para>
                <para>123.456  -&gt; $123.456</para>
              </description>
            </item>
            <item>
              <term>
                <para>D or d </para>
              </term>
              <description>
                <para>Displays integer values in decimal format. You can specify the number of digits. (Although the type is referred to as "decimal", the numbers are formatted as integers.)</para>
              </description>
              <description>
                <para>Format: {0:D}</para>
                <para>1234 -&gt; 1234</para>
                <para>Format: {0:D6}</para>
                <para>1234  -&gt; 001234</para>
              </description>
            </item>
            <item>
              <term>
                <para>E or e </para>
              </term>
              <description>
                <para>Displays numeric values in scientific (exponential) format. You can specify the number of decimal places.</para>
              </description>
              <description>
                <para>Format: {0:E}</para>
                <para>1052.0329112756 -&gt; 1.052033E+003</para>
                <para>Format: {0:E2}</para>
                <para>-1052.0329112756 -&gt; -1.05e+003</para>
              </description>
            </item>
            <item>
              <term>
                <para>F or f </para>
              </term>
              <description>
                <para>Displays numeric values in fixed format. You can specify the number of decimal places.</para>
              </description>
              <description>
                <para>Format: {0:F}</para>
                <para>1234.567 -&gt; 1234.57</para>
                <para>Format: {0:F3}</para>
                <para>1234.567 -&gt; 1234.567</para>
              </description>
            </item>
            <item>
              <term>
                <para>G or g</para>
              </term>
              <description>
                <para>Displays numeric values in general format (the most compact of either fixed-point or scientific notation). You can specify the number of significant digits.</para>
              </description>
              <description>
                <para>Format: {0:G}</para>
                <para>-123.456 -&gt; -123.456</para>
                <para>Format: {0:G2}</para>
                <para>-123.456 -&gt; -120</para>
              </description>
            </item>
            <item>
              <term>
                <para>N or n</para>
              </term>
              <description>
                <para>Displays numeric values in number format (including group separators and optional negative sign). You can specify the number of decimal places.</para>
              </description>
              <description>
                <para>Format: {0:N}</para>
                <para>1234.567 -&gt; 1,234.57</para>
                <para>Format: {0:N4}</para>
                <para>1234.567 -&gt; 1,234.5670</para>
              </description>
            </item>
            <item>
              <term>
                <para>P or p</para>
              </term>
              <description>
                <para>Displays numeric values in percent format. You can specify the number of decimal places.</para>
              </description>
              <description>
                <para>Format: {0:P}</para>
                <para>1 -&gt; 100.00%</para>
                <para>Format: {0:P1}</para>
                <para>.5 -&gt; 50.0%</para>
              </description>
            </item>
            <item>
              <term>
                <para>R or r</para>
              </term>
              <description>
                <para>Displays <see cref="T:System.Single" />, <see cref="T:System.Double" />, or BigInteger values in round-trip format.</para>
              </description>
              <description>
                <para>Format: {0:R}</para>
                <para>123456789.12345678 -&gt; 123456789.12345678</para>
              </description>
            </item>
            <item>
              <term>
                <para>X or x </para>
              </term>
              <description>
                <para>Displays integer values in hexadecimal format. You can specify the number of digits. </para>
              </description>
              <description>
                <para>Format: {0:X}</para>
                <para>255 -&gt; FF</para>
                <para>Format: {0:x4}</para>
                <para>255  -&gt; 00ff</para>
              </description>
            </item>
          </list>
          <para>For more information and for examples that show formatting for other culture values, see <format type="text/html"><a href="580e57eb-ac47-4ffd-bccd-3a1637c2f467">Standard Numeric Format Strings</a></format>. You can also create custom numeric format strings. For more information, see <format type="text/html"><a href="6f74fd32-6c6b-48ed-8241-3c2b86dea5f4">Custom Numeric Format Strings</a></format>.</para>
          <para>The following table lists format characters for <see cref="T:System.DateTime" /> fields. Most of these formatting specifications result in a different output depending on culture settings. The examples are for a <see cref="T:System.DateTime" /> value of 6/15/2009 1:45:30 PM with a culture setting of en-US.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Format character </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
                <description>
                  <para>Example</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>d </para>
              </term>
              <description>
                <para>Short date pattern.</para>
              </description>
              <description>
                <para>Format: {0:d}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 6/15/2009</para>
              </description>
            </item>
            <item>
              <term>
                <para>D </para>
              </term>
              <description>
                <para>Long date pattern.</para>
              </description>
              <description>
                <para>Format: {0:D}</para>
                <para>6/15/2009 1:45:30 PM -&gt;Monday, June 15, 2009</para>
              </description>
            </item>
            <item>
              <term>
                <para>f </para>
              </term>
              <description>
                <para>Full date/time pattern (short time).</para>
              </description>
              <description>
                <para>Format: {0:f}</para>
                <para>6/15/2009 1:45:30 PM -&gt; Monday, June 15, 2009 1:45 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>F </para>
              </term>
              <description>
                <para>Full date/time pattern (long time).</para>
              </description>
              <description>
                <para>Format: {0:F}</para>
                <para>6/15/2009 1:45:30 PM -&gt; Monday, June 15, 2009 1:45:30 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>g </para>
              </term>
              <description>
                <para>General date/time pattern (short time).</para>
              </description>
              <description>
                <para>Format: {0:g}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 6/15/2009 1:45 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>G </para>
              </term>
              <description>
                <para>General date/time pattern (long time).</para>
              </description>
              <description>
                <para>Format: {0:G}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 6/15/2009 1:45:30 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>M or m</para>
              </term>
              <description>
                <para>Month/day pattern.</para>
              </description>
              <description>
                <para>Format: {0:M}</para>
                <para>6/15/2009 1:45:30 PM -&gt; June 15</para>
              </description>
            </item>
            <item>
              <term>
                <para>O or o</para>
              </term>
              <description>
                <para>Round-trip date/time pattern.</para>
              </description>
              <description>
                <para>Format: {0:o}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 2009-06-15T13:45:30.0900000</para>
              </description>
            </item>
            <item>
              <term>
                <para>R or r </para>
              </term>
              <description>
                <para>RFC1123 pattern (for information, see <see cref="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />). </para>
              </description>
              <description>
                <para>Format: {0:R}</para>
                <para>6/15/2009 1:45:30 PM -&gt; Mon, 15 Jun 2009 20:45:30 GMT</para>
              </description>
            </item>
            <item>
              <term>
                <para>s </para>
              </term>
              <description>
                <para>Sortable date/time pattern.</para>
              </description>
              <description>
                <para>Format: {0:s}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 2009-06-15T13:45:30</para>
              </description>
            </item>
            <item>
              <term>
                <para>t </para>
              </term>
              <description>
                <para>Short time pattern.</para>
              </description>
              <description>
                <para>Format: {0:t}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 1:45 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>T </para>
              </term>
              <description>
                <para>Long time pattern.</para>
              </description>
              <description>
                <para>Format: {0:T}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 1:45:30 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>u </para>
              </term>
              <description>
                <para>Universal sortable date/time pattern.</para>
              </description>
              <description>
                <para>Format: {0:u}</para>
                <para>6/15/2009 1:45:30 PM -&gt; 2009-06-15 20:45:30Z</para>
              </description>
            </item>
            <item>
              <term>
                <para>U </para>
              </term>
              <description>
                <para>Universal full date/time pattern.</para>
              </description>
              <description>
                <para>Format: {0:U}</para>
                <para>6/15/2009 1:45:30 PM -&gt; Monday, June 15, 2009 8:45:30 PM</para>
              </description>
            </item>
            <item>
              <term>
                <para>Y or y </para>
              </term>
              <description>
                <para>Year month pattern.</para>
              </description>
              <description>
                <para>Format: {0:Y}</para>
                <para>6/15/2009 1:45:30 PM -&gt; June, 2009</para>
              </description>
            </item>
          </list>
          <para>For more information and for examples that show formatting for other culture values, see <format type="text/html"><a href="bb79761a-ca08-44ee-b142-b06b3e2fc22b">Standard Date and Time Format Strings</a></format>. You can also create custom date and time format strings. For more information, see <format type="text/html"><a href="98b374e3-0cc2-4c78-ab44-efb671d71984">Custom Date and Time Format Strings</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string that specifies the display format for the value of the field.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ExtractValuesFromCell">
      <MemberSignature Language="C#" Value="public override void ExtractValuesFromCell (System.Collections.Specialized.IOrderedDictionary dictionary, System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="includeReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)" /> method is provided as a convenient way to retrieve the values of the fields from the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> object in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers.</para>
          </block>
          <para>This method does not have a return value. Instead, the field values are returned by reference through the <see cref="T:System.Collections.IDictionary" /> object passed in for the <paramref name="dictionary" /> parameter. After the method has been called, iterate through the <see cref="T:System.Collections.IDictionary" /> object to access the field values.</para>
          <block subset="none" type="note">
            <para>If the <see cref="T:System.Web.UI.WebControls.TableCell" /> object contains read-only field values, you must pass in true for the <paramref name="includeReadOnly" /> parameter to include those values.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Fills the specified <see cref="T:System.Collections.IDictionary" /> object with the values from the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> object.</para>
        </summary>
        <param name="dictionary">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Collections.IDictionary" /> used to store the values of the specified cell.</param>
        <param name="cell">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.WebControls.TableCell" /> that contains the values to retrieve.</param>
        <param name="rowState">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
        <param name="includeReadOnly">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include the values of read-only fields; otherwise, false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FormatDataValue">
      <MemberSignature Language="C#" Value="protected virtual string FormatDataValue (object value, bool encode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.FormatDataValue(System.Object,System.Boolean)" /> method is a helper method used to transform a field value to the format specified by the <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> property. If a field value is null, the value of the <see cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" /> property is returned.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.</para>
        </returns>
        <param name="encode">
          <attribution license="cc4" from="Microsoft" modified="false" />true to encode the value; otherwise, false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetDesignTimeValue">
      <MemberSignature Language="C#" Value="protected virtual object GetDesignTimeValue ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.GetDesignTimeValue" /> method is a helper method used to determine what value to display for a field when rendering the <see cref="T:System.Web.UI.WebControls.BoundField" /> object in a designer. If real data cannot be retrieved from the data source at design time, the value returned by this method is displayed instead.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the value used for a field's value when rendering the <see cref="T:System.Web.UI.WebControls.BoundField" /> object in a designer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value to display in the designer as the field's value.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="protected virtual object GetValue (System.Web.UI.Control controlContainer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlContainer" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.GetValue(System.Web.UI.Control)" /> method is a helper method used to determine the value of a field. If the <see cref="T:System.Web.UI.WebControls.BoundField" /> object is being displayed in a designer and the field value cannot be determined at design time, the value returned from the <see cref="M:System.Web.UI.WebControls.BoundField.GetDesignTimeValue" /> method is returned instead of the actual field value.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the value of the field bound to the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value of the field bound to the <see cref="T:System.Web.UI.WebControls.BoundField" />.</para>
        </returns>
        <param name="controlContainer">
          <attribution license="cc4" from="Microsoft" modified="false" />The container for the field value.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BoundField.HeaderText" /> property to identify a field in a data control with a friendly name. The most common application of the <see cref="P:System.Web.UI.WebControls.BoundField.HeaderText" /> property is to provide meaningful column names to data-bound fields in a <see cref="T:System.Web.UI.WebControls.GridView" /> or <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text that is displayed in the header of a data control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public virtual bool HtmlEncode { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" /> property to specify whether field values are HTML-encoded to their respective string representations before they are displayed in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object. For example, if this property is true, a string value of "&lt;script&gt;" would be rendered as "&amp;lt;script&amp;gt;". If this property is false, the string would be rendered unchanged.</para>
          <block subset="none" type="note">
            <para>HTML-encoding field values helps to prevent cross-site scripting attacks and malicious content from being displayed. This property should be enabled whenever possible.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether field values are HTML-encoded before they are displayed in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override bool Initialize (bool enableSorting, System.Web.UI.Control control);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableSorting" Type="System.Boolean" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" /> method is called by the data control with which the <see cref="T:System.Web.UI.WebControls.BoundField" /> object is associated to perform basic object initialization for instances of the field, before the field is ever added to a rows collection. Data controls such as <see cref="T:System.Web.UI.WebControls.DetailsView" /> and <see cref="T:System.Web.UI.WebControls.GridView" /> call the <see cref="M:System.Web.UI.WebControls.DataControlField.Initialize(System.Boolean,System.Web.UI.Control)" /> method in their CreateChildControls methods before other methods such as CreateRow are called to create specific rows with data.</para>
          <para>Call this method when you are writing a custom data-bound control that uses <see cref="T:System.Web.UI.WebControls.TableCell" /> objects to perform basic initialization for a <see cref="T:System.Web.UI.WebControls.BoundField" /> object. Implement this method if your <see cref="T:System.Web.UI.WebControls.BoundField" />-derived type requires any object initialization before it populates <see cref="T:System.Web.UI.WebControls.TableCell" /> objects with data or controls in the <see cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>false in all cases.</para>
        </returns>
        <param name="enableSorting">
          <attribution license="cc4" from="Microsoft" modified="false" />true if sorting is supported; otherwise, false.</param>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The data control that owns the <see cref="T:System.Web.UI.WebControls.BoundField" />.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InitializeCell">
      <MemberSignature Language="C#" Value="public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="cellType" Type="System.Web.UI.WebControls.DataControlCellType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" /> method is implemented by <see cref="T:System.Web.UI.WebControls.BoundField" />-derived types to add text and controls to a <see cref="T:System.Web.UI.WebControls.TableCell" /> object of a data control that uses tables to display a user interface (UI). These data controls create the complete table structure row-by-row when the control's CreateChildControls method is called. The <see cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" /> method is called by the InitializeRow method of data controls such as <see cref="T:System.Web.UI.WebControls.DetailsView" /> and <see cref="T:System.Web.UI.WebControls.GridView" />.</para>
          <para>Call this method when you are writing a custom data-bound control that uses <see cref="T:System.Web.UI.WebControls.TableCell" /> objects to initialize the cells of the table structure with data or controls. Implement this method when you are writing a <see cref="T:System.Web.UI.WebControls.BoundField" />-derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> object to the specified row state.</para>
        </summary>
        <param name="cell">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.WebControls.TableCell" /> to initialize.</param>
        <param name="cellType">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.DataControlCellType" /> values.</param>
        <param name="rowState">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
        <param name="rowIndex">
          <attribution license="cc4" from="Microsoft" modified="false" />The zero-based index of the row.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InitializeDataCell">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" /> method is a helper method used to initialize a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> object to the specified row state.</para>
        </summary>
        <param name="cell">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.WebControls.TableCell" /> to initialize.</param>
        <param name="rowState">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public virtual string NullDisplayText { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sometimes a field's value is stored as null in the data source. You can specify a custom caption to display for fields that have a null value by setting the <see cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" /> property. If this property is not set, null field values are displayed as empty strings (""). When a record is being updated or inserted in a data-bound control, if the user enters the value specified by this property (other than an empty string) for a field in a data-bound control, that value is automatically converted to null in the data source.</para>
          <block subset="none" type="note">
            <para>To convert an empty string field value to a null value, set the <see cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" /> property to true.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the caption displayed for a field when the field's value is null.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnDataBindField">
      <MemberSignature Language="C#" Value="protected virtual void OnDataBindField (object sender, EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.CheckBoxField.OnDataBindField(System.Object,System.EventArgs)" /> method is a helper method used to bind the value of a field in the data source to a corresponding cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Binds the value of a field to the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
        <param name="sender">
          <attribution license="cc4" from="Microsoft" modified="false" />The source of the event.</param>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BoundField.ReadOnly" /> property to prevent the values displayed in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object from being modified. When a data-bound control is in edit mode, fields that are read-only are displayed as plain text, without any editing controls.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Web.UI.WebControls.BoundField.ReadOnly" /> property applies only to edit mode. To prevent fields from showing up in insert mode, use the <see cref="P:System.Web.UI.WebControls.DataControlField.InsertVisible" /> property.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the value of the field can be modified in edit mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SupportsHtmlEncode">
      <MemberSignature Language="C#" Value="protected virtual bool SupportsHtmlEncode { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode" /> property is a helper property used by the <see cref="T:System.Web.UI.WebControls.BoundField" /> class and derived classes to determine whether HTML encoding is supported by the class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether HTML encoding is supported by a <see cref="T:System.Web.UI.WebControls.BoundField" /> object.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ThisExpression">
      <MemberSignature Language="C#" Value="public static readonly string ThisExpression;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This field is used to indicate that the <see cref="T:System.Web.UI.WebControls.BoundField" /> object should bind against the data source itself, rather than a field of the data source. In this case, the object's ToString value will be displayed in the field.</para>
          <block subset="none" type="note">
            <para>This field is used primarily by control developers.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the "this" expression.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ValidateSupportsCallback">
      <MemberSignature Language="C#" Value="public override void ValidateSupportsCallback ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BoundField.ValidateSupportsCallback" /> method is a helper method used to determine whether the controls contained in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object support callbacks. This method has been implemented as an empty method (a method that does not contain any code) to indicate that callbacks are supported.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the controls contained in a <see cref="T:System.Web.UI.WebControls.BoundField" /> object support callbacks.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>