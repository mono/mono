<?xml version="1.0" encoding="utf-8"?>
<Type Name="FormView" FullName="System.Web.UI.WebControls.FormView">
  <TypeSignature Language="C#" Value="public class FormView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.IDataItemContainer, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IPostBackContainer" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeDataBoundControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IDataItemContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPostBackContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("PageIndexChanging")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>In this topic:</para>
      <list type="bullet">
        <item>
          <para>
            <format type="text/html">
              <a href="#introduction">Introduction</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#templates">Templates</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#binding_to_data">Binding to Data</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#data_operations">Data Operations</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#customizing_the_user_interface">Customizing the User Interface</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#events">Events</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#accessibility">Accessibility</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#applying_styles">Applying CSS Styles</a>
            </format>
          </para>
        </item>
        <item>
          <para>
            <format type="text/html">
              <a href="#declarative_syntax">Declarative Syntax</a>
            </format>
          </para>
        </item>
      </list>
      <format type="text/html">
        <a href="#introduction" />
      </format>
      <format type="text/html">
        <h2>Introduction</h2>
      </format>
      <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is used to display a single record from a data source. It is similar to the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control, except it displays user-defined templates instead of row fields. Creating your own templates gives you greater flexibility in controlling how the data is displayed. The <see cref="T:System.Web.UI.WebControls.FormView" /> control supports the following features: </para>
      <list type="bullet">
        <item>
          <para>Binding to data source controls, such as <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> and <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</para>
        </item>
        <item>
          <para>Built-in inserting capabilities.</para>
        </item>
        <item>
          <para>Built-in updating and deleting capabilities.</para>
        </item>
        <item>
          <para>Built-in paging capabilities.</para>
        </item>
        <item>
          <para>Programmatic access to the <see cref="T:System.Web.UI.WebControls.FormView" /> object model to dynamically set properties, handle events, and so on.</para>
        </item>
        <item>
          <para>Customizable appearance through user-defined templates, themes, and styles.</para>
        </item>
      </list>
      <format type="text/html">
        <a href="#templates" />
      </format>
      <format type="text/html">
        <h2>Templates</h2>
      </format>
      <para>For the <see cref="T:System.Web.UI.WebControls.FormView" /> control to display content, you need to create templates for the different parts of the control. Most templates are optional; however, you must create a template for the mode in which the control is configured. For example, a <see cref="T:System.Web.UI.WebControls.FormView" /> control that supports inserting records must have an insert item template defined. The following table lists the different templates that you can create.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Template type </para>
            </term>
            <description>
              <para>Description </para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode. This template usually contains input controls and command buttons with which the user can edit an existing record.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the empty data row displayed when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to a data source that does not contain any records. This template usually contains content to alert the user that the data source does not contain any records.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the footer row. This template usually contains any additional content you would like to display in the footer row.</para>
            <block subset="none" type="note">
              <para>As an alternative, you can simply specify text to display in the footer row by setting the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> property.</para>
            </block>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the header row. This template usually contains any additional content you would like to display in the header row.</para>
            <block subset="none" type="note">
              <para>As an alternative, you can simply specify text to display in the header row by setting the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> property.</para>
            </block>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode. This template usually contains content to display the values of an existing record.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode. This template usually contains input controls and command buttons with which the user can add a new record.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
            </para>
          </term>
          <description>
            <para>Defines the content for the pager row displayed when the paging feature is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true). This template usually contains controls with which the user can navigate to another record.</para>
            <block subset="none" type="note">
              <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control has a built-in pager row user interface (UI). You need to create a pager template only if you want to create your own custom pager row.</para>
            </block>
          </description>
        </item>
      </list>
      <para>To display the value of a field in an item template, use a data binding expression. For more information on data binding expressions, see <format type="text/html"><a href="676beb1d-ddfa-4153-bba8-3c86dcb7ceca">Data Binding Expression Syntax</a></format>.</para>
      <para>Input controls in the edit item template and insert item template can be bound to the fields of a data source by using a two-way binding expression. This allows the <see cref="T:System.Web.UI.WebControls.FormView" /> control to automatically extract the values of the input control for an update or insert operation. Two-way binding expressions also allow input controls in an edit item template to automatically display the original field values. For more information on two-way binding expressions, see <format type="text/html"><a href="ab7b2846-975b-4057-a948-45527497c742">ASP.NET Data Binding</a></format>.</para>
      <format type="text/html">
        <a href="#binding_to_data" />
      </format>
      <format type="text/html">
        <h2>Binding to Data</h2>
      </format>
      <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control can be bound to a data source control (such as <see cref="T:System.Web.UI.WebControls.SqlDataSource" />, <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />, or <see cref="T:System.Web.UI.WebControls.AccessDataSource" />) or to any data source collection that implements the <see cref="T:System.Collections.IEnumerable" /> interface, such as <see cref="T:System.Data.DataView" />, <see cref="T:System.Collections.ArrayList" />, <see cref="T:System.Collections.Generic.List`1" />, or other collection types. Use one of the following methods to bind the <see cref="T:System.Web.UI.WebControls.FormView" /> control to the appropriate data source type:</para>
      <list type="bullet">
        <item>
          <para>To bind to a data source control, set the <see cref="P:System.Web.UI.WebControls.DataBoundControl.DataSourceID" /> property of the <see cref="T:System.Web.UI.WebControls.FormView" /> control to the <see cref="P:System.Web.UI.Control.ID" /> value of the data source control. The <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically binds to the specified data source control and can take advantage of the data source control's capabilities to perform inserting, updating, deleting, and paging functionality. This is the preferred method to bind to data.</para>
        </item>
        <item>
          <para>To bind to a data source that implements the <see cref="T:System.Collections.IEnumerable" /> interface, programmatically set the <see cref="P:System.Web.UI.WebControls.BaseDataBoundControl.DataSource" /> property of the <see cref="T:System.Web.UI.WebControls.FormView" /> control to the data source and then call the <see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" /> method. When using this method, the <see cref="T:System.Web.UI.WebControls.FormView" /> control does not provide built-in inserting, updating, deleting, and paging functionality. You need to provide this functionality by using the appropriate event.</para>
        </item>
      </list>
      <para>For more information on data binding, see <format type="text/html"><a href="f9219396-a0fa-481f-894d-e3d9c67d64f2">Accessing Data with ASP.NET</a></format>.</para>
      <block subset="none" type="note">
        <para>This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. Whenever possible, it is strongly recommended that values are HTML-encoded before they are displayed in this control. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see <format type="text/html"><a href="3c0e7514-cff2-4bed-936d-ee3f7b740190">Introduction to the Validation Controls</a></format>.</para>
      </block>
      <format type="text/html">
        <a href="#data_operations" />
      </format>
      <format type="text/html">
        <h2>Data Operations</h2>
      </format>
      <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control provides many built-in capabilities that allow the user to update, delete, insert, and page through items in the control. When the <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to a data source control, the <see cref="T:System.Web.UI.WebControls.FormView" /> control can take advantage of the data source control's capabilities and provide automatic updating, deleting, inserting, and paging functionality.</para>
      <block subset="none" type="note">
        <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control can provide support for update, delete, insert, and paging operations with other types of data sources; however, you must provide an appropriate event handler with the implementation for these operations.</para>
      </block>
      <para>Because the <see cref="T:System.Web.UI.WebControls.FormView" /> control uses templates, it does not provide a way to automatically generate command buttons to perform updating, deleting, or inserting operations. You must manually include these command buttons in the appropriate template. The <see cref="T:System.Web.UI.WebControls.FormView" /> control recognizes certain buttons that have their CommandName properties set to specific values. The following table lists the command buttons that the <see cref="T:System.Web.UI.WebControls.FormView" /> control recognizes.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Button</para>
            </term>
            <description>
              <para>CommandName value</para>
            </description>
            <description>
              <para>Description</para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>Cancel</para>
          </term>
          <description>
            <para>"Cancel"</para>
          </description>
          <description>
            <para>Used in updating or inserting operations to cancel the operation and to discard the values entered by the user. The <see cref="T:System.Web.UI.WebControls.FormView" /> control then returns to the mode specified by the <see cref="P:System.Web.UI.WebControls.FormView.DefaultMode" /> property.</para>
          </description>
        </item>
        <item>
          <term>
            <para>Delete</para>
          </term>
          <description>
            <para>"Delete"</para>
          </description>
          <description>
            <para>Used in deleting operations to delete the displayed record from the data source. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> events.</para>
          </description>
        </item>
        <item>
          <term>
            <para>Edit</para>
          </term>
          <description>
            <para>"Edit"</para>
          </description>
          <description>
            <para>Used in updating operations to put the <see cref="T:System.Web.UI.WebControls.FormView" /> control in edit mode. The content specified in the <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" /> property is displayed for the data row.</para>
          </description>
        </item>
        <item>
          <term>
            <para>Insert</para>
          </term>
          <description>
            <para>"Insert"</para>
          </description>
          <description>
            <para>Used in inserting operations to attempt to insert a new record in the data source using the values provided by the user. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> events.</para>
          </description>
        </item>
        <item>
          <term>
            <para>New</para>
          </term>
          <description>
            <para>"New"</para>
          </description>
          <description>
            <para>Used in inserting operations to put the <see cref="T:System.Web.UI.WebControls.FormView" /> control in insert mode. The content specified in the <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" /> property is displayed for the data row.</para>
          </description>
        </item>
        <item>
          <term>
            <para>Page</para>
          </term>
          <description>
            <para>"Page"</para>
          </description>
          <description>
            <para>Used in paging operations to represent a button in the pager row that performs paging. To specify the paging operation, set the CommandArgument property of the button to "Next", "Prev", "First", "Last", or the index of the page to which to navigate. Raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> and <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> events.</para>
            <block subset="none" type="note">
              <para>This type of button is typically used only in the pager template.</para>
            </block>
          </description>
        </item>
        <item>
          <term>
            <para>Update</para>
          </term>
          <description>
            <para>"Update"</para>
          </description>
          <description>
            <para>Used in updating operations to attempt to update the displayed record in the data source with the values provided by the user. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> events.</para>
          </description>
        </item>
      </list>
      <para>Unlike the Delete button (which deletes the displayed record immediately), when the Edit or New button is clicked, the <see cref="T:System.Web.UI.WebControls.FormView" /> control goes into edit or insert mode, respectively. In edit mode, the content contained in the <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" /> property is displayed for the current data item. Typically, the edit item template is defined such that the Edit button is replaced with an Update and a Cancel button. Input controls that are appropriate for the field's data type (such as a <see cref="T:System.Web.UI.WebControls.TextBox" /> or a <see cref="T:System.Web.UI.WebControls.CheckBox" /> control) are also usually displayed with a field's value for the user to modify. Clicking the Update button updates the record in the data source, while clicking the Cancel button abandons any changes.</para>
      <para>Likewise, the content contained in the <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" /> property is displayed for the data item when the control is in insert mode. The insert item template is typically defined such that the New button is replaced with an Insert and a Cancel button, and empty input controls are displayed for the user to enter the values for the new record. Clicking the Insert button inserts the record in the data source, while clicking the Cancel button abandons any changes.</para>
      <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control provides a paging feature, which allows the user to navigate to other records in the data source. When enabled, a pager row is displayed in the <see cref="T:System.Web.UI.WebControls.FormView" /> control that contains the page navigation controls. To enable paging, set the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property to true. You can customize the pager row by setting the properties of objects contained in the <see cref="P:System.Web.UI.WebControls.FormView.PagerStyle" /> and the <see cref="P:System.Web.UI.WebControls.FormView.PagerSettings" /> property. Instead of using the built-in pager row UI, you can create your own UI by using the <see cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" /> property.</para>
      <format type="text/html">
        <a href="#customizing_the_user_interface" />
      </format>
      <format type="text/html">
        <h2>Customizing the User Interface</h2>
      </format>
      <para>You can customize the appearance of the <see cref="T:System.Web.UI.WebControls.FormView" /> control by setting the style properties for the different parts of the control. The following table lists the different style properties.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Style property </para>
            </term>
            <description>
              <para>Description </para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the empty data row displayed in the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the data source does not contain any records.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the footer row of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the header row of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the pager row displayed in the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the paging feature is enabled.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
            </para>
          </term>
          <description>
            <para>The style settings for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode.</para>
          </description>
        </item>
      </list>
      <format type="text/html">
        <a href="#events" />
      </format>
      <format type="text/html">
        <h2>Events</h2>
      </format>
      <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control provides several events that you can program against. This allows you to run a custom routine whenever an event occurs. The following table lists the events supported by the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
      <list type="table">
        <listheader>
          <item>
            <term>
              <para>Event </para>
            </term>
            <description>
              <para>Description </para>
            </description>
          </item>
        </listheader>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" />
            </para>
          </term>
          <description>
            <para>Occurs when a button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked. This event is often used to perform a task when a button is clicked in the control.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
            </para>
          </term>
          <description>
            <para>Occurs after all <see cref="T:System.Web.UI.WebControls.FormViewRow" /> objects are created in the <see cref="T:System.Web.UI.WebControls.FormView" /> control. This event is often used to modify the values of a record before it is displayed.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
            </para>
          </term>
          <description>
            <para>Occurs when a Delete button (a button with its CommandName property set to "Delete") is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control deletes the record from the data source. This event is often used to check the results of the delete operation.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
            </para>
          </term>
          <description>
            <para>Occurs when a Delete button is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control deletes the record from the data source. This event is often used to cancel the delete operation.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
            </para>
          </term>
          <description>
            <para>Occurs when an Insert button (a button with its CommandName property set to "Insert") is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control inserts the record. This event is often used to check the results of the insert operation.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
            </para>
          </term>
          <description>
            <para>Occurs when an Insert button is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control inserts the record. This event is often used to cancel the insert operation.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
            </para>
          </term>
          <description>
            <para>Occurs when an Update button (a button with its CommandName property set to "Update") is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control updates the row. This event is often used to check the results of the update operation.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
            </para>
          </term>
          <description>
            <para>Occurs when an Update button is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control updates the record. This event is often used to cancel the update operation.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
            </para>
          </term>
          <description>
            <para>Occurs after the <see cref="T:System.Web.UI.WebControls.FormView" /> control changes modes (to edit, insert, or read-only mode). This event is often used to perform a task when the <see cref="T:System.Web.UI.WebControls.FormView" /> control changes modes.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
            </para>
          </term>
          <description>
            <para>Occurs before the <see cref="T:System.Web.UI.WebControls.FormView" /> control changes modes (to edit, insert, or read-only mode). This event is often used to cancel a mode change.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
            </para>
          </term>
          <description>
            <para>Occurs when one of the pager buttons is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control handles the paging operation. This event is commonly used when you need to perform a task after the user navigates to a different record in the control.</para>
          </description>
        </item>
        <item>
          <term>
            <para>
              <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
            </para>
          </term>
          <description>
            <para>Occurs when one of the pager buttons is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control handles the paging operation. This event is often used to cancel the paging operation.</para>
          </description>
        </item>
      </list>
      <format type="text/html">
        <a href="#accessibility" />
      </format>
      <format type="text/html">
        <h2>Accessibility</h2>
      </format>
      <para>For information about how to configure this control so that it generates markup that conforms to accessibility standards, see <format type="text/html"><a href="7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13">Accessibility in Visual Studio 2010 and ASP.NET 4</a></format> and <format type="text/html"><a href="847a37e3-ce20-41da-b0d3-7dfb0fdae9a0">ASP.NET Controls and Accessibility</a></format>. </para>
      <format type="text/html">
        <a href="#applying_styles" />
      </format>
      <format type="text/html">
        <h2>Applying CSS Styles</h2>
      </format>
      <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control lets you specify CSS style rules in markup. If you use templates to customize the appearance of the <see cref="T:System.Web.UI.WebControls.FormView" /> control, you can specify CSS styles in the markup in the templates. In that case, no extra outer table is required. You can prevent the table from being rendered by setting the <see cref="P:System.Web.UI.WebControls.FormView.RenderOuterTable" /> property to false.</para>
      <format type="text/html">
        <a href="#declarative_syntax" />
      </format>
      <format type="text/html">
        <h2>Declarative Syntax</h2>
      </format>
      <code>&lt;asp:FormView
    AccessKey="string"
    AllowPaging="True|<codeFeaturedElement>False</codeFeaturedElement>"
    BackColor="color name|#dddddd"
    BackImageUrl="uri"
    BorderColor="color name|#dddddd"
    BorderStyle="<codeFeaturedElement>NotSet</codeFeaturedElement>|None|Dotted|Dashed|Solid|Double|Groove|Ridge|
        Inset|Outset"
    BorderWidth="size"
    Caption="string"
    CaptionAlign="<codeFeaturedElement>NotSet</codeFeaturedElement>|Top|Bottom|Left|Right"
    CellPadding="integer"
    CellSpacing="integer"
    CssClass="string"
    DataKeyNames="string"
    DataMember="string"
    DataSource="string"
    DataSourceID="string"
    DefaultMode="<codeFeaturedElement>ReadOnly</codeFeaturedElement>|Edit|Insert"
    EmptyDataText="string"
    Enabled="<codeFeaturedElement>True</codeFeaturedElement>|False"
    EnableTheming="<codeFeaturedElement>True</codeFeaturedElement>|False"
    EnableViewState="<codeFeaturedElement>True</codeFeaturedElement>|False"
    Font-Bold="True|<codeFeaturedElement>False</codeFeaturedElement>"
    Font-Italic="True|<codeFeaturedElement>False</codeFeaturedElement>"
    Font-Names="string"
    Font-Overline="True|<codeFeaturedElement>False</codeFeaturedElement>"
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|
        Large|X-Large|XX-Large"
    Font-Strikeout="True|<codeFeaturedElement>False</codeFeaturedElement>"
    Font-Underline="True|<codeFeaturedElement>False</codeFeaturedElement>"
    FooterText="string"
    ForeColor="color name|#dddddd"
    GridLines="<codeFeaturedElement>None</codeFeaturedElement>|Horizontal|Vertical|Both"
    HeaderText="string"
    Height="size"
    HorizontalAlign="<codeFeaturedElement>NotSet</codeFeaturedElement>|Left|Center|Right|Justify"
    ID="string"
    OnDataBinding="DataBinding event handler"
    OnDataBound="DataBound event handler"
    OnDisposed="Disposed event handler"
    OnInit="Init event handler"
    OnItemCommand="ItemCommand event handler"
    OnItemCreated="ItemCreated event handler"
    OnItemDeleted="ItemDeleted event handler"
    OnItemDeleting="ItemDeleting event handler"
    OnItemInserted="ItemInserted event handler"
    OnItemInserting="ItemInserting event handler"
    OnItemUpdated="ItemUpdated event handler"
    OnItemUpdating="ItemUpdating event handler"
    OnLoad="Load event handler"
    OnModeChanged="ModeChanged event handler"
    OnModeChanging="ModeChanging event handler"
    OnPageIndexChanged="PageIndexChanged event handler"
    OnPageIndexChanging="PageIndexChanging event handler"
    OnPreRender="PreRender event handler"
    OnUnload="Unload event handler"
    PageIndex="integer"
    PagerSettings-FirstPageImageUrl="uri"
    PagerSettings-FirstPageText="string"
    PagerSettings-LastPageImageUrl="uri"
    PagerSettings-LastPageText="string"
    PagerSettings-Mode="NextPrevious|<codeFeaturedElement>Numeric</codeFeaturedElement>|NextPreviousFirstLast|
        NumericFirstLast"
    PagerSettings-NextPageImageUrl="uri"
    PagerSettings-NextPageText="string"
    PagerSettings-PageButtonCount="integer"
    PagerSettings-Position="<codeFeaturedElement>Bottom</codeFeaturedElement>|Top|TopAndBottom"
    PagerSettings-PreviousPageImageUrl="uri"
    PagerSettings-PreviousPageText="string"
    PagerSettings-Visible="<codeFeaturedElement>True</codeFeaturedElement>|False"
    RenderTable="<codeFeaturedElement>True</codeFeaturedElement>|False"
    runat="server"
    SkinID="string"
    Style="string"
    TabIndex="integer"
    ToolTip="string"
    Visible="<codeFeaturedElement>True</codeFeaturedElement>|False"
    Width="size"
&gt;
        &lt;EditItemTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/EditItemTemplate&gt;
        &lt;EditRowStyle /&gt;
        &lt;EmptyDataRowStyle /&gt;
        &lt;EmptyDataTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/EmptyDataTemplate&gt;
        &lt;FooterStyle /&gt;
        &lt;FooterTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/FooterTemplate&gt;
        &lt;HeaderStyle /&gt;
        &lt;HeaderTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/HeaderTemplate&gt;
        &lt;InsertItemTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/InsertItemTemplate&gt;
        &lt;InsertRowStyle /&gt;
        &lt;ItemTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/ItemTemplate&gt;
        &lt;PagerSettings
            FirstPageImageUrl="uri"
            FirstPageText="string"
            LastPageImageUrl="uri"
            LastPageText="string"
            Mode="NextPrevious|<codeFeaturedElement>Numeric</codeFeaturedElement>|NextPreviousFirstLast|
                NumericFirstLast"
            NextPageImageUrl="uri"
            NextPageText="string"
            OnPropertyChanged="PropertyChanged event handler"
            PageButtonCount="integer"
            Position="<codeFeaturedElement>Bottom</codeFeaturedElement>|Top|TopAndBottom"
            PreviousPageImageUrl="uri"
            PreviousPageText="string"
            Visible="<codeFeaturedElement>True</codeFeaturedElement>|False"
        /&gt;
        &lt;PagerStyle /&gt;
        &lt;PagerTemplate&gt;
            &lt;!-- child controls --&gt;
        &lt;/PagerTemplate&gt;
        &lt;RowStyle /&gt;
&lt;/asp:FormView&gt;</code>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Displays the values of a single record from a data source using user-defined templates. The <see cref="T:System.Web.UI.WebControls.FormView" /> control allows you to edit, delete, and insert records.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormView ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use this constructor to initialize a new instance of the <see cref="T:System.Web.UI.WebControls.FormView" /> class. To dynamically add a <see cref="T:System.Web.UI.WebControls.FormView" /> control to a page, create a new <see cref="T:System.Web.UI.WebControls.FormView" /> object, set its properties, and then add it to the <see cref="P:System.Web.UI.Control.Controls" /> collection of a container control, such as <see cref="T:System.Web.UI.WebControls.PlaceHolder" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AllowPaging">
      <MemberSignature Language="C#" Value="public virtual bool AllowPaging { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control has built-in paging capabilities, which allow a user to navigate to a different record in the data source. The paging feature can be used with any data source object that supports the <see cref="T:System.Collections.ICollection" /> interface or a data source that supports paging capability.</para>
          <para>To enable the paging feature, set the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property to true. You can determine the total number of items in the underlying data source by using the <see cref="P:System.Web.UI.WebControls.FormView.PageCount" /> property. To determine the index of the currently displayed item, use the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property.</para>
          <para>When paging is enabled, an additional row called the pager row is automatically displayed in the <see cref="T:System.Web.UI.WebControls.FormView" /> control. The pager row contains the page navigation controls and can be displayed at the top, bottom, or both the top and bottom of the control. The pager row has four built-in pager display modes. The following table describes the four modes.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>PagerButton.NextPrevious</para>
              </term>
              <description>
                <para>A set of pagination controls consisting of previous and next buttons.</para>
              </description>
            </item>
            <item>
              <term>
                <para>PagerButton.NextPreviousFirstLast</para>
              </term>
              <description>
                <para>A set of pagination controls consisting of previous, next, first, and last buttons.</para>
              </description>
            </item>
            <item>
              <term>
                <para>PagerButton.Numeric</para>
              </term>
              <description>
                <para>A set of pagination controls consisting of numbered link buttons to access pages directly. This is the default mode.</para>
              </description>
            </item>
            <item>
              <term>
                <para>PagerButton.NumericFirstLast</para>
              </term>
              <description>
                <para>A set of pagination controls consisting of numbered and first and last link buttons.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically hides the pager row when the data source contains fewer than two records.</para>
          </block>
          <para>You can control the settings of the pager row (such as the pager display mode, the number of page links to display at a time, and the pager control's text label) by using the <see cref="P:System.Web.UI.WebControls.FormView.PagerSettings" /> property. To control the appearance of the pager row (including its background color and font color), use the <see cref="P:System.Web.UI.WebControls.FormView.PagerStyle" /> property. The <see cref="T:System.Web.UI.WebControls.FormView" /> control also allows you to define a custom template for the pager row. For more information on creating a custom pager row template, see <see cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />.</para>
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control provides several events that you can use to perform a custom action when paging occurs. The following table lists the available events.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Event </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
                </para>
              </term>
              <description>
                <para>Occurs when one of the pager buttons is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control handles the paging operation. This event is commonly used when you need to perform a task after the user navigates to a different record in the control.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
                </para>
              </term>
              <description>
                <para>Occurs when one of the pager buttons is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control handles the paging operation. This event is often used to cancel the paging operation.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>These events are not raised when you change the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property programmatically.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether the paging feature is enabled.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BackImageUrl">
      <MemberSignature Language="C#" Value="public virtual string BackImageUrl { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" /> property to specify the URL to an image to display in the background of a <see cref="T:System.Web.UI.WebControls.FormView" /> control. </para>
          <block subset="none" type="note">
            <para>If the specified image is smaller than the <see cref="T:System.Web.UI.WebControls.FormView" /> control, the image is tiled to fill in the background. If the image is larger than the control, the image is cropped.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the URL to an image to display in the background of a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BottomPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow BottomPagerRow { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When paging is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true), an additional row called the pager row is automatically displayed in the <see cref="T:System.Web.UI.WebControls.FormView" /> control. The pager row contains controls that allow the user to navigate to other records, and can be displayed at the top, the bottom, or both the top and bottom of the control. Use the <see cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" /> property to programmatically access the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the bottom pager row in the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" /> property is available only after the <see cref="T:System.Web.UI.WebControls.FormView" /> control creates the bottom pager row in the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event.</para>
          </block>
          <para>This property is commonly used when you need to programmatically manipulate the bottom pager row, for example when adding custom content. Any modification to the <see cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" /> property must be performed after the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the bottom pager row has been created; otherwise, the <see cref="T:System.Web.UI.WebControls.FormView" /> control overwrites any changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the pager row displayed at the bottom of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public virtual string Caption { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.Caption" /> property to specify the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. The text that you specify provides assistive technology devices with a description of the table that can be used to make the control more accessible.</para>
          <para>Additional accessibility support for the <see cref="T:System.Web.UI.WebControls.FormView" /> control is provided by the <see cref="P:System.Web.UI.WebControls.FormView.CaptionAlign" /> property. Use the <see cref="P:System.Web.UI.WebControls.FormView.CaptionAlign" /> property to specify the alignment of the HTML caption element in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          <para>The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <see cref="T:System.ComponentModel.LocalizableAttribute" /> and <format type="text/html"><a href="8ef3838e-9d05-4236-9dd0-ceecff9df80d">ASP.NET Globalization and Localization</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CaptionAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableCaptionAlign CaptionAlign { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Web.UI.WebControls.TableCaptionAlign.NotSet)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableCaptionAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.CaptionAlign" /> property to specify the horizontal or vertical position of the HTML caption element in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</para>
          <para>This property is set using one of the <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> enumeration values. The following table lists the possible values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>TableCaptionAlign.Bottom</para>
              </term>
              <description>
                <para>The caption element is aligned with the bottom of the table.</para>
              </description>
            </item>
            <item>
              <term>
                <para>TableCaptionAlign.Left</para>
              </term>
              <description>
                <para>The caption element is aligned with the left side of the table.</para>
              </description>
            </item>
            <item>
              <term>
                <para>TableCaptionAlign.NotSet</para>
              </term>
              <description>
                <para>The caption element's alignment is not set.</para>
              </description>
            </item>
            <item>
              <term>
                <para>TableCaptionAlign.Right</para>
              </term>
              <description>
                <para>The caption element is aligned with the right side of the table.</para>
              </description>
            </item>
            <item>
              <term>
                <para>TableCaptionAlign.Top</para>
              </term>
              <description>
                <para>The caption element is aligned with the top of the table.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>When this property is set to TableCaptionAlign.NotSet, the default value of the browser is used.</para>
          </block>
          <para>Additional accessibility support for the <see cref="T:System.Web.UI.WebControls.FormView" /> control is provided by the <see cref="P:System.Web.UI.WebControls.FormView.Caption" /> property. Use the <see cref="P:System.Web.UI.WebControls.FormView.Caption" /> property to specify the text to render in an HTML caption element in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the horizontal or vertical position of the HTML caption element in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This property is provided to make the control more accessible to users of assistive technology devices.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CellPadding">
      <MemberSignature Language="C#" Value="public virtual int CellPadding { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.CellPadding" /> property to control the spacing between the contents of a cell and the cell's border. The padding amount specified is added to all four sides of the cell.</para>
          <para>All cells in the same column of a <see cref="T:System.Web.UI.WebControls.FormView" /> control have the same width. The padding amount is applied to the widest cell and all other cells in the column are adjusted to that cell width. Similarly, all cells in the same row have the same height. The padding amount is applied to the tallest cell in the row and all other cells in the row are adjusted to that cell height. Individual cell sizes cannot be specified.</para>
          <para>To adjust the spacing between cells, use the <see cref="P:System.Web.UI.WebControls.FormView.CellSpacing" /> property.</para>
          <block subset="none" type="note">
            <para>When this property is not set, the default value of the browser is used.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the amount of space between the contents of a cell and the cell's border.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CellSpacing">
      <MemberSignature Language="C#" Value="public virtual int CellSpacing { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.CellSpacing" /> property to control the spacing between adjacent cells in the <see cref="T:System.Web.UI.WebControls.FormView" /> control. This spacing is applied both vertically and horizontally. The cell spacing is uniform for the entire control. Individual cell spacing between rows or columns cannot be specified.</para>
          <block subset="none" type="note">
            <para>If you set this property to a value greater than 0, and then set the <see cref="P:System.Web.UI.WebControls.FormView.GridLines" /> property to a value that displays the cell borders, a gap is displayed between the borders of adjacent cells. In this situation, the <see cref="P:System.Web.UI.WebControls.FormView.CellSpacing" /> property controls the size of the gap.</para>
          </block>
          <para>To adjust the spacing between the contents of a cell and the cell's border, use the <see cref="P:System.Web.UI.WebControls.FormView.CellPadding" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the amount of space between cells.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ChangeMode">
      <MemberSignature Language="C#" Value="public void ChangeMode (System.Web.UI.WebControls.FormViewMode newMode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newMode" Type="System.Web.UI.WebControls.FormViewMode" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" /> method to programmatically switch the <see cref="T:System.Web.UI.WebControls.FormView" /> control between edit, insert, and read-only modes. This method also updates the <see cref="P:System.Web.UI.WebControls.FormView.CurrentMode" /> property with the specified mode. The following table lists the different mode values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>FormViewMode.Edit</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode, which allows the user to update the values of a record.</para>
              </description>
            </item>
            <item>
              <term>
                <para>FormViewMode.Insert</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode, which allows the user to add a new record to the data source.</para>
              </description>
            </item>
            <item>
              <term>
                <para>FormView.ReadOnly</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode, which is the normal display mode.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> and <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> events are not raised when this method is called.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Switches the <see cref="T:System.Web.UI.WebControls.FormView" /> control to the specified data-entry mode.</para>
        </summary>
        <param name="newMode">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.FormViewMode" /> enumeration values.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override int CreateChildControls (System.Collections.IEnumerable data, bool dataBinding);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create the control hierarchy for the <see cref="T:System.Web.UI.WebControls.FormView" /> control. When the <paramref name="dataBinding" /> parameter is true, data binding is performed before the control hierarchy is created.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates the control hierarchy used to render the <see cref="T:System.Web.UI.WebControls.FormView" /> control with the specified data source.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of items created from the data source.</para>
        </returns>
        <param name="dataBinding">
          <attribution license="cc4" from="Microsoft" modified="false" />true to indicate that the control hierarchy is created directly from the data source; false to indicate the control hierarchy is created from the view state.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.CreateControlStyle" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create its default table style object. In addition to setting the default style of a <see cref="T:System.Web.UI.WebControls.TableStyle" /> object, this method also sets the <see cref="P:System.Web.UI.WebControls.FormView.CellPadding" /> property to 0.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a default table style object for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.UI.WebControls.Style" /> that contains the default table style for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateDataSourceSelectArguments">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that contains the arguments passed to the data source. In this implementation, the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object contains the arguments for paging operations. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates the <see cref="T:System.Web.UI.DataSourceSelectArguments" /> object that contains the arguments that are passed to the data source for processing.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> that contains the arguments that are passed to the data source.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateRow">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.FormViewRow CreateRow (int rowIndex, System.Web.UI.WebControls.DataControlRowType rowType, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowType" Type="System.Web.UI.WebControls.DataControlRowType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="rowIndex">To be added.</param>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create a <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object used to represent a row within the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object using the specified item index, row type, and row state.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewRow" /> with the specified item index, row type, and row state.</para>
        </returns>
        <param name="rowType">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.DataControlRowType" /> enumeration values.</param>
        <param name="rowState">
          <attribution license="cc4" from="Microsoft" modified="false" />A bitwise combination of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> enumeration values.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Table CreateTable ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Table</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.CreateTable" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create a table that acts as the container for the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates the containing table for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.UI.WebControls.Table" /> that represents the containing table for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CurrentMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.FormViewMode CurrentMode { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.CurrentMode" /> property to determine whether the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit, insert, or read-only mode. The following table lists the different mode values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>FormViewMode.Edit</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode, which allows the user to update the values of a record.</para>
              </description>
            </item>
            <item>
              <term>
                <para>FormViewMode.Insert</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode, which allows the user to add a new record to the data source.</para>
              </description>
            </item>
            <item>
              <term>
                <para>FormView.ReadOnly</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode, which is the normal display mode.</para>
              </description>
            </item>
          </list>
          <para>This value is normally set automatically by the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the New, Update, Insert, Delete, or Cancel command button is clicked. When the <see cref="T:System.Web.UI.WebControls.FormView" /> control changes modes in response to an action, the events in the following table are raised. This allows you to create a custom event handler that performs the appropriate routine when the event occurs.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Event</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
                </para>
              </term>
              <description>
                <para>Occurs when the <see cref="T:System.Web.UI.WebControls.FormView" />  control changes modes, but after the mode changes. This event is commonly used to perform a task whenever the <see cref="T:System.Web.UI.WebControls.FormView" />  control changes modes.</para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
                </para>
              </term>
              <description>
                <para>Occurs when the <see cref="T:System.Web.UI.WebControls.FormView" />  control changes modes, but before the mode changes. This event is commonly used to cancel the mode change.</para>
              </description>
            </item>
          </list>
          <para>Note   These events are not raised when you change the mode programmatically by using the <see cref="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current data-entry mode of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override sealed void DataBind ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.FormView.DataBind" /> method to bind data from a data source to the <see cref="T:System.Web.UI.WebControls.FormView" /> control. This method resolves all data-binding expressions in the active template of the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Binds the data source to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public virtual object DataItem { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.DataItem" /> property to access the data item bound to the <see cref="T:System.Web.UI.WebControls.FormView" /> control. The data item is often used to access the field values of the current record directly. The type of the <see cref="T:System.Object" /> returned by this property varies depending on the data source. For example, when a <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> control is bound to the <see cref="T:System.Web.UI.WebControls.FormView" /> control, a <see cref="T:System.Data.DataRowView" /> object is returned.</para>
          <block subset="none" type="note">
            <para>This property is available only after data binding has occurred. Before data binding occurs, this property returns null. This property is also not applicable when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode and returns null.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the data item bound to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataItemCount">
      <MemberSignature Language="C#" Value="public int DataItemCount { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.DataItemCount" /> property to determine the number of data items contained in the data source. This property contains the same value as the <see cref="P:System.Web.UI.WebControls.FormView.PageCount" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the number of data items in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataItemIndex">
      <MemberSignature Language="C#" Value="public virtual int DataItemIndex { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.DataItemIndex" /> property to determine the index of the data item bound to the <see cref="T:System.Web.UI.WebControls.FormView" /> control from the data source. This property contains the same value as the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property.</para>
          <block subset="none" type="note">
            <para>This property is not applicable when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode. When the control is in insert mode, the <see cref="P:System.Web.UI.WebControls.FormView.DataItemIndex" /> property returns -1.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the index of the data item bound to the <see cref="T:System.Web.UI.WebControls.FormView" /> control from the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey DataKey { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property is set, the <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically creates a <see cref="T:System.Web.UI.WebControls.DataKey" /> object that contains the key/value pairs of the field or fields listed in the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property for the current record. Use the <see cref="P:System.Web.UI.WebControls.FormView.DataKey" /> property to get this <see cref="T:System.Web.UI.WebControls.DataKey" /> object. This property is commonly used to obtain the keys and their corresponding values for the fields specified in the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property.</para>
          <block subset="none" type="note">
            <para>As a shortcut, you can also use the <see cref="P:System.Web.UI.WebControls.FormView.SelectedValue" /> property to determine the value of the first key field listed in the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.Web.UI.WebControls.DataKey" /> object that represents the primary key of the displayed record.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DataKeyNames">
      <MemberSignature Language="C#" Value="public virtual string[] DataKeyNames { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property to specify a comma-separated list of field names that represent the primary key of the data source. When the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property is set, the <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically creates a <see cref="T:System.Web.UI.WebControls.DataKey" /> object that contains the key/value pairs of the field or fields listed in the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property for the current record. The <see cref="T:System.Web.UI.WebControls.DataKey" /> object is then stored in the <see cref="P:System.Web.UI.WebControls.FormView.DataKey" /> property.</para>
          <block subset="none" type="note">
            <para>You must set the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property for the built-in updating, deleting, and inserting features of the <see cref="T:System.Web.UI.WebControls.FormView" /> control to work.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an array that contains the names of the key fields for the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DefaultMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewMode DefaultMode { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Web.UI.WebControls.FormViewMode.ReadOnly)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.DefaultMode" /> property to specify whether the <see cref="T:System.Web.UI.WebControls.FormView" /> control returns to edit, insert, or read-only mode after an update, insert, or cancel operation is performed. By default, the <see cref="T:System.Web.UI.WebControls.FormView" /> control returns to read-only mode; however, you can keep the <see cref="T:System.Web.UI.WebControls.FormView" /> control in edit or insert mode by setting this property to the appropriate value. The following table lists the different mode values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>FormViewMode.Edit</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode, which allows the user to update the values of a record.</para>
              </description>
            </item>
            <item>
              <term>
                <para>FormViewMode.Insert</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode, which allows the user to add a new record to the data source.</para>
              </description>
            </item>
            <item>
              <term>
                <para>FormViewMode.ReadOnly</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode, which is the normal display mode.</para>
              </description>
            </item>
          </list>
          <para>This property is commonly used when the <see cref="T:System.Web.UI.WebControls.FormView" /> control has a single purpose, such as only to insert or edit records.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the data-entry mode to which the <see cref="T:System.Web.UI.WebControls.FormView" /> control returns after an update, insert, or cancel operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.FormView.DeleteItem" /> method to programmatically delete the current record in the <see cref="T:System.Web.UI.WebControls.FormView" /> control from the data source. This method is commonly used when you need to delete the current record from outside of the <see cref="T:System.Web.UI.WebControls.FormView" /> control, such as from a different control on the page. Calling this method also raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> events.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Deletes the current record in the <see cref="T:System.Web.UI.WebControls.FormView" /> control from the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control renders a different template for the data row based on the current mode of the control (specified by the <see cref="P:System.Web.UI.WebControls.FormView.CurrentMode" /> property). The following table shows which template is used for each mode.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Template rendered</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Read-only</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
                </para>
              </description>
            </item>
          </list>
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" /> property to define your own user interface (UI) for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode. The edit item template usually contains the input controls for the user to update the values of an existing record, as well as command buttons to update the record and to cancel the update operation.</para>
          <para>To specify the custom template, first place &lt;EditItemTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;EditItemTemplate&gt; tags. By using a two-way binding expression, you can associate a field with an input control. This allows the <see cref="T:System.Web.UI.WebControls.FormView" /> control to automatically display the original field value in the associated input control in edit mode. When a record is updated, the <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically extracts the updated field value from the associated input control. For more information on two-way binding expressions, see <format type="text/html"><a href="ab7b2846-975b-4057-a948-45527497c742">ASP.NET Data Binding</a></format>. To create command buttons that perform the built-in cancel and update operations, add a command button control to the template with its CommandName property set to one of the values listed in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Command button type</para>
                </term>
                <description>
                  <para>CommandName value</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Cancel</para>
              </term>
              <description>
                <para>"Cancel"</para>
              </description>
            </item>
            <item>
              <term>
                <para>Update</para>
              </term>
              <description>
                <para>"Update"</para>
              </description>
            </item>
          </list>
          <para>You can control the appearance of the item template by using the <see cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom content for an item in edit mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EditRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EditRowStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" /> property to control the appearance of the data row when a <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode. When the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode, the data row displays the user-defined content specified by the <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" /> property. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns. The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, EditRowStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest an &lt;EditRowStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, EditRowStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the data row when a <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EmptyDataRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" /> property to control the appearance of the empty data row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. The empty data row is displayed when the data source that is bound to the control does not contain any records. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns. The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, EmptyDataRowStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest an &lt;EmptyDataRowStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, EmptyDataRowStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the empty data row displayed when the data source bound to a <see cref="T:System.Web.UI.WebControls.FormView" /> control does not contain any records.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EmptyDataTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyDataTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.OneWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The empty data row is displayed in a <see cref="T:System.Web.UI.WebControls.FormView" /> control when the data source that is bound to the control does not contain any records. You can define your own custom user interface (UI) for the empty data row by using the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> property. To specify a custom template for the empty data row, first place &lt;EmptyDataTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;EmptyDataTemplate&gt; tags. To control the style of the empty data row, use the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" /> property. Alternatively, you can use the built-in UI for the empty data row by setting the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" /> property instead of this property.</para>
          <block subset="none" type="note">
            <para>If both the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" /> and <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> property takes precedence.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the user-defined content for the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to a data source that does not contain any records.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EmptyDataText">
      <MemberSignature Language="C#" Value="public virtual string EmptyDataText { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The empty data row is displayed in a <see cref="T:System.Web.UI.WebControls.FormView" /> control when the data source that is bound to the control does not contain any records. Use the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" /> property to specify the text to display in the empty data row. To control the style of the empty data row, use the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" /> property. Alternatively, you can define your own custom user interface (UI) for the empty data row by setting the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> property instead of this property.</para>
          <block subset="none" type="note">
            <para>If both the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" /> and <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> property takes precedence.</para>
          </block>
          <para>The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <see cref="T:System.ComponentModel.LocalizableAttribute" /> and <format type="text/html"><a href="8ef3838e-9d05-4236-9dd0-ceecff9df80d">ASP.NET Globalization and Localization</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text to display in the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to a data source that does not contain any records.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnsureDataBound">
      <MemberSignature Language="C#" Value="protected override void EnsureDataBound ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.EnsureDataBound" /> method is a helper method used by the <see cref="T:System.Web.UI.WebControls.FormView" /> class to make certain that the <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to data when appropriate. The <see cref="M:System.Web.UI.WebControls.FormView.EnsureDataBound" /> method is usually called during the <see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.OnPreRender(System.EventArgs)" /> method to bind the control to the data source when the data-bound control is not yet bound, but requires data binding. This version of the method has been overridden to prevent data binding from occurring when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Makes certain that the <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to data when appropriate.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ExtractRowValues">
      <MemberSignature Language="C#" Value="protected virtual void ExtractRowValues (System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldValues" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="includeKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to retrieve the values of each field declared within the data row. Because the data row displays a different template based on the current mode, this method retrieves only the field values declared in the template that corresponds to the current mode. The following table shows the available modes and the corresponding templates.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Template</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Read-only</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
                </para>
              </description>
            </item>
          </list>
          <para>You can specify whether the extracted values include the key field or fields by using the <paramref name="includeKeys" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Retrieves the values of each field declared within the data row and stores them in the specified <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> object.</para>
        </summary>
        <param name="fieldValues">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> used to store the field values of the current data item.</param>
        <param name="includeKeys">
          <attribution license="cc4" from="Microsoft" modified="false" />true to include key fields; otherwise, false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FooterRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow FooterRow { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The footer row is displayed at the bottom of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> or <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property is set. Use the <see cref="P:System.Web.UI.WebControls.FormView.FooterRow" /> property to programmatically access the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the footer row.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Web.UI.WebControls.FormView.FooterRow" /> property is available only after the <see cref="T:System.Web.UI.WebControls.FormView" /> control creates the footer row in the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event.</para>
          </block>
          <para>This property is commonly used when you need to programmatically manipulate the footer row, for example when adding custom content. Any modification to the <see cref="P:System.Web.UI.WebControls.FormView.FooterRow" /> property must be performed after the <see cref="T:System.Web.UI.WebControls.FormView" /> control has been rendered; otherwise, the <see cref="T:System.Web.UI.WebControls.FormView" /> control overwrites any changes.</para>
          <para>To control the style of the footer row, use the <see cref="P:System.Web.UI.WebControls.FormView.FooterStyle" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the footer row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The footer row is displayed at the bottom of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> or <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property is set. Use the <see cref="P:System.Web.UI.WebControls.FormView.FooterStyle" /> property to control the appearance of the footer row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns. The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, FooterStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest a &lt;FooterStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, FooterStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the footer row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.OneWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The footer row is displayed at the bottom of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> or <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property is set. You can define your own custom user interface (UI) for the footer row by using the <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property. To specify a custom template for the footer row, first place &lt;FooterTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;FooterTemplate&gt; tags. To control the style of the footer row, use the <see cref="P:System.Web.UI.WebControls.FormView.FooterStyle" /> property. Alternatively, you can simply display text in the footer row by setting the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> property instead of this property.</para>
          <block subset="none" type="note">
            <para>If both the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> and <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property takes precedence.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the user-defined content for the footer row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="FooterText">
      <MemberSignature Language="C#" Value="public virtual string FooterText { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The footer row is displayed at the bottom of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> or <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property is set. Use the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> property to specify the text to display in the footer row. To control the style of the footer row, use the <see cref="P:System.Web.UI.WebControls.FormView.FooterStyle" /> property. Alternatively, you can define your own custom user interface (UI) for the footer row by setting the <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property instead of this property.</para>
          <block subset="none" type="note">
            <para>If both the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> and <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property takes precedence.</para>
          </block>
          <para>The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <see cref="T:System.ComponentModel.LocalizableAttribute" /> and <format type="text/html"><a href="8ef3838e-9d05-4236-9dd0-ceecff9df80d">ASP.NET Globalization and Localization</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text to display in the footer row of a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridLines GridLines { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Web.UI.WebControls.GridLines.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.GridLines" /> property to specify the gridline style for a <see cref="T:System.Web.UI.WebControls.FormView" /> control. The following table lists the available styles.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Style </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>GridLines.None</para>
              </term>
              <description>
                <para>No gridlines are displayed.</para>
              </description>
            </item>
            <item>
              <term>
                <para>GridLines.Horizontal</para>
              </term>
              <description>
                <para>Displays the horizontal gridlines only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>GridLines.Vertical</para>
              </term>
              <description>
                <para>Displays the vertical gridlines only.</para>
              </description>
            </item>
            <item>
              <term>
                <para>GridLines.Both</para>
              </term>
              <description>
                <para>Displays both the horizontal and vertical gridlines.</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the gridline style for a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow HeaderRow { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The header row is displayed at the top of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> or <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property is set. Use the <see cref="P:System.Web.UI.WebControls.FormView.HeaderRow" /> property to programmatically access the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the header row.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Web.UI.WebControls.FormView.HeaderRow" /> property is available only after the <see cref="T:System.Web.UI.WebControls.FormView" /> control creates the header row in the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event.</para>
          </block>
          <para>This property is commonly used when you need to programmatically manipulate the header row, for example, when adding custom content. Any modification to the <see cref="P:System.Web.UI.WebControls.FormView.HeaderRow" /> property must be performed after the <see cref="T:System.Web.UI.WebControls.FormView" /> control has been rendered; otherwise, the <see cref="T:System.Web.UI.WebControls.FormView" /> control overwrites any changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the header row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The header row is displayed at the top of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> or <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property is set. Use the <see cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" /> property to control the appearance of the header row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns. The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, HeaderStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest a &lt;HeaderStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, HeaderStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the header row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.OneWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The header row is displayed at the top of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> or <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property is set. You can define your own custom user interface (UI) for the header row by using the <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property. To specify a custom template for the header row, first place &lt;HeaderTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;HeaderTemplate&gt; tags. To control the style of the header row, use the <see cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" /> property. Alternatively, you can simply display text in the header row by setting the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> property instead of this property.</para>
          <block subset="none" type="note">
            <para>If both the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> and <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property takes precedence.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the user-defined content for the header row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public virtual string HeaderText { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The header row is displayed at the top of the <see cref="T:System.Web.UI.WebControls.FormView" /> control when the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> or <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property is set. Use the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> property to specify the text to display in the header row. To control the style of the header row, use the <see cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" /> property. Alternatively, you can define your own custom user interface (UI) for the header row by setting the <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property instead of this property.</para>
          <block subset="none" type="note">
            <para>If both the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> and <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property takes precedence.</para>
          </block>
          <para>The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <see cref="T:System.ComponentModel.LocalizableAttribute" /> and <format type="text/html"><a href="8ef3838e-9d05-4236-9dd0-ceecff9df80d">ASP.NET Globalization and Localization</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the text to display in the header row of a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HorizontalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Web.UI.WebControls.HorizontalAlign.NotSet)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HorizontalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" /> property to specify the horizontal alignment of a <see cref="T:System.Web.UI.WebControls.FormView" /> control within the page. The following table lists the different horizontal alignment styles.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>HorizontalAlign value </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>HorizontalAlign.NotSet</para>
              </term>
              <description>
                <para>The horizontal alignment of the <see cref="T:System.Web.UI.WebControls.FormView" /> control has not been set.</para>
              </description>
            </item>
            <item>
              <term>
                <para>HorizontalAlign.Left</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is left-aligned on the page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>HorizontalAlign.Center</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is centered on the page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>HorizontalAlign.Right</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is right-aligned on the page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>HorizontalAlign.Justify</para>
              </term>
              <description>
                <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control is aligned with both the left and right margins of the page.</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the horizontal alignment of a <see cref="T:System.Web.UI.WebControls.FormView" /> control on the page.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InitializePager">
      <MemberSignature Language="C#" Value="protected virtual void InitializePager (System.Web.UI.WebControls.FormViewRow row, System.Web.UI.WebControls.PagedDataSource dataSource);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.PagedDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">To be added.</param>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create the pager row. It creates a <see cref="T:System.Web.UI.WebControls.TableCell" /> object that contains the navigation controls using the properties of the <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> object contained in the <paramref name="pagedDataSource" /> parameter. The cell is then added to the row specified by the <paramref name="row" /> parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates the pager row for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <param name="row">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.WebControls.FormViewRow" /> that contains the pager row.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InitializeRow">
      <MemberSignature Language="C#" Value="protected virtual void InitializeRow (System.Web.UI.WebControls.FormViewRow row);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to initialize the specified <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object. The <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object is initialized based on the row type and row state specified by its <see cref="P:System.Web.UI.WebControls.FormViewRow.RowType" /> and <see cref="P:System.Web.UI.WebControls.FormViewRow.RowState" /> properties, respectively. The appropriate content is then added to the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object. The following table describes how each row type is initialized.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Row type</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Data row</para>
              </term>
              <description>
                <para>The contents of the <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />, <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />, or <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" /> property are added to the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object, depending on the value of the <see cref="P:System.Web.UI.WebControls.FormViewRow.RowState" /> property.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Empty data row</para>
              </term>
              <description>
                <para>The value of the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" /> property or the contents of the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> property is added to the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object, depending on which property is set. If both properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" /> property takes precedence.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Footer row</para>
              </term>
              <description>
                <para>The value of the <see cref="P:System.Web.UI.WebControls.FormView.FooterText" /> property or the contents of the <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property is added to the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object, depending on which property is set. If both properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" /> property takes precedence.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Header row</para>
              </term>
              <description>
                <para>The value of the <see cref="P:System.Web.UI.WebControls.FormView.HeaderText" /> property or the contents of the <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property is added to the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object, depending on which property is set. If both properties are set, the <see cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" /> property takes precedence.</para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>This method does not initialize the pager row. To create the pager row, use the <see cref="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" /> method.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes the specified <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object.</para>
        </summary>
        <param name="row">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.WebControls.FormViewRow" /> to initialize.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="public virtual void InsertItem (bool causesValidation);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode, use the <see cref="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" /> method to programmatically insert the current record in the data source. This method is commonly used when you need to insert the current record from outside of the <see cref="T:System.Web.UI.WebControls.FormView" /> control, such as from a different control on the page.</para>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control must be in insert mode when this method is called; otherwise, an <see cref="T:System.Web.HttpException" /> is thrown.</para>
          </block>
          <para>To specify whether page validation is performed before the insert operation, use the <paramref name="causesValidation" /> parameter. Calling this method also raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> events.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inserts the current record in the data source.</para>
        </summary>
        <param name="causesValidation">
          <attribution license="cc4" from="Microsoft" modified="false" />true to perform page validation when the method is called; otherwise, false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InsertItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate InsertItemTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control renders a different template for the data row based on the current mode of the control (specified by the <see cref="P:System.Web.UI.WebControls.FormView.CurrentMode" /> property). The following table shows which template is used for each mode.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Template rendered</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Read-only</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
                </para>
              </description>
            </item>
          </list>
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" /> property to define your own user interface (UI) for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode. The insert item template usually contains the input controls for the user to enter the values for the new record, as well as command buttons to insert the record and to cancel the insert operation.</para>
          <para>To specify the custom template, first place &lt;InsertItemTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;InsertItemTemplate&gt; tags. By using a two-way binding expression, you can associate a field with an input control. When a record is inserted, the <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically extracts the field value from the associated input control. For more information on two-way binding expressions, see <format type="text/html"><a href="ab7b2846-975b-4057-a948-45527497c742">ASP.NET Data Binding</a></format>. To create command buttons that perform the built-in cancel and insert operations, add a command button control to the template with its CommandName property set to one of the values listed in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Command button type</para>
                </term>
                <description>
                  <para>CommandName value</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Cancel</para>
              </term>
              <description>
                <para>"Cancel"</para>
              </description>
            </item>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>"Insert"</para>
              </description>
            </item>
          </list>
          <para>You can control the appearance of the item template by using the <see cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom content for an item in insert mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InsertRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle InsertRowStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" /> property to control the appearance of the data row when a <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode. When the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in insert mode, the data row displays the user-defined content specified by the <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" /> property. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns.</para>
          <para>The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, InsertRowStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest an &lt;InsertRowStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, InsertRowStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the data row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control when the control is in insert mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsBindableType">
      <MemberSignature Language="C#" Value="public virtual bool IsBindableType (Type type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.IsBindableType(System.Type)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to determine whether the specified data type can be bound to a field in the control. The <see cref="T:System.Web.UI.WebControls.FormView" /> control supports the following data types:</para>
          <list type="bullet">
            <item>
              <para>All primitive data types, such as <see cref="T:System.Boolean" />, <see cref="T:System.Byte" />, <see cref="T:System.Int32" />, and so on.</para>
            </item>
            <item>
              <para>
                <see cref="T:System.DateTime" />
              </para>
            </item>
            <item>
              <para>
                <see cref="T:System.Decimal" />
              </para>
            </item>
            <item>
              <para>
                <see cref="T:System.Guid" />
              </para>
            </item>
            <item>
              <para>
                <see cref="T:System.String" />
              </para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified data type can be bound to a field in the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified data type can be bound to a field in the <see cref="T:System.Web.UI.WebControls.FormView" /> control; otherwise, false.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Type" /> that represents the data type to check.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> event is raised when a button within the <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.</para>
          <para>Buttons within a <see cref="T:System.Web.UI.WebControls.FormView" /> control can also invoke some of the built-in functionality of the control. To perform one of these operations, set the CommandName property of a button to one of the values in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>CommandName value</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>"Cancel"</para>
              </term>
              <description>
                <para>Cancels an edit or insert operation and returns the <see cref="T:System.Web.UI.WebControls.FormView" /> control to the mode specified by the <see cref="P:System.Web.UI.WebControls.FormView.DefaultMode" /> property. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> and <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Delete"</para>
              </term>
              <description>
                <para>Deletes the current record. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Edit"</para>
              </term>
              <description>
                <para>Puts the <see cref="T:System.Web.UI.WebControls.FormView" /> control in edit mode. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> and <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Insert"</para>
              </term>
              <description>
                <para>Inserts the current record in the data source. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"New"</para>
              </term>
              <description>
                <para>Puts the <see cref="T:System.Web.UI.WebControls.FormView" /> control in insert mode. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> and <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Page"</para>
              </term>
              <description>
                <para>Performs a paging operation. Set the CommandArgument property of the button to "First", "Last", "Next", "Prev", or a page number to specify the type of paging operation to perform. Raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> and <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Update"</para>
              </term>
              <description>
                <para>Updates the current record in the data source. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> events.</para>
              </description>
            </item>
          </list>
          <para>Although the <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> event is raised when a button listed in the previous table is clicked, it is recommended that you use the events listed in the table for the operation.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" /> object is passed to the event-handling method, which allows you to determine the command name and command argument of the button clicked. To determine the command name and command argument, use the <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName" /> and <see cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument" /> properties, respectively. You can also access the control that raised the event by using the <see cref="P:System.Web.UI.WebControls.DetailsViewCommandEventArgs.CommandSource" /> property.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event EventHandler ItemCreated;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event is raised after all rows are created in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This can occur when the control is first rendered, or when the user navigates to another record. You can use this event to provide an event-handling method that performs a custom routine, such as adding to or modifying the contents of a row, whenever this event occurs.</para>
          <block subset="none" type="note">
            <para>The <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event occurs before the <see cref="T:System.Web.UI.WebControls.FormView" /> control is bound to data. To modify the value of a bound field, use the <see cref="E:System.Web.UI.WebControls.BaseDataBoundControl.DataBound" /> event.</para>
          </block>
          <para>You can access the header, footer, and pager rows in the <see cref="T:System.Web.UI.WebControls.FormView" /> control by using the <see cref="P:System.Web.UI.WebControls.FormView.HeaderRow" />, <see cref="P:System.Web.UI.WebControls.FormView.FooterRow" />, <see cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />, or <see cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" /> properties, respectively. To access the data row, use the <see cref="P:System.Web.UI.WebControls.FormView.Row" /> property.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs after all the rows are created in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> event when a Delete button (a button with its CommandName property set to "Delete") within the control is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control deletes the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of a delete operation, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" /> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the delete operation, use the <see cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows" /> property. Use the <see cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception" /> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <see cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled" /> property. If you want to access the name/value pairs of the key fields and non-key fields of the deleted record, use the <see cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys" /> and <see cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values" /> properties, respectively.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a Delete button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked, but after the delete operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> event when a Delete button (a button with its CommandName property set to "Delete") within the control is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control deletes the record. This allows you to provide an event-handling method that performs a custom routine, such as verifying a record before deleting it, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" /> object is passed to the event-handling method, which allows you to determine the index of the record being deleted and to indicate that the delete operation should be canceled. To determine the index of a record, use the <see cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex" /> property. To cancel the delete operation, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property to true. You can also access the key fields and non-key fields by using the <see cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys" /> and <see cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values" /> properties, respectively.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when a Delete button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked, but before the delete operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemInserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> event when an Insert button (a button with its CommandName property set to "Insert") within the control is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an insert operation, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" /> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the insert operation, use the <see cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows" /> property. Use the <see cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception" /> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <see cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled" /> property. If you need to access the values of the inserted record, use the <see cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values" /> property.</para>
          <para>By default, the <see cref="T:System.Web.UI.WebControls.FormView" /> control returns to the mode specified by the <see cref="P:System.Web.UI.WebControls.FormView.DefaultMode" /> property after an insert operation. To keep the <see cref="T:System.Web.UI.WebControls.FormView" /> control in insert mode, set the <see cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode" /> property to true.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an Insert button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked, but after the insert operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemInserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> event when an Insert button (a button with its CommandName property set to "Insert") within the control is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding the values of a record before inserting it in the data source, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" /> object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <see cref="T:System.Web.UI.WebControls.FormView" /> control and to indicate that the insert operation should be canceled. The command argument value corresponds to the CommandArgument property of the Insert button. When the CommandArgument property of the Insert button is set, use the <see cref="P:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument" /> property to determine the value of the command argument. To cancel the insert operation, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property to true. You can also read or modify the field values for the new record by using the <see cref="P:System.Web.UI.WebControls.FormViewInsertEventArgs.Values" /> property.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an Insert button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked, but before the insert operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control renders a different template for the data row based on the current mode of the control (specified by the <see cref="P:System.Web.UI.WebControls.FormView.CurrentMode" /> property). The following table shows which template is used for each mode.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Template rendered</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Read-only</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
                </para>
              </description>
            </item>
          </list>
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" /> property to define your own user interface (UI) for the data row when the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode. The item template usually contains controls to display the field values of a record, as well as command buttons to edit, insert, and delete a record.</para>
          <para>To specify the custom template, first place &lt;ItemTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;ItemTemplate&gt; tags. To display the field values of the data source bound to the control, use a data-binding expression. For more information on data-binding expressions, see <format type="text/html"><a href="676beb1d-ddfa-4153-bba8-3c86dcb7ceca">Data Binding Expression Syntax</a></format>. To create command buttons that perform the built-in delete, edit, and new record operations, add a command button control to the template with its CommandName property set to one of the values listed in the following table.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Command button type</para>
                </term>
                <description>
                  <para>CommandName value</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Delete</para>
              </term>
              <description>
                <para>"Delete"</para>
              </description>
            </item>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>"Edit"</para>
              </description>
            </item>
            <item>
              <term>
                <para>New</para>
              </term>
              <description>
                <para>"New"</para>
              </description>
            </item>
          </list>
          <para>You can control the appearance of the item template by using the <see cref="P:System.Web.UI.WebControls.FormView.RowStyle" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom content for the data row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control when the control is in read-only mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemUpdated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> event when an Update button (a button with its CommandName property set to "Update") within the control is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" /> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" /> property. Use the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" /> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" /> property. If you need to access the key field values for the updated record, use the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" /> property. The original and updated non-key field values can be accessed using the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" /> and <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" /> properties, respectively.</para>
          <para>By default, the <see cref="T:System.Web.UI.WebControls.FormView" /> control returns to the mode specified by the <see cref="P:System.Web.UI.WebControls.FormView.DefaultMode" /> property after an update operation. To keep the <see cref="T:System.Web.UI.WebControls.FormView" /> control in edit mode, set the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" /> property to true.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an Update button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked, but after the update operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ItemUpdating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> event when an Update button (a button with its CommandName property set to "Update") within the control is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding the values of a record before updating it in the data source, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" /> object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <see cref="T:System.Web.UI.WebControls.FormView" /> control and to indicate that the update operation should be canceled. The command argument value corresponds to the CommandArgument property of the Update button. When the CommandArgument property of the Update button is set, use the <see cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument" /> property to determine the value of the command argument. To cancel the update operation, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property to true. You can also read or modify the new values entered by the user by using the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" /> and <see cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues" /> properties. The <see cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys" /> property contains the key fields, while the <see cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues" /> property contains the non-key fields. If you need to access the original non-key field values, use the <see cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" /> property.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when an Update button within a <see cref="T:System.Web.UI.WebControls.FormView" /> control is clicked, but before the update operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object ob);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ob" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ob">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.LoadControlState(System.Object)" /> method is used to load the state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control properties that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to false.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control properties that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to false.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.LoadViewState(System.Object)" /> method is used to load the previously saved view state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <param name="savedState">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Object" /> that represents the state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ModeChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> event is raised when a <see cref="T:System.Web.UI.WebControls.FormView" /> control attempts to switch between edit, insert, and read-only mode, but after the mode actually changes. This allows you to provide an event-handling method that performs a custom routine, such as synchronizing the <see cref="T:System.Web.UI.WebControls.FormView" /> control with another control, whenever this event occurs.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="T:System.Web.UI.WebControls.FormView" /> control switches between edit, insert, and read-only mode, but after the mode has changed.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event is raised when a <see cref="T:System.Web.UI.WebControls.FormView" /> control attempts to switch between edit, insert, and read-only mode, but before the mode actually changes. This allows you to provide an event-handling method that performs a custom routine, such as configuring the <see cref="T:System.Web.UI.WebControls.FormView" /> control for a specific mode or canceling the mode change, whenever this event occurs.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" /> object is passed to the event-handling method, which allows you to determine the mode to which the <see cref="T:System.Web.UI.WebControls.FormView" /> control is switching, to determine whether the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event was raised as a result of the user canceling an edit operation, or to indicate that an insert operation should be canceled. To determine the new mode, use the <see cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode" /> property. You can also use the <see cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode" /> property to switch to an alternate mode by setting it to one of the <see cref="T:System.Web.UI.WebControls.FormViewMode" /> enumeration values. Use the <see cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit" /> property to determine whether the user canceled an edit operation. To cancel an insert operation, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property to true.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the <see cref="T:System.Web.UI.WebControls.FormView" /> control switches between edit, insert, and read-only mode, but before the mode changes.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)" /> method is used by the control to optionally handle events passed up through the control hierarchy by the <see cref="M:System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)" /> method. It determines whether to handle an event by examining the properties of the <see cref="T:System.EventArgs" /> object contained in the <paramref name="e" /> parameter. When an event needs to be handled, the method performs the appropriate action. Other events are ignored and passed up the control hierarchy. This method indicates whether to pass the event further up the control hierarchy through its return value.</para>
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control overrides the base implementation of this method to perform the appropriate action when one of the buttons recognized by the control is clicked. The following table lists the command buttons that the <see cref="T:System.Web.UI.WebControls.FormView" /> control recognizes.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Button</para>
                </term>
                <description>
                  <para>CommandName value</para>
                </description>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Cancel</para>
              </term>
              <description>
                <para>"Cancel"</para>
              </description>
              <description>
                <para>Used in updating or inserting operations to cancel the operation and to discard the values entered by the user. The <see cref="T:System.Web.UI.WebControls.FormView" /> control then returns to the mode specified by the <see cref="P:System.Web.UI.WebControls.FormView.DefaultMode" /> property.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Delete</para>
              </term>
              <description>
                <para>"Delete"</para>
              </description>
              <description>
                <para>Used in deleting operations to delete the displayed record from the data source. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>"Edit"</para>
              </description>
              <description>
                <para>Used in updating operations to put the <see cref="T:System.Web.UI.WebControls.FormView" /> control in edit mode. The content specified in the <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" /> property is displayed for the data row.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>"Insert"</para>
              </description>
              <description>
                <para>Used in inserting operations to attempt to insert a new record in the data source with the values provided by the user. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> events.</para>
              </description>
            </item>
            <item>
              <term>
                <para>New</para>
              </term>
              <description>
                <para>"New"</para>
              </description>
              <description>
                <para>Used in inserting operations to put the <see cref="T:System.Web.UI.WebControls.FormView" /> control in insert mode. The content specified in the <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" /> property is displayed for the data row.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Page</para>
              </term>
              <description>
                <para>"Page"</para>
              </description>
              <description>
                <para>Used in paging operations to represent a button in the pager row that performs paging. To specify the paging operation, set the CommandArgument property of the button to "Next", "Prev", "First", "Last", or the index of the page to which to navigate. Raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> and <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> events.</para>
                <block subset="none" type="note">
                  <para>This type of button is typically used only in the pager template.</para>
                </block>
              </description>
            </item>
            <item>
              <term>
                <para>Update</para>
              </term>
              <description>
                <para>"Update"</para>
              </description>
              <description>
                <para>Used in updating operations to attempt to update the displayed record in the data source with the values provided by the user. Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> events.</para>
              </description>
            </item>
          </list>
          <para>This version of the method returns true when one of these buttons is handled. For more information about event bubbling, see <format type="text/html"><a href="d98fd58b-fa4f-4598-8378-addf4355a115">Events and Delegates</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Handles an event passed up through the control hierarchy.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true to indicate the event should be passed further up the control hierarchy; otherwise, false.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />The source of the event.</param>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.Control.Init" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.Control.Init" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.FormViewCommandEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewCommandEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleted (System.Web.UI.WebControls.FormViewDeletedEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeletedEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleting (System.Web.UI.WebControls.FormViewDeleteEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeleteEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserted (System.Web.UI.WebControls.FormViewInsertedEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertedEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserting (System.Web.UI.WebControls.FormViewInsertEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdated (System.Web.UI.WebControls.FormViewUpdatedEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnItemUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdating (System.Web.UI.WebControls.FormViewUpdateEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdateEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanging (System.Web.UI.WebControls.FormViewModeEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewModeEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnPageIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanged (EventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnPageIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanging (System.Web.UI.WebControls.FormViewPageEventArgs e);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewPageEventArgs" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" /> method is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to raise the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> event. It is generally used by control developers when extending the <see cref="T:System.Web.UI.WebControls.FormView" /> class.</para>
          <para>Raising an event invokes the event handler through a delegate. For more information, see <format type="text/html"><a href="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2">Raising an Event</a></format>.</para>
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> event.</para>
        </summary>
        <param name="e">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" /> that contains the event data.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PageCount">
      <MemberSignature Language="C#" Value="public virtual int PageCount { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the paging feature is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true), use the <see cref="P:System.Web.UI.WebControls.FormView.PageCount" /> property to determine the total number of records in the underlying data source.</para>
          <block subset="none" type="note">
            <para>Because the <see cref="T:System.Web.UI.WebControls.FormView" /> control displays only one record at a time, this value corresponds to the total number of pages required to display every record in the data source. This value is not accurate until after data-binding occurs.</para>
          </block>
          <para>To determine the index of the current record from the underlying data source, use the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the total number of pages required to display every record in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PageIndex">
      <MemberSignature Language="C#" Value="public virtual int PageIndex { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true, System.ComponentModel.BindingDirection.OneWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the paging feature is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true), use the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property to determine the index of the currently displayed record. You can also use this property to programmatically change the displayed record.</para>
          <block subset="none" type="note">
            <para>When the paging feature is enabled, you can also use this property to determine the page number of the record displayed; however, be aware that this property is zero-based.</para>
          </block>
          <para>To determine the total number of items in the data source, use the <see cref="P:System.Web.UI.WebControls.FormView.PageCount" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the index of the displayed page.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PageIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PageIndexChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> event when a pager button (a button with its CommandName property set to "Page") within the control is clicked, but after the <see cref="T:System.Web.UI.WebControls.FormView" /> control handles the paging operation. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.</para>
          <block subset="none" type="note">
            <para>This event is not raised when you programmatically set the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property.</para>
          </block>
          <para>Pager buttons are usually located in the pager row of a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This event is often used to synchronize a <see cref="T:System.Web.UI.WebControls.FormView" /> control with a <see cref="T:System.Web.UI.WebControls.GridView" /> control or to set the behavior of the <see cref="T:System.Web.UI.WebControls.FormView" /> control after a paging operation.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property changes after a paging operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PageIndexChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewPageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control raises the <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> event when a pager button (a button with its CommandName property set to "Page") within the control is clicked, but before the <see cref="T:System.Web.UI.WebControls.FormView" /> control handles the paging operation. This allows you to provide an event-handling method that performs a custom routine, such as canceling the paging operation, whenever this event occurs.</para>
          <block subset="none" type="note">
            <para>This event is not raised when you programmatically set the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property.</para>
          </block>
          <para>Pager buttons are usually located in the pager row of a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          <para>A <see cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" /> object is passed to the event-handling method, which allows you to determine the index of the page selected by the user and to indicate that the paging operation should be canceled. To determine the index of the page selected by the user, use the <see cref="P:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex" /> property. To cancel the paging operation, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property of the <see cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" /> object to true.</para>
          <para>For more information about handling events, see <format type="text/html"><a href="01e4f1bc-e55e-413f-98c7-6588493e5f67">Consuming Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the value of the <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> property changes before a paging operation.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PagerSettings">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.PagerSettings PagerSettings { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.PagerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.PagerSettings" /> property to control the settings of the pager row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. The pager row is displayed when the paging feature is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true), and contains the controls that allow the user to navigate to the different records in the control. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> object it returns. The properties can be set declaratively in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> object (for example, PagerSettings-Mode). The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, PagerSettings.Mode). Common settings usually include the pager row's display mode and custom text or images for the navigation controls.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.PagerSettings" /> object that allows you to set the properties of the pager buttons in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PagerStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle PagerStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.PagerStyle" /> property to control the appearance of the pager row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control. The pager row is displayed when the paging feature is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true), and contains the controls that allow the user to navigate to the different pages in the control. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns. The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, PagerStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest a &lt;PagerRowStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, PagerStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the pager row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PagerTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate PagerTemplate { set; get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A pager row is displayed in a <see cref="T:System.Web.UI.WebControls.FormView" /> control when the paging feature is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true). The pager row contains the controls that allow the user to navigate to the different pages in the control. Instead of using the built-in pager row user interface (UI), you can define your own UI by using the <see cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" /> property.</para>
          <block subset="none" type="note">
            <para>When the <see cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" /> property is set it overrides the built-in pager row UI.</para>
          </block>
          <para>To specify a custom template for the pager row, first place &lt;PagerTemplate&gt; tags between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control. You can then list the contents of the template between the opening and closing &lt;PagerTemplate&gt; tags. To control the appearance of the pager row, use the <see cref="P:System.Web.UI.WebControls.FormView.PagerStyle" /> property.</para>
          <para>Typically, button controls are added to the pager template to perform the paging operations. The <see cref="T:System.Web.UI.WebControls.FormView" /> control performs a paging operation when a button control with its CommandName property set to "Page" is clicked. The button's CommandArgument property determines the type of paging operation to perform. The following table lists the command argument values supported by the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>CommandArgument value</para>
                </term>
                <description>
                  <para>Description</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>"Next"</para>
              </term>
              <description>
                <para>Navigates to the next page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Prev"</para>
              </term>
              <description>
                <para>Navigates to the previous page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"First"</para>
              </term>
              <description>
                <para>Navigates to the first page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>"Last"</para>
              </term>
              <description>
                <para>Navigates to the last page.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Integer value</para>
              </term>
              <description>
                <para>Navigates to the specified page number.</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the custom content for the pager row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PerformDataBinding">
      <MemberSignature Language="C#" Value="protected override void PerformDataBinding (System.Collections.IEnumerable data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to bind the specified data source to the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Binds the specified data source to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <param name="data">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Collections.IEnumerable" /> that represents the data source.</param>
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected virtual void PrepareControlHierarchy ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.PrepareControlHierarchy" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to set up the control hierarchy in the <see cref="T:System.Web.UI.WebControls.FormView" /> control before the control is rendered.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets up the control hierarchy of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The page calls the <see cref="M:System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)" /> method when a postback event occurs that raises the appropriate events for a <see cref="T:System.Web.UI.WebControls.FormView" /> control. This call occurs in the page life cycle after loading and change notification are complete, but before prerendering occurs. This method has been implemented to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> object for the events that are raised.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers to extend the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.FormView" /> control when it posts back to the server.</para>
        </summary>
        <param name="eventArgument">
          <attribution license="cc4" from="Microsoft" modified="false" />The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> for the event or events that are raised.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)" /> method is used to render the server control content to the client's browser using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Displays the <see cref="T:System.Web.UI.WebControls.FormView" /> control on the client.</para>
        </summary>
        <param name="writer">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Web.UI.HtmlTextWriter" /> that contains the output stream to render on the client.</param>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow Row { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.Row" /> property to programmatically access the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the data row. The data row contains different content based on the template rendered for the current mode (specified by the <see cref="P:System.Web.UI.WebControls.FormView.CurrentMode" /> property). You can only access the contents of the template for the current mode. The following table shows which template is used for each mode.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Mode</para>
                </term>
                <description>
                  <para>Template rendered</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Edit</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Insert</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
                </para>
              </description>
            </item>
            <item>
              <term>
                <para>Read-only</para>
              </term>
              <description>
                <para>
                  <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
                </para>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Web.UI.WebControls.FormView.Row" /> property is available only after the <see cref="T:System.Web.UI.WebControls.FormView" /> control creates the data row in the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event.</para>
          </block>
          <para>This property is commonly used when you need to programmatically manipulate the data row, for example when adding custom content. Any modification to the <see cref="P:System.Web.UI.WebControls.FormView.Row" /> property must be performed after the <see cref="T:System.Web.UI.WebControls.FormView" /> control has been data-bound; otherwise, the <see cref="T:System.Web.UI.WebControls.FormView" /> control overwrites any changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the data row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle RowStyle { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.FormView.RowStyle" /> property to control the appearance of the data row when a <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only (display) mode. When the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in read-only mode, the data row displays the user-defined content specified by the <see cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" /> property. This property is read-only; however, you can set the properties of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object it returns. The properties can be set declaratively using one of the following methods:</para>
          <list type="bullet">
            <item>
              <para>Place an attribute in the opening tag of the <see cref="T:System.Web.UI.WebControls.FormView" /> control in the form <paramref name="Property-Subproperty" />, where <paramref name="Subproperty" /> is a property of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object (for example, RowStyle-ForeColor).</para>
            </item>
            <item>
              <para>Nest an &lt;RowStyle&gt; element between the opening and closing tags of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
            </item>
          </list>
          <para>The properties can also be set programmatically in the form <paramref name="Property.Subproperty" /> (for example, RowStyle.ForeColor). Common settings usually include a custom background color, foreground color, and font properties.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference to the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> object that allows you to set the appearance of the data row in a <see cref="T:System.Web.UI.WebControls.FormView" /> control when the control is in read-only mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is used to save the state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control properties that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to false.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers to extend the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control properties that need to be persisted, even when the <see cref="P:System.Web.UI.Control.EnableViewState" /> property is set to false.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the server control's current view state. If there is no view state associated with the control, this method returns null.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.SaveViewState" /> method is a helper method called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to save the state of the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Saves the current view state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Object" /> that contains the saved state of the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property is set, the <see cref="T:System.Web.UI.WebControls.FormView" /> control automatically creates a <see cref="T:System.Web.UI.WebControls.DataKey" /> object that contains the key/value pairs of the field or fields listed in the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property for the current record. The <see cref="T:System.Web.UI.WebControls.DataKey" /> object represents the primary key field or fields for the current record and is stored in the <see cref="P:System.Web.UI.WebControls.FormView.DataKey" /> property. Instead of using the <see cref="P:System.Web.UI.WebControls.FormView.DataKey" /> property to access the data key value, you can use the <see cref="P:System.Web.UI.WebControls.FormView.SelectedValue" /> property as a shortcut.</para>
          <block subset="none" type="note">
            <para>When the <see cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" /> property lists multiple fields, this property returns the value of the first field listed.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the data key value of the current record in a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DataItemIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DataItemIndex { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Web.UI.WebControls.FormView" /> instance is cast to an <see cref="T:System.Web.UI.IDataItemContainer" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="P:System.Web.UI.IDataItemContainer.DataItemIndex" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DisplayIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DisplayIndex { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Web.UI.WebControls.FormView" /> instance is cast to an <see cref="T:System.Web.UI.IDataItemContainer" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The page calls the <see cref="M:System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" /> method when a postback event occurs. This call occurs in the page life cycle after loading and change notification are complete, but before the page is rendered.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raises events for the <see cref="T:System.Web.UI.WebControls.FormView" /> control when it posts back to the server.</para>
        </summary>
        <param name="eventArgument">
          <attribution license="cc4" from="Microsoft" modified="false" />The argument for the event.</param>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions">
      <MemberSignature Language="C#" Value="System.Web.UI.PostBackOptions IPostBackContainer.GetPostBackOptions (System.Web.UI.WebControls.IButtonControl control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.WebControls.IButtonControl" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)" /> method is a helper method that is called by the <see cref="T:System.Web.UI.WebControls.FormView" /> control to create a <see cref="T:System.Web.UI.PostBackOptions" /> object that contains the postback event options for the control. The <see cref="T:System.Web.UI.PostBackOptions" /> object is typically used as a parameter for the <see cref="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines the postback event options for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The postback event options for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.UI.WebControls.FormView.TagKey" /> property allows the output stream to write the appropriate HTML markup for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value for the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TopPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow TopPagerRow { get; }" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When paging is enabled (when the <see cref="P:System.Web.UI.WebControls.FormView.AllowPaging" /> property is set to true), an additional row called the pager row is automatically displayed in the <see cref="T:System.Web.UI.WebControls.FormView" /> control. The pager row contains controls that allow the user to navigate to other records, and can be displayed at the top, the bottom, or both the top and bottom of the control. Use the <see cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" /> property to programmatically access the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the top pager row in the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
          <block subset="none" type="note">
            <para>The <see cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" /> property is available only after the <see cref="T:System.Web.UI.WebControls.FormView" /> control creates the top pager row in the <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> event.</para>
          </block>
          <para>This property is commonly used when you need to programmatically manipulate the top pager row, for example when adding custom content. Any modification to the <see cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" /> property must be performed after the <see cref="T:System.Web.UI.WebControls.FormView" /> control has been bound to data; otherwise, the <see cref="T:System.Web.UI.WebControls.FormView" /> control overwrites any changes.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.UI.WebControls.FormViewRow" /> object that represents the pager row displayed at the top of a <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is overridden to mark the starting point at which to begin tracking and saving changes to the control as part of the control's view state.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Marks the starting point at which to begin tracking and saving view-state changes to the <see cref="T:System.Web.UI.WebControls.FormView" /> control.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="UpdateItem">
      <MemberSignature Language="C#" Value="public virtual void UpdateItem (bool causesValidation);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="T:System.Web.UI.WebControls.FormView" /> control is in edit mode, use the <see cref="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" /> method to programmatically update the current record in the data source. This method is commonly used when you need to update the current record from outside of the <see cref="T:System.Web.UI.WebControls.FormView" /> control, such as from a different control on the page.</para>
          <block subset="none" type="note">
            <para>The <see cref="T:System.Web.UI.WebControls.FormView" /> control must be in edit mode when this method is called; otherwise, an <see cref="T:System.Web.HttpException" /> is thrown.</para>
          </block>
          <para>To specify whether page validation is performed before the update operation, use the <paramref name="causesValidation" /> parameter. Calling this method also raises the <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> and <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> events.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the current record in the data source.</para>
        </summary>
        <param name="causesValidation">
          <attribution license="cc4" from="Microsoft" modified="false" />true to perform page validation when the method is called; otherwise false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>