<?xml version="1.0" encoding="utf-8"?>
<Type Name="BaseCompareValidator" FullName="System.Web.UI.WebControls.BaseCompareValidator">
  <TypeSignature Language="C#" Maintainer="auto" Value="public abstract class BaseCompareValidator : System.Web.UI.WebControls.BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> class is inherited by validation controls that compare values, such as the <see cref="T:System.Web.UI.WebControls.CompareValidator" /> and <see cref="T:System.Web.UI.WebControls.RangeValidator" /> controls, to provide basic common functionality.</para>
      <para>Use the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" /> property to specify the data type that that the values are converted to before being compared.</para>
      <block subset="none" type="note">
        <para>If the value of the input control being validated cannot be converted to the specified data type, validation fails. The <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> property of the validation control is set to false.</para>
      </block>
      <para>The <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> class also contains several static properties and methods that are useful when performing comparison validations. You can determine whether a string can be converted to a specific data type by using the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" /> method. The maximum year that can be represented by a two-digit year is contained in the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" /> property. The <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" /> method allows you to convert a two-digit year to a four-digit year.</para>
      <block subset="none" type="note">
        <para>When you use validator controls that derive from the <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> control inside an <see cref="T:System.Web.UI.UpdatePanel" /> control, make sure that the validator control and the control it is associated with are in the same panel. For more information about using the <see cref="T:System.Web.UI.UpdatePanel" /> control for partial-page updates, see <format type="text/html"><a href="5c12736d-d9e9-464a-9388-3fe0f9f49e49">Partial-Page Rendering Overview</a></format>.</para>
      </block>
      <para>For more information about validation controls, see <see cref="T:System.Web.UI.WebControls.BaseValidator" />.</para>
      <format type="text/html">
        <h2>Accessibility</h2>
      </format>
      <para>The markup rendered by default for this control might not conform to accessibility standards such as the Web Content Accessibility Guidelines 1.0 (WCAG) priority 1 guidelines. For details about accessibility support for this control, see <format type="text/html"><a href="847a37e3-ce20-41da-b0d3-7dfb0fdae9a0">ASP.NET Controls and Accessibility</a></format>.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Serves as the abstract base class for validation controls that perform typed comparisons. </para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseCompareValidator ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Because the <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> class is abstract, you cannot create a <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> object directly. This constructor is commonly called by the constructor of a derived class to initialize the properties defined in the <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> class.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter w);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="w">a <see cref="T:System.Web.UI.HtmlTextWriter" /></param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> method is used to render the attributes of the control in the HTML tag for the control. This method is typically overridden by control developers in derived classes to insert the appropriate attributes and styles to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream for a control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds the HTML attributes and styles that need to be rendered for the control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public static bool CanConvert (string text, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" /> method to determine whether the specified string can be converted to the specified data type. This method is commonly used to test whether a string can be converted to a compatible data type before performing an operation that depends on that data type.</para>
          <para>This version of the method tests the value using the format used by the current culture. To test the value using a culture-neutral format, use the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Boolean)" /> overloaded version of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified string can be converted to the specified data type. This version of the overloaded method tests currency, double, and date values using the format used by the current culture.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified data string can be converted to the specified data type; otherwise, false.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to test.</param>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> values.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public static bool CanConvert (string text, System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="cultureInvariant" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Boolean)" /> method to determine whether the specified string can be converted to the specified data type. This method is commonly used to test whether a string can be converted to a compatible data type before performing an operation that depends on that data type. To indicate that values should be tested using a culture-neutral format, pass in true for the <paramref name="cultureInvariant" /> parameter; otherwise, values are tested using the format used by the current culture. When testing a value using the format used by the current culture, consider using the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" /> overloaded version of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the specified string can be converted to the specified data type. This version of the overloaded method allows you to specify whether values are tested using a culture-neutral format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the specified data string can be converted to the specified data type; otherwise, false.</para>
        </returns>
        <param name="text">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to test.</param>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> enumeration values.</param>
        <param name="cultureInvariant">
          <attribution license="cc4" from="Microsoft" modified="false" />true to test values using a culture-neutral format; otherwise, false.</param>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="protected static bool Compare (string left, string right, System.Web.UI.WebControls.ValidationCompareOperator op, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.String" />
        <Parameter Name="right" Type="System.String" />
        <Parameter Name="op" Type="System.Web.UI.WebControls.ValidationCompareOperator" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" /> method is used to test whether the value of the <paramref name="leftText" /> parameter relates to the value of the <paramref name="rightText" /> parameter in the manner specified by the <paramref name="op" /> parameter. The <paramref name="type" /> parameter specifies the data type of the values being compared.</para>
          <block subset="none" type="note">
            <para>If the <paramref name="op" /> parameter is set to ValidationCompareOperator.DataTypeCheck, this method tests only the value of the <paramref name="leftText" /> parameter for the data type specified by the <paramref name="type" /> parameter. The <paramref name="rightText" /> parameter is ignored.</para>
          </block>
          <para>This version of the method compares the values using the format used by the current culture. To compare the values using a culture-neutral format, use the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.Boolean,System.String,System.Boolean,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" /> overloaded version of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares two strings using the specified operator and data type. This version of the overloaded method compares currency, double, and date values using the format used by the current culture.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <paramref name="leftValue" /> parameter relates to the <paramref name="rightValue" /> parameter in the manner specified by the <paramref name="op" /> parameter; otherwise, false.</para>
        </returns>
        <param name="op">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.ValidationCompareOperator" /> values. </param>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> values.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="protected static bool Compare (string left, bool cultureInvariantLeftText, string right, bool cultureInvariantRightText, System.Web.UI.WebControls.ValidationCompareOperator op, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.String" />
        <Parameter Name="cultureInvariantLeftText" Type="System.Boolean" />
        <Parameter Name="right" Type="System.String" />
        <Parameter Name="cultureInvariantRightText" Type="System.Boolean" />
        <Parameter Name="op" Type="System.Web.UI.WebControls.ValidationCompareOperator" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.Boolean,System.String,System.Boolean,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" /> method is used to test whether the value of the <paramref name="leftText" /> parameter relates to the value of the <paramref name="rightText" /> parameter in the manner specified by the <paramref name="op" /> parameter. The <paramref name="type" /> parameter specifies the data type of the values being compared.</para>
          <block subset="none" type="note">
            <para>If the <paramref name="op" /> parameter is set to ValidationCompareOperator.DataTypeCheck, this method tests only the value of the <paramref name="leftText" /> parameter for the data type specified by the <paramref name="type" /> parameter. The <paramref name="rightText" /> parameter is ignored.</para>
          </block>
          <para>To indicate that values should be compared using a culture-neutral format, pass in true for the <paramref name="cultureInvariantLeftText" /> and <paramref name="cultureInvariantRightText" /> parameters; otherwise, the values are compared using the format used by the current culture. When comparing values using the format used by the current culture, consider using the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" /> overloaded version of this method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Compares two strings using the specified operator and validation data type. This version of the overload allows you to specify whether values are compared using a culture-neutral format.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the <paramref name="leftValue" /> parameter relates to the <paramref name="rightValue" /> parameter in the manner specified by the <paramref name="op" /> parameter; otherwise, false.</para>
        </returns>
        <param name="cultureInvariantLeftText">
          <attribution license="cc4" from="Microsoft" modified="false" />true to convert the left side value to a culture-neutral format; otherwise, false.</param>
        <param name="cultureInvariantRightText">
          <attribution license="cc4" from="Microsoft" modified="false" />true to convert the right side value to a culture-neutral format; otherwise, false.</param>
        <param name="op">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.ValidationCompareOperator" /> values.</param>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> values.</param>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="protected static bool Convert (string text, System.Web.UI.WebControls.ValidationDataType type, out object value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">a <see cref="T:System.String" /></param>
        <param name="type">a <see cref="T:System.Web.UI.WebControls.ValidationDataType" /></param>
        <param name="value">To be added.</param>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="protected static bool Convert (string text, System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant, out object value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="cultureInvariant" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="type">To be added.</param>
        <param name="cultureInvariant">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureInvariantValues">
      <MemberSignature Language="C#" Value="public bool CultureInvariantValues { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" /> property is set to true, properties of the control that are not strongly typed are converted to a culture-neutral format before being compared. When this property is set to false, values are converted to the format of the current culture. The <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" /> property does not affect values that are entered by users of the control on a Web page.</para>
          <para>This property cannot be set by themes or by style sheet themes. For more information, see <see cref="T:System.Web.UI.ThemeableAttribute" /> and <format type="text/html"><a href="5df3ebbd-d46c-4502-9406-02f9df4ef2c3">ASP.NET Themes Overview</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether values are converted to a culture-neutral format before being compared.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CutoffYear">
      <MemberSignature Language="C#" Value="protected static int CutoffYear { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'int'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" /> property to determine the maximum year that can be represented by a two-digit year in a 100-year range. For example, if this property contains the value 2029, you can represent the years 1930 to 2029 using a two-digit year. The two-digit year 30 is interpreted as 1930, while 29 is interpreted as 2029. You cannot change the value of this property directly; however, you can change the maximum year that can be represented by a two-digit year by setting the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the maximum year that can be represented by a two-digit year.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected override bool DetermineRenderUplevel ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel" /> method is a helper function used primarily by the <see cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" /> property to determine whether the client's browser supports "uplevel" rendering (rendering on a newer browser). The <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> class overrides this method to return false if the current culture uses a non-Gregorian calendar.</para>
          <block subset="none" type="note">
            <para>This method is used primarily by control developers.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the validation control can be rendered for a newer ("uplevel") browser.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the validation control can be rendered for an "uplevel" browser; otherwise, false.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetDateElementOrder">
      <MemberSignature Language="C#" Value="protected static string GetDateElementOrder ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The month, day, and year of a date value can appear in different orders depending on the current culture settings. The <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetDateElementOrder" /> method is used to determine the order in which these values appear. The following table shows the different values returned by this method.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Date element order</para>
                </term>
                <description>
                  <para>Return value</para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>Day, Month, Year</para>
              </term>
              <description>
                <para>"dmy"</para>
              </description>
            </item>
            <item>
              <term>
                <para>Month, Day, Year</para>
              </term>
              <description>
                <para>"mdy"</para>
              </description>
            </item>
            <item>
              <term>
                <para>Year, Month, Day</para>
              </term>
              <description>
                <para>"ymd"</para>
              </description>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines the order in which the month, day, and year appear in a date value for the current culture.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that represents the order in which the month, day, and year appear in a date value for the current culture.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetFullYear">
      <MemberSignature Language="C#" Value="protected static int GetFullYear (int two_digit_year);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="two_digit_year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="two_digit_year">To be added: an object of type 'int'</param>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" /> method to generate the four-digit year representation of the specified two-digit year. The four-digit year representation depends on the value of the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" /> property, which contains the maximum year that can be represented by a two-digit year in a 100-year range. For example, if the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" /> property contains the value 2029, the <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" /> method returns a year between 1930 and 2029. The two-digit year 30 is interpreted as 1930, while 29 is interpreted as 2029. You can change the maximum year that can be represented by a two-digit year by setting the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property.</para>
          <block subset="none" type="note">
            <para>Because this method is static, you can use it without creating an instance of the class by qualifying the method name along with the class name--for example, BaseCompareValidator.GetFullYear.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Generates the four-digit year representation of the specified two-digit year.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The four-digit year representation of the specified two-digit year.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidationDataType Type { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidationDataType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>To be added: an object of type 'ValidationDataType'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" /> property to specify the data type used for comparison. The <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" /> property is used differently by the various comparison validation controls. </para>
          <block subset="none" type="note">
            <para>When the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" /> property is set to <see cref="F:System.Web.UI.WebControls.ValidationDataType.Date" /> and the current calendar type is non-Gregorian, the validator performs server-side validation only. The validator client script supports only Gregorian calendars.</para>
          </block>
          <para>For example, in the <see cref="T:System.Web.UI.WebControls.RangeValidator" /> control, all values being compared (the upper bound, lower bound, and value of the input control) are converted to the specified data type before any comparison is performed. However, if you use a <see cref="T:System.Web.UI.WebControls.CompareValidator" /> control and set its <see cref="P:System.Web.UI.WebControls.CompareValidator.Operator" /> property to ValidationCompareOperator.DataTypeCheck, only the value of the input control is converted to the specified data type.</para>
          <block subset="none" type="note">
            <para>If the value of the input control associated with the validation control cannot be converted to the specified data type, validation fails. The <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> property of the validation control is set to false.</para>
          </block>
          <para>The following table lists the values that you can use for the <see cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" /> property.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Data type </para>
                </term>
                <description>
                  <para>Description </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>String </para>
              </term>
              <description>
                <para>Specifies a string data type.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Integer </para>
              </term>
              <description>
                <para>Specifies a 32-bit signed integer data type.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Double </para>
              </term>
              <description>
                <para>Specifies a double-precision floating-point number data type.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Date </para>
              </term>
              <description>
                <para>Specifies a date data type.</para>
              </description>
            </item>
            <item>
              <term>
                <para>Currency </para>
              </term>
              <description>
                <para>Specifies a monetary data type.</para>
              </description>
            </item>
          </list>
          <para>This property cannot be set by themes or style sheet themes. For more information, see <see cref="T:System.Web.UI.ThemeableAttribute" /> and <format type="text/html"><a href="5df3ebbd-d46c-4502-9406-02f9df4ef2c3">ASP.NET Themes Overview</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the data type that the values being compared are converted to before the comparison is made.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(System.Web.UI.WebControls.ValidationDataType.String)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
  </Members>
</Type>