<?xml version="1.0" encoding="utf-8"?>
<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>In addition to using the Personalizable attribute on control properties, a control can also implement <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> for additional management capabilities for the application and extraction of personalization state. For example, controls that need to manage private state information should implement this interface. Controls that access personalized data through complex mechanisms, such as custom cache solutions, data persistence to mainframes, or XML Web services, should also implement this interface.</para>
      <block subset="none" type="note">
        <para>You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.</para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Defines additional management capabilities for the application and extraction of personalization state. </para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When data managed by a control has changed, the control is considered "dirty." A control should return true if the custom data that it manages through the <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> interface has changed. If a control returns true from this property, the control's <see cref="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> interface method implementation is called during property value extraction.</para>
          <block subset="none" type="note">
            <para>This property is checked automatically by the personalization infrastructure during the latter phases of processing a POST request. However, for GET requests, the value returned from the <see cref="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" /> property is not checked. Some other event has to have caused the control to be considered "dirty" for any control state--not just data managed by <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />--to be saved. If a control can mark itself as "dirty" during a GET request, or if the personalization infrastructure under some very specific boundary conditions considers a control "dirty" during a GET request, then <see cref="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> will always be called.</para>
          </block>
          <para>A control can reference its associated <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control and check the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope" /> property to determine the current scope. The "dirty" state of a control's custom data should be appropriate for the current scope.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that indicates whether the custom data that a control manages has changed. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Collections.IDictionary sharedState, System.Collections.IDictionary userState);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharedState" Type="System.Collections.IDictionary" />
        <Parameter Name="userState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="sharedState">To be added.</param>
        <param name="userState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Collections.IDictionary state);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>