<?xml version="1.0" encoding="utf-8"?>
<Type Name="HttpContext" FullName="System.Web.HttpContext">
  <TypeSignature Language="C#" Value="public sealed class HttpContext : IServiceProvider" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Classes that inherit the <see cref="T:System.Web.IHttpModule" /> and <see cref="T:System.Web.IHttpHandler" /> interfaces are provided a reference to an <see cref="T:System.Web.HttpContext" /> object for the current HTTP request. The object provides access to the intrinsic <see cref="P:System.Web.HttpContext.Request" />, <see cref="P:System.Web.HttpContext.Response" />, and <see cref="P:System.Web.HttpContext.Server" /> properties for the request.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Encapsulates all HTTP-specific information about an individual HTTP request.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpContext (System.Web.HttpWorkerRequest wr);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="wr" Type="System.Web.HttpWorkerRequest" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.HttpContext" /> class that uses the specified worker-request object.</para>
        </summary>
        <param name="wr">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.HttpWorkerRequest" /> object for the current HTTP request.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpContext (System.Web.HttpRequest request, System.Web.HttpResponse response);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequest" />
        <Parameter Name="response" Type="System.Web.HttpResponse" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.HttpContext" /> class by using the specified request and response objects.</para>
        </summary>
        <param name="request">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</param>
        <param name="response">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.HttpResponse" /> object for the current HTTP request.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddError">
      <MemberSignature Language="C#" Value="public void AddError (Exception errorInfo);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds an exception to the exception collection for the current HTTP request.</para>
        </summary>
        <param name="errorInfo">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Exception" /> to add to the exception collection.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AllErrors">
      <MemberSignature Language="C#" Value="public Exception[] AllErrors { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Exception[]</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'Exception []'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an array of errors accumulated while processing an HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Application { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'HttpApplicationState'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ApplicationInstance">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplication ApplicationInstance { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplication</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'HttpApplication'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Cache">
      <MemberSignature Language="C#" Value="public System.Web.Caching.Cache Cache { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.Caching.Cache</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'Caching.Cache'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>There is one instance of the <see cref="T:System.Web.Caching.Cache" /> class per application domain. As a result, the <see cref="T:System.Web.Caching.Cache" /> object that is returned by the <see cref="P:System.Web.HttpContext.Cache" /> property is the <see cref="T:System.Web.Caching.Cache" /> object for all requests in the application domain.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears all errors for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.HttpContext Current { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <value>This property is a gross hack.  It is used by applications that have not passed the <see cref="T:System.Web.HttpContext" /> class around and require access to it.

<para>
The routine internally uses a technique similar to thread local storage to fetch the value which is slower than having this property available as a parameter to your routines.
</para></value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This property is a static property of the <see cref="T:System.Web.HttpContext" /> class. The property stores the <see cref="T:System.Web.HttpContext" /> instance that applies to the current request. The properties of this instance are the non-static properties of the <see cref="T:System.Web.HttpContext" /> class. </para>
          <para>You can also use the <see cref="P:System.Web.UI.Page.Context" /> property to access the <see cref="T:System.Web.HttpContext" /> object for the current HTTP request.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CurrentHandler">
      <MemberSignature Language="C#" Value="public System.Web.IHttpHandler CurrentHandler { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The currently executing handler that is referenced by the <see cref="P:System.Web.HttpContext.CurrentHandler" /> property might be different than the handler that is referenced by the <see cref="P:System.Web.HttpContext.Handler" /> property. This can occur when another handler was requested by using the <see cref="Overload:System.Web.HttpServerUtility.Execute" /> method or the <see cref="Overload:System.Web.HttpServerUtility.Transfer" /> method. When the currently executing handler finishes processing, the previously determined handler is restored.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the currently executing handler.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CurrentNotification">
      <MemberSignature Language="C#" Value="public System.Web.RequestNotification CurrentNotification { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.RequestNotification</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.CurrentNotification" /> property requires the integrated pipeline mode in iisver and at least the .NET Framework version 3.0. When available, the property returns a <see cref="T:System.Web.RequestNotification" /> value. The value of the <see cref="P:System.Web.HttpContext.CurrentNotification" /> property indicates which event in the <see cref="T:System.Web.HttpApplication" /> instance is currently processing the request.</para>
          <para>The <see cref="P:System.Web.HttpContext.CurrentNotification" /> property is not intended to be set. Instead, it is set by iisver during the processing of the request in the ASP.NET pipeline. Setting the <see cref="P:System.Web.HttpContext.CurrentNotification" /> property will result in a compilation error.</para>
          <para>
            <see cref="P:System.Web.HttpContext.CurrentNotification" /> is introduced in the .NET Framework version 3.5.  For more information, see <format type="text/html"><a href="f75a72de-e2f2-4a7a-9574-3f278684ea90">The .NET Framework 3.5 Architecture</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the current <see cref="T:System.Web.HttpApplication" /> event that is processing. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Exception Error { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'Exception'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the first error (if any) accumulated during HTTP request processing.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetAppConfig">
      <MemberSignature Language="C#" Value="public static object GetAppConfig (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.GetAppConfig(System.String)" /> method has been deprecated. Use the <see cref="M:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection(System.String)" /> method of the <see cref="T:System.Web.Configuration.WebConfigurationManager" /> class to get configuration information for the current application.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns requested configuration information for the current application.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object containing configuration information. (Cast the returned configuration section to the appropriate configuration type before use.)</para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The application configuration tag for which information is requested.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use WebConfigurationManager.GetWebApplicationSection")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="GetConfig">
      <MemberSignature Language="C#" Value="public object GetConfig (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.GetConfig(System.String)" /> method has been deprecated. Use the <see cref="M:System.Web.HttpContext.GetSection(System.String)" /> method to get configuration information for the current HTTP request. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns requested configuration information for the current HTTP request.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The specified <see cref="T:System.Configuration.ConfigurationSection" />, null if the section does not exist, or an internal object if the section is not accessible at run time. (Cast the returned object to the appropriate configuration type before use.) </para>
        </returns>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The configuration tag for which information is requested.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("see GetSection")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="GetGlobalResourceObject">
      <MemberSignature Language="C#" Value="public static object GetGlobalResourceObject (string classKey, string resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classKey" Type="System.String" />
        <Parameter Name="resourceKey" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)" /> method returns a global resource by using the culture that is specified in the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</para>
          <block subset="none" type="note">
            <para>In some editing environments, such as vwprvw, the editor might throw a design-time <see cref="T:System.Resources.MissingManifestResourceException" /> exception if you use a period (.) in the global resource-key name. However, this does not affect your ability to edit or save the file, and you can ignore the error.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Object" /> that represents the requested application-level resource object; otherwise, null if a resource object is not found or if a resource object is found but it does not have the requested property.</para>
        </returns>
        <param name="classKey">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
        <param name="resourceKey">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      </Docs>
    </Member>
    <Member MemberName="GetGlobalResourceObject">
      <MemberSignature Language="C#" Value="public static object GetGlobalResourceObject (string classKey, string resourceKey, System.Globalization.CultureInfo culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classKey" Type="System.String" />
        <Parameter Name="resourceKey" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Globalization.CultureInfo" /> object represents the culture for which the resource was localized. If the resource is not localized for this culture, the lookup will follow a fallback process to locate an appropriate resource. For more information, see <format type="text/html"><a href="b224d7c0-35f8-4e82-a705-dd76795e8d16">Packaging and Deploying Resources</a></format>.</para>
          <block subset="none" type="note">
            <para>In some editing environments, such as Visual Web Developer, the editor might throw a design-time <see cref="T:System.Resources.MissingManifestResourceException" /> exception if you use a period (.) in the global resource-key name. However, this does not affect your ability to edit or save the file, and you can ignore the error.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Object" /> that represents the requested application-level resource object, which is localized for the specified culture; otherwise, null if a resource object is not found or if a resource object is found but it does not have the requested property.</para>
        </returns>
        <param name="classKey">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
        <param name="resourceKey">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
      </Docs>
    </Member>
    <Member MemberName="GetLocalResourceObject">
      <MemberSignature Language="C#" Value="public static object GetLocalResourceObject (string virtualPath, string resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="resourceKey" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)" /> method returns a local resource by using the culture that is specified in the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Object" /> that represents the requested page-level resource object; otherwise, null if a matching resource object is found but not a <paramref name="resourceKey" /> parameter.</para>
        </returns>
        <param name="virtualPath">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property for the local resource object.</param>
        <param name="resourceKey">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object</param>
      </Docs>
    </Member>
    <Member MemberName="GetLocalResourceObject">
      <MemberSignature Language="C#" Value="public static object GetLocalResourceObject (string virtualPath, string resourceKey, System.Globalization.CultureInfo culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="resourceKey" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the resource is not localized for this culture, the lookup will follow a fallback process to locate an appropriate resource. For more information, see <format type="text/html"><a href="b224d7c0-35f8-4e82-a705-dd76795e8d16">Packaging and Deploying Resources</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Object" /> that represents the requested local resource object, which is localized for the specified culture; otherwise null if a matching resource object is found but not a <paramref name="resourceKey" /> parameter.</para>
        </returns>
        <param name="virtualPath">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property for the local resource object.</param>
        <param name="resourceKey">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
        <param name="culture">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
      </Docs>
    </Member>
    <Member MemberName="GetSection">
      <MemberSignature Language="C#" Value="public object GetSection (string name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a specified configuration section for the current application's default configuration. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The specified <see cref="T:System.Configuration.ConfigurationSection" />, null if the section does not exist, or an internal object if the section is not accessible at run time.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public System.Web.IHttpHandler Handler { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'IHttpHandler'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.Handler" /> property contains a reference to the handler that processes the HTTP request. The handler can be specified by using the <format type="text/html"><a href="24ca01f3-7141-4fdc-acac-71c0733cf6c2">httpHandlers</a></format> element, or by using a custom handler defined in user code. For more information about handlers, see <format type="text/html"><a href="f540bdeb-d22e-4e1d-ba8a-fe6c9926283b">HTTP Handlers and HTTP Modules Overview</a></format>. </para>
          <para>The reference to the <see cref="P:System.Web.HttpContext.Handler" /> property will remain the same even after the current page has been changed by a server-side method, such as the <see cref="Overload:System.Web.HttpServerUtility.Execute" /> method or the <see cref="Overload:System.Web.HttpServerUtility.Transfer" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the <see cref="T:System.Web.IHttpHandler" /> object responsible for processing the HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsCustomErrorEnabled">
      <MemberSignature Language="C#" Value="public bool IsCustomErrorEnabled { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'bool'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether custom errors are enabled for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'bool'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the current HTTP request is in debug mode.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsPostNotification">
      <MemberSignature Language="C#" Value="public bool IsPostNotification { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.IsPostNotification" /> property is only supported with the integrated mode in iisver and at least the .NET Framework 3.0. When available, the property returns a Boolean value that indicates whether an event in the <see cref="T:System.Web.HttpApplication" /> object has finished processing. </para>
          <para>The <see cref="P:System.Web.HttpContext.IsPostNotification" /> property is not intended to be set. Instead, it is provided by iisver to the ASP.NET runtime for each notification. Setting the <see cref="P:System.Web.HttpContext.IsPostNotification" /> property will result in a compilation error.</para>
          <para>In scenarios where multiple events of the <see cref="T:System.Web.HttpApplication" /> object are handled by one event handler, you can use the <see cref="P:System.Web.HttpContext.IsPostNotification" /> property in combination with the <see cref="T:System.Web.RequestNotification" /> enumeration to precisely determine where in the application lifecycle the current request is.</para>
          <para>
            <see cref="P:System.Web.HttpContext.IsPostNotification" /> is introduced in the .NET Framework version 3.5.  For more information, see <format type="text/html"><a href="f75a72de-e2f2-4a7a-9574-3f278684ea90">The .NET Framework 3.5 Architecture</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value that is the current processing point in the ASP.NET pipeline just after an <see cref="T:System.Web.HttpApplication" /> event has finished processing. </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Items { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>a <see cref="T:System.Collections.IDictionary" /></value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a key/value collection that can be used to organize and share data between an <see cref="T:System.Web.IHttpModule" /> interface and an <see cref="T:System.Web.IHttpHandler" /> interface during an HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="PreviousHandler">
      <MemberSignature Language="C#" Value="public System.Web.IHttpHandler PreviousHandler { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.PreviousHandler" /> property corresponds to the last handler before the current request was executed.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Profile">
      <MemberSignature Language="C#" Value="public System.Web.Profile.ProfileBase Profile { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Profile.ProfileBase</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="P:System.Web.HttpContext.Profile" /> property is used for persistent storage of structured data using a type-safe API. When a <see cref="P:System.Web.HttpContext.Profile" /> property is accessed but no value is present, an empty instance is returned; null is not returned. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.Web.HttpRequest Request { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'HttpRequest'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.Request" /> property provides programmatic access to the properties and methods of the <see cref="T:System.Web.HttpRequest" /> class. Because ASP.NET pages contain a default reference to the <see cref="N:System.Web" /> namespace (which contains the <see cref="T:System.Web.HttpContext" /> class), you can reference the members of <see cref="T:System.Web.HttpRequest" /> on an .aspx page without using the fully qualified class reference to <see cref="T:System.Web.HttpContext" />. For example, you can use Request.Browser to get the capabilities of the client browser. However, if you want to use the members of <see cref="T:System.Web.HttpRequest" /> from an ASP.NET code-behind module, you must include a reference to the <see cref="N:System.Web" /> namespace in the module and a fully qualified reference to both the currently active request/response context and the class in <see cref="N:System.Web" /> that you want to use. For example, in a code-behind page you must specify the fully qualified name HttpContext.Current.Request.Browser.</para>
          <block subset="none" type="note">
            <para>ASP.NET will throw an exception if you try to use this property when the <see cref="T:System.Web.HttpRequest" /> object is not available. For example, this would be true in the Application_Start method of the Global.asax file, or in a method that is called from the Application_Start method. At that time no HTTP request has been created yet.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Response">
      <MemberSignature Language="C#" Value="public System.Web.HttpResponse Response { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <value>The <see cref="T:System.Web.HttpResponse" /> object for the current request.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.Response" /> property provides programmatic access to the properties and methods of the <see cref="T:System.Web.HttpResponse" /> class. Because ASP.NET pages contain a default reference to the <see cref="N:System.Web" /> namespace (which contains the <see cref="T:System.Web.HttpContext" /> class), you can reference the members of <see cref="T:System.Web.HttpContext" /> on an .aspx page without using the fully qualified class reference to <see cref="T:System.Web.HttpContext" />. For example, you can use Response.Write("some output") to write output to an HTTP output stream. However, if you want to use the members of <see cref="T:System.Web.HttpResponse" /> from an ASP.NET code-behind module, you must include a reference to the <see cref="N:System.Web" /> namespace in the module and a fully qualified reference to the currently active request/response context and the class in <see cref="N:System.Web" /> that you want to use. For example, in a code-behind page you must specify the fully qualified name HttpContext.Current.Response.Write("some output").</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.HttpResponse" /> object for the current HTTP response.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RewritePath">
      <MemberSignature Language="C#" Value="public void RewritePath (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.RewritePath(System.String)" /> method redirects a request for a resource to a different path than the one that is indicated by the requested URL. If you have to reset the virtual path so that requests from the client for server resources resolve correctly, use the overload of this method that takes the <paramref name="rebaseClientPath" /> parameter and set the parameter to false.</para>
          <para>URL rewriting is useful when you want to restructure the pages in your Web application, and you want to make sure that people who have bookmarked old URLs can still use them after you have moved pages. URL rewriting enables you to transparently forward requests to the new page location.</para>
          <para>If you want to enable a site to use URLs that are more user-friendly and are optimized for search engines, a more robust alternative is to use ASP.NET routing. For more information, see <format type="text/html"><a href="892441af-8f1d-483e-ab5f-b82c23576f5a">ASP.NET Routing</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rewrites the URL using the given path.</para>
        </summary>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />The internal rewrite path.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RewritePath">
      <MemberSignature Language="C#" Value="public void RewritePath (string path, bool rebaseClientPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rebaseClientPath" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.RewritePath(System.String,System.Boolean)" /> method is called by the <see cref="M:System.Web.HttpContext.RewritePath(System.String)" /> method with the <paramref name="rebaseClientPath" /> parameter set to true. To ensure that the virtual path that is used to construct paths to resources is not modified, set the <paramref name="rebaseClientPath" /> parameter to false. A common scenario in which you might want to set <paramref name="rebaseClientPath" /> to false is when you need to rewrite the URL, and you are using themes and redirecting the URL to a resource located in a different folder than the requested resource.</para>
          <para>URL rewriting is useful when you want to restructure the pages in your Web application, and you want to make sure that people who have bookmarked old URLs can still use them after you have moved pages. URL rewriting enables you to transparently forward requests to the new page location.</para>
          <para>If you want to enable a site to use URLs that are more user-friendly and are optimized for search engines, a more robust alternative is to use ASP.NET routing. For more information, see <format type="text/html"><a href="892441af-8f1d-483e-ab5f-b82c23576f5a">ASP.NET Routing</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rewrites the URL using the given path and a Boolean value that specifies whether the virtual path for server resources is modified.</para>
        </summary>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />The internal rewrite path.</param>
        <param name="rebaseClientPath">
          <attribution license="cc4" from="Microsoft" modified="false" />true to reset the virtual path; false to keep the virtual path unchanged.</param>
      </Docs>
    </Member>
    <Member MemberName="RewritePath">
      <MemberSignature Language="C#" Value="public void RewritePath (string filePath, string pathInfo, string queryString);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="pathInfo" Type="System.String" />
        <Parameter Name="queryString" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpContext.RewritePath(System.String,System.String,System.String)" /> method redirects a request for a resource to another resource without changing the URL. </para>
          <para>The <paramref name="filePath" /> parameter does not include the <paramref name="pathInfo" /> parameter content. For the URL http://www.microsoft.com/virdir/page.html/tail, the <paramref name="filePath" /> parameter is http://www.microsoft.com/virdir/page.html, and the <paramref name="pathInfo" /> parameter is tail.</para>
          <para>URL rewriting is useful when you want to restructure the pages in your Web application, and you want to make sure that people who have bookmarked old URLs can still use them after you have moved pages. URL rewriting enables you to transparently forward requests to the new page location.</para>
          <para>If you want to enable a site to use URLs that are more user-friendly and are optimized for search engines, a more robust alternative is to use ASP.NET routing. For more information, see <format type="text/html"><a href="892441af-8f1d-483e-ab5f-b82c23576f5a">ASP.NET Routing</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rewrites the URL by using the given path, path information, and query string information.</para>
        </summary>
        <param name="filePath">
          <attribution license="cc4" from="Microsoft" modified="false" />The internal rewrite path.</param>
        <param name="pathInfo">
          <attribution license="cc4" from="Microsoft" modified="false" />Additional path information for a resource. For more information, see <see cref="P:System.Web.HttpRequest.PathInfo" />.</param>
        <param name="queryString">
          <attribution license="cc4" from="Microsoft" modified="false" />The request query string.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RewritePath">
      <MemberSignature Language="C#" Value="public void RewritePath (string filePath, string pathInfo, string queryString, bool setClientFilePath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="pathInfo" Type="System.String" />
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="setClientFilePath" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="filePath" /> parameter does not include the content of the <paramref name="pathInfo" /> parameter. For the URL http://www.microsoft.com/virdir/page.html/tail, the <paramref name="filePath" /> parameter is http://www.microsoft.com/virdir/page.html, and the <paramref name="pathInfo" /> parameter is tail.</para>
          <para>To ensure that the virtual path that is used to construct paths to resources is not modified, set the <paramref name="setClientFilePath" /> parameter to false. A common scenario in which you might want to set <paramref name="setClientFilePath" /> to false is when you need to rewrite the URL, and you are using themes and redirecting the URL to a resource located in a different folder than the requested resource.</para>
          <para>URL rewriting is useful when you want to restructure the pages in your Web application, and you want to make sure that people who have bookmarked old URLs can still use them after you have moved pages. URL rewriting enables you to transparently forward requests to the new page location.</para>
          <para>If you want to enable a site to use URLs that are more user-friendly and are optimized for search engines, a more robust alternative is to use ASP.NET routing. For more information, see <format type="text/html"><a href="892441af-8f1d-483e-ab5f-b82c23576f5a">ASP.NET Routing</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Rewrites the URL using the given virtual path, path information, query string information, and a Boolean value that specifies whether the client file path is set to the rewrite path. </para>
        </summary>
        <param name="filePath">
          <attribution license="cc4" from="Microsoft" modified="false" />The virtual path to the resource that services the request.</param>
        <param name="pathInfo">
          <attribution license="cc4" from="Microsoft" modified="false" />Additional path information to use for the URL redirect. For more information, see <see cref="P:System.Web.HttpRequest.PathInfo" />.</param>
        <param name="queryString">
          <attribution license="cc4" from="Microsoft" modified="false" />The request query string to use for the URL redirect.</param>
        <param name="setClientFilePath">
          <attribution license="cc4" from="Microsoft" modified="false" />true to set the file path used for client resources to the value of the <paramref name="filePath" /> parameter; otherwise false.</param>
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Web.HttpServerUtility Server { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpServerUtility</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'HttpServerUtility'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.Server" /> property provides programmatic access to the properties and methods of the <see cref="T:System.Web.HttpServerUtility" /> class. Because ASP.NET pages contain a default reference to the <see cref="N:System.Web" /> namespace (which contains the <see cref="T:System.Web.HttpContext" /> class), you can reference the members of <see cref="T:System.Web.HttpContext" /> on an .aspx page without using the fully qualified class reference to <see cref="T:System.Web.HttpContext" />. For example, you can use Server.CreateObject("MyCOMComponent") to create an instance of a COM object on the server. However, if you want to use the members of <see cref="T:System.Web.HttpServerUtility" /> from an ASP.NET code-behind module, you must include a reference to the <see cref="N:System.Web" /> namespace in the module and a fully qualified reference to both the currently active request/response context and the class in <see cref="N:System.Web" /> that you want to use. For example, in a code-behind page you must specify the fully qualified name HttpContext.Current.Server.CreateObject("MyCOMComponent").</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.HttpServerUtility" /> object that provides methods used in processing Web requests.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Session { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'SessionState.HttpSessionState'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.Session" /> property provides programmatic access to the properties and methods of the <see cref="T:System.Web.SessionState.HttpSessionState" /> class. </para>
          <para>In order to use session state you have to enable it. For information about how to enable session state, see Configuring Session State in <format type="text/html"><a href="6d60d381-6521-4e1d-9089-da6464f2a9bc">ASP.NET Session State Overview</a></format>.</para>
          <para>For information about how to save values in session state, see <format type="text/html"><a href="a6cb2e3a-df49-4b12-9d9a-eed45541c165">How to: Save Values in Session State</a></format>. For information about how to read values from session state, see <format type="text/html"><a href="2ef449bc-5c17-4785-b7cf-378c601af8f5">How to: Read Values from Session State</a></format>. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SkipAuthorization">
      <MemberSignature Language="C#" Value="public bool SkipAuthorization { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'bool'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.SkipAuthorization" /> property is intended for advanced use by authentication modules that need to redirect to a page that allows anonymous connections. The Forms authentication module and Passport authentication module both set <see cref="P:System.Web.HttpContext.SkipAuthorization" /> when redirecting to a configured logon page. Setting <see cref="P:System.Web.HttpContext.SkipAuthorization" /> requires the ControlPrincipal flag to be set. For information about the ControlPrincipal flag, see <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value that specifies whether the <see cref="T:System.Web.Security.UrlAuthorizationModule" /> object should skip the authorization check for the current request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.IServiceProvider.GetService">
      <MemberSignature Language="C#" Value="object IServiceProvider.GetService (Type service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Type" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is useful to gain access to the underlying <see cref="T:System.Web.HttpWorkerRequest" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an object for the current service type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.HttpContext" />; otherwise, null if no service is found.</para>
        </returns>
        <param name="service">
          <attribution license="cc4" from="Microsoft" modified="false" />A type of <see cref="T:System.Web.HttpContext" /> service to set the service provider to.</param>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public DateTime Timestamp { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'DateTime'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The timestamp returned from the <see cref="P:System.Web.HttpContext.Timestamp" /> property is the local time of the server and is set during the instantiation of the <see cref="T:System.Web.HttpContext" /> object. The local time is equal to the UTC time plus the UTC offset.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the initial timestamp of the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Trace">
      <MemberSignature Language="C#" Value="public System.Web.TraceContext Trace { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.TraceContext</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'TraceContext'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the <see cref="T:System.Web.TraceContext" /> object for the current HTTP response.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>a <see cref="T:System.Security.Principal.IPrincipal" /></value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpContext.User" /> property provides programmatic access to the properties and methods of the <see cref="T:System.Security.Principal.IPrincipal" /> interface. </para>
          <para>Because ASP.NET pages contain a default reference to the <see cref="N:System.Web" /> namespace (which contains the <see cref="T:System.Web.HttpContext" /> class), you can reference the members of <see cref="T:System.Web.HttpContext" /> on an .aspx page without using the fully qualified class reference to <see cref="T:System.Web.HttpContext" />. For example, you can use User.Identity.Name to get the name of the user on whose behalf the current process is running. However, if you want to use the members of <see cref="T:System.Security.Principal.IPrincipal" /> from an ASP.NET code-behind module, you must include a reference to the <see cref="N:System.Web" /> namespace in the module and a fully qualified reference to both the currently active request/response context and the class in <see cref="N:System.Web" /> that you want to use. For example, in a code-behind page you must specify the fully qualified name HttpContext.Current.User.Identity.Name.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets security information for the current HTTP request.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>