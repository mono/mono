<?xml version="1.0" encoding="utf-8"?>
<Type Name="HttpResponse" FullName="System.Web.HttpResponse">
  <TypeSignature Language="C#" Value="public sealed class HttpResponse" Maintainer="auto" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The methods and properties of the <see cref="T:System.Web.HttpResponse" /> class are exposed through the <see cref="P:System.Web.HttpApplication.Response" /> property of the <see cref="T:System.Web.HttpApplication" />, <see cref="T:System.Web.HttpContext" />, <see cref="T:System.Web.UI.Page" />, and <see cref="T:System.Web.UI.UserControl" /> classes.</para>
      <para>The following methods of the <see cref="T:System.Web.HttpResponse" /> class are supported only in postback scenarios and not in asynchronous postback scenarios:</para>
      <list type="bullet">
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.BinaryWrite(System.Byte[])" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.Clear" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.ClearContent" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.ClearHeaders" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.Close" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.End" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.Flush" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.TransmitFile(System.String)" />
          </para>
        </item>
        <item>
          <para>
            <see cref="Overload:System.Web.HttpResponse.Write" />
          </para>
        </item>
        <item>
          <para>
            <see cref="Overload:System.Web.HttpResponse.WriteFile" />
          </para>
        </item>
        <item>
          <para>
            <see cref="M:System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)" />
          </para>
        </item>
      </list>
      <para>Partial-page updates are enabled when you use <see cref="T:System.Web.UI.UpdatePanel" /> controls to update selected regions of a page instead of updating the whole page with a postback. For more information, see <format type="text/html"><a href="29a2265d-9674-4c19-b70e-e5560ee9689a">UpdatePanel Control Overview</a></format> and <format type="text/html"><a href="5c12736d-d9e9-464a-9388-3fe0f9f49e49">Partial-Page Rendering Overview</a></format>.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Encapsulates HTTP-response information from an ASP.NET operation.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpResponse (System.IO.TextWriter writer);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
          <para>The methods and properties of the <see cref="T:System.Web.HttpResponse" /> class are exposed through the intrinsic <see cref="P:System.Web.HttpContext.Response" /> object in ASP.NET.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.HttpResponse" /> class.</para>
        </summary>
        <param name="writer">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.IO.TextWriter" /> object that enables custom HTTP output.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddCacheDependency">
      <MemberSignature Language="C#" Value="public void AddCacheDependency (System.Web.Caching.CacheDependency[] dependencies);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpResponse.AddCacheDependency(System.Web.Caching.CacheDependency[])" /> method allows dependencies to be created between cached responses and a <see cref="T:System.Web.Caching.CacheDependency" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Associates a set of cache dependencies with the response to facilitate invalidation of the response if it is stored in the output cache and the specified dependencies change.</para>
        </summary>
        <param name="dependencies">
          <attribution license="cc4" from="Microsoft" modified="false" />A file, cache key, or <see cref="T:System.Web.Caching.CacheDependency" /> to add to the list of application dependencies.</param>
      </Docs>
    </Member>
    <Member MemberName="AddCacheItemDependencies">
      <MemberSignature Language="C#" Value="public void AddCacheItemDependencies (System.Collections.ArrayList cacheKeys);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheKeys" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the items referred to in the <paramref name="cacheKeys" /> parameter are removed from the cache, the cached response of the current item is not valid.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Makes the validity of a cached response dependent on other items in the cache.</para>
        </summary>
        <param name="cacheKeys">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Collections.ArrayList" /> that contains the keys of the items that the current cached response is dependent upon.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddCacheItemDependencies">
      <MemberSignature Language="C#" Value="public void AddCacheItemDependencies (string[] cacheKeys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheKeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When any of the <paramref name="cacheKey" />s are removed from the cache, the cached response of the current item is invalid.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Makes the validity of a cached item dependent on another item in the cache.</para>
        </summary>
        <param name="cacheKeys">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of item keys that the cached response is dependent upon.</param>
      </Docs>
    </Member>
    <Member MemberName="AddCacheItemDependency">
      <MemberSignature Language="C#" Value="public void AddCacheItemDependency (string cacheKey);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheKey" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When the item corresponding to the <paramref name="cacheKey" /> parameter is removed from the cache, the cached response of the current item is invalid.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Makes the validity of a cached response dependent on another item in the cache.</para>
        </summary>
        <param name="cacheKey">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the item that the cached response is dependent upon.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddFileDependencies">
      <MemberSignature Language="C#" Value="public void AddFileDependencies (System.Collections.ArrayList filenames);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a group of file names to the collection of file names on which the current response is dependent.</para>
        </summary>
        <param name="filenames">
          <attribution license="cc4" from="Microsoft" modified="false" />The collection of files to add.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddFileDependencies">
      <MemberSignature Language="C#" Value="public void AddFileDependencies (string[] filenames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds an array of file names to the collection of file names on which the current response is dependent.</para>
        </summary>
        <param name="filenames">
          <attribution license="cc4" from="Microsoft" modified="false" />An array of files to add.</param>
      </Docs>
    </Member>
    <Member MemberName="AddFileDependency">
      <MemberSignature Language="C#" Value="public void AddFileDependency (string filename);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use the <see cref="M:System.Web.HttpResponse.AddFileDependency(System.String)" /> method to add a file dependency, you must also specify output caching programmatically or declaratively. For example, to specify output caching declaratively, use the <format type="text/html"><a href="28a9e101-fb44-4198-9cb6-b8a52312fec2">@ OutputCache</a></format> directive. For more information, see <format type="text/html"><a href="95ad1c54-329e-45af-9343-a03a1d2ce9db">How to: Cache Page Output with File Dependencies</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a single file name to the collection of file names on which the current response is dependent.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the file to add.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public void AddHeader (string name, string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Web.HttpResponse.AddHeader(System.String,System.String)" /> is the same as <see cref="M:System.Web.HttpResponse.AppendHeader(System.String,System.String)" /> and is provided only for compatibility with earlier versions of ASP. With ASP.NET, use <see cref="M:System.Web.HttpResponse.AppendHeader(System.String,System.String)" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds an HTTP header to the output stream. <see cref="M:System.Web.HttpResponse.AddHeader(System.String,System.String)" /> is provided for compatibility with earlier versions of ASP.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the HTTP header to add <paramref name="value" /> to.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to add to the header.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AppendCookie">
      <MemberSignature Language="C#" Value="public void AppendCookie (System.Web.HttpCookie cookie);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Web.HttpCookie" />
      </Parameters>
      <Docs>
        <remarks>This is equivalent to: Response.Cookies.Add (cookie).</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds an HTTP cookie to the intrinsic cookie collection.</para>
        </summary>
        <param name="cookie">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.HttpCookie" /> to add to the output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AppendHeader">
      <MemberSignature Language="C#" Value="public void AppendHeader (string name, string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If you use the <see cref="M:System.Web.HttpResponse.AppendHeader(System.String,System.String)" /> method to send cache-specific headers and at the same time use the cache object model (<see cref="P:System.Web.HttpResponse.Cache" />) to set cache policy, HTTP response headers that pertain to caching (Cache-Control, Expires, Last-Modified, Pragma, and Vary) might be deleted when the cache object model is used. This behavior enables ASP.NET to maintain the most restrictive settings. For example, consider a page that includes user controls. If those controls have conflicting cache policies, the most restrictive cache policy will be used. If one user control sets the header "Cache-Control: Public" and another user control sets the more restrictive header "Cache-Control: Private" via calls to <see cref="M:System.Web.HttpCachePolicy.SetCacheability(System.Web.HttpCacheability)" />, then the "Cache-Control: Private" header will be sent with the response.</para>
          <para>For a list of standard HTTP/1.1 headers, see section 14, "Header Field Definitions," in the <see cref="http://go.microsoft.com/fwlink/?LinkID=73147">Hypertext Transfer Protocol -- HTTP/1.1</see> specification on the World Wide Web Consortium (W3C) Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds an HTTP header to the output stream.</para>
        </summary>
        <param name="name">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the HTTP header to add to the output stream.</param>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to append to the header.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="AppendToLog">
      <MemberSignature Language="C#" Value="public void AppendToLog (string param);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To allow for the specified string to be recorded in the log file, you first must enable the <ui>URI Query</ui> option of the <ui>Extended Logging Properties</ui> dialog box for the site that you want to log activity for in IIS.</para>
          <para>To customize extended logging in IIS 6.0, follow these steps:</para>
          <list type="ordered">
            <item>
              <para>In IIS Manager, expand the local computer node, expand the Web or FTP Sites folder, right-click the Web or FTP site, and then click <ui>Properties</ui>. </para>
            </item>
            <item>
              <para>Click the <ui>Web or FTP Site</ui> tab, and then select the <ui>Enable logging</ui> check box (if it is not already selected). </para>
            </item>
            <item>
              <para>In the <ui>Active log format</ui> box, click <ui>W3C Extended Log File Format</ui>. </para>
            </item>
            <item>
              <para>Click <ui>Properties</ui>. </para>
            </item>
            <item>
              <para>Click the <ui>Advanced</ui> tab, select the properties that you want to log, and then click <ui>OK</ui>.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds custom log information to the Internet Information Services (IIS) log file.</para>
        </summary>
        <param name="param">
          <attribution license="cc4" from="Microsoft" modified="false" />The text to add to the log file.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ApplyAppPathModifier">
      <MemberSignature Language="C#" Value="public string ApplyAppPathModifier (string virtualPath);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="M:System.Web.HttpResponse.ApplyAppPathModifier(System.String)" /> is used only with cookieless sessions to construct absolute HREFs.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds a session ID to the virtual path if the session is using <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state and returns the combined path. If <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state is not used, <see cref="M:System.Web.HttpResponse.ApplyAppPathModifier(System.String)" /> returns the original virtual path.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <paramref name="virtualPath" /> with the session ID inserted.</para>
        </returns>
        <param name="virtualPath">
          <attribution license="cc4" from="Microsoft" modified="false" />The virtual path to a resource. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BinaryWrite">
      <MemberSignature Language="C#" Value="public void BinaryWrite (byte[] buffer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <remarks>The contents of this buffer are sent back to the client without being altered by the current encoding of the response.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a string of binary characters to the HTTP output stream.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The bytes to write to the output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public bool Buffer { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current state of buffering.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpResponse.Buffer" /> property has been deprecated in favor of the <see cref="P:System.Web.HttpResponse.BufferOutput" /> property and is provided only for compatibility with earlier versions of ASP. With ASP.NET, use <see cref="P:System.Web.HttpResponse.BufferOutput" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to buffer output and send it after the complete response is finished processing.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BufferOutput">
      <MemberSignature Language="C#" Value="public bool BufferOutput { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>Whether output is currently being buffered.</value>
        <remarks>This controls whether HttpResponse should buffer the output before it is delivered to a client.  The default is <see langword="true" />.

<para>
The buffering can be changed during the execution back and forth if needed.
</para><para>
This property is the same as <see cref="P:System.Web.HttpResponse.Buffer" /></para></remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to buffer output and send it after the complete page is finished processing.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Cache">
      <MemberSignature Language="C#" Value="public System.Web.HttpCachePolicy Cache { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'HttpCachePolicy'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the caching policy (such as expiration time, privacy settings, and vary clauses) of a Web page.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CacheControl">
      <MemberSignature Language="C#" Value="public string CacheControl { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The values for Private, Public, and No-Cache are strings and must be enclosed in quotation marks (" "). If the <see cref="P:System.Web.HttpResponse.CacheControl" /> property is set to a value that does not match one of the <see cref="T:System.Web.HttpCacheability" /> enumeration values, then an <see cref="T:System.ArgumentException" /> is thrown. If the <see cref="P:System.Web.HttpResponse.CacheControl" /> property is not set, the cacheability of the response is set to <see cref="F:System.Web.HttpCacheability.NoCache" />.</para>
          <para>The CacheControl, <see cref="P:System.Web.HttpResponse.Expires" />, and <see cref="P:System.Web.HttpResponse.ExpiresAbsolute" /> properties have been deprecated. Instead, the methods of the <see cref="T:System.Web.HttpCachePolicy" /> class are available through the <see cref="P:System.Web.HttpResponse.Cache" /> intrinsic object to control the Internet Information Services (IIS) output cache and client caches.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the Cache-Control HTTP header that matches one of the <see cref="T:System.Web.HttpCacheability" /> enumeration values.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Charset">
      <MemberSignature Language="C#" Value="public string Charset { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current character set.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Charset property can be set to null to suppress the HTTP Content-Type header.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the HTTP character set of the output stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpResponse.Clear" /> method does not clear header information.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears all content output from the buffer stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.HttpResponse.ClearContent" /> method does not clear header information.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears all content output from the buffer stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ClearHeaders">
      <MemberSignature Language="C#" Value="public void ClearHeaders ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>This clears all the header definitions that might have been added with <see cref="M:System.Web.HttpResponse.AppendHeader" />.

<para>
   This throws an <see cref="T:System.Web.HttpException" /> if the headers have already been sent to the client (for example, if the user has called the <see cref="M:System.Web.HttpResponse.Flush" /> method.
</para></remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clears all headers from the buffer stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method terminates the connection to the client in an abrupt manner and is not intended for normal HTTP request processing. The method sends a reset packet to the client, which can cause response data that is buffered on the server, the client, or somewhere in between to be dropped. </para>
          <para>You might use this method in response to an attack by a malicious HTTP client. However, typically you should call <see cref="M:System.Web.HttpApplication.CompleteRequest" /> instead if you want to jump ahead to the <see cref="E:System.Web.HttpApplication.EndRequest" /> event and send a response to the client.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Closes the socket connection to a client.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>a <see cref="T:System.Text.Encoding" /></value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Default ContentEncoding can be specified in an ASP.NET configuration file in the <format type="text/html"><a href="e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7">globalization Element (ASP.NET Settings Schema)</a></format> section. If <see cref="P:System.Web.HttpResponse.ContentEncoding" /> is specified by the client, the default configuration settings are overridden.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the HTTP character set of the output stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current Content-Type value.</value>
        <remarks>The default value is text/html.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the HTTP MIME type of the output stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieCollection Cookies { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>A collection with all the cookies being sent back to the client.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>ASP.NET includes two intrinsic cookie collections. The collection accessed through the <see cref="P:System.Web.HttpRequest.Cookies" /> collection of <see cref="T:System.Web.HttpRequest" /> contains cookies transmitted by the client to the server in the Cookie header. The collection accessed through the <see cref="P:System.Web.HttpResponse.Cookies" /> collection of <see cref="T:System.Web.HttpResponse" /> contains new cookies created on the server and transmitted to the client in the Set-Cookie header.</para>
          <para>After you add a cookie by using the <see cref="P:System.Web.HttpResponse.Cookies" /> collection, the cookie is immediately available in the <see cref="P:System.Web.HttpRequest.Cookies" /> collection, even if the response has not been sent to the client.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the response cookie collection.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public void End ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This method is provided only for compatibility with ASP—that is, for compatibility with COM-based Web-programming technology that preceded ASP.NET. If you want to jump ahead to the <see cref="E:System.Web.HttpApplication.EndRequest" /> event and send a response to the client, it is usually preferable to call <see cref="M:System.Web.HttpApplication.CompleteRequest" /> instead. </para>
          <para>To mimic the behavior of the End method in ASP, this method tries to raise a <see cref="ThreadAbortException" /> exception. If this attempt is successful, the calling thread will be aborted, which is detrimental to your site's performance. In that case, no code after the call to the <see cref="M:System.Web.HttpResponse.End" /> method is executed.</para>
          <para>If the <see cref="M:System.Web.HttpResponse.End" /> method is not able to raise a <see cref="ThreadAbortException" />, it instead flushes the response bytes to the client. It does this synchronously, which can also be detrimental to your site's performance.</para>
          <para>In either case (whether or not a <see cref="ThreadAbortException" /> exception is successfully raised), the response pipeline jumps ahead to the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</para>
          <para>The <see cref="M:System.Web.HttpApplication.CompleteRequest" /> method does not raise an exception, and code after the call to the <see cref="M:System.Web.HttpApplication.CompleteRequest" /> method might be executed. If your intention is to avoid execution of subsequent code, and if the performance penalty of <see cref="M:System.Web.HttpResponse.End" /> is acceptable, you can call <see cref="M:System.Web.HttpResponse.End" /> instead of <see cref="M:System.Web.HttpApplication.CompleteRequest" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sends all currently buffered output to the client, stops execution of the page, and raises the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Expires">
      <MemberSignature Language="C#" Value="public int Expires { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'int'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The Expires, <see cref="P:System.Web.HttpResponse.ExpiresAbsolute" /> and <see cref="P:System.Web.HttpResponse.CacheControl" /> properties have been deprecated in favor of the methods of the <see cref="T:System.Web.HttpCachePolicy" /> class available through the <see cref="P:System.Web.HttpResponse.Cache" /> intrinsic object to control the Internet Information Services (IIS) output cache and client caches.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the number of minutes before a page cached on a browser expires. If the user returns to the same page before it expires, the cached version is displayed. <see cref="P:System.Web.HttpResponse.Expires" /> is provided for compatibility with earlier versions of ASP.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ExpiresAbsolute">
      <MemberSignature Language="C#" Value="public DateTime ExpiresAbsolute { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'DateTime'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The ExpiresAbsolute, <see cref="P:System.Web.HttpResponse.Expires" />, and <see cref="P:System.Web.HttpResponse.CacheControl" /> properties have been deprecated in favor of the methods of the <see cref="T:System.Web.HttpCachePolicy" /> class available through the <see cref="P:System.Web.HttpResponse.Cache" /> intrinsic object to control the Internet Information Services (IIS) output cache and client caches.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the absolute date and time at which to remove cached information from the cache. <see cref="P:System.Web.HttpResponse.ExpiresAbsolute" /> is provided for compatibility with earlier versions of ASP.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public System.IO.Stream Filter { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>a <see cref="T:System.IO.Stream" /></value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you create a Stream object and set the <see cref="P:System.Web.HttpResponse.Filter" /> property to the Stream object, all HTTP output sent by <see cref="Overload:System.Web.HttpResponse.Write" /> passes through the filter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a wrapping filter object that is used to modify the HTTP entity body before transmission.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Forces all currently buffered output to be sent to the client. The <see cref="M:System.Web.HttpResponse.Flush" /> method can be called multiple times during request processing.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sends all currently buffered output to the client.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="HeaderEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding HeaderEncoding { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpResponse.HeaderEncoding" /> property gives you the ability to disable or change the <see cref="T:System.Text.Encoding" /> object on a response header by using the <see cref="T:System.Text.ASCIIEncoding" />, <see cref="T:System.Text.UnicodeEncoding" />, <see cref="T:System.Text.UTF7Encoding" />, or <see cref="T:System.Text.UTF8Encoding" /> object. The default encoding value is the <see cref="T:System.Text.UTF8Encoding" /> class.</para>
          <para>By changing the type of the <see cref="P:System.Web.HttpResponse.HeaderEncoding" /> property, you can potentially increase the risk of certain malicious attacks or cause sensitive data to be sent through the response header. Header injection attacks can be avoided, in part, by leaving the <see cref="P:System.Web.HttpResponse.HeaderEncoding" /> property of a response to the default setting. An attack against a vulnerable application could echo back entrusted data as part of a response header. If the <see cref="P:System.Web.HttpResponse.HeaderEncoding" /> is disabled because of a requirement for continuation lines in a header or if any header is constructed based on the result of untrusted data, the header data should be validated before sending to the response stream.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an <see cref="T:System.Text.Encoding" /> object that represents the encoding for the current header output stream.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IsClientConnected">
      <MemberSignature Language="C#" Value="public bool IsClientConnected { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>
          <see langword="true" /> if the client is still connected, <see langword="false" /> otherwise.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.HttpResponse.IsClientConnected" /> property returns false when the following conditions are true:</para>
          <list type="bullet">
            <item>
              <para>The connection to the client was terminated. This can occur if the <see cref="M:System.Web.HttpResponse.Close" /> method was invoked, or if the client stopped execution of the Web page or browsed to another page.</para>
            </item>
            <item>
              <para>The <see cref="T:System.Web.HttpWorkerRequest" /> object that is handling the request is null or the <see cref="M:System.Web.HttpWorkerRequest.IsClientConnected" /> method returns false. If a custom <see cref="T:System.Web.HttpWorkerRequest" /> object handles the request, then the <see cref="M:System.Web.HttpWorkerRequest.IsClientConnected" /> method might be set based on custom criteria. For example, the custom worker request might force a time-out after a period of time.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a value indicating whether the client is still connected to the server.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsRequestBeingRedirected">
      <MemberSignature Language="C#" Value="public bool IsRequestBeingRedirected { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.HttpResponse.IsRequestBeingRedirected" /> property with the <see cref="P:System.Web.HttpResponse.RedirectLocation" /> property to test and determine whether the absolute URI that is transmitted to the client in the HTTP Location header is different than the current URI and what the new intended URI that is being transferred to will be.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a Boolean value indicating whether the client is being transferred to a new location.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Output">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Output { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>The textwriter.</value>
        <remarks>The text writer uses the encoding specified in the <see cref="P:System.Web.HttpResponse.ContentEncoding" />.  This writer is TextWriter wrapper on top of the <see cref="P:System.Web.HttpResponse.OutputStream" /> stream.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables output of text to the outgoing HTTP response stream.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OutputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OutputStream { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <value>a <see cref="T:System.IO.Stream" /></value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Starting with the .NET Framework version 2.0, when you use the <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> method of the IO stream returned by the <see cref="P:System.Web.HttpResponse.OutputStream" /> property, the following exceptions might be thrown:</para>
          <list type="bullet">
            <item>
              <para>
                <see cref="T:System.ArgumentOutOfRangeException" />, if the <paramref name="offset" /> or <paramref name="count" /> parameter is negative or if the <paramref name="buffer" /> parameter's length minus the <paramref name="offset" /> parameter is less than or equal to zero.</para>
            </item>
            <item>
              <para>
                <see cref="T:System.ArgumentNullException" />, if the <paramref name="buffer" /> parameter is null.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables binary output to the outgoing HTTP content body.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Pics">
      <MemberSignature Language="C#" Value="public void Pics (string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Platform for Internet Content Selection (PICS) is a World Wide Web Consortium (W3C) standard for content labeling. PICS is essentially a language for creating a ratings system.</para>
          <para>Any value can be a PICS label; ASP.NET does not validate the label. The maximum length of the string is 255 characters. For more information about PICS standards and syntax, see the <see cref="http://go.microsoft.com/fwlink/?LinkID=37125">World Wide Web Consortium</see> Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Appends a HTTP PICS-Label header to the output stream.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to add to the PICS-Label header.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public void Redirect (string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Calling <see cref="M:System.Web.HttpResponse.Redirect(System.String)" /> is equivalent to calling <see cref="M:System.Web.HttpResponse.Redirect(System.String,System.Boolean)" /> with the second parameter set to true.</para>
          <para>
            <see cref="M:System.Web.HttpResponse.Redirect(System.String)" /> calls <see cref="M:System.Web.HttpResponse.End" /> which throws a <see cref="T:System.Threading.ThreadAbortException" /> exception upon completion. This exception has a detrimental effect on Web application performance. Therefore, we recommend that instead of this overload you use the <see cref="M:System.Web.HttpResponse.Redirect(System.String,System.Boolean)" /> overload and pass false for the <paramref name="endResponse" /> parameter, and then call the <see cref="M:System.Web.HttpApplication.CompleteRequest" /> method. For more information, see the <see cref="M:System.Web.HttpResponse.End" /> method.</para>
          <block subset="none" type="note">
            <para>For mobile pages only, if your application relies on cookieless sessions, or might receive requests from mobile devices that require cookieless sessions, using a tilde (~) in a path can result in creating a new session and potentially losing session data. To set a property on a mobile control with a path such as "~/path", resolve the path using <see cref="M:System.Web.UI.MobileControls.MobileControl.ResolveUrl(System.String)" /> "~/path" before assigning it to the property.</para>
          </block>
          <para>ASP.NET performs the redirection by returning a 302 HTTP status code. An alternative way to transfer control to another page is the <see cref="M:System.Web.HttpServerUtility.Transfer" /> method. The <see cref="M:System.Web.HttpServerUtility.Transfer" /> method is typically more efficient because it does not cause a round trip to the client. For more information, see <format type="text/html"><a href="daef3f43-e018-43aa-b43c-46b27bac599e">How to: Redirect Users to Another Page</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Redirects a request to a new URL and specifies the new URL.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The target location. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public void Redirect (string url, bool endResponse);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="endResponse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An absolute URL (for example, http://www.contoso.com/default.aspx) or a relative URL (for example, Default.aspx) can be specified for the target location but some browsers may reject a relative URL.</para>
          <para>When you use this method in a page handler to terminate a request for one page and start a new request for another page, set <paramref name="endResponse" /> to false and then call the <see cref="M:System.Web.HttpApplication.CompleteRequest" /> method. If you specify true for the <paramref name="endResponse" /> parameter, this method calls the <see cref="M:System.Web.HttpResponse.End" /> method for the original request, which throws a <see cref="T:System.Threading.ThreadAbortException" /> exception when it completes. This exception has a detrimental effect on Web application performance, which is why passing false for the <paramref name="endResponse" /> parameter is recommended. For more information, see the <see cref="M:System.Web.HttpResponse.End" /> method.</para>
          <block subset="none" type="note">
            <para>For mobile pages, if your application relies on cookieless sessions, or might receive requests from mobile devices that require cookieless sessions, using a tilde (~) in a path can create a new session and potentially lose session data. To set a property on a mobile control with a path such as "~/path", resolve the path using <see cref="M:System.Web.UI.MobileControls.MobileControl.ResolveUrl(System.String)" /> "~/path" before assigning it to the property.</para>
          </block>
          <para>ASP.NET performs the redirection by returning a 302 HTTP status code. An alternative way to transfer control to another page is the <see cref="M:System.Web.HttpServerUtility.Transfer" /> method. The <see cref="M:System.Web.HttpServerUtility.Transfer" /> method is typically more efficient because it does not cause a round trip to the client. For more information, see <format type="text/html"><a href="daef3f43-e018-43aa-b43c-46b27bac599e">How to: Redirect Users to Another Page</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Redirects a client to a new URL. Specifies the new URL and whether execution of the current page should terminate.</para>
        </summary>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The location of the target. </param>
        <param name="endResponse">
          <attribution license="cc4" from="Microsoft" modified="false" />Indicates whether execution of the current page should terminate. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RedirectLocation">
      <MemberSignature Language="C#" Value="public string RedirectLocation { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>The redirect</value>
        <remarks>
          <para>
This is a low-level request, for the Location header to be complete you must also update the StatusCode to one of the valid redirection codes (3xx).  See the <see cref="M:System.Web.HttpResponse.Redirect(string)" /> and <see cref="M:System.Web.HttpResponse.Redirect(string,bool)" /> methods for a high-level interface to redirection.
</para>
          <para>
If set this property controls whether the header "Location" in the HTTP headers is set.  If the value is <see langword="null" /> the header is not sent, any other values will cause the "Location" header to be sent.
</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the value of the Http Location header.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RemoveOutputCacheItem">
      <MemberSignature Language="C#" Value="public static void RemoveOutputCacheItem (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method to remove output-cache items that are associated with the default output-cache provider. Call the <see cref="M:System.Web.HttpResponse.RemoveOutputCacheItem(System.String,System.String)" /> method to remove output-cache items that are associated with custom output-cache providers that are specified in the Web site configuration file.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Removes from the cache all cached items that are associated with the default output-cache provider. This method is static.</para>
        </summary>
        <param name="path">
          <attribution license="cc4" from="Microsoft" modified="false" />The virtual absolute path to the items that are removed from the cache.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public void SetCookie (System.Web.HttpCookie cookie);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Web.HttpCookie" />
      </Parameters>
      <Docs>
        <remarks>The cookie is added to the list of cookies that will be sent back to the HTTP client.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates an existing cookie in the cookie collection.</para>
        </summary>
        <param name="cookie">
          <attribution license="cc4" from="Microsoft" modified="false" />The cookie in the collection to be updated.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public string Status { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current HTTP status.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>
            <see cref="P:System.Web.HttpResponse.Status" /> has been deprecated in favor of <see cref="P:System.Web.HttpResponse.StatusDescription" /> and is provided only for compatibility with earlier versions of ASP. With ASP.NET, use <see cref="P:System.Web.HttpResponse.StatusDescription" /> instead.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the Status line that is returned to the client.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StatusCode">
      <MemberSignature Language="C#" Value="public int StatusCode { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current status code. Defaults to 200.</value>
        <remarks>This property controls the HTTP status code that is sent back to the HTTP client.

<para>
If the setter method is called after the headers have been set, an <see cref="T:System.Web.HttpException" /> will be thrown.
</para><para>
   The following is a list of the RFC defined status codes:
</para><list type="table"><listheader><term>HTTP Status Code</term><description>Status Description</description></listheader><item><term>100</term><description>Continue</description></item><item><term>101</term><description>Switching Protocols</description></item><item><term>200</term><description>OK</description></item><item><term>201</term><description>Created</description></item><item><term>202</term><description>Accepted</description></item><item><term>203</term><description>Non-Authoritative Information</description></item><item><term>204</term><description>No Content</description></item><item><term>205</term><description>Reset Content</description></item><item><term>206</term><description>Partial Content</description></item><item><term>300</term><description>Multiple Choices</description></item><item><term>301</term><description>Moved Permanently</description></item><item><term>302</term><description>Found</description></item><item><term>303</term><description>See Other</description></item><item><term>304</term><description>Not Modified</description></item><item><term>305</term><description>Use Proxy</description></item><item><term>307</term><description>Temporary Redirect</description></item><item><term>400</term><description>Bad Request</description></item><item><term>401</term><description>Unauthorized</description></item><item><term>402</term><description>Payment Required</description></item><item><term>403</term><description>Forbidden</description></item><item><term>404</term><description>Not Found</description></item><item><term>405</term><description>Method Not Allowed</description></item><item><term>406</term><description>Not Acceptable</description></item><item><term>407</term><description>Proxy Authentication Required</description></item><item><term>408</term><description>Request Time-out</description></item><item><term>409</term><description>Conflict</description></item><item><term>410</term><description>Gone</description></item><item><term>411</term><description>Length Required</description></item><item><term>412</term><description>Precondition Failed</description></item><item><term>413</term><description>Request Entity Too Large</description></item><item><term>414</term><description>Request-URI Too Large</description></item><item><term>415</term><description>Unsupported Media Type</description></item><item><term>416</term><description>Requested range not satisfiable</description></item><item><term>417</term><description>Expectation Failed</description></item><item><term>500</term><description>Internal Server Error</description></item><item><term>501</term><description>Not Implemented</description></item><item><term>502</term><description>Bad Gateway</description></item><item><term>503</term><description>Service Unavailable</description></item><item><term>504</term><description>Gateway Time-out</description></item><item><term>505</term><description>HTTP Version not supported</description></item></list></remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the HTTP status code of the output returned to the client.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="StatusDescription">
      <MemberSignature Language="C#" Value="public string StatusDescription { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>The current status description that will be returned to the client.</value>
        <remarks>The status description is described in RFC 2616, section 6.1.1

<para>
   The following is a list of the RFC defined status codes:
</para><list type="table"><listheader><term>HTTP Status Code</term><description>Status Description</description></listheader><item><term>100</term><description>Continue</description></item><item><term>101</term><description>Switching Protocols</description></item><item><term>200</term><description>OK</description></item><item><term>201</term><description>Created</description></item><item><term>202</term><description>Accepted</description></item><item><term>203</term><description>Non-Authoritative Information</description></item><item><term>204</term><description>No Content</description></item><item><term>205</term><description>Reset Content</description></item><item><term>206</term><description>Partial Content</description></item><item><term>300</term><description>Multiple Choices</description></item><item><term>301</term><description>Moved Permanently</description></item><item><term>302</term><description>Found</description></item><item><term>303</term><description>See Other</description></item><item><term>304</term><description>Not Modified</description></item><item><term>305</term><description>Use Proxy</description></item><item><term>307</term><description>Temporary Redirect</description></item><item><term>400</term><description>Bad Request</description></item><item><term>401</term><description>Unauthorized</description></item><item><term>402</term><description>Payment Required</description></item><item><term>403</term><description>Forbidden</description></item><item><term>404</term><description>Not Found</description></item><item><term>405</term><description>Method Not Allowed</description></item><item><term>406</term><description>Not Acceptable</description></item><item><term>407</term><description>Proxy Authentication Required</description></item><item><term>408</term><description>Request Time-out</description></item><item><term>409</term><description>Conflict</description></item><item><term>410</term><description>Gone</description></item><item><term>411</term><description>Length Required</description></item><item><term>412</term><description>Precondition Failed</description></item><item><term>413</term><description>Request Entity Too Large</description></item><item><term>414</term><description>Request-URI Too Large</description></item><item><term>415</term><description>Unsupported Media Type</description></item><item><term>416</term><description>Requested range not satisfiable</description></item><item><term>417</term><description>Expectation Failed</description></item><item><term>500</term><description>Internal Server Error</description></item><item><term>501</term><description>Not Implemented</description></item><item><term>502</term><description>Bad Gateway</description></item><item><term>503</term><description>Service Unavailable</description></item><item><term>504</term><description>Gateway Time-out</description></item><item><term>505</term><description>HTTP Version not supported</description></item></list></remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the HTTP status string of the output returned to the client.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SuppressContent">
      <MemberSignature Language="C#" Value="public bool SuppressContent { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>Whether content is currently being supressed (boolean).</value>
        <remarks>If the value is set to true no output will be produced.   The value can be altered any number of times, it is only consulted at the last stage of processing the request.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets a value indicating whether to send HTTP content to the client.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="TransmitFile">
      <MemberSignature Language="C#" Value="public void TransmitFile (string filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified file directly to an HTTP response output stream, without buffering it in memory.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the file to write to the HTTP output.</param>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (char ch);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <remarks />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a character to an HTTP response output stream.</para>
        </summary>
        <param name="ch">
          <attribution license="cc4" from="Microsoft" modified="false" />The character to write to the HTTP output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (object obj);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>This will invoke <see cref="M:System.Object.ToString()" /> method and then write the result to the output stream using the current encoding.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes an <see cref="T:System.Object" /> to an HTTP response stream.</para>
        </summary>
        <param name="obj">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Object" /> to write to the HTTP output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string s);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Dynamically generated HTML pages can introduce security risks if input received from Web clients is not validated either when it is received from a client or when it is transmitted back to a client. Malicious script that is embedded in input submitted to a Web site and later written back out to a client can appear to be originating from a trusted source. This security risk is referred to as a cross-site scripting attack. You should always validate data that is received from a client when it will be transmitted from your site to client browsers.</para>
          <para>Moreover, whenever you write out as HTML any data that was received as input, you should encode it using a technique such as <see cref="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" /> or <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" /> to prevent malicious script from executing. This technique is useful for data that was not validated when it was received.</para>
          <para>When you encode or filter data, you must specify a character set for your Web pages so that your filter can identify and remove any byte sequences that do not belong to that set (such as nonalphanumeric sequences) and could potentially have malicious script embedded in them.</para>
          <para>For more information about cross-site scripting attacks, see article Q252985, "How to Prevent Cross-Site Scripting Security Issues" on the <see cref="http://go.microsoft.com/fwlink/?LinkID=37115">Microsoft Knowledge Base</see> Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes a string to an HTTP response output stream.</para>
        </summary>
        <param name="s">
          <attribution license="cc4" from="Microsoft" modified="false" />The string to write to the HTTP output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (char[] buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>This writes the specified number of bytes to the HTTP output stream.  If either int arguments are negative or if the operation would overflow the buffer an exception is thrown.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes an array of characters to an HTTP response output stream.</para>
        </summary>
        <param name="buffer">
          <attribution license="cc4" from="Microsoft" modified="false" />The character array to write.</param>
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />The position in the character array where writing starts.</param>
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of characters to write, beginning at <paramref name="index" />.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="WriteFile">
      <MemberSignature Language="C#" Value="public void WriteFile (string filename);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this method is used with large files, calling the method might throw an exception. The size of the file that can be used with this method depends on the hardware configuration of the Web server. For more information, see article 812406, "PRB: Response.WriteFile Cannot Download a Large File" on the <see cref="http://go.microsoft.com/fwlink/?linkid=149903">Microsoft Knowledge Base</see> Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the contents of the specified file directly to an HTTP response output stream as a file block.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the file to write to the HTTP output.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="WriteFile">
      <MemberSignature Language="C#" Value="public void WriteFile (string filename, bool readIntoMemory);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="readIntoMemory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this method is used with large files, calling the method might throw an exception. The size of the file that can be used with this method depends on the hardware configuration of the Web server. For more information, see article 812406, "PRB: Response.WriteFile Cannot Download a Large File" on the <see cref="http://go.microsoft.com/fwlink/?linkid=149903">Microsoft Knowledge Base</see> Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the contents of the specified file directly to an HTTP response output stream as a memory block.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the file to write into a memory block.</param>
        <param name="readIntoMemory">
          <attribution license="cc4" from="Microsoft" modified="false" />Indicates whether the file will be written into a memory block.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="WriteFile">
      <MemberSignature Language="C#" Value="public void WriteFile (IntPtr fileHandle, long offset, long size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileHandle" Type="System.IntPtr" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this method is used with large files, calling the method might throw an exception. The size of the file that can be used with this method depends on the hardware configuration of the Web server. For more information, see article 812406, "PRB: Response.WriteFile Cannot Download a Large File" on the <see cref="http://go.microsoft.com/fwlink/?linkid=149903">Microsoft Knowledge Base</see> Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified file directly to an HTTP response output stream.</para>
        </summary>
        <param name="fileHandle">
          <attribution license="cc4" from="Microsoft" modified="false" />The file handle of the file to write to the HTTP output stream.</param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The byte position in the file where writing will start.</param>
        <param name="size">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write to the output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="WriteFile">
      <MemberSignature Language="C#" Value="public void WriteFile (string filename, long offset, long size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When this method is used with large files, calling the method might throw an exception. The size of the file that can be used with this method depends on the hardware configuration of the Web server. For more information, see article 812406, "PRB: Response.WriteFile Cannot Download a Large File" on the <see cref="http://go.microsoft.com/fwlink/?linkid=149903">Microsoft Knowledge Base</see> Web site.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Writes the specified file directly to an HTTP response output stream.</para>
        </summary>
        <param name="filename">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the file to write to the HTTP output stream.</param>
        <param name="offset">
          <attribution license="cc4" from="Microsoft" modified="false" />The byte position in the file where writing will start.</param>
        <param name="size">
          <attribution license="cc4" from="Microsoft" modified="false" />The number of bytes to write to the output stream.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="WriteSubstitution">
      <MemberSignature Language="C#" Value="public void WriteSubstitution (System.Web.HttpResponseSubstitutionCallback callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Web.HttpResponseSubstitutionCallback" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You can use the <see cref="M:System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)" /> method for post-cache substitution in your output-cached pages. By passing an <see cref="T:System.Web.HttpContext" /> object to a callback method with a prescribed <see cref="T:System.Web.HttpResponseSubstitutionCallback" /> signature, you can replace output cached content at any given location in the page cache. To initiate the replacement, call the <see cref="M:System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)" /> method, passing it the callback method, which must be thread safe and can be either of the following: </para>
          <list type="bullet">
            <item>
              <para>A static method on the container page or user control.</para>
            </item>
            <item>
              <para>A static or instance method on another arbitrary object.</para>
            </item>
          </list>
          <para>On the first request to the page, the <see cref="M:System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)" /> calls the <see cref="T:System.Web.HttpResponseSubstitutionCallback" /> delegate to produce the output. Then, it adds a substitution buffer to the response, which retains the delegate to call on future requests. Finally, it degrades client-side cacheability from public to server-only, ensuring future requests to the page re-invoke the delegate by not caching on the client.</para>
          <block subset="none" type="note">
            <para>Post-cache substitution is not supported for a cached user control where output caching is applied at the user control level. This is also known as fragment caching. For more information, see <format type="text/html"><a href="cdd8e523-7305-4685-a456-c5be1de1367e">Caching Portions of an ASP.NET Page</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Allows insertion of response substitution blocks into the response, which allows dynamic generation of specified response regions for output cached responses.</para>
        </summary>
        <param name="callback">
          <attribution license="cc4" from="Microsoft" modified="false" />The method, user control, or object to substitute.</param>
      </Docs>
    </Member>
  </Members>
</Type>