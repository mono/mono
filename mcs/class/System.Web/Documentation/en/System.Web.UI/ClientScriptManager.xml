<?xml version="1.0" encoding="utf-8"?>
<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Web.UI.ClientScriptManager" /> class is used to manage client scripts and add them to Web applications. You can get a reference to the <see cref="T:System.Web.UI.ClientScriptManager" /> class from the <see cref="P:System.Web.UI.Page.ClientScript" /> property of the <see cref="T:System.Web.UI.Page" /> object.</para>
      <para>You can add a client script to a Web page declaratively by including the script in the HTML markup of the page. However, there are situations when adding client script dynamically is needed. To add a script dynamically, use the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method, the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" /> method, the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method, or the <see cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" /> method, depending on when and how you want to add the script. For more information, see <format type="text/html"><a href="e89f1306-e43d-49ae-a66a-e18b71007666">How to: Add Client Script Dynamically to ASP.NET Web Pages</a></format>.</para>
      <para>The <see cref="T:System.Web.UI.ClientScriptManager" /> class uniquely identifies scripts by a key <see cref="T:System.String" /> and a <see cref="T:System.Type" />. Scripts with the same key and type are considered duplicates. Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</para>
      <para>The <see cref="T:System.Web.UI.ClientScriptManager" /> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback. This is referred to as performing an out-of-band callback to the server. In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page. The Web page runs a modified version of its normal life cycle to process the callback. Use the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event. For more information, see <format type="text/html"><a href="dfaaa7d4-e1f2-4322-b2f5-796e0419f185">Client Callbacks Without Postbacks in ASP.NET Pages</a></format>.</para>
      <block subset="none" type="note">
        <para>Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client. To check if the browser supports callbacks, use the <see cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" /> property, which is accessible through the <see cref="P:System.Web.HttpRequest.Browser" /> property of the ASP.NET intrinsic <see cref="P:System.Web.HttpContext.Request" /> object.</para>
      </block>
      <para>Use the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method and the <see cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" /> method to define a client postback event. These methods enable client script functions, when invoked, to cause the server to post back to the page. A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event. </para>
      <block subset="none" type="note">
        <para>If you are using a <see cref="T:System.Web.UI.WebControls.Button" /> control and the <see cref="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" /> property is set to false, then you can use the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method to return the client postback event for the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
      </block>
      <para>The <see cref="P:System.Web.UI.WebControls.Button.OnClientClick" /> property of the <see cref="T:System.Web.UI.WebControls.Button" /> control, <see cref="T:System.Web.UI.WebControls.ImageButton" /> control, and <see cref="T:System.Web.UI.WebControls.LinkButton" /> control can be used to run client script. </para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Defines methods for managing client scripts in Web applications.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" /> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle. For more information, see <format type="text/html"><a href="dfaaa7d4-e1f2-4322-b2f5-796e0419f185">Client Callbacks Without Postbacks in ASP.NET Pages</a></format>. </para>
          <block subset="none" type="note">
            <para>When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls. For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used. To check whether a browser supports client callbacks, use the <see cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" /> property. To check whether a browser supports XML over HTTP, use the <see cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" /> property. Both properties are accessible through the <see cref="P:System.Web.HttpRequest.Browser" /> property of the intrinsic ASP.NET <see cref="P:System.Web.HttpContext.Request" /> object.</para>
          </block>
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" /> overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method performs a callback synchronously using XML over HTTP. When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser. No two synchronous callbacks callback can execute at the same time in the browser. If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</para>
          <para>To send data asynchronously, use one of the overloads that takes the <paramref name="useAsync" /> parameter, which is a Boolean value controlling this behavior. In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</para>
          <para>Additionally, this overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method specifies no client function to handle the case of an error condition generated by the <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method. To specify a client error callback handler, use one of the overloads that takes the <paramref name="clientErrorCallback" /> parameter.</para>
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" /> method takes an optional string <paramref name="argument" /> parameter and returns a string. To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</para>
          <block subset="none" type="note">
            <para>Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations. If the properties are to survive page requests, you can use session state.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name of a client function that invokes the client callback. </para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method. </param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />An argument passed from the client script to the server </param>
        <param name="clientCallback">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client event handler that receives the result of the successful server event. </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method requires a <paramref name="useAsync" /> parameter, which allows you to perform the client callback asynchronously by setting the value to true. The overload versions of this method that do not require the <paramref name="useAsync" /> parameter set the value to false by default.</para>
          <para>For more information on this method, see the remarks for the overload <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name of a client function that invokes the client callback. </para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method. </param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />An argument passed from the client script to the server </param>
        <param name="clientCallback">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client event handler that receives the result of the successful server event. </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler. </param>
        <param name="useAsync">
          <attribution license="cc4" from="Microsoft" modified="false" />true to perform the callback asynchronously; false to perform the callback synchronously.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method takes a <paramref name="target" /> string parameter instead of a <see cref="T:System.Web.UI.Control" /> parameter. Use this overload when you want the callback to go back to something other than a string containing the <see cref="P:System.Web.UI.Control.UniqueID" /> of the control.</para>
          <para>Additionally, this overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method requires a <paramref name="useAsync" /> and a <paramref name="clientErrorCallback" /> parameter. The <paramref name="useAsync" /> parameter allows you to perform the client callback asynchronously by setting the value to true. The overload versions of this method that do not require the <paramref name="useAsync" /> parameter set the value to false by default. The <paramref name="clientErrorCallback" /> parameter allows you to define the name of the client function that is called if the server handler, the <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method, returns an error. The overload versions of this method that do not require the <paramref name="clientErrorCallback" /> parameter set the value to null.</para>
          <para>For more information on this method, see the remarks for the overload <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name of a client function that invokes the client callback. </para>
        </returns>
        <param name="target">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of a server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />An argument passed from the client script to the server </param>
        <param name="clientCallback">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client event handler that receives the result of the successful server event. </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</param>
        <param name="clientErrorCallback">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client event handler that receives the result when an error occurs in the server event handler. </param>
        <param name="useAsync">
          <attribution license="cc4" from="Microsoft" modified="false" />true  to perform the callback asynchronously; false to perform the callback synchronously.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" /> method requires a <paramref name="useAsync" /> and a <paramref name="clientErrorCallback" /> parameter. The <paramref name="useAsync" /> parameter allows you to perform the client callback asynchronously by setting the value to true. The overload versions of this method that do not require the <paramref name="useAsync" /> parameter set the value to false by default. The <paramref name="clientErrorCallback" /> parameter allows you to define the name of the client function that is called if the server handler (the <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method) returns an error. The overload versions of this method that do not require the <paramref name="clientErrorCallback" /> parameter set the value to null.</para>
          <para>For more information on this method, see the remarks for the overload <see cref="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The name of a client function that invokes the client callback. </para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method. </param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />An argument passed from the client script to the server <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />  method. </param>
        <param name="clientCallback">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client event handler that receives the result of the successful server event. </param>
        <param name="context">
          <attribution license="cc4" from="Microsoft" modified="false" />The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler. </param>
        <param name="clientErrorCallback">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client event handler that receives the result when an error occurs in the server event handler. </param>
        <param name="useAsync">
          <attribution license="cc4" from="Microsoft" modified="false" />true to perform the callback asynchronously; false to perform the callback synchronously. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Using the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method requires the control that handles the postback to implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface. To implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface for a <see cref="T:System.Web.UI.Page" />,  use the <format type="text/html"><a href="9635526d-d2ab-4fbb-8d90-104156ffcb09">@ Implements</a></format> directive.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference, with javascript: appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server control to process the postback.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />The parameter passed to the server control. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Using the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method requires the control that handles the postback to implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface. To implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface for a <see cref="T:System.Web.UI.Page" />, use the <format type="text/html"><a href="9635526d-d2ab-4fbb-8d90-104156ffcb09">@ Implements</a></format> directive.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a reference, with javascript: appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server control to process the postback.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />The parameter passed to the server control.</param>
        <param name="registerForEventValidation">
          <attribution license="cc4" from="Microsoft" modified="false" />true to register the postback event for validation; false to not register the post back event for validation.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface for a <see cref="T:System.Web.UI.Page" />,  use the <format type="text/html"><a href="9635526d-d2ab-4fbb-8d90-104156ffcb09">@ Implements</a></format> directive.</para>
          <para>The <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method can be used with the <see cref="T:System.Web.UI.WebControls.Button" /> control when the <see cref="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" /> property is false. In this scenario, the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method returns the client postback event for the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> instance.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that, when treated as script on the client, initiates the client postback.</para>
        </returns>
        <param name="options">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface for a <see cref="T:System.Web.UI.Page" />,  use the <format type="text/html"><a href="9635526d-d2ab-4fbb-8d90-104156ffcb09">@ Implements</a></format> directive.</para>
          <para>The <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method can be used with the <see cref="T:System.Web.UI.WebControls.Button" /> control when the <see cref="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" /> property is false. In this scenario, the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method returns the client postback event for the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that, when treated as script on the client, initiates the postback.</para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />A string of optional arguments to pass to the control that processes the postback.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface for a <see cref="T:System.Web.UI.Page" /> object, use the <format type="text/html"><a href="9635526d-d2ab-4fbb-8d90-104156ffcb09">@ Implements</a></format> directive.</para>
          <para>The <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method can be used with the <see cref="T:System.Web.UI.WebControls.Button" /> control when the <see cref="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" /> property is false. In this scenario, the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method returns the client postback event for the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
          <para>If <paramref name="registerForEventValidation" /> is true, the <see cref="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" /> method calls the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> object. Optionally, registers the event reference for validation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that, when treated as script on the client, initiates the client postback.</para>
        </returns>
        <param name="options">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</param>
        <param name="registerForEventValidation">
          <attribution license="cc4" from="Microsoft" modified="false" />true to register the event reference for validation; otherwise, false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To implement the <see cref="T:System.Web.UI.IPostBackEventHandler" /> interface for a <see cref="T:System.Web.UI.Page" />, use the <format type="text/html"><a href="9635526d-d2ab-4fbb-8d90-104156ffcb09">@ Implements</a></format> directive.</para>
          <para>The <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method can be used with the <see cref="T:System.Web.UI.WebControls.Button" /> control when the <see cref="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" /> property is false. In this scenario, the <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> method returns the client postback event for the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
          <para>If <paramref name="registerForEventValidation" /> is true, the <see cref="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" /> method calls the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string that, when treated as script on the client, initiates the postback.</para>
        </returns>
        <param name="control">
          <attribution license="cc4" from="Microsoft" modified="false" />The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />A string of optional arguments to pass to <paramref name="control" />.</param>
        <param name="registerForEventValidation">
          <attribution license="cc4" from="Microsoft" modified="false" />true to register the event reference for validation; otherwise, false.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" /> method returns a URL reference to a resource embedded in an assembly. The returned reference is not URL encoded. Resources can be script files, images, or any static file. You specify the type based on the object that will be accessing the resource. </para>
          <para>A Web resource registered with the page is uniquely identified by its type and name. Only one resource with a given type and name pair can be registered with the page. Attempting to register a resource that is already registered does not create a duplicate of the registered resource. </para>
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" /> method is used in conjunction with the <see cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" /> method for accessing resources embedded in assemblies. For more information on using resources in applications, see <format type="text/html"><a href="0936b3b2-9e6e-4abe-9c06-364efef9dbbd">ASP.NET Web Page Resources Overview</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a URL reference to a resource in an assembly.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The URL reference to the resource.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the resource. </param>
        <param name="resourceName">
          <attribution license="cc4" from="Microsoft" modified="false" />The fully qualified name of the resource in the assembly. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.</para>
          <para>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.</para>
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered" /> method calls the overload that takes both a <paramref name="key" /> and a <paramref name="type" /> parameter with the type set as a <see cref="T:System.Web.UI.Page" /> object </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the client script block is registered; otherwise, false.</para>
        </returns>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script block to search for.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.</para>
          <para>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the Page type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the client script block is registered; otherwise, false.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the client script block to search for.  </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script block to search for. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" /> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.</para>
          <para>A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. </para>
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered" /> method calls the overload that takes both a <paramref name="key" /> and a <paramref name="type" /> parameter with the type set as a <see cref="T:System.Web.UI.Page" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the client script include is registered; otherwise, false.</para>
        </returns>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script include to search for. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" /> method to avoid registering duplicate client script includes. This is particularly important if the script requires a large amount of server resources to create.</para>
          <para>A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the Page type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the client script include is registered; otherwise, false.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the client script include to search for. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script include to search for. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" /> method to avoid registering duplicate OnSubmit statements. This is particularly important if the statement requires a large amount of server resources to create.</para>
          <para>A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. </para>
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" /> method calls the overload that takes both a <paramref name="key" /> and a <paramref name="type" /> parameter with the type set as a <see cref="T:System.Web.UI.Page" /> object</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the OnSubmit statement is registered; otherwise, false.</para>
        </returns>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the OnSubmit statement to search for.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" /> method to avoid registering duplicate statements. This is particularly important if the statement requires a large amount of server resources to create.</para>
          <para>A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the Page type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the OnSubmit statement is registered; otherwise, false.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the OnSubmit statement to search for. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the OnSubmit statement to search for. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.</para>
          <para>A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.</para>
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered" /> method calls the overload that takes both a string <paramref name="key" /> and a <paramref name="type" /> parameter with the type set as a <see cref="T:System.Web.UI.Page" /> object </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the startup script is registered; otherwise, false.</para>
        </returns>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the startup script to search for.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Call this method before calling the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.</para>
          <para>A client startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the startup script is registered; otherwise, false.</para>
        </returns>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the startup script to search for. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the startup script to search for.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" /> checks to see whether a registered array exists with the same name as the name specified in the <paramref name="arrayName" /> parameter and, if so, adds the values specified in the <paramref name="arrayValue" /> parameter. Because the underlying storage mechanism is based on an <see cref="T:System.Collections.ArrayList" />, duplicates are allowed. If a registered array with the same name as the <paramref name="arrayName" /> parameter does not exist, it is created and the values in the <paramref name="arrayValue" /> parameter added to it.</para>
          <para>If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\") in the <paramref name="arrayValue" /> parameter. The value of the <paramref name="arrayValue" /> parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers a JavaScript array declaration with the <see cref="T:System.Web.UI.Page" /> object using an array name and array value.</para>
        </summary>
        <param name="arrayName">
          <attribution license="cc4" from="Microsoft" modified="false" />The array name to register.</param>
        <param name="arrayValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The array value or values to register.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.</para>
          <para>Call the <see cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered" /> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</para>
          <para>In this overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method, you must make sure that the script provided in the <paramref name="script" /> parameter is wrapped in a &lt;script&gt; element block.</para>
          <para>The <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <see cref="T:System.Text.StringBuilder" /> object to gather the scripts together in a single string, and then register them all in a single client script block.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, and script literal.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the client script to register. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script to register. </param>
        <param name="script">
          <attribution license="cc4" from="Microsoft" modified="false" />The client script literal to register. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.</para>
          <para>Call the <see cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered" /> method to determine whether a client script with a given key and type pair is already registered. This lets you avoid unnecessarily attempting to add the script.</para>
          <para>In this overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method, you can indicate whether the script provided in the <paramref name="script" /> parameter is wrapped with a &lt;script&gt; element block by using the <paramref name="addScriptTags" /> parameter. Setting <paramref name="addScriptTags" /> to true indicates that script tags will be added automatically.</para>
          <para>The <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" /> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <see cref="T:System.Text.StringBuilder" /> object to gather the scripts together in a single string, and then register them all in a single client script block.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the client script to register. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script to register. </param>
        <param name="script">
          <attribution license="cc4" from="Microsoft" modified="false" />The client script literal to register.  </param>
        <param name="addScriptTags">
          <attribution license="cc4" from="Microsoft" modified="false" />A Boolean value indicating whether to add script tags.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.</para>
          <para>Call the <see cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" /> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</para>
          <block subset="none" type="note">
            <para>To resolve the client URL, use the <see cref="M:System.Web.UI.Control.ResolveClientUrl(System.String)" /> method. This method uses the context of the URL on which it is called to resolve the path.</para>
          </block>
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" /> method calls the overload that takes a <paramref name="key" />, a <paramref name="URL" />, and a <paramref name="type" /> parameter.</para>
          <para>The method adds a script block at the top of the rendered page.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a key and a URL, which enables the script to be called from the client.</para>
        </summary>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script include to register. </param>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL of the client script include to register. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" /> method takes key and url parameters to identify the script, as well as a <paramref name="type" /> parameter to specify the identification of the client script include. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the Page type.</para>
          <block subset="none" type="note">
            <para>To resolve the client URL, use the <see cref="M:System.Web.UI.Control.ResolveClientUrl(System.String)" /> method. This method uses the context of the URL on which it is called to resolve the path.</para>
          </block>
          <para>This method adds a script block at the top of the rendered page.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a URL.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the client script include to register. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the client script include to register. </param>
        <param name="url">
          <attribution license="cc4" from="Microsoft" modified="false" />The URL of the client script include to register. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" /> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler. The <see cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" /> method registers the script with the <see cref="T:System.Web.UI.Page" /> object and prevents duplicate scripts. This method wraps the contents of the resource URL with a &lt;script&gt; element block.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the client script resource with the <see cref="T:System.Web.UI.Page" /> object using a type and a resource name.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the client script resource to register. </param>
        <param name="resourceName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the client script resource to register. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" /> method registers a name/value pair as a custom (expando) attribute on the specified <see cref="T:System.Web.UI.Control" />. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup. Quotes and backslashes in the custom (expando) attribute's values are escaped. If you do not want to escape quotes and backslashes, call the <see cref="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" /> overload method and set the <paramref name="encode" /> parameter to false. </para>
          <para>If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</para>
        </summary>
        <param name="controlId">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute. </param>
        <param name="attributeName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the custom attribute to register. </param>
        <param name="attributeValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the custom attribute. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" /> method registers a name/value pair as a custom (expando) attribute on the specified <see cref="T:System.Web.UI.Control" />. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup. Set the <paramref name="encode" /> parameter to true if you need to escape quotes and backslashes in your expando attribute's value.</para>
          <para>If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</para>
        </summary>
        <param name="controlId">
          <attribution license="cc4" from="Microsoft" modified="false" />The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</param>
        <param name="attributeName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the custom attribute to register.</param>
        <param name="attributeValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The value of the custom attribute.</param>
        <param name="encode">
          <attribution license="cc4" from="Microsoft" modified="false" />A Boolean value indicating whether to encode the custom attribute to register.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information and examples, see the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers an event reference for validation with a unique control ID representing the client control generating the event.</para>
        </summary>
        <param name="uniqueId">
          <attribution license="cc4" from="Microsoft" modified="false" />A unique ID representing the client control generating the event.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For more information and examples, see the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers an event reference for validation with <see cref="T:System.Web.UI.PostBackOptions" />.</para>
        </summary>
        <param name="options">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Web.UI.PostBackOptions" /> object that specifies how client JavaScript is generated to initiate a postback event.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</para>
        </summary>
        <param name="uniqueId">
          <attribution license="cc4" from="Microsoft" modified="false" />A unique ID representing the client control generating the event.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />Event arguments passed with the client event.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" /> method creates a hidden &lt;input&gt; element on the rendered HTML page.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers a hidden value with the <see cref="T:System.Web.UI.Page" /> object.</para>
        </summary>
        <param name="hiddenFieldName">
          <attribution license="cc4" from="Microsoft" modified="false" />The name of the hidden field to register.</param>
        <param name="hiddenFieldInitialValue">
          <attribution license="cc4" from="Microsoft" modified="false" />The initial value of the field to register.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OnSubmit statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. Only one statement with a given type and key pair can be registered with the page. Attempting to register a statement that is already registered will not create a duplicate of the statement.</para>
          <para>Call the <see cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" /> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</para>
          <para>The <paramref name="script" /> parameter of the <see cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" /> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</para>
          <para>The <see cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" /> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</para>
          <para>For more information on HTML forms and the OnSubmit attribute, see the <see cref="http://go.microsoft.com/fwlink/?linkid=37125">World Wide Web Consortium (W3C) Web site</see>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers an OnSubmit statement with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal. The statement executes when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> is submitted.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the OnSubmit statement to register. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the OnSubmit statement to register. </param>
        <param name="script">
          <attribution license="cc4" from="Microsoft" modified="false" />The script literal of the OnSubmit statement to register. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.</para>
          <para>Call the <see cref="Overload:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered" /> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</para>
          <para>In this overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method, you must make sure that the script provided in the <paramref name="script" /> parameter is wrapped with a &lt;script&gt; element block.</para>
          <para>The script block added by the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method executes when the page finishes loading but before the page's <see cref="M:System.Web.UI.Control.OnLoad(System.EventArgs)" /> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <see cref="T:System.Text.StringBuilder" /> object to gather the scripts together in a single string, and then register them all in a single client script block.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the startup script to register. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the startup script to register. </param>
        <param name="script">
          <attribution license="cc4" from="Microsoft" modified="false" />The startup script literal to register. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.</para>
          <para>Call the <see cref="Overload:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered" /> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</para>
          <para>In this overload of the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method, you can indicate whether the script provided in the <paramref name="script" /> parameter is wrapped with a &lt;script&gt; element block by using the <paramref name="addScriptTags" /> parameter. Setting <paramref name="addScriptTags" /> to true indicates that script tags will be added automatically.</para>
          <para>The script block added by the <see cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" /> method executes when the page finishes loading but before the page's <see cref="M:System.Web.UI.Control.OnLoad(System.EventArgs)" /> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <see cref="T:System.Text.StringBuilder" /> object to gather the scripts together in a single string, and then register them all in a single client script block.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</para>
        </summary>
        <param name="type">
          <attribution license="cc4" from="Microsoft" modified="false" />The type of the startup script to register. </param>
        <param name="key">
          <attribution license="cc4" from="Microsoft" modified="false" />The key of the startup script to register. </param>
        <param name="script">
          <attribution license="cc4" from="Microsoft" modified="false" />The startup script literal to register. </param>
        <param name="addScriptTags">
          <attribution license="cc4" from="Microsoft" modified="false" />A Boolean value indicating whether to add script tags. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> method.</para>
        </summary>
        <param name="uniqueId">
          <attribution license="cc4" from="Microsoft" modified="false" />A unique ID representing the client control generating the event.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <since version=".NET 2.0" />
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</para>
        </summary>
        <param name="uniqueId">
          <attribution license="cc4" from="Microsoft" modified="false" />A unique ID representing the client control generating the event.</param>
        <param name="argument">
          <attribution license="cc4" from="Microsoft" modified="false" />The event arguments passed with the client event.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>