<?xml version="1.0" encoding="utf-8"?>
<Type Name="BuildProvider" FullName="System.Web.Compilation.BuildProvider">
  <TypeSignature Language="C#" Value="public abstract class BuildProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <since version=".NET 2.0" />
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The ASP.NET build environment uses <see cref="T:System.Web.Compilation.BuildProvider" /> objects to generate source code for different file types within an application. Classes derived from <see cref="T:System.Web.Compilation.BuildProvider" /> predominantly provide source code for files, Web pages, resources, and other custom items.</para>
      <para>Typically, you do not create an instance of the <see cref="T:System.Web.Compilation.BuildProvider" /> class directly. Instead, you implement a class that derives from <see cref="T:System.Web.Compilation.BuildProvider" />, and configure the <see cref="T:System.Web.Compilation.BuildProvider" /> implementation for use within the ASP.NET build environment.</para>
      <para>Instances of the <see cref="T:System.Web.Compilation.BuildProvider" /> class are used with <see cref="T:System.Web.Compilation.AssemblyBuilder" /> objects to build one or more files into a compiled assembly. A <see cref="T:System.Web.Compilation.BuildProvider" /> instance generates source code in the appropriate language for individual files, and the <see cref="T:System.Web.Compilation.AssemblyBuilder" /> object combines the source contributed by each <see cref="T:System.Web.Compilation.BuildProvider" /> instance into a single assembly.</para>
      <para>The ASP.NET build environment uses instances of the <see cref="T:System.Web.Compilation.BuildProvider" /> class to build files within an application. The <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> property of the <see cref="T:System.Web.Compilation.BuildProvider" /> class indicates the path of the file to be built. The file extension of each file within an application is mapped to a corresponding build provider. The ASP.NET build environment initializes a <see cref="T:System.Web.Compilation.BuildProvider" /> instance for each file based on the file extension, and uses the <see cref="T:System.Web.Compilation.BuildProvider" /> methods to generate source code for the file. The ASP.NET build environment passes an <see cref="T:System.Web.Compilation.AssemblyBuilder" /> object based on the preferred compiler language and the context of the file to the <see cref="T:System.Web.Compilation.BuildProvider" /> methods when building an assembly from one or more files, so that the <see cref="T:System.Web.Compilation.BuildProvider" /> instance can contribute source code for its file to the overall assembly.</para>
      <para>To define custom build actions for a file type within an ASP.NET application, you must derive a class from <see cref="T:System.Web.Compilation.BuildProvider" />, implement members within the derived class for building the file type, and configure the build provider for the corresponding file extension within the application configuration file. </para>
      <para>The <format type="text/html"><a href="35f1076f-7823-42ae-a585-2bf19cd60582">add element</a></format> specifies the file extension for supported files, and whether the build provider supports code files, Web files, resource files or all files. Use the type attribute to specify the fully qualified type name of the build provider implementation. Use the <see cref="T:System.Web.Compilation.BuildProviderAppliesToAttribute" /> class to specify whether the build provider applies to files in the App_Code directory, to files in a Web content directory, to global or local resources, or to all files. Use the extension attribute to specify the file extension used to identify files that the <see cref="T:System.Web.Compilation.BuildProvider" /> class supports. Use the <see cref="T:System.Web.Configuration.BuildProviderCollection" /> class to examine build providers in a configuration file. For more information about configuring a build provider, see <format type="text/html"><a href="40fa889d-5412-487a-b6a9-21eb011c2384">buildproviders Element for compilation (ASP.NET Settings Schema)</a></format>.</para>
      <para>To implement a build provider that generates source code for a custom file type, derive a class from <see cref="T:System.Web.Compilation.BuildProvider" />, and override the <see cref="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" /> method to generate source code for the supported file type. The generated source is added to the <see cref="T:System.Web.Compilation.AssemblyBuilder" /> object in the form of a CodeDOM graph, or as content that represents a physical source code file. If the build provider requires a specific programming language, override the <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property to return a <see cref="T:System.Web.Compilation.CompilerType" /> object for the supported programming language. If the build provider does not require a specific programming language, do not override the <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property; use the base class implementation, which indicates that the build provider can use any .NET Framework language, such as Visual Basic or C#.</para>
      <para>To implement a build provider that generates source code for Web content, derive a class from <see cref="T:System.Web.Compilation.BuildProvider" /> and override the <see cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" /> method to return the <see cref="T:System.Type" /> for the class generated by <see cref="T:System.Web.Compilation.BuildProvider" />. Override the <see cref="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" /> method to generate source code for the type provided by the supported file.</para>
      <block subset="none" type="note">
        <para>Adding a customized <see cref="T:System.Web.Compilation.BuildProvider" /> class to the Web.config file works in an ASP.NET Web site but does not work in an ASP.NET Web application project. In a Web application project, the code that is generated by the <see cref="T:System.Web.Compilation.BuildProvider" /> class cannot be included in the application. For more information, see <format type="text/html"><a href="b940abbd-178d-4570-b441-52914fa7b887">Compiling Web Application Projects</a></format>.</para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is abstract.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BuildProvider ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Because the <see cref="T:System.Web.Compilation.BuildProvider" /> class is abstract, you cannot create an instance of <see cref="T:System.Web.Compilation.BuildProvider" /> directly using the constructor.</para>
          <para>When deriving from the <see cref="T:System.Web.Compilation.BuildProvider" /> class, override the constructor to implement custom initialization actions for your build provider implementation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Web.Compilation.BuildProvider" /> class. </para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CodeCompilerType">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.CompilerType CodeCompilerType { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property to provide the settings for compiling source code for an implementation of <see cref="T:System.Web.Compilation.BuildProvider" />. The <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property is null if the build provider does not require a specific code language for generating and compiling source code.</para>
          <para>To set the value for a <see cref="T:System.Web.Compilation.CompilerType" /> object within a build provider implementation, use the <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" /> or <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" /> method.</para>
          <para>The <see cref="P:System.Web.Compilation.CompilerType.CodeDomProviderType" /> property specifies the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation that is used to generate and compile source code for a build provider. The <see cref="P:System.Web.Compilation.CompilerType.CompilerParameters" /> property defines the settings that are used to compile the source code into an assembly.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the compiler type used by a build provider to generate source code for a custom file type.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GenerateCode">
      <MemberSignature Language="C#" Value="public virtual void GenerateCode (System.Web.Compilation.AssemblyBuilder assemblyBuilder);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyBuilder" Type="System.Web.Compilation.AssemblyBuilder" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To implement a build provider that generates source code for a custom file type, derive a class from the <see cref="T:System.Web.Compilation.BuildProvider" /> class, and override the <see cref="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" /> method to generate source code for the supported file type. </para>
          <para>Typically, a build provider's <see cref="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" /> implementation reads the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> property, parses the contents, and adds the generated source code to the specified <see cref="T:System.Web.Compilation.AssemblyBuilder" /> object. You can contribute source code to the assembly in the form of a <see cref="T:System.IO.TextWriter" /> object or a CodeDOM graph. To add source code to the assembly through a <see cref="T:System.IO.TextWriter" /> object, use the <see cref="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" /> method. To add source code in a CodeDOM graph to the assembly, use the <see cref="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" /> method.</para>
          <para>If the build provider generates source code in a specific programming language, you must override the <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property to return a <see cref="T:System.Web.Compilation.CompilerType" /> object for the supported programming language.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.</para>
        </summary>
        <param name="assemblyBuilder">
          <attribution license="cc4" from="Microsoft" modified="false" />The assembly builder that references the source code generated by the build provider.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetCustomString">
      <MemberSignature Language="C#" Value="public virtual string GetCustomString (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.Compilation.BuildManager.GetCompiledCustomString(System.String)" /> method of a <see cref="T:System.Web.Compilation.BuildManager" /> object creates an instance of a build provider for an input virtual path, and calls the <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> method on the <see cref="T:System.Web.Compilation.BuildProvider" /> object.</para>
          <para>The base <see cref="T:System.Web.Compilation.BuildProvider" /> class returns null for the <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> method, indicating that <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> is not implemented.</para>
          <para>Certain build provider implementations can implement <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> in place of the <see cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" /> method. A <see cref="T:System.Web.Compilation.BuildProvider" /> object typically uses <see cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" /> to return a <see cref="T:System.Type" /> object for a virtual path. However, the <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> method can be used to indicate that a <see cref="T:System.Web.Compilation.BuildProvider" /> object can generate multiple types from a virtual path.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Generates a string to be persisted in the compiled assembly.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A string to be persisted in the build environment, or null if the <see cref="T:System.Web.Compilation.BuildProvider" /> instance does not implement <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />.</para>
        </returns>
        <param name="results">
          <attribution license="cc4" from="Microsoft" modified="false" />The compilation results for the build provider's virtual path.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetDefaultCompilerType">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerType ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" /> method to examine the default compiler type for a build provider. Use the <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" /> method to examine the compiler type configured in a build provider for a specific language name.</para>
          <para>The base <see cref="T:System.Web.Compilation.BuildProvider" /> class determines the default compiler type using the defaultLanguage attribute value in the <format type="text/html"><a href="7c319582-074a-4d2a-a787-03b9d4541c12">compilation</a></format> section of the application configuration file. If there is no default language setting in the compilation section, the default compiler type is set using the <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> language provider.</para>
          <para>When deriving from the <see cref="T:System.Web.Compilation.BuildProvider" /> class, you can use <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" /> to set the <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property within your implementation. </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the compiler settings for the default language in the application.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.Compilation.CompilerType" /> that represents the compiler settings for the default language in the application. The base class returns the default compiler based on the application configuration file.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetDefaultCompilerTypeForLanguage">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage (string language);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" /> method to examine the compiler type configured in the build provider for a specific language name. Use the <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" /> method to examine the default compiler type for a build provider.</para>
          <para>The base <see cref="T:System.Web.Compilation.BuildProvider" /> class determines the default compiler type using the <see cref="T:System.Web.Configuration.Compiler" /> elements in the <see cref="P:System.Web.Configuration.CompilationSection.Compilers" /> property of the <see cref="T:System.Web.Configuration.CompilationSection" /> object for the configuration file. This is equivalent to examining the <format type="text/html"><a href="f7d6b078-5d42-4134-b3f7-62e1aba1df1e">compiler</a></format> elements in the <format type="text/html"><a href="a7589d5e-8dce-4951-a876-b1276c02b60b">system.web</a></format> and the <format type="text/html"><a href="7a151659-b803-4c27-b5ce-1c4aa0d5a823">compiler</a></format> elements in the <format type="text/html"><a href="672a68f7-e69f-4479-ac30-e980085ec4fe">system.codedom</a></format> sections of the configuration file. For example, for the <paramref name="language" /> value VB, the base class method returns a <see cref="T:System.Web.Compilation.CompilerType" /> object that corresponds to the configured settings for an instance of <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</para>
          <para>When you derive from the <see cref="T:System.Web.Compilation.BuildProvider" /> class, you can use <see cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" /> to set the <see cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" /> property value for the language supported by your implementation.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the compiler settings for the build provider based on the specified language.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.Compilation.CompilerType" /> that represents the compiler settings for the build provider based on the specified language. The base class returns the default compiler settings for the language based on the application configuration file.</para>
        </returns>
        <param name="language">
          <attribution license="cc4" from="Microsoft" modified="false" />A code language name.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetGeneratedType">
      <MemberSignature Language="C#" Value="public virtual Type GetGeneratedType (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>To implement a build provider that generates source code for Web content such as .aspx files, derive a class from the <see cref="T:System.Web.Compilation.BuildProvider" /> class and override the <see cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" /> method to return the type generated by the build provider. </para>
          <para>The ASP.NET build system compiles files for each build provider, and generates a <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object, which is passed to the <see cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" /> method. Typically, a build provider's <see cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" /> implementation uses the <see cref="Overload:System.Reflection.Assembly.GetType" /> method on the <see cref="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly" /> property of the input <paramref name="results" /> object to return the provided type.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a type generated by the build provider from the virtual path.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The type that is generated by the build provider for the virtual path. The base class returns null.</para>
        </returns>
        <param name="results">
          <attribution license="cc4" from="Microsoft" modified="false" />The compilation results for the build provider's virtual path.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetResultFlags">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.BuildProviderResultFlags GetResultFlags (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.BuildProviderResultFlags</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)" /> method is used by the ASP.NET build environment when using instances of the <see cref="T:System.Web.Compilation.BuildProvider" /> class to build files and load the compiled assemblies.</para>
          <para>The base <see cref="T:System.Web.Compilation.BuildProvider" /> class method returns the <see cref="F:System.Web.Compilation.BuildProviderResultFlags.Default" /> field value, indicating that no special action is required when the virtual path is built.</para>
          <para>When deriving from the <see cref="T:System.Web.Compilation.BuildProvider" /> class, you can implement the <see cref="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)" /> method to return a different <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> value for your custom file type or virtual path. For example, if a rebuild of your virtual path requires the containing <see cref="T:System.AppDomain" /> object to be reloaded, you can return the <see cref="F:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange" /> enumeration value from your <see cref="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a value indicating actions required when a virtual path is built.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> value indicating actions required after the virtual path is built within the ASP.NET build environment.</para>
        </returns>
        <param name="results">
          <attribution license="cc4" from="Microsoft" modified="false" />The compilation results for the build provider's virtual path.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="Overload:System.IO.TextReader.Read" /> method on the returned <see cref="T:System.IO.TextReader" /> object to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> property for a <see cref="T:System.Web.Compilation.BuildProvider" /> object.</para>
          <para>After calling the <see cref="M:System.Web.Compilation.BuildProvider.OpenReader" /> method, you must use the <see cref="M:System.IO.TextReader.Close" /> method to close the <see cref="T:System.IO.TextReader" /> object and free associated system resources.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Opens a text reader for reading from the virtual path of the current build provider object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An open <see cref="T:System.IO.TextReader" /> that can be used to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader (string virtualPath);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="Overload:System.IO.TextReader.Read" /> method on the returned <see cref="T:System.IO.TextReader" /> object to read the contents of the virtual path. </para>
          <para>After calling the <see cref="M:System.Web.Compilation.BuildProvider.OpenReader" /> method, you must use the <see cref="M:System.IO.TextReader.Close" /> method to close the <see cref="T:System.IO.TextReader" /> object and free associated system resources.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Opens a text reader for reading from a specified virtual path.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An open <see cref="T:System.IO.TextReader" /> that can be used to read the contents of the specified virtual path.</para>
        </returns>
        <param name="virtualPath">
          <attribution license="cc4" from="Microsoft" modified="false" />The virtual path to read.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> method on the returned <see cref="T:System.IO.Stream" /> object to read the contents of the virtual path for the <see cref="T:System.Web.Compilation.BuildProvider" /> object. </para>
          <para>After calling the <see cref="M:System.Web.Compilation.BuildProvider.OpenStream" /> method, you must use the <see cref="M:System.IO.Stream.Close" /> method to close the <see cref="T:System.IO.Stream" /> object and free associated system resources.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Opens a stream for reading the virtual path of the current build provider object.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An open <see cref="T:System.IO.Stream" /> that can be used to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream (string virtualPath);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Use the <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> method on the returned <see cref="T:System.IO.Stream" /> object to read the contents of the virtual path. </para>
          <para>After calling the <see cref="M:System.Web.Compilation.BuildProvider.OpenStream" /> method, you must use the <see cref="M:System.IO.Stream.Close" /> method to close the <see cref="T:System.IO.Stream" /> object and free associated system resources.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Opens a stream for reading from a specified virtual path.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An open <see cref="T:System.IO.Stream" /> that can be used to read the contents of the specified virtual path.</para>
        </returns>
        <param name="virtualPath">
          <attribution license="cc4" from="Microsoft" modified="false" />The virtual path to read.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="protected System.Collections.ICollection ReferencedAssemblies { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The ASP.NET build environment initializes the collection of assemblies that are available for reference by the build provider. The source code generated by a build provider can use public types in the referenced assemblies. The referenced assembly collection consists of other assemblies built in the ASP.NET application, and assemblies listed in the <format type="text/html"><a href="3811c448-af1c-498d-be2b-6ed2634c51e9">assemblies</a></format> element in the configuration file. </para>
          <para>If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the <see cref="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" /> method. The ASP.NET build environment resolves external types during assembly compilation using both the referenced assemblies added by build providers and the default collection of assemblies available for reference.</para>
          <para>The <see cref="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" /> collection does not include assemblies that are added for reference by other build providers through the <see cref="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" /> method.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the assemblies to compile with the source generated by the build provider.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="protected string VirtualPath { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The virtual path of a <see cref="T:System.Web.Compilation.BuildProvider" /> object is the path to the file that is being compiled by the build provider. For example, if you have configured a custom <see cref="T:System.Web.Compilation.BuildProvider" /> class to build all files in the Web site with the custom extension of .abc, if your Web site is named WebSite1, and the Web site contains a file named Example.abc, the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> property contains the value /WebSite1/Example.abc.</para>
          <para>The file extension of each file within the application determines the file type, and the corresponding build provider for the file type. The ASP.NET build environment initializes a <see cref="T:System.Web.Compilation.BuildProvider" /> object for each file based on the file type, and uses the <see cref="T:System.Web.Compilation.BuildProvider" /> methods to generate source for each file.</para>
          <para>For more information about configuring a build provider, see <format type="text/html"><a href="40fa889d-5412-487a-b6a9-21eb011c2384">buildproviders Element for compilation (ASP.NET Settings Schema)</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents the file to be built by this build provider implementation.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="VirtualPathDependencies">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection VirtualPathDependencies { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <since version=".NET 2.0" />
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" /> property is a collection of virtual paths that must be compiled before the <see cref="T:System.Web.Compilation.BuildProvider" /> instance generates source code. The assemblies from the virtual paths in <see cref="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" /> are added as references to the compilation for the <see cref="T:System.Web.Compilation.BuildProvider" /> instance.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Represents a collection of virtual paths that must be built before the build provider generates code.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>