
// THIS IS AUTOGENERATED DO NOT EDIT
//
// Generated on Microsoft .NET runtime v4.0.30319.42000
//
// Authors:
//    Ben Maurer (bmaurer@novell.com)
//
// Copyright (C) 2005-2010 Novell, Inc (http://www.novell.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using NUnit.Framework;
using MonoTests.Helpers;

namespace MonoTests.System.Web.UI.WebControls {
[TestFixture]
[SetCulture ("en-us")]
public class RepeatInfo_Autogen {

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td colspan=""0"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#0");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(4,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#2");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""10"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""10"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#3");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#4");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#5");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#6");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(14,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#7");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td class=""Separator6"">(14,Separator,6)</td><td class=""Item7"">(15,Item,7)</td><td class=""Separator7"">(16,Separator,7)</td><td class=""Item8"">(17,Item,8)</td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(18,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#8");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(14,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#9");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#10");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#11");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#12");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)(10,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#13");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#14");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)(10,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#15");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,2)(4,Separator,2)(5,Item,1)(6,Separator,1)(7,Item,3)(8,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#16");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,4)(4,Separator,4)(5,Item,1)(6,Separator,1)(7,Item,5)(8,Separator,5)(9,Item,2)(10,Separator,2)(11,Item,6)(12,Item,3)(13,Separator,3)(14,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#17");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,6)(6,Separator,6)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,7)(12,Separator,7)(13,Item,2)(14,Separator,2)(15,Item,5)(16,Separator,5)(17,Item,8)(18,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#18");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,5)(6,Separator,5)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,6)(12,Item,2)(13,Separator,2)(14,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#19");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#20");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#21");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#22");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#23");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#24");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)<br />(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)<br />(9,Item,4)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#25");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#26");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)<br />(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br />(14,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#27");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)(14,Separator,6)(15,Item,7)(16,Separator,7)(17,Item,8)<br />(18,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#28");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br />(14,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#29");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#30");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#31");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#32");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)(10,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#33");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#34");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)(10,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#35");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,2)(4,Separator,2)(5,Item,1)(6,Separator,1)(7,Item,3)(8,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#36");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,4)(4,Separator,4)(5,Item,1)(6,Separator,1)(7,Item,5)(8,Separator,5)(9,Item,2)(10,Separator,2)(11,Item,6)(12,Item,3)(13,Separator,3)(14,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#37");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,6)(6,Separator,6)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,7)(12,Separator,7)(13,Item,2)(14,Separator,2)(15,Item,5)(16,Separator,5)(17,Item,8)(18,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#38");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,5)(6,Separator,5)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,6)(12,Item,2)(13,Separator,2)(14,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#39");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td colspan=""0"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#80");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#81");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(4,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#82");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""10"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""10"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#83");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#84");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#85");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#86");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(14,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#87");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td class=""Separator6"">(14,Separator,6)</td><td class=""Item7"">(15,Item,7)</td><td class=""Separator7"">(16,Separator,7)</td><td class=""Item8"">(17,Item,8)</td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(18,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#88");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(14,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#89");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#90");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#91");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td>
	</tr><tr>
		<td class=""Footer-1"">(4,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#92");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#93");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#94");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#95");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item2"">(3,Item,2)</td><td class=""Separator2"">(4,Separator,2)</td>
	</tr><tr>
		<td class=""Item1"">(5,Item,1)</td><td class=""Separator1"">(6,Separator,1)</td><td class=""Item3"">(7,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#96");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item4"">(3,Item,4)</td><td class=""Separator4"">(4,Separator,4)</td>
	</tr><tr>
		<td class=""Item1"">(5,Item,1)</td><td class=""Separator1"">(6,Separator,1)</td><td class=""Item5"">(7,Item,5)</td><td class=""Separator5"">(8,Separator,5)</td>
	</tr><tr>
		<td class=""Item2"">(9,Item,2)</td><td class=""Separator2"">(10,Separator,2)</td><td class=""Item6"">(11,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item3"">(12,Item,3)</td><td class=""Separator3"">(13,Separator,3)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(14,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#97");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item3"">(3,Item,3)</td><td class=""Separator3"">(4,Separator,3)</td><td class=""Item6"">(5,Item,6)</td><td class=""Separator6"">(6,Separator,6)</td>
	</tr><tr>
		<td class=""Item1"">(7,Item,1)</td><td class=""Separator1"">(8,Separator,1)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item7"">(11,Item,7)</td><td class=""Separator7"">(12,Separator,7)</td>
	</tr><tr>
		<td class=""Item2"">(13,Item,2)</td><td class=""Separator2"">(14,Separator,2)</td><td class=""Item5"">(15,Item,5)</td><td class=""Separator5"">(16,Separator,5)</td><td class=""Item8"">(17,Item,8)</td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(18,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#98");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item3"">(3,Item,3)</td><td class=""Separator3"">(4,Separator,3)</td><td class=""Item5"">(5,Item,5)</td><td class=""Separator5"">(6,Separator,5)</td>
	</tr><tr>
		<td class=""Item1"">(7,Item,1)</td><td class=""Separator1"">(8,Separator,1)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item6"">(11,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item2"">(12,Item,2)</td><td class=""Separator2"">(13,Separator,2)</td><td></td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(14,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#99");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#100");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#101");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#102");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#103");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#104");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)<br />(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)<br />(9,Item,4)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#105");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#106");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)<br />(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br />(14,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#107");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)(14,Separator,6)(15,Item,7)(16,Separator,7)(17,Item,8)<br />(18,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#108");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br />(14,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#109");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#110");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#111");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Separator,0)<br />(3,Item,1)<br />(4,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#112");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Separator,0)<br />(3,Item,1)<br />(4,Separator,1)<br />(5,Item,2)<br />(6,Separator,2)<br />(7,Item,3)<br />(8,Separator,3)<br />(9,Item,4)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#113");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#114");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Separator,0)<br />(3,Item,1)<br />(4,Separator,1)<br />(5,Item,2)<br />(6,Separator,2)<br />(7,Item,3)<br />(8,Separator,3)<br />(9,Item,4)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#115");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,2)(4,Separator,2)<br />(5,Item,1)(6,Separator,1)(7,Item,3)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#116");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,4)(4,Separator,4)<br />(5,Item,1)(6,Separator,1)(7,Item,5)(8,Separator,5)<br />(9,Item,2)(10,Separator,2)(11,Item,6)<br />(12,Item,3)(13,Separator,3)<br />(14,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#117");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,6)(6,Separator,6)<br />(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,7)(12,Separator,7)<br />(13,Item,2)(14,Separator,2)(15,Item,5)(16,Separator,5)(17,Item,8)<br />(18,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#118");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,5)(6,Separator,5)<br />(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,6)<br />(12,Item,2)(13,Separator,2)<br />(14,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#119");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_hdr_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#160");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#161");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(3,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#162");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""10"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#163");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#164");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#165");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#166");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(13,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#167");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td class=""Separator6"">(13,Separator,6)</td><td class=""Item7"">(14,Item,7)</td><td class=""Separator7"">(15,Separator,7)</td><td class=""Item8"">(16,Item,8)</td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(17,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#168");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(13,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#169");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#170");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#171");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#172");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)(9,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#173");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#174");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)(9,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#175");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,2)(3,Separator,2)(4,Item,1)(5,Separator,1)(6,Item,3)(7,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#176");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,4)(3,Separator,4)(4,Item,1)(5,Separator,1)(6,Item,5)(7,Separator,5)(8,Item,2)(9,Separator,2)(10,Item,6)(11,Item,3)(12,Separator,3)(13,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#177");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,6)(5,Separator,6)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,7)(11,Separator,7)(12,Item,2)(13,Separator,2)(14,Item,5)(15,Separator,5)(16,Item,8)(17,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#178");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,5)(5,Separator,5)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,6)(11,Item,2)(12,Separator,2)(13,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#179");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#180");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#181");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#182");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#183");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#184");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)<br />(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)<br />(8,Item,4)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#185");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#186");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)<br />(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br />(13,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#187");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)(13,Separator,6)(14,Item,7)(15,Separator,7)(16,Item,8)<br />(17,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#188");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br />(13,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#189");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#190");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#191");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#192");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)(9,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#193");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#194");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)(9,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#195");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,2)(3,Separator,2)(4,Item,1)(5,Separator,1)(6,Item,3)(7,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#196");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,4)(3,Separator,4)(4,Item,1)(5,Separator,1)(6,Item,5)(7,Separator,5)(8,Item,2)(9,Separator,2)(10,Item,6)(11,Item,3)(12,Separator,3)(13,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#197");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,6)(5,Separator,6)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,7)(11,Separator,7)(12,Item,2)(13,Separator,2)(14,Item,5)(15,Separator,5)(16,Item,8)(17,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#198");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,5)(5,Separator,5)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,6)(11,Item,2)(12,Separator,2)(13,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#199");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#240");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#241");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(3,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#242");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""10"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#243");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#244");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#245");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#246");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(13,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#247");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td class=""Separator6"">(13,Separator,6)</td><td class=""Item7"">(14,Item,7)</td><td class=""Separator7"">(15,Separator,7)</td><td class=""Item8"">(16,Item,8)</td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(17,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#248");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(13,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#249");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#250");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#251");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Footer-1"">(3,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#252");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#253");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#254");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#255");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item2"">(2,Item,2)</td><td class=""Separator2"">(3,Separator,2)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Separator1"">(5,Separator,1)</td><td class=""Item3"">(6,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#256");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item4"">(2,Item,4)</td><td class=""Separator4"">(3,Separator,4)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Separator1"">(5,Separator,1)</td><td class=""Item5"">(6,Item,5)</td><td class=""Separator5"">(7,Separator,5)</td>
	</tr><tr>
		<td class=""Item2"">(8,Item,2)</td><td class=""Separator2"">(9,Separator,2)</td><td class=""Item6"">(10,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item3"">(11,Item,3)</td><td class=""Separator3"">(12,Separator,3)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""4"" class=""Footer-1"">(13,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#257");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Separator3"">(3,Separator,3)</td><td class=""Item6"">(4,Item,6)</td><td class=""Separator6"">(5,Separator,6)</td>
	</tr><tr>
		<td class=""Item1"">(6,Item,1)</td><td class=""Separator1"">(7,Separator,1)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item7"">(10,Item,7)</td><td class=""Separator7"">(11,Separator,7)</td>
	</tr><tr>
		<td class=""Item2"">(12,Item,2)</td><td class=""Separator2"">(13,Separator,2)</td><td class=""Item5"">(14,Item,5)</td><td class=""Separator5"">(15,Separator,5)</td><td class=""Item8"">(16,Item,8)</td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(17,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#258");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Separator3"">(3,Separator,3)</td><td class=""Item5"">(4,Item,5)</td><td class=""Separator5"">(5,Separator,5)</td>
	</tr><tr>
		<td class=""Item1"">(6,Item,1)</td><td class=""Separator1"">(7,Separator,1)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item6"">(10,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item2"">(11,Item,2)</td><td class=""Separator2"">(12,Separator,2)</td><td></td><td></td><td></td><td></td>
	</tr><tr>
		<td colspan=""6"" class=""Footer-1"">(13,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#259");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#260");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#261");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#262");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#263");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#264");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)<br />(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)<br />(8,Item,4)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#265");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#266");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)<br />(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br />(13,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#267");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)(13,Separator,6)(14,Item,7)(15,Separator,7)(16,Item,8)<br />(17,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#268");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br />(13,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#269");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#270");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#271");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Separator,0)<br />(2,Item,1)<br />(3,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#272");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Separator,0)<br />(2,Item,1)<br />(3,Separator,1)<br />(4,Item,2)<br />(5,Separator,2)<br />(6,Item,3)<br />(7,Separator,3)<br />(8,Item,4)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#273");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#274");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Separator,0)<br />(2,Item,1)<br />(3,Separator,1)<br />(4,Item,2)<br />(5,Separator,2)<br />(6,Item,3)<br />(7,Separator,3)<br />(8,Item,4)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#275");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,2)(3,Separator,2)<br />(4,Item,1)(5,Separator,1)(6,Item,3)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#276");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,4)(3,Separator,4)<br />(4,Item,1)(5,Separator,1)(6,Item,5)(7,Separator,5)<br />(8,Item,2)(9,Separator,2)(10,Item,6)<br />(11,Item,3)(12,Separator,3)<br />(13,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#277");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,6)(5,Separator,6)<br />(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,7)(11,Separator,7)<br />(12,Item,2)(13,Separator,2)(14,Item,5)(15,Separator,5)(16,Item,8)<br />(17,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#278");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,5)(5,Separator,5)<br />(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,6)<br />(11,Item,2)(12,Separator,2)<br />(13,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#279");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_ftr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_ftr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_ftr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_ftr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#320");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#321");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#322");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""10"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#323");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#324");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#325");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#326");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#327");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td class=""Separator6"">(14,Separator,6)</td><td class=""Item7"">(15,Item,7)</td><td class=""Separator7"">(16,Separator,7)</td><td class=""Item8"">(17,Item,8)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#328");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#329");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#330");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#331");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#332");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#333");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#334");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#335");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,2)(4,Separator,2)(5,Item,1)(6,Separator,1)(7,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#336");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,4)(4,Separator,4)(5,Item,1)(6,Separator,1)(7,Item,5)(8,Separator,5)(9,Item,2)(10,Separator,2)(11,Item,6)(12,Item,3)(13,Separator,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#337");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,6)(6,Separator,6)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,7)(12,Separator,7)(13,Item,2)(14,Separator,2)(15,Item,5)(16,Separator,5)(17,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#338");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,5)(6,Separator,5)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,6)(12,Item,2)(13,Separator,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#339");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#340");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#341");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#342");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#343");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#344");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)<br />(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)<br />(9,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#345");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#346");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)<br />(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#347");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)(14,Separator,6)(15,Item,7)(16,Separator,7)(17,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#348");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#349");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#350");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#351");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#352");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#353");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#354");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#355");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,2)(4,Separator,2)(5,Item,1)(6,Separator,1)(7,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#356");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,4)(4,Separator,4)(5,Item,1)(6,Separator,1)(7,Item,5)(8,Separator,5)(9,Item,2)(10,Separator,2)(11,Item,6)(12,Item,3)(13,Separator,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#357");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,6)(6,Separator,6)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,7)(12,Separator,7)(13,Item,2)(14,Separator,2)(15,Item,5)(16,Separator,5)(17,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#358");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, true);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,5)(6,Separator,5)(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,6)(12,Item,2)(13,Separator,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#359");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#400");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#401");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#402");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""10"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#403");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#404");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#405");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#406");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td><td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#407");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td class=""Separator6"">(14,Separator,6)</td><td class=""Item7"">(15,Item,7)</td><td class=""Separator7"">(16,Separator,7)</td><td class=""Item8"">(17,Item,8)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#408");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item1"">(3,Item,1)</td><td class=""Separator1"">(4,Separator,1)</td><td class=""Item2"">(5,Item,2)</td><td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td class=""Separator3"">(8,Separator,3)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item5"">(11,Item,5)</td><td class=""Separator5"">(12,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(13,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#409");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#410");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#411");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#412");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#413");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#414");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(2,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(4,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(6,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(8,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(9,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#415");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item2"">(3,Item,2)</td><td class=""Separator2"">(4,Separator,2)</td>
	</tr><tr>
		<td class=""Item1"">(5,Item,1)</td><td class=""Separator1"">(6,Separator,1)</td><td class=""Item3"">(7,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#416");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""4"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item4"">(3,Item,4)</td><td class=""Separator4"">(4,Separator,4)</td>
	</tr><tr>
		<td class=""Item1"">(5,Item,1)</td><td class=""Separator1"">(6,Separator,1)</td><td class=""Item5"">(7,Item,5)</td><td class=""Separator5"">(8,Separator,5)</td>
	</tr><tr>
		<td class=""Item2"">(9,Item,2)</td><td class=""Separator2"">(10,Separator,2)</td><td class=""Item6"">(11,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item3"">(12,Item,3)</td><td class=""Separator3"">(13,Separator,3)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#417");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item3"">(3,Item,3)</td><td class=""Separator3"">(4,Separator,3)</td><td class=""Item6"">(5,Item,6)</td><td class=""Separator6"">(6,Separator,6)</td>
	</tr><tr>
		<td class=""Item1"">(7,Item,1)</td><td class=""Separator1"">(8,Separator,1)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item7"">(11,Item,7)</td><td class=""Separator7"">(12,Separator,7)</td>
	</tr><tr>
		<td class=""Item2"">(13,Item,2)</td><td class=""Separator2"">(14,Separator,2)</td><td class=""Item5"">(15,Item,5)</td><td class=""Separator5"">(16,Separator,5)</td><td class=""Item8"">(17,Item,8)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#418");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, true);
		string exp = @"<table>
	<tr>
		<td colspan=""6"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Separator0"">(2,Separator,0)</td><td class=""Item3"">(3,Item,3)</td><td class=""Separator3"">(4,Separator,3)</td><td class=""Item5"">(5,Item,5)</td><td class=""Separator5"">(6,Separator,5)</td>
	</tr><tr>
		<td class=""Item1"">(7,Item,1)</td><td class=""Separator1"">(8,Separator,1)</td><td class=""Item4"">(9,Item,4)</td><td class=""Separator4"">(10,Separator,4)</td><td class=""Item6"">(11,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item2"">(12,Item,2)</td><td class=""Separator2"">(13,Separator,2)</td><td></td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#419");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#420");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#421");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#422");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)(9,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#423");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#424");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)<br />(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)<br />(9,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#425");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#426");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)<br />(5,Item,2)(6,Separator,2)(7,Item,3)(8,Separator,3)<br />(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#427");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)(14,Separator,6)(15,Item,7)(16,Separator,7)(17,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#428");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,1)(4,Separator,1)(5,Item,2)(6,Separator,2)<br />(7,Item,3)(8,Separator,3)(9,Item,4)(10,Separator,4)(11,Item,5)(12,Separator,5)<br />(13,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#429");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#430");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#431");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Separator,0)<br />(3,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#432");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Separator,0)<br />(3,Item,1)<br />(4,Separator,1)<br />(5,Item,2)<br />(6,Separator,2)<br />(7,Item,3)<br />(8,Separator,3)<br />(9,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#433");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#434");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Separator,0)<br />(3,Item,1)<br />(4,Separator,1)<br />(5,Item,2)<br />(6,Separator,2)<br />(7,Item,3)<br />(8,Separator,3)<br />(9,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#435");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,2)(4,Separator,2)<br />(5,Item,1)(6,Separator,1)(7,Item,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#436");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,4)(4,Separator,4)<br />(5,Item,1)(6,Separator,1)(7,Item,5)(8,Separator,5)<br />(9,Item,2)(10,Separator,2)(11,Item,6)<br />(12,Item,3)(13,Separator,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#437");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,6)(6,Separator,6)<br />(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,7)(12,Separator,7)<br />(13,Item,2)(14,Separator,2)(15,Item,5)(16,Separator,5)(17,Item,8)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#438");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, true);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Separator,0)(3,Item,3)(4,Separator,3)(5,Item,5)(6,Separator,5)<br />(7,Item,1)(8,Separator,1)(9,Item,4)(10,Separator,4)(11,Item,6)<br />(12,Item,2)(13,Separator,2)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#439");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_hdr_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_hdr_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_hdr_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_hdr_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#480");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#481");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#482");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#483");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#484");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#485");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#486");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#487");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td class=""Separator6"">(13,Separator,6)</td><td class=""Item7"">(14,Item,7)</td><td class=""Separator7"">(15,Separator,7)</td><td class=""Item8"">(16,Item,8)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#488");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#489");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#490");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#491");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#492");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#493");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#494");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#495");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,2)(3,Separator,2)(4,Item,1)(5,Separator,1)(6,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#496");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,4)(3,Separator,4)(4,Item,1)(5,Separator,1)(6,Item,5)(7,Separator,5)(8,Item,2)(9,Separator,2)(10,Item,6)(11,Item,3)(12,Separator,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#497");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,6)(5,Separator,6)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,7)(11,Separator,7)(12,Item,2)(13,Separator,2)(14,Item,5)(15,Separator,5)(16,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#498");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,5)(5,Separator,5)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,6)(11,Item,2)(12,Separator,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#499");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#500");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#501");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#502");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#503");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#504");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)<br />(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)<br />(8,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#505");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#506");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)<br />(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#507");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)(13,Separator,6)(14,Item,7)(15,Separator,7)(16,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#508");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#509");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#510");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#511");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#512");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#513");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#514");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#515");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,2)(3,Separator,2)(4,Item,1)(5,Separator,1)(6,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#516");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,4)(3,Separator,4)(4,Item,1)(5,Separator,1)(6,Item,5)(7,Separator,5)(8,Item,2)(9,Separator,2)(10,Item,6)(11,Item,3)(12,Separator,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#517");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,6)(5,Separator,6)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,7)(11,Separator,7)(12,Item,2)(13,Separator,2)(14,Item,5)(15,Separator,5)(16,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#518");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, true);
		string exp = @"(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,5)(5,Separator,5)(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,6)(11,Item,2)(12,Separator,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#519");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#560");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#561");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#562");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#563");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#564");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#565");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#566");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td><td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#567");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td class=""Separator6"">(13,Separator,6)</td><td class=""Item7"">(14,Item,7)</td><td class=""Separator7"">(15,Separator,7)</td><td class=""Item8"">(16,Item,8)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#568");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Separator1"">(3,Separator,1)</td><td class=""Item2"">(4,Item,2)</td><td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td class=""Separator3"">(7,Separator,3)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item5"">(10,Item,5)</td><td class=""Separator5"">(11,Separator,5)</td>
	</tr><tr>
		<td class=""Item6"">(12,Item,6)</td><td></td><td></td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#569");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#570");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#571");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#572");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#573");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#574");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Separator0"">(1,Separator,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Separator1"">(3,Separator,1)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td>
	</tr><tr>
		<td class=""Separator2"">(5,Separator,2)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td>
	</tr><tr>
		<td class=""Separator3"">(7,Separator,3)</td>
	</tr><tr>
		<td class=""Item4"">(8,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#575");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item2"">(2,Item,2)</td><td class=""Separator2"">(3,Separator,2)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Separator1"">(5,Separator,1)</td><td class=""Item3"">(6,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#576");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item4"">(2,Item,4)</td><td class=""Separator4"">(3,Separator,4)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Separator1"">(5,Separator,1)</td><td class=""Item5"">(6,Item,5)</td><td class=""Separator5"">(7,Separator,5)</td>
	</tr><tr>
		<td class=""Item2"">(8,Item,2)</td><td class=""Separator2"">(9,Separator,2)</td><td class=""Item6"">(10,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item3"">(11,Item,3)</td><td class=""Separator3"">(12,Separator,3)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#577");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Separator3"">(3,Separator,3)</td><td class=""Item6"">(4,Item,6)</td><td class=""Separator6"">(5,Separator,6)</td>
	</tr><tr>
		<td class=""Item1"">(6,Item,1)</td><td class=""Separator1"">(7,Separator,1)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item7"">(10,Item,7)</td><td class=""Separator7"">(11,Separator,7)</td>
	</tr><tr>
		<td class=""Item2"">(12,Item,2)</td><td class=""Separator2"">(13,Separator,2)</td><td class=""Item5"">(14,Item,5)</td><td class=""Separator5"">(15,Separator,5)</td><td class=""Item8"">(16,Item,8)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#578");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, true);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Separator0"">(1,Separator,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Separator3"">(3,Separator,3)</td><td class=""Item5"">(4,Item,5)</td><td class=""Separator5"">(5,Separator,5)</td>
	</tr><tr>
		<td class=""Item1"">(6,Item,1)</td><td class=""Separator1"">(7,Separator,1)</td><td class=""Item4"">(8,Item,4)</td><td class=""Separator4"">(9,Separator,4)</td><td class=""Item6"">(10,Item,6)</td><td></td>
	</tr><tr>
		<td class=""Item2"">(11,Item,2)</td><td class=""Separator2"">(12,Separator,2)</td><td></td><td></td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#579");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#580");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#581");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#582");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)(8,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#583");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#584");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)<br />(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)<br />(8,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#585");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#586");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)<br />(4,Item,2)(5,Separator,2)(6,Item,3)(7,Separator,3)<br />(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#587");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)(13,Separator,6)(14,Item,7)(15,Separator,7)(16,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#588");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,1)(3,Separator,1)(4,Item,2)(5,Separator,2)<br />(6,Item,3)(7,Separator,3)(8,Item,4)(9,Separator,4)(10,Item,5)(11,Separator,5)<br />(12,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#589");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#590");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#591");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Separator,0)<br />(2,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#592");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Separator,0)<br />(2,Item,1)<br />(3,Separator,1)<br />(4,Item,2)<br />(5,Separator,2)<br />(6,Item,3)<br />(7,Separator,3)<br />(8,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#593");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#594");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Separator,0)<br />(2,Item,1)<br />(3,Separator,1)<br />(4,Item,2)<br />(5,Separator,2)<br />(6,Item,3)<br />(7,Separator,3)<br />(8,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#595");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,2)(3,Separator,2)<br />(4,Item,1)(5,Separator,1)(6,Item,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#596");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Separator,0)(2,Item,4)(3,Separator,4)<br />(4,Item,1)(5,Separator,1)(6,Item,5)(7,Separator,5)<br />(8,Item,2)(9,Separator,2)(10,Item,6)<br />(11,Item,3)(12,Separator,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#597");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,6)(5,Separator,6)<br />(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,7)(11,Separator,7)<br />(12,Item,2)(13,Separator,2)(14,Item,5)(15,Separator,5)(16,Item,8)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#598");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, true);
		string exp = @"<span>(0,Item,0)(1,Separator,0)(2,Item,3)(3,Separator,3)(4,Item,5)(5,Separator,5)<br />(6,Item,1)(7,Separator,1)(8,Item,4)(9,Separator,4)(10,Item,6)<br />(11,Item,2)(12,Separator,2)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#599");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_sep ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_sep ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_sep ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_sep ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_sep ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_sep ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_sep ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_sep ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_sep ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_sep ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : True

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, true);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td colspan=""0"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#640");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#641");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(3,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#642");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""5"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td>
	</tr><tr>
		<td colspan=""5"" class=""Footer-1"">(6,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#643");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#644");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(6,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#645");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#646");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#647");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td class=""Item7"">(8,Item,7)</td><td class=""Item8"">(9,Item,8)</td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#648");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, true, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#649");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#650");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#651");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#652");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)(6,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#653");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#654");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)(6,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#655");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,2)(3,Item,1)(4,Item,3)(5,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#656");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,4)(3,Item,1)(4,Item,5)(5,Item,2)(6,Item,6)(7,Item,3)(8,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#657");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,6)(4,Item,1)(5,Item,4)(6,Item,7)(7,Item,2)(8,Item,5)(9,Item,8)(10,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#658");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,5)(4,Item,1)(5,Item,4)(6,Item,6)(7,Item,2)(8,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#659");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#660");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#661");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)(3,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#662");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)(6,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#663");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#664");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)<br />(6,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#665");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#666");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br />(5,Item,4)(6,Item,5)<br />(7,Item,6)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#667");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)(8,Item,7)(9,Item,8)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#668");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, true, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#669");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#670");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#671");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#672");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)(6,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#673");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#674");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)(6,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#675");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,2)(3,Item,1)(4,Item,3)(5,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#676");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,4)(3,Item,1)(4,Item,5)(5,Item,2)(6,Item,6)(7,Item,3)(8,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#677");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,6)(4,Item,1)(5,Item,4)(6,Item,7)(7,Item,2)(8,Item,5)(9,Item,8)(10,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#678");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, true, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,5)(4,Item,1)(5,Item,4)(6,Item,6)(7,Item,2)(8,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#679");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td colspan=""0"" class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#720");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#721");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(3,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#722");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""5"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td>
	</tr><tr>
		<td colspan=""5"" class=""Footer-1"">(6,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#723");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#724");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(6,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#725");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#726");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#727");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td class=""Item7"">(8,Item,7)</td><td class=""Item8"">(9,Item,8)</td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#728");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#729");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#730");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#731");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Footer-1"">(3,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#732");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(6,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#733");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#734");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(6,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#735");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#736");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item4"">(2,Item,4)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item5"">(4,Item,5)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Item6"">(6,Item,6)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#737");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Item6"">(3,Item,6)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item7"">(6,Item,7)</td>
	</tr><tr>
		<td class=""Item2"">(7,Item,2)</td><td class=""Item5"">(8,Item,5)</td><td class=""Item8"">(9,Item,8)</td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(10,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#738");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, true, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Item5"">(3,Item,5)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item6"">(6,Item,6)</td>
	</tr><tr>
		<td class=""Item2"">(7,Item,2)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(8,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#739");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#740");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#741");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)(3,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#742");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)(6,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#743");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#744");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)<br />(6,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#745");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#746");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br />(5,Item,4)(6,Item,5)<br />(7,Item,6)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#747");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)(8,Item,7)(9,Item,8)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#748");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#749");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#750");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#751");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#752");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)<br />(6,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#753");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#754");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)<br />(6,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#755");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,2)<br />(3,Item,1)(4,Item,3)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#756");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,4)<br />(3,Item,1)(4,Item,5)<br />(5,Item,2)(6,Item,6)<br />(7,Item,3)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#757");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,3)(3,Item,6)<br />(4,Item,1)(5,Item,4)(6,Item,7)<br />(7,Item,2)(8,Item,5)(9,Item,8)<br />(10,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#758");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, true, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,3)(3,Item,5)<br />(4,Item,1)(5,Item,4)(6,Item,6)<br />(7,Item,2)<br />(8,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#759");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_hdr_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_hdr_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_hdr_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_hdr_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#800");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#801");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#802");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td>
	</tr><tr>
		<td colspan=""5"" class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#803");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#804");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#805");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(4,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#806");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#807");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td class=""Item7"">(7,Item,7)</td><td class=""Item8"">(8,Item,8)</td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#808");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, true, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#809");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#810");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#811");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#812");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)(5,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#813");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#814");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)(5,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#815");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,2)(2,Item,1)(3,Item,3)(4,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#816");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,4)(2,Item,1)(3,Item,5)(4,Item,2)(5,Item,6)(6,Item,3)(7,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#817");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,6)(3,Item,1)(4,Item,4)(5,Item,7)(6,Item,2)(7,Item,5)(8,Item,8)(9,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#818");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,5)(3,Item,1)(4,Item,4)(5,Item,6)(6,Item,2)(7,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#819");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#820");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#821");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#822");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#823");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#824");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#825");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br />(4,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#826");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br />(4,Item,4)(5,Item,5)<br />(6,Item,6)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#827");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)(7,Item,7)(8,Item,8)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#828");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, true, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#829");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#830");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#831");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#832");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)(5,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#833");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#834");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)(5,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#835");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,2)(2,Item,1)(3,Item,3)(4,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#836");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,4)(2,Item,1)(3,Item,5)(4,Item,2)(5,Item,6)(6,Item,3)(7,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#837");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,6)(3,Item,1)(4,Item,4)(5,Item,7)(6,Item,2)(7,Item,5)(8,Item,8)(9,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#838");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, true, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,5)(3,Item,1)(4,Item,4)(5,Item,6)(6,Item,2)(7,Footer,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#839");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#880");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#881");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#882");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td>
	</tr><tr>
		<td colspan=""5"" class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#883");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#884");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#885");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(4,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#886");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#887");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td class=""Item7"">(7,Item,7)</td><td class=""Item8"">(8,Item,8)</td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#888");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#889");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#890");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Footer-1"">(1,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#891");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Footer-1"">(2,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#892");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#893");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Footer-1"">(0,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#894");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr><tr>
		<td class=""Footer-1"">(5,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#895");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item2"">(1,Item,2)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(4,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#896");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item4"">(1,Item,4)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Item5"">(3,Item,5)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Item6"">(5,Item,6)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td></td>
	</tr><tr>
		<td colspan=""2"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#897");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item3"">(1,Item,3)</td><td class=""Item6"">(2,Item,6)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item7"">(5,Item,7)</td>
	</tr><tr>
		<td class=""Item2"">(6,Item,2)</td><td class=""Item5"">(7,Item,5)</td><td class=""Item8"">(8,Item,8)</td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(9,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#898");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, true, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item3"">(1,Item,3)</td><td class=""Item5"">(2,Item,5)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item6"">(5,Item,6)</td>
	</tr><tr>
		<td class=""Item2"">(6,Item,2)</td><td></td><td></td>
	</tr><tr>
		<td colspan=""3"" class=""Footer-1"">(7,Footer,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#899");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#900");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#901");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#902");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#903");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#904");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#905");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br />(4,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#906");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br />(4,Item,4)(5,Item,5)<br />(6,Item,6)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#907");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)(7,Item,7)(8,Item,8)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#908");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#909");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#910");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#911");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#912");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#913");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#914");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)<br />(5,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#915");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,2)<br />(2,Item,1)(3,Item,3)<br />(4,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#916");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,4)<br />(2,Item,1)(3,Item,5)<br />(4,Item,2)(5,Item,6)<br />(6,Item,3)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#917");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span>(0,Item,0)(1,Item,3)(2,Item,6)<br />(3,Item,1)(4,Item,4)(5,Item,7)<br />(6,Item,2)(7,Item,5)(8,Item,8)<br />(9,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#918");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, true, false);
		string exp = @"<span>(0,Item,0)(1,Item,3)(2,Item,5)<br />(3,Item,1)(4,Item,4)(5,Item,6)<br />(6,Item,2)<br />(7,Footer,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#919");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_ftr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_ftr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_ftr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_ftr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_ftr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_ftr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_ftr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : True
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, true, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#960");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#961");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#962");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""5"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#963");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#964");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#965");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#966");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#967");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td class=""Item7"">(8,Item,7)</td><td class=""Item8"">(9,Item,8)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#968");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, true, false, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#969");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#970");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#971");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#972");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#973");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#974");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#975");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,2)(3,Item,1)(4,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#976");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,4)(3,Item,1)(4,Item,5)(5,Item,2)(6,Item,6)(7,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#977");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,6)(4,Item,1)(5,Item,4)(6,Item,7)(7,Item,2)(8,Item,5)(9,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#978");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,5)(4,Item,1)(5,Item,4)(6,Item,6)(7,Item,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#979");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#980");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#981");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#982");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#983");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#984");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#985");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#986");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br />(5,Item,4)(6,Item,5)<br />(7,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#987");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)(8,Item,7)(9,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#988");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, true, false, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#989");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#990");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#991");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#992");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#993");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#994");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#995");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,2)(3,Item,1)(4,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#996");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,4)(3,Item,1)(4,Item,5)(5,Item,2)(6,Item,6)(7,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#997");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,6)(4,Item,1)(5,Item,4)(6,Item,7)(7,Item,2)(8,Item,5)(9,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#998");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, true, false, false);
		string exp = @"(0,Header,-1)(1,Item,0)(2,Item,3)(3,Item,5)(4,Item,1)(5,Item,4)(6,Item,6)(7,Item,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#999");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""0"" class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1040");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1041");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1042");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""5"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1043");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1044");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1045");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1046");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td><td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1047");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td class=""Item7"">(8,Item,7)</td><td class=""Item8"">(9,Item,8)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1048");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item1"">(2,Item,1)</td><td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item5"">(6,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(7,Item,6)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1049");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1050");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1051");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1052");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1053");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1054");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(3,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(4,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(5,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1055");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item3"">(4,Item,3)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1056");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td colspan=""2"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item4"">(2,Item,4)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item5"">(4,Item,5)</td>
	</tr><tr>
		<td class=""Item2"">(5,Item,2)</td><td class=""Item6"">(6,Item,6)</td>
	</tr><tr>
		<td class=""Item3"">(7,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1057");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Item6"">(3,Item,6)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item7"">(6,Item,7)</td>
	</tr><tr>
		<td class=""Item2"">(7,Item,2)</td><td class=""Item5"">(8,Item,5)</td><td class=""Item8"">(9,Item,8)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1058");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, true, false, false);
		string exp = @"<table>
	<tr>
		<td colspan=""3"" class=""Header-1"">(0,Header,-1)</td>
	</tr><tr>
		<td class=""Item0"">(1,Item,0)</td><td class=""Item3"">(2,Item,3)</td><td class=""Item5"">(3,Item,5)</td>
	</tr><tr>
		<td class=""Item1"">(4,Item,1)</td><td class=""Item4"">(5,Item,4)</td><td class=""Item6"">(6,Item,6)</td>
	</tr><tr>
		<td class=""Item2"">(7,Item,2)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1059");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1060");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1061");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1062");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)(1,Item,0)(2,Item,1)(3,Item,2)(4,Item,3)(5,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1063");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1064");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1065");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1066");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,1)<br />(3,Item,2)(4,Item,3)<br />(5,Item,4)(6,Item,5)<br />(7,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1067");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)(8,Item,7)(9,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1068");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,1)(3,Item,2)<br />(4,Item,3)(5,Item,4)(6,Item,5)<br />(7,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1069");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1070");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1071");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1072");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1073");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1074");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)<br />(2,Item,1)<br />(3,Item,2)<br />(4,Item,3)<br />(5,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1075");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,2)<br />(3,Item,1)(4,Item,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1076");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span class=""mainstyle"">(0,Header,-1)<br />(1,Item,0)(2,Item,4)<br />(3,Item,1)(4,Item,5)<br />(5,Item,2)(6,Item,6)<br />(7,Item,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1077");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,3)(3,Item,6)<br />(4,Item,1)(5,Item,4)(6,Item,7)<br />(7,Item,2)(8,Item,5)(9,Item,8)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1078");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, true, false, false);
		string exp = @"<span>(0,Header,-1)<br />(1,Item,0)(2,Item,3)(3,Item,5)<br />(4,Item,1)(5,Item,4)(6,Item,6)<br />(7,Item,2)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1079");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_hdr ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_hdr ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_hdr ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_hdr ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_hdr ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_hdr ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_hdr ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : True
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, true, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support headers, footers, or separators.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1120");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1121");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1122");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1123");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1124");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1125");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1126");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1127");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td class=""Item7"">(7,Item,7)</td><td class=""Item8"">(8,Item,8)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1128");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, true, false, false, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1129");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1130");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1131");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1132");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1133");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1134");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1135");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,2)(2,Item,1)(3,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1136");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,4)(2,Item,1)(3,Item,5)(4,Item,2)(5,Item,6)(6,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1137");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,6)(3,Item,1)(4,Item,4)(5,Item,7)(6,Item,2)(7,Item,5)(8,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1138");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,5)(3,Item,1)(4,Item,4)(5,Item,6)(6,Item,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1139");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1140");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1141");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1142");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1143");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1144");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1145");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1146");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br />(4,Item,4)(5,Item,5)<br />(6,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1147");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)(7,Item,7)(8,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1148");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, true, false, false, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1149");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1150");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1151");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,1)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1152");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1153");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1154");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1155");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,2)(2,Item,1)(3,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1156");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,4)(2,Item,1)(3,Item,5)(4,Item,2)(5,Item,6)(6,Item,3)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1157");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,6)(3,Item,1)(4,Item,4)(5,Item,7)(6,Item,2)(7,Item,5)(8,Item,8)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1158");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, true, false, false, false);
		string exp = @"(0,Item,0)(1,Item,3)(2,Item,5)(3,Item,1)(4,Item,4)(5,Item,6)(6,Item,2)";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1159");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ul_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ul_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ul_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_vert_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_vert_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_vert_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_vert_ol_otrtblimp ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_vert_ol_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_vert_ol_otrtblimp ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol_otrtblimp ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol_otrtblimp ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : True
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, true, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support implied outer tables.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_tbl ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1200");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_tbl ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1201");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_tbl ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1202");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_tbl ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1203");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_tbl ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1204");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_tbl ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1205");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_tbl ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1206");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_tbl ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td><td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1207");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_tbl ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td class=""Item7"">(7,Item,7)</td><td class=""Item8"">(8,Item,8)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1208");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_tbl ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item1"">(1,Item,1)</td><td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item5"">(5,Item,5)</td>
	</tr><tr>
		<td class=""Item6"">(6,Item,6)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1209");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_tbl ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1210");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_tbl ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1211");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_tbl ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1212");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_tbl ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1213");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_tbl ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">

</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1214");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_tbl ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td>
	</tr><tr>
		<td class=""Item1"">(1,Item,1)</td>
	</tr><tr>
		<td class=""Item2"">(2,Item,2)</td>
	</tr><tr>
		<td class=""Item3"">(3,Item,3)</td>
	</tr><tr>
		<td class=""Item4"">(4,Item,4)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1215");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_tbl ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item2"">(1,Item,2)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Item3"">(3,Item,3)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1216");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_tbl ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table class=""mainstyle"">
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item4"">(1,Item,4)</td>
	</tr><tr>
		<td class=""Item1"">(2,Item,1)</td><td class=""Item5"">(3,Item,5)</td>
	</tr><tr>
		<td class=""Item2"">(4,Item,2)</td><td class=""Item6"">(5,Item,6)</td>
	</tr><tr>
		<td class=""Item3"">(6,Item,3)</td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1217");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_tbl ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item3"">(1,Item,3)</td><td class=""Item6"">(2,Item,6)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item7"">(5,Item,7)</td>
	</tr><tr>
		<td class=""Item2"">(6,Item,2)</td><td class=""Item5"">(7,Item,5)</td><td class=""Item8"">(8,Item,8)</td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1218");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_tbl ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Table
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Table, false, false, false, false);
		string exp = @"<table>
	<tr>
		<td class=""Item0"">(0,Item,0)</td><td class=""Item3"">(1,Item,3)</td><td class=""Item5"">(2,Item,5)</td>
	</tr><tr>
		<td class=""Item1"">(3,Item,1)</td><td class=""Item4"">(4,Item,4)</td><td class=""Item6"">(5,Item,6)</td>
	</tr><tr>
		<td class=""Item2"">(6,Item,2)</td><td></td><td></td>
	</tr>
</table>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1219");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_horiz_flow ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1220");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_horiz_flow ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1221");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_horiz_flow ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1222");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_horiz_flow ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)(2,Item,2)(3,Item,3)(4,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1223");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_horiz_flow ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1224");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_horiz_flow ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1225");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_horiz_flow ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1226");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_horiz_flow ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,1)<br />(2,Item,2)(3,Item,3)<br />(4,Item,4)(5,Item,5)<br />(6,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1227");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_horiz_flow ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)(7,Item,7)(8,Item,8)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1228");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_horiz_flow ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span>(0,Item,0)(1,Item,1)(2,Item,2)<br />(3,Item,3)(4,Item,4)(5,Item,5)<br />(6,Item,6)<br /></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1229");
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_flow ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1230");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_flow ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1231");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_flow ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1232");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_flow ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1233");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_flow ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle""></span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1234");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_flow ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)<br />(1,Item,1)<br />(2,Item,2)<br />(3,Item,3)<br />(4,Item,4)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1235");
	}

	[Test]
	public void RepeatInfo_2cols_4itms_vert_flow ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,2)<br />(2,Item,1)(3,Item,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1236");
	}

	[Test]
	public void RepeatInfo_2cols_7itms_vert_flow ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span class=""mainstyle"">(0,Item,0)(1,Item,4)<br />(2,Item,1)(3,Item,5)<br />(4,Item,2)(5,Item,6)<br />(6,Item,3)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1237");
	}

	[Test]
	public void RepeatInfo_3cols_9itms_vert_flow ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span>(0,Item,0)(1,Item,3)(2,Item,6)<br />(3,Item,1)(4,Item,4)(5,Item,7)<br />(6,Item,2)(7,Item,5)(8,Item,8)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1238");
	}

	[Test]
	public void RepeatInfo_3cols_7itms_vert_flow ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : Flow
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.Flow, false, false, false, false);
		string exp = @"<span>(0,Item,0)(1,Item,3)(2,Item,5)<br />(3,Item,1)(4,Item,4)(5,Item,6)<br />(6,Item,2)</span>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1239");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ul ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ul ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ul ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ul ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ul ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ul ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ul ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ul ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ul ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ul ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_ul ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);
		string exp = @"<ul class=""mainstyle"">

</ul>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1250");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_ul ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);
		string exp = @"<ul class=""mainstyle"">
	<li>(0,Item,0)</li>

</ul>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1251");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_ul ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);
		string exp = @"<ul class=""mainstyle"">
	<li>(0,Item,0)</li>
	<li>(1,Item,1)</li>

</ul>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1252");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_ul ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);
		string exp = @"<ul class=""mainstyle"">
	<li>(0,Item,0)</li>
	<li>(1,Item,1)</li>
	<li>(2,Item,2)</li>
	<li>(3,Item,3)</li>
	<li>(4,Item,4)</li>

</ul>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1253");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_ul ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);
		string exp = @"<ul class=""mainstyle"">

</ul>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1254");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_ul ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);
		string exp = @"<ul class=""mainstyle"">
	<li>(0,Item,0)</li>
	<li>(1,Item,1)</li>
	<li>(2,Item,2)</li>
	<li>(3,Item,3)</li>
	<li>(4,Item,4)</li>

</ul>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1255");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ul ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ul ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ul ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ul ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : UnorderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.UnorderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_0itms_horiz_ol ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_1itms_horiz_ol ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_2itms_horiz_ol ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_0cols_5itms_horiz_ol ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_0itms_horiz_ol ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_1cols_5itms_horiz_ol ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts only support vertical layout.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_horiz_ol ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_horiz_ol ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_horiz_ol ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_horiz_ol ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Horizontal
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Horizontal, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	public void RepeatInfo_0cols_0itms_vert_ol ()
	{
		// cols              : 0
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);
		string exp = @"<ol class=""mainstyle"">

</ol>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1270");
	}

	[Test]
	public void RepeatInfo_0cols_1itms_vert_ol ()
	{
		// cols              : 0
		// cnt               : 1
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 1, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);
		string exp = @"<ol class=""mainstyle"">
	<li>(0,Item,0)</li>

</ol>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1271");
	}

	[Test]
	public void RepeatInfo_0cols_2itms_vert_ol ()
	{
		// cols              : 0
		// cnt               : 2
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 2, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);
		string exp = @"<ol class=""mainstyle"">
	<li>(0,Item,0)</li>
	<li>(1,Item,1)</li>

</ol>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1272");
	}

	[Test]
	public void RepeatInfo_0cols_5itms_vert_ol ()
	{
		// cols              : 0
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (0, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);
		string exp = @"<ol class=""mainstyle"">
	<li>(0,Item,0)</li>
	<li>(1,Item,1)</li>
	<li>(2,Item,2)</li>
	<li>(3,Item,3)</li>
	<li>(4,Item,4)</li>

</ol>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1273");
	}

	[Test]
	public void RepeatInfo_1cols_0itms_vert_ol ()
	{
		// cols              : 1
		// cnt               : 0
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 0, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);
		string exp = @"<ol class=""mainstyle"">

</ol>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1274");
	}

	[Test]
	public void RepeatInfo_1cols_5itms_vert_ol ()
	{
		// cols              : 1
		// cnt               : 5
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (1, 5, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);
		string exp = @"<ol class=""mainstyle"">
	<li>(0,Item,0)</li>
	<li>(1,Item,1)</li>
	<li>(2,Item,2)</li>
	<li>(3,Item,3)</li>
	<li>(4,Item,4)</li>

</ol>";
		Assert.AreEqual (exp.Replace ("\r\n", "\n"), v, "#1275");
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_4itms_vert_ol ()
	{
		// cols              : 2
		// cnt               : 4
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 4, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_2cols_7itms_vert_ol ()
	{
		// cols              : 2
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (2, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_9itms_vert_ol ()
	{
		// cols              : 3
		// cnt               : 9
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 9, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}

	[Test]
	[ExpectedException (typeof (global::System.InvalidOperationException))]
	public void RepeatInfo_3cols_7itms_vert_ol ()
	{
		// cols              : 3
		// cnt               : 7
		// RepeatDirection   : Vertical
		// RepeatLayout      : OrderedList
		// OuterTableImplied : False
		// Header            : False
		// Footer            : False
		// Separator         : False

		string v = global::MonoTests.Helpers.RepeatInfoUser.DoTest (3, 7, RepeatDirection.Vertical, RepeatLayout.OrderedList, false, false, false, false);

		// Exception: System.InvalidOperationException ("The UnorderedList and OrderedList layouts do not support multi-column layouts.")
	}


}
}
