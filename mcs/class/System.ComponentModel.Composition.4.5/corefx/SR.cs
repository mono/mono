//
// This file was generated by resx2sr tool
//

partial class SR
{
	public const string ArgumentException_EmptyString = "'{0}' cannot be an empty string (\"\").";
	public const string ArgumentOutOfRange_InvalidEnum = "The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.";
	public const string ArgumentValueType = "The argument was a value type which is not supported.";
	public const string Argument_AssemblyReflectionOnly = "'{0}' is a reflection-only assembly which is not supported.";
	public const string Argument_NullElement = "'{0}' cannot contain a null (Nothing in Visual Basic) element.";
	public const string AssemblyFileNotFoundOrWrongType = "Assembly file {0} is either not found or not a dll or exe file.";
	public const string CardinalityMismatch_NoExports = "No exports were found that match the constraint: {0}";
	public const string CardinalityMismatch_TooManyExports = "More than one export was found that matches the constraint: {0}";
	public const string ImportEngine_ComposeTookTooManyIterations = "The composition failed because it did not complete within '{0:N0}' iterations. This is most likely caused by a cycle in the dependency graph of a part which is marked with a non-shared creation policy.";
	public const string ContractMismatch_ExportedValueCannotBeCastToT = "Cannot cast the underlying exported value of type '{0}' to type '{1}'.";
	public const string DirectoryNotFound = "Directory '{0}' could not be found.";
	public const string ReflectionModel_PartConstructorThrewException = "An exception occurred while trying to create an instance of type '{0}'.";
	public const string ReflectionModel_ExportThrewException = "An exception occurred while trying to get the value of property '{0}'.";
	public const string ReflectionModel_PartOnImportsSatisfiedThrewException = "An exception occurred while calling the 'OnImportsSatisfied' method on type '{0}'.";
	public const string ReflectionModel_ImportThrewException = "An exception occurred while trying to set the value of property '{0}'.";
	public const string ExportDefinitionNotOnThisComposablePart = "{0} did not originate from the ExportDefinitions property on this ComposablePart or its ComposablePartDefinition.";
	public const string ReflectionModel_ImportCollectionNotWritable = "Cannot populate the collection '{0}' because it does not implement ICollection<T> or is read-only. If the collection is not IEnumerable<T> or T[] it must implement ICollection<T> and be either pre-initialized or be writable with a default constructor.";
	public const string ReflectionModel_ImportCollectionNull = "Cannot populate the value of enumerable member '{0}' because it is null (Nothing in Visual Basic). If the collection is not IEnumerable<T> or T[] it must implement ICollection<T> and be either pre-initialized or be writable with a default constructor.";
	public const string ImportEngine_PartCycle = "Cannot compose part '{0}' because a cycle exists in the dependencies between the exports being composed. To break this cycle, consider changing some imports from constructor to property injection.";
	public const string ImportDefinitionNotOnThisComposablePart = "{0} did not originate from the ImportDefinitions property on this ComposablePart or its ComposablePartDefinition.";
	public const string ImportNotSetOnPart = "Could not finishing composing object of type '{0}'. The import '{1}' was not satisfied.";
	public const string ReflectionModel_ImportNotWritable = "Cannot set the value of '{0}' because the member is not writable. If the member is a property, it must have an accessible setter; otherwise, if it is a field, it must not be read-only.";
	public const string InternalExceptionMessage = "Internal error occurred. Additional information: '{0}'.";
	public const string InvalidMetadataView = "The Type '{0}' supplied is not a valid Metadata View.";
	public const string InvalidOperationReentrantCompose = "A call to Compose occurred during a call to Compose on the same CompositionContainer object. Use the IsComposing property on CompositionContainer to ensure a composition is not already in progress before calling Compose.";
	public const string MetadataItemNotSupported = "This export does not support the metadata item '{0}'.";
	public const string NotSupportedInterfaceMetadataView = "Interface '{0}' is not a valid MetadataView; MetadataViews do not support non-public interfaces, and interfaces that contain members that are not properties.";
	public const string ReflectionModel_PartConstructorMissing = "Cannot create an instance of type '{0}' because a constructor could not be selected for construction. Ensure that the type either has a default constructor, or a single constructor marked with the 'System.ComponentModel.Composition.ImportingConstructorAttribute'.";
	public const string NotImplemented_NotOverriddenByDerived = "The {0} member must be overridden by a derived class.";
	public const string NotSupportedReadOnlyDictionary = "The underlying dictionary is read-only.";
	public const string ObjectAlreadyInitialized = "This property cannot be set after the object's public surface has been accessed.";
	public const string ObjectMustBeInitialized = "This object has not been initialized - the property '{0}' must be set.";
	public const string ReflectionModel_ImportNotAssignableFromExport = "The export '{0}' is not assignable to type '{1}'.";
	public const string ReflectionModel_ExportNotReadable = "Cannot get the value of property '{0}', because the member is not readable. The property must have an accessible getter.";
	public const string Argument_ElementReflectionOnlyType = "'{0}' contains a reflection-only type which is not supported.";
	public const string InvalidOperation_DefinitionCannotBeRecomposed = "'definition' cannot be set after Activate has been called because ImportDefinition.IsRecomposable is false.";
	public const string Argument_ExportsEmpty = "'exports' cannot be empty when ImportDefinition.ImportCardinality is ImportCardinality.ExactlyOne.";
	public const string Argument_ExportsTooMany = "'exports' cannot contain more than one element when ImportDefinition.ImportCardinality is ImportCardinality.ZeroOrOne or ImportCardinality.ExactlyOne.";
	public const string CompositionElement_UnknownOrigin = "Unknown Origin";
	public const string ImportEngine_PartCannotActivate = "Cannot activate part '{0}'.";
	public const string ImportEngine_PartCannotSetImport = "Cannot set import '{0}' on part '{1}'.";
	public const string ImportEngine_PartCannotGetExportedValue = "Cannot get export '{0}' from part '{1}'.";
	public const string TypeCatalog_Empty = "<Empty>";
	public const string InvalidOperation_GetExportedValueBeforePrereqImportSet = "GetExportedValue cannot be called before prerequisite import '{0}' has been set.";
	public const string CompositionException_ErrorPrefix = "Resulting in:";
	public const string CompositionException_MultipleErrorsWithMultiplePaths = "The composition produced multiple composition errors, with {0:N0} root causes. The root causes are provided below.";
	public const string CompositionException_ReviewErrorProperty = "Review the CompositionException.Errors property for more detailed information.";
	public const string CompositionException_SingleErrorWithMultiplePaths = "The composition produced a single composition error, with {0:N0} root causes. The root causes are provided below.";
	public const string CompositionException_SingleErrorWithSinglePath = "The composition produced a single composition error. The root cause is provided below.";
	public const string ReflectionModel_ImportCollectionGetThrewException = "Cannot populate the collection '{0}' because an exception occurred while trying to access the collection value. If the collection is not IEnumerable<T> or T[] it must implement ICollection<T> and be either pre-initialized or be writable with a default constructor.";
	public const string ReflectionModel_ImportCollectionAddThrewException = "Cannot populate the collection '{0}' because an exception occurred while calling the Add method on the type '{1}'.";
	public const string ReflectionModel_ImportCollectionClearThrewException = "Cannot populate the collection '{0}' because an exception occurred while calling the Clear method on the type '{1}'.";
	public const string ReflectionModel_ImportCollectionIsReadOnlyThrewException = "Cannot populate the collection '{0}' because an exception occurred while reading the IsReadOnly property on the type '{1}'.";
	public const string ReflectionModel_ImportCollectionConstructionThrewException = "Cannot populate the collection '{0}' because an exception occurred while calling the default constructor on the type '{1}'.";
	public const string CompositionTrace_Discovery_MemberMarkedWithMultipleImportAndImportMany = "The member or parameter '{0}' is marked with multiple Import and ImportMany attributes. Only the first attribute encountered will be respected.";
	public const string Discovery_MetadataContainsValueWithInvalidType = "Property '{0}' has type '{1}' which is an invalid metadata type. Metadata can only contain values with a type that is available to be embedded at compile-time into attributes. For more details of what types are valid reference section 17.1.3 in the C# specification.";
	public const string Discovery_DuplicateMetadataNameValues = "Member or Type '{0}' contains multiple metadata entries with the name '{1}'. The metadata entries could be coming from the ExportMetadataAttribute or from a property of a custom metadata attribute. Either remove the duplicate entries or enable the metadata entry with name '{1}' to allow multiple entries via the IsMultiple property on ExportMetadataAttribute or AttributeUsage.AllowMultiple on custom metadata attributes.";
	public const string Discovery_ReservedMetadataNameUsed = "Member or Type '{0}' contains a metadata entry with the name '{1}', which is a reserved metadata key name. Either remove this metadata entry or change the name associated with the entry.";
	public const string ReflectionModel_InvalidExportDefinition = "ExportDefinition of type '{0}' cannot be used in this context. Only export definitions produced by the ReflectionModelServices.CreateExportDefinition are supported.";
	public const string ImportEngine_PreventedByExistingImport = "Change in exports prevented by non-recomposable import '{0}' on part '{1}'.";
	public const string ReflectionModel_InvalidImportDefinition = "ImportDefinition of type '{0}' cannot be used in this context. Only import definitions produced by the ReflectionModelServices.CreateImportDefinition are supported.";
	public const string ReflectionModel_InvalidPartDefinition = "ComposablePartDefinition of type '{0}' cannot be used in this context. Only part definitions produced by the ReflectionModelServices.CreatePartDefinition are supported.";
	public const string ArgumentOutOfRange_InvalidEnumInSet = "The value of argument '{0}' ({1}) is not supported. Allowed values are : '{2}'.";
	public const string ReflectionModel_InvalidMemberImportDefinition = "ImportDefinition of type '{0}' cannot be used in this context. Only import definitions produced by the ReflectionModelServices.CreateImportDefinition based on members are supported. Use ReflectionModelServices.IsImportingParameter to determine whether a given import definition is based on a member or a parameter.";
	public const string ReflectionModel_InvalidParameterImportDefinition = "ImportDefinition of type '{0}' cannot be used in this context. Only import definitions produced by the ReflectionModelServices.CreateImportDefinition based on parameters are supported. Use ReflectionModelServices.IsImportingParameter to determine whether a given import definition is based on a member or a parameter.";
	public const string LazyMemberInfo_AccessorsNull = "Accessors must not be null (Nothing in Visual Basic).";
	public const string LazyMemberInfo_InvalidAccessorOnSimpleMember = "A member of type '{0}' must have exactly a single accessor of type '{0}'";
	public const string LazyMemberinfo_InvalidEventAccessors_AccessorType = "All event accessors must be methods.";
	public const string LazyMemberInfo_InvalidEventAccessors_Cardinality = "An event must have exactly three accessors.";
	public const string LazyMemberinfo_InvalidPropertyAccessors_AccessorType = "All property accessors must be methods.";
	public const string LazyMemberInfo_InvalidPropertyAccessors_Cardinality = "A property must have exactly two accessors.";
	public const string LazyMemberInfo_NoAccessors = "A member must have at least one accessor.";
	public const string LazyServices_LazyResolvesToNull = "The lazily evaluated value of type '{0}' passed to the ReflectionModelServices API as part of the argument '{1}' must not return null (Nothing in Visual Basic).";
	public const string InvalidMetadataValue = "Metadata can only contain values with a type that is available to be embedded at compile-time into attributes. For more details of what types are valid reference section 17.1.3 in the C# specification.";
	public const string ContractMismatch_InvalidCastOnMetadataField = "Unable to create an Instance of the Metadata view '{0}' because the exporter exported the metadata  for the item '{1}' with the value '{2}' as type '{3}' but the view imports it as type '{4}'.";
	public const string ContractMismatch_NullReferenceOnMetadataField = "Unable to create an Instance of the Metadata view '{0}' because the exporter exported the metadata for the item '{1}' with a null value and null is not a valid value for type '{2}'.";
	public const string InvalidSetterOnMetadataField = "The MetadataView '{0}' is invalid because property '{1}' has a property set method.";
	public const string CompositionException_ChangesRejected = "The composition remains unchanged. The changes were rejected because of the following error(s): {0}";
	public const string ImportEngine_InvalidStateForRecomposition = "The ComposablePart of type '{0}' cannot be recomposed because it is in an invalid state. It can only be recomposed if it has already been fully previewed or composed.";
	public const string AtomicComposition_AlreadyCompleted = "The atomicComposition can no longer be changed because the atomicComposition has already been completed.";
	public const string AtomicComposition_PartOfAnotherAtomicComposition = "The atomicComposition contains another inner atomicComposition and cannot be changed until the that inner atomicComposition has been completed.";
	public const string AtomicComposition_AlreadyNested = "The atomicComposition already contains an inner atomicComposition and cannot contain more than one atomicComposition at a time.";
	public const string ReentrantCompose = "Currently composing another batch in this ComposablePartExportProvider. Only one batch can be composed at a time.";
	public const string ReflectionModel_ImportManyOnParameterCanOnlyBeAssigned = "The importing constructor on type '{0}' is using ImportManyAttribute on parameter '{1}' with a non-assignable type. On constructor parameters the ImportManyAttribute only supports importing into types T[] or IEnumerable<T>.";
	public const string CompositionException_ElementPrefix = "Element: {0}";
	public const string CompositionException_OriginSeparator = "--> ";
	public const string CompositionTrace_Rejection_DefinitionRejected = "The ComposablePartDefinition '{0}' has been rejected. {1}";
	public const string CompositionTrace_Rejection_DefinitionResurrected = "The ComposablePartDefinition '{0}' that was previously rejected has been resurrected.";
	public const string CompositionTrace_Discovery_AssemblyLoadFailed = "The catalog '{0}' could not load assembly '{1}'. {2}";
	public const string CompositionTrace_Discovery_DefinitionContainsNoExports = "The ComposablePartDefinition '{0}' was ignored because it contains no exports.";
	public const string CompositionTrace_Discovery_DefinitionMarkedWithPartNotDiscoverableAttribute = "The ComposablePartDefinition '{0}' was ignored because it was marked with PartNotDiscoverableAttribute.";
	public const string CompositionException_MetadataViewInvalidConstructor = "Unable to create an instance of the Metadata view '{0}' because a constructor could not be selected.  Ensure that the type implements a constructor which takes an argument of type IDictionary<string, object>.";
	public const string CompositionException_PathsCountSeparator = ")";
	public const string CompositionException_OriginFormat = " {0} {1}";
	public const string TypeCatalog_DisplayNameFormat = "{0} (Types='{1}').";
	public const string ImportNotValidOnIndexers = "Import is not valid on an Indexer property.  The import '{0}' was not satisfied.";
	public const string ExportNotValidOnIndexers = "Export is not valid on an Indexer property.  The export '{0}' was not retrieved.";
	public const string ReflectionContext_Requires_DefaultConstructor = "A ReflectionContext must have a default constructor.";
	public const string ReflectionContext_Type_Required = "The type specified in the ReflectionContextDiscoveryAttribute must be assignable to System.Reflection.ReflectionContext.";
	public const string CompositionTrace_Discovery_DefinitionMismatchedExportArity = "The composable part definition '{0}' was ignored because the export '{1}' has different generic parameters than the part type.";
	public const string InvalidArgument_ReflectionContext = "'reflectionContext' must be a type that is assignable from System.Reflection.ReflectionContext.";
	public const string Argument_ReflectionContextReturnsReflectionOnlyType = "'{0}' returns a mapped type that is a reflection-only type which is not supported.";
	public const string ContractMismatch_MetadataViewImplementationDoesNotImplementViewInterface = "Unable to create an Instance of the Metadata view '{0}' because the implementation class : '{0}' does not implement the MetadataView interface '{1}'.";
	public const string ContractMismatch_MetadataViewImplementationCanNotBeNull = "The implementation type for the MetadataView '{0} can not be null.";
	public const string InvalidPartCreationPolicyOnImport = "A CreationPolicy of '(0)' can not be applied to an Import that is not an ExportFactory.";
	public const string ExportFactory_TooManyGenericParameters = "ExportFactory subclass '{0}' can not have more than two generic parameters.";
	public const string CatalogMutation_Invalid = "ScopingPolicyCatalog does not support catalog mutation.";
	public const string NotSupportedCatalogChanges = "This CompositionService does not support catalog changes.";
	public const string InvalidOperation_RevertAndCompleteActionsMustNotThrow = "AtomicComposition encountered an unexpected Exception, review InnerException for details.";
	public const string PlatformNotSupported_ComponentModel_Composition = "System.ComponentModel.Composition APIs are not supported on this platform.";
}
