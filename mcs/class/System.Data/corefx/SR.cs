//
// This file was generated by resx2sr tool
//

partial class SR
{
	public const string ADP_CollectionIndexString = "An {0} with {1} '{2}' is not contained by this {3}.";
	public const string ADP_CollectionInvalidType = "The {0} only accepts non-null {1} type objects, not {2} objects.";
	public const string ADP_CollectionIsNotParent = "The {0} is already contained by another {1}.";
	public const string ADP_CollectionNullValue = "The {0} only accepts non-null {1} type objects.";
	public const string ADP_CollectionRemoveInvalidObject = "Attempted to remove an {0} that is not contained by this {1}.";
	public const string ADP_CollectionUniqueValue = "The {0}.{1} is required to be unique, '{2}' already exists in the collection.";
	public const string ADP_ConnectionStateMsg_Closed = "The connection's current state is closed.";
	public const string ADP_ConnectionStateMsg_Connecting = "The connection's current state is connecting.";
	public const string ADP_ConnectionStateMsg_Open = "The connection's current state is open.";
	public const string ADP_ConnectionStateMsg_OpenExecuting = "The connection's current state is executing.";
	public const string ADP_ConnectionStateMsg_OpenFetching = "The connection's current state is fetching.";
	public const string ADP_ConnectionStateMsg = "The connection's current state: {0}.";
	public const string ADP_ConnectionStringSyntax = "Format of the initialization string does not conform to specification starting at index {0}.";
	public const string ADP_DataReaderClosed = "Invalid attempt to call {0} when reader is closed.";
	public const string ADP_EmptyString = "Expecting non-empty string for '{0}' parameter.";
	public const string ADP_InvalidEnumerationValue = "The {0} enumeration value, {1}, is invalid.";
	public const string ADP_InvalidKey = "Invalid keyword, contain one or more of 'no characters', 'control characters', 'leading or trailing whitespace' or 'leading semicolons'.";
	public const string ADP_InvalidValue = "The value contains embedded nulls (\\\\u0000).";
	public const string ADP_InvalidXMLBadVersion = "Invalid Xml; can only parse elements of version one.";
	public const string Xml_SimpleTypeNotSupported = "DataSet doesn't support 'union' or 'list' as simpleType.";
	public const string Xml_MissingAttribute = "Invalid {0} syntax: missing required '{1}' attribute.";
	public const string Xml_ValueOutOfRange = "Value '{1}' is invalid for attribute '{0}'.";
	public const string Xml_AttributeValues = "The value of attribute '{0}' should be '{1}' or '{2}'.";
	public const string Xml_RelationParentNameMissing = "Parent table name is missing in relation '{0}'.";
	public const string Xml_RelationChildNameMissing = "Child table name is missing in relation '{0}'.";
	public const string Xml_RelationTableKeyMissing = "Parent table key is missing in relation '{0}'.";
	public const string Xml_RelationChildKeyMissing = "Child table key is missing in relation '{0}'.";
	public const string Xml_UndefinedDatatype = "Undefined data type: '{0}'.";
	public const string Xml_DatatypeNotDefined = "Data type not defined.";
	public const string Xml_InvalidField = "Invalid XPath selection inside field node. Cannot find: {0}.";
	public const string Xml_InvalidSelector = "Invalid XPath selection inside selector node: {0}.";
	public const string Xml_InvalidKey = "Invalid 'Key' node inside constraint named: {0}.";
	public const string Xml_DuplicateConstraint = "The constraint name {0} is already used in the schema.";
	public const string Xml_CannotConvert = " Cannot convert '{0}' to type '{1}'.";
	public const string Xml_MissingRefer = "Missing '{0}' part in '{1}' constraint named '{2}'.";
	public const string Xml_MismatchKeyLength = "Invalid Relation definition: different length keys.";
	public const string Xml_CircularComplexType = "DataSet doesn't allow the circular reference in the ComplexType named '{0}'.";
	public const string Xml_CannotInstantiateAbstract = "DataSet cannot instantiate an abstract ComplexType for the node {0}.";
	public const string Xml_MultipleTargetConverterError = "An error occurred with the multiple target converter while writing an Xml Schema.  See the inner exception for details.";
	public const string Xml_MultipleTargetConverterEmpty = "An error occurred with the multiple target converter while writing an Xml Schema.  A null or empty string was returned.";
	public const string Xml_MergeDuplicateDeclaration = "Duplicated declaration '{0}'.";
	public const string Xml_MissingTable = "Cannot load diffGram. Table '{0}' is missing in the destination dataset.";
	public const string Xml_MissingSQL = "Cannot load diffGram. The 'sql' node is missing.";
	public const string Xml_ColumnConflict = "Column name '{0}' is defined for different mapping types.";
	public const string Xml_InvalidPrefix = "Prefix '{0}' is not valid, because it contains special characters.";
	public const string Xml_NestedCircular = "Circular reference in self-nested table '{0}'.";
	public const string Xml_FoundEntity = "DataSet cannot expand entities. Use XmlValidatingReader and set the EntityHandling property accordingly.";
	public const string Xml_PolymorphismNotSupported = "Type '{0}' does not implement IXmlSerializable interface therefore can not proceed with serialization.";
	public const string Xml_CanNotDeserializeObjectType = "Unable to proceed with deserialization. Data does not implement IXMLSerializable, therefore polymorphism is not supported.";
	public const string Xml_DataTableInferenceNotSupported = "DataTable does not support schema inference from Xml.";
	public const string Xml_MultipleParentRows = "Cannot proceed with serializing DataTable '{0}'. It contains a DataRow which has multiple parent rows on the same Foreign Key.";
	public const string Xml_IsDataSetAttributeMissingInSchema = "IsDataSet attribute is missing in input Schema.";
	public const string Xml_TooManyIsDataSetAtributeInSchema = "Cannot determine the DataSet Element. IsDataSet attribute exist more than once.";
	public const string Xml_DynamicWithoutXmlSerializable = "DataSet will not serialize types that implement IDynamicMetaObjectProvider but do not also implement IXmlSerializable.";
	public const string Expr_NYI = "The feature not implemented. {0}.";
	public const string Expr_MissingOperand = "Syntax error: Missing operand after '{0}' operator.";
	public const string Expr_TypeMismatch = "Type mismatch in expression '{0}'.";
	public const string Expr_ExpressionTooComplex = "Expression is too complex.";
	public const string Expr_UnboundName = "Cannot find column [{0}].";
	public const string Expr_InvalidString = "The expression contains an invalid string constant: {0}.";
	public const string Expr_UndefinedFunction = "The expression contains undefined function call {0}().";
	public const string Expr_Syntax = "Syntax error in the expression.";
	public const string Expr_FunctionArgumentCount = "Invalid number of arguments: function {0}().";
	public const string Expr_MissingRightParen = "The expression is missing the closing parenthesis.";
	public const string Expr_UnknownToken = "Cannot interpret token '{0}' at position {1}.";
	public const string Expr_UnknownToken1 = "Expected {0}, but actual token at the position {2} is {1}.";
	public const string Expr_DatatypeConvertion = "Cannot convert from {0} to {1}.";
	public const string Expr_DatavalueConvertion = "Cannot convert value '{0}' to Type: {1}.";
	public const string Expr_InvalidName = "Invalid column name [{0}].";
	public const string Expr_InvalidDate = "The expression contains invalid date constant '{0}'.";
	public const string Expr_NonConstantArgument = "Only constant expressions are allowed in the expression list for the IN operator.";
	public const string Expr_InvalidPattern = "Error in Like operator: the string pattern '{0}' is invalid.";
	public const string Expr_InWithoutParentheses = "Syntax error: The items following the IN keyword must be separated by commas and be enclosed in parentheses.";
	public const string Expr_ArgumentType = "Type mismatch in function argument: {0}(), argument {1}, expected {2}.";
	public const string Expr_ArgumentTypeInteger = "Type mismatch in function argument: {0}(), argument {1}, expected one of the Integer types.";
	public const string Expr_TypeMismatchInBinop = "Cannot perform '{0}' operation on {1} and {2}.";
	public const string Expr_AmbiguousBinop = "Operator '{0}' is ambiguous on operands of type '{1}' and '{2}'. Cannot mix signed and unsigned types. Please use explicit Convert() function.";
	public const string Expr_InWithoutList = "Syntax error: The IN keyword must be followed by a non-empty list of expressions separated by commas, and also must be enclosed in parentheses.";
	public const string Expr_UnsupportedOperator = "The expression contains unsupported operator '{0}'.";
	public const string Expr_InvalidNameBracketing = "The expression contains invalid name: '{0}'.";
	public const string Expr_MissingOperandBefore = "Syntax error: Missing operand before '{0}' operator.";
	public const string Expr_TooManyRightParentheses = "The expression has too many closing parentheses.";
	public const string Expr_UnresolvedRelation = "The table [{0}] involved in more than one relation. You must explicitly mention a relation name in the expression '{1}'.";
	public const string Expr_AggregateArgument = "Syntax error in aggregate argument: Expecting a single column argument with possible 'Child' qualifier.";
	public const string Expr_AggregateUnbound = "Unbound reference in the aggregate expression '{0}'.";
	public const string Expr_EvalNoContext = "Cannot evaluate non-constant expression without current row.";
	public const string Expr_ExpressionUnbound = "Unbound reference in the expression '{0}'.";
	public const string Expr_ComputeNotAggregate = "Cannot evaluate. Expression '{0}' is not an aggregate.";
	public const string Expr_FilterConvertion = "Filter expression '{0}' does not evaluate to a Boolean term.";
	public const string Expr_InvalidType = "Invalid type name '{0}'.";
	public const string Expr_LookupArgument = "Syntax error in Lookup expression: Expecting keyword 'Parent' followed by a single column argument with possible relation qualifier: Parent[(<relation_name>)].<column_name>.";
	public const string Expr_InvokeArgument = "Need a row or a table to Invoke DataFilter.";
	public const string Expr_ArgumentOutofRange = "{0}() argument is out of range.";
	public const string Expr_IsSyntax = "Syntax error: Invalid usage of 'Is' operator. Correct syntax: <expression> Is [Not] Null.";
	public const string Expr_Overflow = "Value is either too large or too small for Type '{0}'.";
	public const string Expr_BindFailure = "Cannot find the parent relation '{0}'.";
	public const string Expr_InvalidHoursArgument = "'hours' argument is out of range. Value must be between -14 and +14.";
	public const string Expr_InvalidMinutesArgument = "'minutes' argument is out of range. Value must be between -59 and +59.";
	public const string Expr_InvalidTimeZoneRange = "Provided range for time one exceeds total of 14 hours.";
	public const string Expr_MismatchKindandTimeSpan = "Kind property of provided DateTime argument, does not match 'hours' and 'minutes' arguments.";
	public const string Expr_UnsupportedType = "A DataColumn of type '{0}' does not support expression.";
	public const string Data_EnforceConstraints = "Failed to enable constraints. One or more rows contain values violating non-null, unique, or foreign-key constraints.";
	public const string Data_CannotModifyCollection = "Collection itself is not modifiable.";
	public const string Data_CaseInsensitiveNameConflict = "The given name '{0}' matches at least two names in the collection object with different cases, but does not match either of them with the same case.";
	public const string Data_NamespaceNameConflict = "The given name '{0}' matches at least two names in the collection object with different namespaces.";
	public const string Data_InvalidOffsetLength = "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.";
	public const string Data_ArgumentOutOfRange = "'{0}' argument is out of range.";
	public const string Data_ArgumentNull = "'{0}' argument cannot be null.";
	public const string Data_ArgumentContainsNull = "'{0}' argument contains null value.";
	public const string DataColumns_OutOfRange = "Cannot find column {0}.";
	public const string DataColumns_Add1 = "Column '{0}' already belongs to this DataTable.";
	public const string DataColumns_Add2 = "Column '{0}' already belongs to another DataTable.";
	public const string DataColumns_Add3 = "Cannot have more than one SimpleContent columns in a DataTable.";
	public const string DataColumns_Add4 = "Cannot add a SimpleContent column to a table containing element columns or nested relations.";
	public const string DataColumns_AddDuplicate = "A column named '{0}' already belongs to this DataTable.";
	public const string DataColumns_AddDuplicate2 = "Cannot add a column named '{0}': a nested table with the same name already belongs to this DataTable.";
	public const string DataColumns_AddDuplicate3 = "A column named '{0}' already belongs to this DataTable: cannot set a nested table name to the same name.";
	public const string DataColumns_Remove = "Cannot remove a column that doesn't belong to this table.";
	public const string DataColumns_RemovePrimaryKey = "Cannot remove this column, because it's part of the primary key.";
	public const string DataColumns_RemoveChildKey = "Cannot remove this column, because it is part of the parent key for relationship {0}.";
	public const string DataColumns_RemoveConstraint = "Cannot remove this column, because it is a part of the constraint {0} on the table {1}.";
	public const string DataColumn_AutoIncrementAndExpression = "Cannot set AutoIncrement property for a computed column.";
	public const string DataColumn_AutoIncrementAndDefaultValue = "Cannot set AutoIncrement property for a column with DefaultValue set.";
	public const string DataColumn_DefaultValueAndAutoIncrement = "Cannot set a DefaultValue on an AutoIncrement column.";
	public const string DataColumn_AutoIncrementSeed = "AutoIncrementStep must be a non-zero value.";
	public const string DataColumn_NameRequired = "ColumnName is required when it is part of a DataTable.";
	public const string DataColumn_ChangeDataType = "Cannot change DataType of a column once it has data.";
	public const string DataColumn_NullDataType = "Column requires a valid DataType.";
	public const string DataColumn_DefaultValueDataType = "The DefaultValue for column {0} is of type {1} and cannot be converted to {2}.";
	public const string DataColumn_DefaultValueDataType1 = "The DefaultValue for the column is of type {0} and cannot be converted to {1}.";
	public const string DataColumn_DefaultValueColumnDataType = "The DefaultValue for column {0} is of type {1}, but the column is of type {2}.";
	public const string DataColumn_ReadOnlyAndExpression = "Cannot change ReadOnly property for the expression column.";
	public const string DataColumn_UniqueAndExpression = "Cannot change Unique property for the expression column.";
	public const string DataColumn_ExpressionAndUnique = "Cannot create an expression on a column that has AutoIncrement or Unique.";
	public const string DataColumn_ExpressionAndReadOnly = "Cannot set expression because column cannot be made ReadOnly.";
	public const string DataColumn_ExpressionAndConstraint = "Cannot set Expression property on column {0}, because it is a part of a constraint.";
	public const string DataColumn_ExpressionInConstraint = "Cannot create a constraint based on Expression column {0}.";
	public const string DataColumn_ExpressionCircular = "Cannot set Expression property due to circular reference in the expression.";
	public const string DataColumn_NullKeyValues = "Column '{0}' has null values in it.";
	public const string DataColumn_NullValues = "Column '{0}' does not allow nulls.";
	public const string DataColumn_ReadOnly = "Column '{0}' is read only.";
	public const string DataColumn_NonUniqueValues = "Column '{0}' contains non-unique values.";
	public const string DataColumn_NotInTheTable = "Column '{0}' does not belong to table {1}.";
	public const string DataColumn_NotInAnyTable = "Column must belong to a table.";
	public const string DataColumn_SetFailed = "Couldn't store <{0}> in {1} Column.  Expected type is {2}.";
	public const string DataColumn_CannotSetToNull = "Cannot set Column '{0}' to be null. Please use DBNull instead.";
	public const string DataColumn_LongerThanMaxLength = "Cannot set column '{0}'. The value violates the MaxLength limit of this column.";
	public const string DataColumn_HasToBeStringType = "MaxLength applies to string data type only. You cannot set Column '{0}' property MaxLength to be non-negative number.";
	public const string DataColumn_CannotSetMaxLength = "Cannot set Column '{0}' property MaxLength to '{1}'. There is at least one string in the table longer than the new limit.";
	public const string DataColumn_CannotSetMaxLength2 = "Cannot set Column '{0}' property MaxLength. The Column is SimpleContent.";
	public const string DataColumn_CannotSimpleContentType = "Cannot set Column '{0}' property DataType to {1}. The Column is SimpleContent.";
	public const string DataColumn_CannotSimpleContent = "Cannot set Column '{0}' property MappingType to SimpleContent. The Column DataType is {1}.";
	public const string DataColumn_ExceedMaxLength = "Column '{0}' exceeds the MaxLength limit.";
	public const string DataColumn_NotAllowDBNull = "Column '{0}' does not allow DBNull.Value.";
	public const string DataColumn_CannotChangeNamespace = "Cannot change the Column '{0}' property Namespace. The Column is SimpleContent.";
	public const string DataColumn_AutoIncrementCannotSetIfHasData = "Cannot change AutoIncrement of a DataColumn with type '{0}' once it has data.";
	public const string DataColumn_NotInTheUnderlyingTable = "Column '{0}' does not belong to underlying table '{1}'.";
	public const string DataColumn_InvalidDataColumnMapping = "DataColumn with type '{0}' is a complexType. Can not serialize value of a complex type as Attribute";
	public const string DataColumn_CannotSetDateTimeModeForNonDateTimeColumns = "The DateTimeMode can be set only on DataColumns of type DateTime.";
	public const string DataColumn_DateTimeMode = "Cannot change DateTimeMode from '{0}' to '{1}' once the table has data.";
	public const string DataColumn_INullableUDTwithoutStaticNull = "Type '{0}' does not contain static Null property or field.";
	public const string DataColumn_UDTImplementsIChangeTrackingButnotIRevertible = "Type '{0}' does not implement IRevertibleChangeTracking; therefore can not proceed with RejectChanges().";
	public const string DataColumn_SetAddedAndModifiedCalledOnNonUnchanged = "SetAdded and SetModified can only be called on DataRows with Unchanged DataRowState.";
	public const string DataColumn_OrdinalExceedMaximun = "Ordinal '{0}' exceeds the maximum number.";
	public const string DataColumn_NullableTypesNotSupported = "DataSet does not support System.Nullable<>.";
	public const string DataConstraint_NoName = "Cannot change the name of a constraint to empty string when it is in the ConstraintCollection.";
	public const string DataConstraint_Violation = "Cannot enforce constraints on constraint {0}.";
	public const string DataConstraint_ViolationValue = "Column '{0}' is constrained to be unique.  Value '{1}' is already present.";
	public const string DataConstraint_NotInTheTable = "Constraint '{0}' does not belong to this DataTable.";
	public const string DataConstraint_OutOfRange = "Cannot find constraint {0}.";
	public const string DataConstraint_Duplicate = "Constraint matches constraint named {0} already in collection.";
	public const string DataConstraint_DuplicateName = "A Constraint named '{0}' already belongs to this DataTable.";
	public const string DataConstraint_UniqueViolation = "These columns don't currently have unique values.";
	public const string DataConstraint_ForeignTable = "These columns don't point to this table.";
	public const string DataConstraint_ParentValues = "This constraint cannot be enabled as not all values have corresponding parent values.";
	public const string DataConstraint_AddFailed = "This constraint cannot be added since ForeignKey doesn't belong to table {0}.";
	public const string DataConstraint_RemoveFailed = "Cannot remove a constraint that doesn't belong to this table.";
	public const string DataConstraint_NeededForForeignKeyConstraint = "Cannot remove unique constraint '{0}'. Remove foreign key constraint '{1}' first.";
	public const string DataConstraint_CascadeDelete = "Cannot delete this row because constraints are enforced on relation {0}, and deleting this row will strand child rows.";
	public const string DataConstraint_CascadeUpdate = "Cannot make this change because constraints are enforced on relation {0}, and changing this value will strand child rows.";
	public const string DataConstraint_ClearParentTable = "Cannot clear table {0} because ForeignKeyConstraint {1} enforces constraints and there are child rows in {2}.";
	public const string DataConstraint_ForeignKeyViolation = "ForeignKeyConstraint {0} requires the child key values ({1}) to exist in the parent table.";
	public const string DataConstraint_BadObjectPropertyAccess = "Property not accessible because '{0}'.";
	public const string DataConstraint_RemoveParentRow = "Cannot remove this row because it has child rows, and constraints on relation {0} are enforced.";
	public const string DataConstraint_AddPrimaryKeyConstraint = "Cannot add primary key constraint since primary key is already set for the table.";
	public const string DataConstraint_CantAddConstraintToMultipleNestedTable = "Cannot add constraint to DataTable '{0}' which is a child table in two nested relations.";
	public const string DataKey_TableMismatch = "Cannot create a Key from Columns that belong to different tables.";
	public const string DataKey_NoColumns = "Cannot have 0 columns.";
	public const string DataKey_TooManyColumns = "Cannot have more than {0} columns.";
	public const string DataKey_DuplicateColumns = "Cannot create a Key when the same column is listed more than once: '{0}'";
	public const string DataKey_RemovePrimaryKey = "Cannot remove unique constraint since it's the primary key of a table.";
	public const string DataKey_RemovePrimaryKey1 = "Cannot remove unique constraint since it's the primary key of table {0}.";
	public const string DataRelation_ColumnsTypeMismatch = "Parent Columns and Child Columns don't have type-matching columns.";
	public const string DataRelation_KeyColumnsIdentical = "ParentKey and ChildKey are identical.";
	public const string DataRelation_KeyLengthMismatch = "ParentColumns and ChildColumns should be the same length.";
	public const string DataRelation_KeyZeroLength = "ParentColumns and ChildColumns must not be zero length.";
	public const string DataRelation_ForeignRow = "The row doesn't belong to the same DataSet as this relation.";
	public const string DataRelation_NoName = "RelationName is required when it is part of a DataSet.";
	public const string DataRelation_ForeignTable = "GetChildRows requires a row whose Table is {0}, but the specified row's Table is {1}.";
	public const string DataRelation_ForeignDataSet = "This relation should connect two tables in this DataSet to be added to this DataSet.";
	public const string DataRelation_GetParentRowTableMismatch = "GetParentRow requires a row whose Table is {0}, but the specified row's Table is {1}.";
	public const string DataRelation_SetParentRowTableMismatch = "SetParentRow requires a child row whose Table is {0}, but the specified row's Table is {1}.";
	public const string DataRelation_DataSetMismatch = "Cannot have a relationship between tables in different DataSets.";
	public const string DataRelation_TablesInDifferentSets = "Cannot create a relation between tables in different DataSets.";
	public const string DataRelation_AlreadyExists = "A relation already exists for these child columns.";
	public const string DataRelation_DoesNotExist = "This relation doesn't belong to this relation collection.";
	public const string DataRelation_AlreadyInOtherDataSet = "This relation already belongs to another DataSet.";
	public const string DataRelation_AlreadyInTheDataSet = "This relation already belongs to this DataSet.";
	public const string DataRelation_DuplicateName = "A Relation named '{0}' already belongs to this DataSet.";
	public const string DataRelation_NotInTheDataSet = "Relation {0} does not belong to this DataSet.";
	public const string DataRelation_OutOfRange = "Cannot find relation {0}.";
	public const string DataRelation_TableNull = "Cannot create a collection on a null table.";
	public const string DataRelation_TableWasRemoved = "The table this collection displays relations for has been removed from its DataSet.";
	public const string DataRelation_ChildTableMismatch = "Cannot add a relation to this table's ParentRelation collection where this table isn't the child table.";
	public const string DataRelation_ParentTableMismatch = "Cannot add a relation to this table's ChildRelation collection where this table isn't the parent table.";
	public const string DataRelation_RelationNestedReadOnly = "Cannot set the 'Nested' property to false for this relation.";
	public const string DataRelation_TableCantBeNestedInTwoTables = "The same table '{0}' cannot be the child table in two nested relations.";
	public const string DataRelation_LoopInNestedRelations = "The table ({0}) cannot be the child table to itself in nested relations.";
	public const string DataRelation_CaseLocaleMismatch = "Cannot add a DataRelation or Constraint that has different Locale or CaseSensitive settings between its parent and child tables.";
	public const string DataRelation_ParentOrChildColumnsDoNotHaveDataSet = "Cannot create a DataRelation if Parent or Child Columns are not in a DataSet.";
	public const string DataRelation_InValidNestedRelation = "Nested table '{0}' which inherits its namespace cannot have multiple parent tables in different namespaces.";
	public const string DataRelation_InValidNamespaceInNestedRelation = "Nested table '{0}' with empty namespace cannot have multiple parent tables in different namespaces.";
	public const string DataRow_NotInTheDataSet = "The row doesn't belong to the same DataSet as this relation.";
	public const string DataRow_NotInTheTable = "Cannot perform this operation on a row not in the table.";
	public const string DataRow_ParentRowNotInTheDataSet = "This relation and child row don't belong to same DataSet.";
	public const string DataRow_EditInRowChanging = "Cannot change a proposed value in the RowChanging event.";
	public const string DataRow_EndEditInRowChanging = "Cannot call EndEdit() inside an OnRowChanging event.";
	public const string DataRow_BeginEditInRowChanging = "Cannot call BeginEdit() inside the RowChanging event.";
	public const string DataRow_CancelEditInRowChanging = "Cannot call CancelEdit() inside an OnRowChanging event.  Throw an exception to cancel this update.";
	public const string DataRow_DeleteInRowDeleting = "Cannot call Delete inside an OnRowDeleting event.  Throw an exception to cancel this delete.";
	public const string DataRow_ValuesArrayLength = "Input array is longer than the number of columns in this table.";
	public const string DataRow_NoCurrentData = "There is no Current data to access.";
	public const string DataRow_NoOriginalData = "There is no Original data to access.";
	public const string DataRow_NoProposedData = "There is no Proposed data to access.";
	public const string DataRow_RemovedFromTheTable = "This row has been removed from a table and does not have any data.  BeginEdit() will allow creation of new data in this row.";
	public const string DataRow_DeletedRowInaccessible = "Deleted row information cannot be accessed through the row.";
	public const string DataRow_InvalidVersion = "Version must be Original, Current, or Proposed.";
	public const string DataRow_OutOfRange = "There is no row at position {0}.";
	public const string DataRow_RowInsertOutOfRange = "The row insert position {0} is invalid.";
	public const string DataRow_RowInsertMissing = "Values are missing in the rowOrder sequence for table '{0}'.";
	public const string DataRow_RowOutOfRange = "The given DataRow is not in the current DataRowCollection.";
	public const string DataRow_AlreadyInOtherCollection = "This row already belongs to another table.";
	public const string DataRow_AlreadyInTheCollection = "This row already belongs to this table.";
	public const string DataRow_AlreadyDeleted = "Cannot delete this row since it's already deleted.";
	public const string DataRow_Empty = "This row is empty.";
	public const string DataRow_AlreadyRemoved = "Cannot remove a row that's already been removed.";
	public const string DataRow_MultipleParents = "A child row has multiple parents.";
	public const string DataRow_InvalidRowBitPattern = "Unrecognized row state bit pattern.";
	public const string DataSet_SetNameToEmpty = "Cannot change the name of the DataSet to an empty string.";
	public const string DataSet_SetDataSetNameConflicting = "The name '{0}' is invalid. A DataSet cannot have the same name of the DataTable.";
	public const string DataSet_UnsupportedSchema = "The schema namespace is invalid. Please use this one instead: {0}.";
	public const string DataSet_CannotChangeCaseLocale = "Cannot change CaseSensitive or Locale property. This change would lead to at least one DataRelation or Constraint to have different Locale or CaseSensitive settings between its related tables.";
	public const string DataSet_CannotChangeSchemaSerializationMode = "SchemaSerializationMode property can be set only if it is overridden by derived DataSet.";
	public const string DataTable_ForeignPrimaryKey = "PrimaryKey columns do not belong to this table.";
	public const string DataTable_CannotAddToSimpleContent = "Cannot add a nested relation or an element column to a table containing a SimpleContent column.";
	public const string DataTable_NoName = "TableName is required when it is part of a DataSet.";
	public const string DataTable_MultipleSimpleContentColumns = "DataTable already has a simple content column.";
	public const string DataTable_MissingPrimaryKey = "Table doesn't have a primary key.";
	public const string DataTable_InvalidSortString = " {0} isn't a valid Sort string entry.";
	public const string DataTable_CanNotSerializeDataTableHierarchy = "Cannot serialize the DataTable. A DataTable being used in one or more DataColumn expressions is not a descendant of current DataTable.";
	public const string DataTable_CanNotRemoteDataTable = "This DataTable can only be remoted as part of DataSet. One or more Expression Columns has reference to other DataTable(s).";
	public const string DataTable_CanNotSetRemotingFormat = "Cannot have different remoting format property value for DataSet and DataTable.";
	public const string DataTable_CanNotSerializeDataTableWithEmptyName = "Cannot serialize the DataTable. DataTable name is not set.";
	public const string DataTable_DuplicateName = "A DataTable named '{0}' already belongs to this DataSet.";
	public const string DataTable_DuplicateName2 = "A DataTable named '{0}' with the same Namespace '{1}' already belongs to this DataSet.";
	public const string DataTable_SelfnestedDatasetConflictingName = "The table ({0}) cannot be the child table to itself in a nested relation: the DataSet name conflicts with the table name.";
	public const string DataTable_DatasetConflictingName = "The name '{0}' is invalid. A DataTable cannot have the same name of the DataSet.";
	public const string DataTable_AlreadyInOtherDataSet = "DataTable already belongs to another DataSet.";
	public const string DataTable_AlreadyInTheDataSet = "DataTable already belongs to this DataSet.";
	public const string DataTable_NotInTheDataSet = "Table {0} does not belong to this DataSet.";
	public const string DataTable_OutOfRange = "Cannot find table {0}.";
	public const string DataTable_InRelation = "Cannot remove a table that has existing relations.  Remove relations first.";
	public const string DataTable_InConstraint = "Cannot remove table {0}, because it referenced in ForeignKeyConstraint {1}.  Remove the constraint first.";
	public const string DataTable_TableNotFound = "DataTable '{0}' does not match to any DataTable in source.";
	public const string DataMerge_MissingDefinition = "Target DataSet missing definition for {0}.";
	public const string DataMerge_MissingConstraint = "Target DataSet missing {0} {1}.";
	public const string DataMerge_DataTypeMismatch = "<target>.{0} and <source>.{0} have conflicting properties: DataType property mismatch.";
	public const string DataMerge_PrimaryKeyMismatch = "<target>.PrimaryKey and <source>.PrimaryKey have different Length.";
	public const string DataMerge_PrimaryKeyColumnsMismatch = "Mismatch columns in the PrimaryKey : <target>.{0} versus <source>.{1}.";
	public const string DataMerge_ReltionKeyColumnsMismatch = "Relation {0} cannot be merged, because keys have mismatch columns.";
	public const string DataMerge_MissingColumnDefinition = "Target table {0} missing definition for column {1}.";
	public const string DataIndex_RecordStateRange = "The RowStates parameter must be set to a valid combination of values from the DataViewRowState enumeration.";
	public const string DataIndex_FindWithoutSortOrder = "Find finds a row based on a Sort order, and no Sort order is specified.";
	public const string DataIndex_KeyLength = "Expecting {0} value(s) for the key being indexed, but received {1} value(s).";
	public const string DataStorage_AggregateException = "Invalid usage of aggregate function {0}() and Type: {1}.";
	public const string DataStorage_InvalidStorageType = "Invalid storage type: {0}.";
	public const string DataStorage_ProblematicChars = "The DataSet Xml persistency does not support the value '{0}' as Char value, please use Byte storage instead.";
	public const string DataStorage_SetInvalidDataType = "Type of value has a mismatch with column type";
	public const string DataStorage_IComparableNotDefined = " Type '{0}' does not implement IComparable interface. Comparison cannot be done.";
	public const string DataView_SetFailed = "Cannot set {0}.";
	public const string DataView_SetDataSetFailed = "Cannot change DataSet on a DataViewManager that's already the default view for a DataSet.";
	public const string DataView_SetRowStateFilter = "RowStateFilter cannot show ModifiedOriginals and ModifiedCurrents at the same time.";
	public const string DataView_SetTable = "Cannot change Table property on a DefaultView or a DataView coming from a DataViewManager.";
	public const string DataView_CanNotSetDataSet = "Cannot change DataSet property once it is set.";
	public const string DataView_CanNotUseDataViewManager = "DataSet must be set prior to using DataViewManager.";
	public const string DataView_CanNotSetTable = "Cannot change Table property once it is set.";
	public const string DataView_CanNotUse = "DataTable must be set prior to using DataView.";
	public const string DataView_CanNotBindTable = "Cannot bind to DataTable with no name.";
	public const string DataView_SetIListObject = "Cannot set an object into this list.";
	public const string DataView_AddNewNotAllowNull = "Cannot call AddNew on a DataView where AllowNew is false.";
	public const string DataView_NotOpen = "DataView is not open.";
	public const string DataView_CreateChildView = "The relation is not parented to the table to which this DataView points.";
	public const string DataView_CanNotDelete = "Cannot delete on a DataSource where AllowDelete is false.";
	public const string DataView_CanNotEdit = "Cannot edit on a DataSource where AllowEdit is false.";
	public const string DataView_GetElementIndex = "Index {0} is either negative or above rows count.";
	public const string DataView_AddExternalObject = "Cannot add external objects to this list.";
	public const string DataView_CanNotClear = "Cannot clear this list.";
	public const string DataView_InsertExternalObject = "Cannot insert external objects to this list.";
	public const string DataView_RemoveExternalObject = "Cannot remove objects not in the list.";
	public const string DataROWView_PropertyNotFound = "{0} is neither a DataColumn nor a DataRelation for table {1}.";
	public const string Range_Argument = "Min ({0}) must be less than or equal to max ({1}) in a Range object.";
	public const string Range_NullRange = "This is a null range.";
	public const string RecordManager_MinimumCapacity = "MinimumCapacity must be non-negative.";
	public const string SqlConvert_ConvertFailed = " Cannot convert object of type '{0}' to object of type '{1}'.";
	public const string DataSet_DefaultDataException = "Data Exception.";
	public const string DataSet_DefaultConstraintException = "Constraint Exception.";
	public const string DataSet_DefaultDeletedRowInaccessibleException = "Deleted rows inaccessible.";
	public const string DataSet_DefaultDuplicateNameException = "Duplicate name not allowed.";
	public const string DataSet_DefaultInRowChangingEventException = "Operation not supported in the RowChanging event.";
	public const string DataSet_DefaultInvalidConstraintException = "Invalid constraint.";
	public const string DataSet_DefaultMissingPrimaryKeyException = "Missing primary key.";
	public const string DataSet_DefaultNoNullAllowedException = "Null not allowed.";
	public const string DataSet_DefaultReadOnlyException = "Column is marked read only.";
	public const string DataSet_DefaultRowNotInTableException = "Row not found in table.";
	public const string DataSet_DefaultVersionNotFoundException = "Version not found.";
	public const string Load_ReadOnlyDataModified = "ReadOnly Data is Modified.";
	public const string DataTableReader_InvalidDataTableReader = "DataTableReader is invalid for current DataTable '{0}'.";
	public const string DataTableReader_SchemaInvalidDataTableReader = "Schema of current DataTable '{0}' in DataTableReader has changed, DataTableReader is invalid.";
	public const string DataTableReader_CannotCreateDataReaderOnEmptyDataSet = "DataTableReader Cannot be created. There is no DataTable in DataSet.";
	public const string DataTableReader_DataTableReaderArgumentIsEmpty = "Cannot create DataTableReader. Argument is Empty.";
	public const string DataTableReader_ArgumentContainsNullValue = "Cannot create DataTableReader. Arguments contain null value.";
	public const string DataTableReader_InvalidRowInDataTableReader = "Current DataRow is either in Deleted or Detached state.";
	public const string DataTableReader_DataTableCleared = "Current DataTable '{0}' is empty. There is no DataRow in DataTable.";
	public const string RbTree_InvalidState = "DataTable internal index is corrupted: '{0}'.";
	public const string RbTree_EnumerationBroken = "Collection was modified; enumeration operation might not execute.";
	public const string NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration = "Simple type '{0}' has already be declared with different '{1}'.";
	public const string DataDom_Foliation = "Invalid foliation.";
	public const string DataDom_TableNameChange = "Cannot change the table name once the associated DataSet is mapped to a loaded XML document.";
	public const string DataDom_TableNamespaceChange = "Cannot change the table namespace once the associated DataSet is mapped to a loaded XML document.";
	public const string DataDom_ColumnNameChange = "Cannot change the column name once the associated DataSet is mapped to a loaded XML document.";
	public const string DataDom_ColumnNamespaceChange = "Cannot change the column namespace once the associated DataSet is mapped to a loaded XML document.";
	public const string DataDom_ColumnMappingChange = "Cannot change the ColumnMapping property once the associated DataSet is mapped to a loaded XML document.";
	public const string DataDom_TableColumnsChange = "Cannot add or remove columns from the table once the DataSet is mapped to a loaded XML document.";
	public const string DataDom_DataSetTablesChange = "Cannot add or remove tables from the DataSet once the DataSet is mapped to a loaded XML document.";
	public const string DataDom_DataSetNestedRelationsChange = "Cannot add, remove, or change Nested relations from the DataSet once the DataSet is mapped to a loaded XML document.";
	public const string DataDom_DataSetNull = "The DataSet parameter is invalid. It cannot be null.";
	public const string DataDom_DataSetNameChange = "Cannot change the DataSet name once the DataSet is mapped to a loaded XML document.";
	public const string DataDom_CloneNode = "This type of node cannot be cloned: {0}.";
	public const string DataDom_MultipleLoad = "Cannot load XmlDataDocument if it already contains data. Please use a new XmlDataDocument.";
	public const string DataDom_MultipleDataSet = "DataSet can be associated with at most one XmlDataDocument. Cannot associate the DataSet with the current XmlDataDocument because the DataSet is already associated with another XmlDataDocument.";
	public const string DataDom_NotSupport_GetElementById = "GetElementById() is not supported on DataDocument.";
	public const string DataDom_NotSupport_EntRef = "Cannot create entity references on DataDocument.";
	public const string DataDom_NotSupport_Clear = "Clear function on DateSet and DataTable is not supported on XmlDataDocument.";
	public const string ConfigProviderNotFound = "Unable to find the requested .Net Framework Data Provider.  It may not be installed.";
	public const string ConfigProviderInvalid = "The requested .Net Framework Data Provider's implementation does not have an Instance field of a System.Data.Common.DbProviderFactory derived type.";
	public const string ConfigProviderNotInstalled = "Failed to find or load the registered .Net Framework Data Provider.";
	public const string ConfigProviderMissing = "The missing .Net Framework Data Provider's assembly qualified name is required.";
	public const string ConfigBaseElementsOnly = "Only elements allowed.";
	public const string ConfigBaseNoChildNodes = "Child nodes not allowed.";
	public const string ConfigUnrecognizedAttributes = "Unrecognized attribute '{0}'.";
	public const string ConfigUnrecognizedElement = "Unrecognized element.";
	public const string ConfigSectionsUnique = "The '{0}' section can only appear once per config file.";
	public const string ConfigRequiredAttributeMissing = "Required attribute '{0}' not found.";
	public const string ConfigRequiredAttributeEmpty = "Required attribute '{0}' cannot be empty.";
	public const string ADP_EmptyArray = "Expecting non-empty array for '{0}' parameter.";
	public const string SQL_WrongType = "Expecting argument of type {1}, but received type {0}.";
	public const string ADP_InvalidConnectionOptionValue = "Invalid value for key '{0}'.";
	public const string ADP_KeywordNotSupported = "Keyword not supported: '{0}'.";
	public const string ADP_InternalProviderError = "Internal .Net Framework Data Provider error {0}.";
	public const string ADP_NoQuoteChange = "The QuotePrefix and QuoteSuffix properties cannot be changed once an Insert, Update, or Delete command has been generated.";
	public const string ADP_MissingSourceCommand = "The DataAdapter.SelectCommand property needs to be initialized.";
	public const string ADP_MissingSourceCommandConnection = "The DataAdapter.SelectCommand.Connection property needs to be initialized;";
	public const string ADP_InvalidMultipartName = "{0} \"{1}\".";
	public const string ADP_InvalidMultipartNameQuoteUsage = "{0} \"{1}\", incorrect usage of quotes.";
	public const string ADP_InvalidMultipartNameToManyParts = "{0} \"{1}\", the current limit of \"{2}\" is insufficient.";
	public const string ADP_ColumnSchemaExpression = "The column mapping from SourceColumn '{0}' failed because the DataColumn '{1}' is a computed column.";
	public const string ADP_ColumnSchemaMismatch = "Inconvertible type mismatch between SourceColumn '{0}' of {1} and the DataColumn '{2}' of {3}.";
	public const string ADP_ColumnSchemaMissing1 = "Missing the DataColumn '{0}' for the SourceColumn '{2}'.";
	public const string ADP_ColumnSchemaMissing2 = "Missing the DataColumn '{0}' in the DataTable '{1}' for the SourceColumn '{2}'.";
	public const string ADP_InvalidSourceColumn = "SourceColumn is required to be a non-empty string.";
	public const string ADP_MissingColumnMapping = "Missing SourceColumn mapping for '{0}'.";
	public const string ADP_NotSupportedEnumerationValue = "The {0} enumeration value, {1}, is not supported by the {2} method.";
	public const string ADP_MissingTableSchema = "Missing the '{0}' DataTable for the '{1}' SourceTable.";
	public const string ADP_InvalidSourceTable = "SourceTable is required to be a non-empty string";
	public const string ADP_MissingTableMapping = "Missing SourceTable mapping: '{0}'";
	public const string ADP_ConnectionRequired = "{0}: Connection property has not been initialized.";
	public const string ADP_OpenConnectionRequired = "{0} requires an open and available Connection. {1}";
	public const string ADP_ConnectionRequired_Insert = "Update requires the InsertCommand to have a connection object. The Connection property of the InsertCommand has not been initialized.";
	public const string ADP_ConnectionRequired_Update = "Update requires the UpdateCommand to have a connection object. The Connection property of the UpdateCommand has not been initialized.";
	public const string ADP_ConnectionRequired_Delete = "Update requires the DeleteCommand to have a connection object. The Connection property of the DeleteCommand has not been initialized.";
	public const string ADP_ConnectionRequired_Batch = "Update requires a connection object.  The Connection property has not been initialized.";
	public const string ADP_ConnectionRequired_Clone = "Update requires the command clone to have a connection object. The Connection property of the command clone has not been initialized.";
	public const string ADP_OpenConnectionRequired_Insert = "Update requires the {0}Command to have an open connection object. {1}";
	public const string ADP_OpenConnectionRequired_Update = "Update requires the {0}Command to have an open connection object. {1}";
	public const string ADP_OpenConnectionRequired_Delete = "Update requires the {0}Command to have an open connection object. {1}";
	public const string ADP_OpenConnectionRequired_Clone = "Update requires the updating command to have an open connection object. {1}";
	public const string ADP_MissingSelectCommand = "The SelectCommand property has not been initialized before calling '{0}'.";
	public const string ADP_UnwantedStatementType = "The StatementType {0} is not expected here.";
	public const string ADP_FillSchemaRequiresSourceTableName = "FillSchema: expected a non-empty string for the SourceTable name.";
	public const string ADP_FillRequiresSourceTableName = "Fill: expected a non-empty string for the SourceTable name.";
	public const string ADP_FillChapterAutoIncrement = "Hierarchical chapter columns must map to an AutoIncrement DataColumn.";
	public const string ADP_MissingDataReaderFieldType = "DataReader.GetFieldType({0}) returned null.";
	public const string ADP_OnlyOneTableForStartRecordOrMaxRecords = "Only specify one item in the dataTables array when using non-zero values for startRecords or maxRecords.";
	public const string ADP_UpdateRequiresSourceTable = "Update unable to find TableMapping['{0}'] or DataTable '{0}'.";
	public const string ADP_UpdateRequiresSourceTableName = "Update: expected a non-empty SourceTable name.";
	public const string ADP_UpdateRequiresCommandClone = "Update requires the command clone to be valid.";
	public const string ADP_UpdateRequiresCommandSelect = "Auto SQL generation during Update requires a valid SelectCommand.";
	public const string ADP_UpdateRequiresCommandInsert = "Update requires a valid InsertCommand when passed DataRow collection with new rows.";
	public const string ADP_UpdateRequiresCommandUpdate = "Update requires a valid UpdateCommand when passed DataRow collection with modified rows.";
	public const string ADP_UpdateRequiresCommandDelete = "Update requires a valid DeleteCommand when passed DataRow collection with deleted rows.";
	public const string ADP_UpdateMismatchRowTable = "DataRow[{0}] is from a different DataTable than DataRow[0].";
	public const string ADP_RowUpdatedErrors = "RowUpdatedEvent: Errors occurred; no additional is information available.";
	public const string ADP_RowUpdatingErrors = "RowUpdatingEvent: Errors occurred; no additional is information available.";
	public const string ADP_ResultsNotAllowedDuringBatch = "When batching, the command's UpdatedRowSource property value of UpdateRowSource.FirstReturnedRecord or UpdateRowSource.Both is invalid.";
	public const string ADP_UpdateConcurrencyViolation_Update = "Concurrency violation: the UpdateCommand affected {0} of the expected {1} records.";
	public const string ADP_UpdateConcurrencyViolation_Delete = "Concurrency violation: the DeleteCommand affected {0} of the expected {1} records.";
	public const string ADP_UpdateConcurrencyViolation_Batch = "Concurrency violation: the batched command affected {0} of the expected {1} records.";
	public const string ADP_InvalidSourceBufferIndex = "Invalid source buffer (size of {0}) offset: {1}";
	public const string ADP_InvalidDestinationBufferIndex = "Invalid destination buffer (size of {0}) offset: {1}";
	public const string ADP_StreamClosed = "Invalid attempt to {0} when stream is closed.";
	public const string ADP_InvalidSeekOrigin = "Specified SeekOrigin value is invalid.";
	public const string ADP_DynamicSQLJoinUnsupported = "Dynamic SQL generation is not supported against multiple base tables.";
	public const string ADP_DynamicSQLNoTableInfo = "Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information.";
	public const string ADP_DynamicSQLNoKeyInfoDelete = "Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.";
	public const string ADP_DynamicSQLNoKeyInfoUpdate = "Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.";
	public const string ADP_DynamicSQLNoKeyInfoRowVersionDelete = "Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not contain a row version column.";
	public const string ADP_DynamicSQLNoKeyInfoRowVersionUpdate = "Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not contain a row version column.";
	public const string ADP_DynamicSQLNestedQuote = "Dynamic SQL generation not supported against table names '{0}' that contain the QuotePrefix or QuoteSuffix character '{1}'.";
	public const string SQL_InvalidBufferSizeOrIndex = "Buffer offset '{1}' plus the bytes available '{0}' is greater than the length of the passed in buffer.";
	public const string SQL_InvalidDataLength = "Data length '{0}' is less than 0.";
	public const string SqlMisc_NullString = "Null";
	public const string SqlMisc_MessageString = "Message";
	public const string SqlMisc_ArithOverflowMessage = "Arithmetic Overflow.";
	public const string SqlMisc_DivideByZeroMessage = "Divide by zero error encountered.";
	public const string SqlMisc_NullValueMessage = "Data is Null. This method or property cannot be called on Null values.";
	public const string SqlMisc_TruncationMessage = "Numeric arithmetic causes truncation.";
	public const string SqlMisc_DateTimeOverflowMessage = "SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.";
	public const string SqlMisc_ConcatDiffCollationMessage = "Two strings to be concatenated have different collation.";
	public const string SqlMisc_CompareDiffCollationMessage = "Two strings to be compared have different collation.";
	public const string SqlMisc_InvalidFlagMessage = "Invalid flag value.";
	public const string SqlMisc_NumeToDecOverflowMessage = "Conversion from SqlDecimal to Decimal overflows.";
	public const string SqlMisc_ConversionOverflowMessage = "Conversion overflows.";
	public const string SqlMisc_InvalidDateTimeMessage = "Invalid SqlDateTime.";
	public const string SqlMisc_TimeZoneSpecifiedMessage = "A time zone was specified. SqlDateTime does not support time zones.";
	public const string SqlMisc_InvalidArraySizeMessage = "Invalid array size.";
	public const string SqlMisc_InvalidPrecScaleMessage = "Invalid numeric precision/scale.";
	public const string SqlMisc_FormatMessage = "The input wasn't in a correct format.";
	public const string SqlMisc_SqlTypeMessage = "SqlType error.";
	public const string SqlMisc_NoBufferMessage = "There is no buffer. Read or write operation failed.";
	public const string SqlMisc_BufferInsufficientMessage = "The buffer is insufficient. Read or write operation failed.";
	public const string SqlMisc_WriteNonZeroOffsetOnNullMessage = "Cannot write to non-zero offset, because current value is Null.";
	public const string SqlMisc_WriteOffsetLargerThanLenMessage = "Cannot write from an offset that is larger than current length. It would leave uninitialized data in the buffer.";
	public const string SqlMisc_NotFilledMessage = "SQL Type has not been loaded with data.";
	public const string SqlMisc_AlreadyFilledMessage = "SQL Type has already been loaded with data.";
	public const string SqlMisc_ClosedXmlReaderMessage = "Invalid attempt to access a closed XmlReader.";
	public const string SqlMisc_InvalidOpStreamClosed = "Invalid attempt to call {0} when the stream is closed.";
	public const string SqlMisc_InvalidOpStreamNonWritable = "Invalid attempt to call {0} when the stream non-writable.";
	public const string SqlMisc_InvalidOpStreamNonReadable = "Invalid attempt to call {0} when the stream non-readable.";
	public const string SqlMisc_InvalidOpStreamNonSeekable = "Invalid attempt to call {0} when the stream is non-seekable.";
	public const string ADP_DBConcurrencyExceptionMessage = "DB concurrency violation.";
	public const string ADP_OperationAborted = "Operation aborted.";
	public const string ADP_OperationAbortedExceptionMessage = "Operation aborted due to an exception (see InnerException for details).";
	public const string ADP_InvalidMaxRecords = "The MaxRecords value of {0} is invalid; the value must be >= 0.";
	public const string ADP_CollectionIndexInt32 = "Invalid index {0} for this {1} with Count={2}.";
	public const string ADP_MissingTableMappingDestination = "Missing TableMapping when TableMapping.DataSetTable='{0}'.";
	public const string ADP_InvalidStartRecord = "The StartRecord value of {0} is invalid; the value must be >= 0.";
	public const string DataDom_EnforceConstraintsShouldBeOff = "Please set DataSet.EnforceConstraints == false before trying to edit XmlDataDocument using XML operations.";
	public const string DataColumns_RemoveExpression = "Cannot remove this column, because it is part of an expression: {0} = {1}.";
	public const string DataRow_RowInsertTwice = "The rowOrder value={0} has been found twice for table named '{1}'.";
	public const string Xml_ElementTypeNotFound = "Cannot find ElementType name='{0}'.";
}
