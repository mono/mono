<?xml version="1.0" encoding="utf-8"?>
<Type Name="OleDbConnection" FullName="System.Data.OleDb.OleDbConnection">
  <TypeSignature Language="C#" Maintainer="auto" Value="public sealed class OleDbConnection : System.Data.Common.DbConnection, ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>An <see cref="T:System.Data.OleDb.OleDbConnection" /> object represents a unique connection to a data source. With a client/server database system, it is equivalent to a network connection to the server. Depending on the functionality supported by the native OLE DB provider, some methods or properties of an <see cref="T:System.Data.OleDb.OleDbConnection" /> object may not be available.</para>
      <para>When you create an instance of <see cref="T:System.Data.OleDb.OleDbConnection" />, all properties are set to their initial values. For a list of these values, see the <see cref="T:System.Data.OleDb.OleDbConnection" /> constructor.</para>
      <para>You can open more than one DataReader on a single <see cref="T:System.Data.OleDb.OleDbConnection" />. If the OLE DB provider you use does not support more than one DataReader on a single connection, the provider implicitly opens an additional connection for each.</para>
      <para>If the <see cref="T:System.Data.OleDb.OleDbConnection" /> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> or Dispose, or by using the <see cref="T:System.Data.OleDb.OleDbConnection" /> object within a Using statement. </para>
      <block subset="none" type="note">
        <para>To deploy high-performance applications, you must use connection pooling. When you use the .NET Framework Data Provider for OLE DB, you do not have to enable connection pooling because the provider manages this automatically. For more information about how to use connection pooling with the .NET Framework Data Provider for OLE DB, see <format type="text/html"><a href="2bd83b1e-3ea9-43c4-bade-d9cdb9bbbb04">Understanding Connection Pooling</a></format>.</para>
      </block>
      <para>If a fatal <see cref="T:System.Data.OleDb.OleDbException" /> (for example, a SQL Server severity level of 20 or greater) is generated by the method executing an <see cref="T:System.Data.OleDb.OleDbCommand" />, the <see cref="T:System.Data.OleDb.OleDbConnection" /> might be closed. However, the user can reopen the connection and continue.</para>
      <para>An application that creates an instance of the <see cref="T:System.Data.OleDb.OleDbConnection" /> object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. <see cref="T:System.Data.OleDb.OleDbConnection" /> makes security demands using the <see cref="T:System.Data.OleDb.OleDbPermission" /> object. Users can verify that their code has sufficient permissions by using the <see cref="T:System.Data.OleDb.OleDbPermissionAttribute" /> object. Users and administrators can also use the <format type="text/html"><a href="d2bf6123-7b0c-4e60-87ad-a39a1c3eb2e0">Code Access Security Policy Tool (Caspol.exe)</a></format> to modify security policy at the computer, user, and enterprise levels. For more information, see <format type="text/html"><a href="93e099eb-daa1-4f1e-b031-c1e10a996f88">Code Access Security and ADO.NET</a></format>.</para>
      <para>For more information about handling warning and informational messages from the data server, see <format type="text/html"><a href="5a29de74-acfc-4134-8616-829dd7ce0710">Working with Connection Events</a></format>.</para>
      <block subset="none" type="note">
        <para>The <see cref="T:System.Data.OleDb.OleDbConnection" /> object does not support setting or retrieving dynamic properties specific to an OLE DB provider. Only properties that can be passed in the connection string for the OLE DB provider are supported.</para>
      </block>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents an open connection to a data source.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbConnection ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When a new instance of <see cref="T:System.Data.OleDb.OleDbConnection" /> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> property.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Properties </para>
                </term>
                <description>
                  <para>Initial value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> </para>
              </term>
              <description>
                <para>empty string ("") </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" /> </para>
              </term>
              <description>
                <para>15 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.Database" /> </para>
              </term>
              <description>
                <para>empty string ("") </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.DataSource" /> </para>
              </term>
              <description>
                <para>empty string ("") </para>
              </description>
            </item>
          </list>
          <para>You can change the value for these properties only by using the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbConnection" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbConnection (string connectionString);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When a new instance of <see cref="T:System.Data.OleDb.OleDbConnection" /> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> property.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Properties </para>
                </term>
                <description>
                  <para>Initial value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> </para>
              </term>
              <description>
                <para>
                  <paramref name="connectionString" /> </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" /> </para>
              </term>
              <description>
                <para>15 </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.Database" /> </para>
              </term>
              <description>
                <para>empty string ("") </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.OleDb.OleDbConnection.DataSource" /> </para>
              </term>
              <description>
                <para>empty string ("") </para>
              </description>
            </item>
          </list>
          <para>You can change the value for these properties only by using the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbConnection" /> class with the specified connection string.</para>
        </summary>
        <param name="connectionString">
          <attribution license="cc4" from="Microsoft" modified="false" />The connection used to open the database. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction BeginTransaction ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You must explicitly commit or roll back the transaction using the <see cref="M:System.Data.OleDb.OleDbTransaction.Commit" /> or <see cref="M:System.Data.OleDb.OleDbTransaction.Rollback" /> method. To make sure that the .NET Framework Data Provider for OLE DB transaction management model performs correctly, avoid using other transaction management models, such as those provided by the data source.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Starts a database transaction with the current <see cref="T:System.Data.IsolationLevel" /> value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object representing the new transaction.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>You must explicitly commit or roll back the transaction using the <see cref="M:System.Data.OleDb.OleDbTransaction.Commit" /> or <see cref="M:System.Data.OleDb.OleDbTransaction.Rollback" /> method. To make sure that the .NET Framework Data Provider for OLE DB transaction management model performs correctly, avoid using other transaction management models, such as those provided by the data source.</para>
          <block subset="none" type="note">
            <para>If you do not specify an isolation level, the default isolation level for the underlying provider is used. To specify an isolation level with the <see cref="M:System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)" /> method, use the overload that takes the <paramref name="isolationLevel" /> parameter.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Starts a database transaction with the specified isolation level.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An object representing the new transaction.</para>
        </returns>
        <param name="isolationLevel">
          <attribution license="cc4" from="Microsoft" modified="false" />The isolation level under which the transaction should run.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value supplied in the <paramref name="database" /> parameter must be a valid database name. The <paramref name="database" /> parameter cannot contain a null value, an empty string, or a string with only blank characters.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Changes the current database for an open <see cref="T:System.Data.OleDb.OleDbConnection" />.</para>
        </summary>
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />The database name. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled. If <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> is called while handling a <see cref="E:System.Data.Common.DbConnection.StateChange" /> event, no additional <see cref="E:System.Data.Common.DbConnection.StateChange" /> events are fired.</para>
          <para>An application can call <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> more than one time. No exception is generated.</para>
          <block subset="none" type="note">
            <para>Do not call <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> or Dispose on an <see cref="T:System.Data.OleDb.OleDbConnection" />, an <see cref="T:System.Data.OleDb.OleDbDataReader" />, or any other managed object in the Finalize method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a Finalize method in your class definition. For more information, see <format type="text/html"><a href="22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9">Garbage Collection</a></format>.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Closes the connection to the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> is designed to match OLE DB connection string format as closely as possible with the following exceptions: </para>
          <list type="bullet">
            <item>
              <para>The "Provider = <paramref name="value" /> " clause is required. However, you cannot use "Provider = MSDASQL" because the .NET Framework Data Provider for OLE DB does not support the OLE DB Provider for ODBC (MSDASQL). To access ODBC data sources, use the <see cref="T:System.Data.Odbc.OdbcConnection" /> object that is in the <see cref="N:System.Data.Odbc" /> namespace.</para>
            </item>
            <item>
              <para>Unlike ODBC or ADO, the connection string that is returned is the same as the user-set <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />, minus security information if Persist Security Info is set to false (default). The .NET Framework Data Provider for OLE DB does not persist or return the password in a connection string unless you set the Persist Security Info keyword to true (not recommended). To maintain a high level of security, it is strongly recommended that you use the Integrated Security keyword with Persist Security Info set to false.</para>
            </item>
          </list>
          <para>You can use the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> property to connect to a variety of data sources. The following example illustrates several possible connection strings.</para>
          <code>"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=Yes"

"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\bin\LocalAccess40.mdb"

"Provider=SQLOLEDB;Data Source=(local);Integrated Security=SSPI"</code>
          <para>If the Data Source keyword is not specified in the connection string, the provider will try to connect to the local server if one is available.</para>
          <para>For more information about connection strings, see <see cref="http://go.microsoft.com/fwlink/?LinkId=126696">Using Connection String Keywords with SQL Server Native Client</see>.</para>
          <para>The <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <see cref="T:System.Data.OleDb.OleDbConnection" /> properties return only those settings that are contained in the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />.</para>
          <para>Resetting the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> on a closed connection resets all connection string values and related properties. This includes the password. For example, if you set a connection string that includes "Initial Catalog= AdventureWorks", and then reset the connection string to "Provider= SQLOLEDB;Data Source= MySQLServer;IntegratedSecurity=SSPI", the <see cref="P:System.Data.OleDb.OleDbConnection.Database" /> property is no longer set to AdventureWorks. (The Initial Catalog value of the connection string corresponds to the Database property.) </para>
          <para>A preliminary validation of the connection string is performed when the property is set. If values for the Provider, Connect Timeout, Persist Security Info, or OLE DB Services are included in the string, these values are checked. When an application calls the <see cref="M:System.Data.OleDb.OleDbConnection.Open" /> method, the connection string is fully validated. If the connection string contains invalid or unsupported properties, a run-time exception, such as <see cref="T:System.ArgumentException" />, is generated.</para>
          <block subset="none" type="note">
            <para>It is possible to supply connection information for an <see cref="T:System.Data.OleDb.OleDbConnection" /> in a Universal Data Link (UDL) file; however you should avoid doing so. UDL files are not encrypted and expose connection string information in clear text. Because a UDL file is an external file-based resource to your application, it cannot be secured using the .NET Framework. </para>
          </block>
          <para>The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation-mark character used to enclose the value must be doubled every time it occurs within the value.</para>
          <para>To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my'Server or Data Source= my"Server) unless a quotation-mark character is the first or last character in the value.</para>
          <para>To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string </para>
          <code>"key==word=value"</code>
          <para>the keyword is "key=word" and the value is "value".</para>
          <para>If a specific keyword in a keyword=value pair occurs multiple times in a connection string, the last occurrence listed is used in the value set.</para>
          <para>Keywords are not case sensitive.</para>
          <block subset="none" type="note">
            <para>You should use caution when constructing a connection string based on user input, for example, when retrieving user ID and password information from a dialog box and appending it to the connection string. The application should make sure that a user cannot embed additional connection-string parameters in these values, for example, entering a password as "validpassword;database= somedb" in an attempt to attach to a different database. If you use the Extended Properties connection string parameter for OLE DB connections, avoid passing user IDs and passwords because you should avoid storing user IDs and passwords in clear text if you can, and because the default setting of Persist Security Info= false does not affect the Extended Properties parameter.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets the string used to open a database.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.ADO.Design.OleDbConnectionStringEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'int'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A value of 0 indicates no limit, and should be avoided in a <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> because an attempt to connect will wait indefinitely.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand CreateCommand ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and returns an <see cref="T:System.Data.OleDb.OleDbCommand" /> object associated with the <see cref="T:System.Data.OleDb.OleDbConnection" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
        </returns>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Data.OleDb.OleDbConnection.Database" /> property updates dynamically. If you change the current database using a SQL statement or the <see cref="M:System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)" /> method, an informational message is sent and the property is updated automatically.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the name of the current database or the database to be used after a connection is opened.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If the connection to the database is closed, the DataSource property returns whatever is contained in ConnectionString for the data source keyword. If the connection is open and the ConnectionString data source keyword's value starts with "|datadirectory|", the property returns whatever is contained in ConnectionString for the data source keyword only. If the connection to the database is open, the property returns what the native provider returns for the DBPROP_INIT_DATASOURCE, and if that is empty, the native provider’s DBPROP_DATASOURCENAME is returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the server name or file name of the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added: an object of type 'bool'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>New in ADO.NET 2.0 is support for using the <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.ITransaction)" /> method to enlist in a distributed transaction. Because it enlists a connection in a <see cref="T:System.Transactions.Transaction" /> instance, EnlistTransaction takes advantage of functionality available in the <see cref="N:System.Transactions" /> namespace for managing distributed transactions, making it preferable to EnlistDistributedTransaction for this purpose. For more information, see <format type="text/html"><a href="718b257c-bcb2-408e-b004-a7b0adb1c176">Performing a Distributed Transaction</a></format>.</para>
          <para>You can continue to enlist in an existing distributed transaction using the <see cref="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" /> method if auto-enlistment is disabled. Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back. For more information about distributed transactions, see <format type="text/html"><a href="718b257c-bcb2-408e-b004-a7b0adb1c176">Performing a Distributed Transaction</a></format>.</para>
          <para>
            <see cref="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" /> returns an exception if the <see cref="T:System.Data.OleDb.OleDbConnection" /> has already started a transaction using <see cref="Overload:System.Data.OleDb.OleDbConnection.BeginTransaction" />. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <see cref="T:System.Data.OleDbClient.OleDbCommand" /> object), <see cref="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" /> rolls back the local transaction and enlists in the existing distributed transaction as requested. You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <see cref="Overload:System.Data.OleDb.OleDbConnection.BeginTransaction" />.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enlists in the specified transaction as a distributed transaction.</para>
        </summary>
        <param name="transaction">
          <attribution license="cc4" from="Microsoft" modified="false" />A reference to an existing <see cref="T:System.EnterpriseServices.ITransaction" /> in which to enlist.</param>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>New in ADO.NET 2.0 is support for using the <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.ITransaction)" /> method to enlist in a distributed transaction. Because it enlists a connection in a <see cref="T:System.Transactions.Transaction" /> instance, EnlistTransaction takes advantage of functionality available in the <see cref="N:System.Transactions" /> namespace for managing distributed transactions, making it preferable to EnlistDistributedTransaction, which uses a <see cref="T:System.EnterpriseServices.ITransaction" /> object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see <format type="text/html"><a href="718b257c-bcb2-408e-b004-a7b0adb1c176">Performing a Distributed Transaction</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enlists in the specified transaction as a distributed transaction.</para>
        </summary>
        <param name="transaction">
          <attribution license="cc4" from="Microsoft" modified="false" />A reference to an existing <see cref="T:System.Transactions.Transaction" /> in which to enlist.</param>
      </Docs>
    </Member>
    <Member MemberName="GetOleDbSchemaTable">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetOleDbSchemaTable (Guid schema, object[] restrictions);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Guid" />
        <Parameter Name="restrictions" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The schema table is returned as a <see cref="T:System.Data.DataTable" /> that has the same format as the OLE DB schema rowset specified by the <paramref name="schema" /> parameter. Use the <paramref name="restrictions" /> parameter to filter the rows to be returned in the <see cref="T:System.Data.DataTable" /> (for example, by specifying restrictions for table name, type, owner, or schema). When you pass values in the array, include empty strings or nulls for array elements that do not contain values. If you pass an empty array to <paramref name="restrictions" />, all rows (one for each table) are returned in default order. Values in the array correspond to the order of the columns in the source table and <see cref="T:System.Data.DataTable" />. Each element in the restrictions array is compared with the content of the corresponding column in the schema rowset. For example, the first element in the restrictions array is compared to first column in the rowset. If a restriction element is not null, only rows from the schema rowset that exactly match the value of the restriction are added to the resulting <see cref="T:System.Data.DataTable" />.</para>
          <para>The <see cref="T:System.Data.OleDb.OleDbConnection" /> method calls the underlying OLE DB IDBSchemaRowset::GetRowset method using standard common language runtime conversion rules. For more information, see <format type="text/html"><a href="f93ae35d-a416-4218-8700-c8218cc90061">COM Data Types</a></format>.</para>
          <para>You can retrieve information about literals by using <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" />. This provides information equivalent to calling the OLE DB IDBInfo::GetLiteralInfo interface, or the ADO Connection.OpenSchema method with the adSchemaDBInfoLiterals constant.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns schema information from a data source as indicated by a GUID, and after it applies the specified restrictions.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Data.DataTable" /> that contains the requested schema information.</para>
        </returns>
        <param name="schema">
          <attribution license="cc4" from="Microsoft" modified="false" />One of the <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> values that specifies the schema table to return. </param>
        <param name="restrictions">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Object" /> array of restriction values. These are applied in the order of the restriction columns. That is, the first restriction value applies to the first restriction column, the second restriction value applies to the second restriction column, and so on. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns schema information for the data source of this <see cref="T:System.Data.OleDb.OleDbConnection" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Data.DataTable" /> that contains schema information.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When <paramref name="collectionName" /> is specified as null, the <see cref="T:System.Data.DataTable" /> will contain information about all the metadata that is available, and its restrictions.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns schema information for the data source of this <see cref="T:System.Data.OleDb.OleDbConnection" /> using the specified string for the schema name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Data.DataTable" /> that contains schema information.</para>
        </returns>
        <param name="collectionName">
          <attribution license="cc4" from="Microsoft" modified="false" />Specifies the name of the schema to return. </param>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When <paramref name="collectionName" /> is specified as null, the <see cref="T:System.Data.DataTable" /> will contain information about all the metadata that is available, and its restrictions.</para>
          <para>The <paramref name="restrictionValues" /> parameter can supply n depth of values which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.</para>
          <para>An example of this is the "Tables" collection. If the "Tables" collection has three restrictions (database, owner, and table name), and you want to get back only the tables associated with the owner "Carl," you must pass in the following values (at a minimum): null, "Carl". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in null, which is different from passing in an empty string for the parameter value. In that case, the empty string ("") is considered to be the value for the specified parameter.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns schema information for the data source of this <see cref="T:System.Data.OleDb.OleDbConnection" /> using the specified string for the schema name and the specified string array for the restriction values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A <see cref="T:System.Data.DataTable" /> that contains schema information.</para>
        </returns>
        <param name="collectionName">
          <attribution license="cc4" from="Microsoft" modified="false" />Specifies the name of the schema to return.</param>
        <param name="restrictionValues">
          <attribution license="cc4" from="Microsoft" modified="false" />Specifies a set of restriction values for the requested schema.</param>
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Clients that want to process warnings or informational messages sent by the server should create an <see cref="T:System.Data.OleDb.OleDbInfoMessageEventHandler" /> delegate to listen to this event.</para>
          <para>The <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> event occurs when a message with low severity is returned from the data source. Low severity messages are those that do not cause an exception. For Microsoft SQL Server, this includes error messages that have a severity of 10 or less </para>
          <para>For more information and an example, see <format type="text/html"><a href="5a29de74-acfc-4134-8616-829dd7ce0710">Working with Connection Events</a></format>.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs when the provider sends a warning or an informational message.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="T:System.Data.OleDb.OleDbConnection" /> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to the data source. You can open more than one DataReader on a single <see cref="T:System.Data.OleDb.OleDbConnection" />. If the OLEDB provider you use does not support more than one active DataReader on a single connection, the OLEDB provider implicitly opens an additional connection for each.</para>
          <block subset="none" type="note">
            <para>If the <see cref="T:System.Data.OleDb.OleDbConnection" /> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> or Dispose, or using the connection within a Using statement.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Opens a database connection with the property settings specified by the <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public string Provider { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>To be added</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the name of the OLE DB provider specified in the "Provider= " clause of the connection string.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ReleaseObjectPool">
      <MemberSignature Language="C#" Value="public static void ReleaseObjectPool ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>ReleaseObjectPool can be called to free resources that would otherwise be reserved for pooled <see cref="T:System.Data.OleDb.OleDbConnection" /> objects. You might want to call this method if, for example, the connection object will not be used again for the amount of time that OLE DB services ordinarily keeps pooled connections active. Note that calling the method alone does not actually release the active connections that exist in the pool.</para>
          <para>The following must occur before the pool is finally disposed: </para>
          <list type="ordered">
            <item>
              <para>Call <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> to return the connection object to the pool.</para>
            </item>
            <item>
              <para>Allow each connection object to time out of the pool.</para>
            </item>
            <item>
              <para>Call <see cref="M:System.Data.OleDb.OleDbConnection.ReleaseObjectPool" />.</para>
            </item>
            <item>
              <para>Invoke garbage collection.</para>
            </item>
          </list>
          <para>Conversely, if you call <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> on all active connections, and invoke garbage collection, but do not call <see cref="M:System.Data.OleDb.OleDbConnection.ReleaseObjectPool" />, the resources reserved for the pooled objects will remain available.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Indicates that the <see cref="T:System.Data.OleDb.OleDbConnection" /> object pool can be released when the last underlying connection is released.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Some OLE DB providers can check the current state of the connection. For example, if the database server has recycled since you opened your <see cref="T:System.Data.OleDb.OleDbConnection" />, the <see cref="P:System.Data.OleDb.OleDbConnection.State" /> property will continue to return Open. If you are working with an OLE DB Provider that supports polling for this information on a live connection, calling the <see cref="M:System.Data.OleDb.OleDbConnection.ResetState" /> method and then checking the <see cref="P:System.Data.OleDb.OleDbConnection.State" /> property will tell you that the connection is no longer open. The <see cref="M:System.Data.OleDb.OleDbConnection.ResetState" /> method relies on functionality in the OLE DB Provider to verify the current state of the connection. To determine if your OLE DB Provider supports this functionality, check the provider's documentation for information on DBPROP_CONNECTIONSTATUS.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Updates the <see cref="P:System.Data.OleDb.OleDbConnection.State" /> property of the <see cref="T:System.Data.OleDb.OleDbConnection" /> object.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'string'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The <see cref="P:System.Data.OleDb.OleDbConnection.ServerVersion" /> property maps to the OLE DB DBPROP_DBMSVER property. If <see cref="P:System.Data.OleDb.OleDbConnection.ServerVersion" /> is not supported by the underlying OLE DB provider, an empty string is returned.</para>
          <para>The version is of the form ##.##.####, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The provider must render the product version in this form but can also append the product-specific version—for example, "04.01.0000 Rdb 4.1". The string is of the form major.minor.build, where major and minor are exactly two digits and build is exactly four digits.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets a string that contains the version of the server to which the client is connected.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added: an object of type 'Data.ConnectionState'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The following are allowed state changes: </para>
          <list type="bullet">
            <item>
              <para>From Closed to Open, using the <see cref="M:System.Data.OleDb.OleDbConnection.Open" /> method of the <see cref="T:System.Data.OleDb.OleDbConnection" /> object. </para>
            </item>
            <item>
              <para>From Open to Closed, using either the <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> method or the Dispose method of the <see cref="T:System.Data.OleDb.OleDbConnection" /> object. </para>
            </item>
          </list>
          <block subset="none" type="note">
            <para>In previous version of the .NET Framework, calling the <see cref="P:System.Data.OleDb.OleDbConnection.State" /> property increased application overhead because each call caused a call to the OLE DB DBPROP_CONNECTIONSTATUS property for an open connection. With the release of the .NET Framework 2.0, this is no longer an issue.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the current state of the connection.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="StateChange">
      <MemberSignature Language="C#" Value="public event System.Data.StateChangeEventHandler StateChange;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.StateChangeEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Data.DataSysDescription(Description="Event triggered when the connection changes state.")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="System.Data.IDbConnection.BeginTransaction">
      <MemberSignature Language="C#" Value="System.Data.IDbTransaction IDbConnection.BeginTransaction ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbConnection.BeginTransaction">
      <MemberSignature Language="C#" Value="System.Data.IDbTransaction IDbConnection.BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbConnection.CreateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand IDbConnection.CreateCommand ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Data.OleDb.OleDbConnection" /> instance is cast to an <see cref="T:System.ICloneable" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new <see cref="T:System.Object" /> that is a copy of this instance.</para>
        </returns>
      </Docs>
    </Member>
  </Members>
</Type>