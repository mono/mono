<?xml version="1.0" encoding="utf-8"?>
<Type Name="OleDbDataAdapter" FullName="System.Data.OleDb.OleDbDataAdapter">
  <TypeSignature Language="C#" Maintainer="auto" Value="public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowUpdated")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> serves as a bridge between a <see cref="T:System.Data.DataSet" /> and data source for retrieving and saving data. The <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> provides this bridge by using <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> to load data from the data source into the <see cref="T:System.Data.DataSet" />, and using <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to send changes made in the <see cref="T:System.Data.DataSet" /> back to the data source.</para>
      <para>When the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> fills a <see cref="T:System.Data.DataSet" />, it will create the appropriate tables and columns for the returned data if they do not already exist. However, primary key information is not included in the implicitly created schema unless the <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> property is set to <see cref="F:System.Data.MissingSchemaAction.AddWithKey" />. You may also have the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> create the schema of the <see cref="T:System.Data.DataSet" />, including primary key information, before filling it with data using <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />. For more information, see <format type="text/html"><a href="307d2809-208b-4cf8-b6a9-5d16f15fc16c">Adding Existing Constraints to a DataSet</a></format>.</para>
      <para>Note that some OLE DB providers, including the MSDataShape provider, do not return base table or primary key information. Therefore, the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> cannot correctly set the <see cref="P:System.Data.DataTable.PrimaryKey" /> property on any created <see cref="T:System.Data.DataTable" />. In these cases you should explicitly specify primary keys for tables in the <see cref="T:System.Data.DataSet" />.</para>
      <para>The <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> also includes the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />, <see cref="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand" />, <see cref="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand" />, <see cref="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand" />, and <see cref="P:System.Data.Common.DataAdapter.TableMappings" /> properties to facilitate the loading and updating of data.</para>
      <para>When you create an instance of <see cref="T:System.Data.OleDb.OleDbDataAdapter" />, properties are set to their initial values. For a list of these values, see the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> constructor.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a set of data commands and a database connection that are used to fill the <see cref="T:System.Data.DataSet" /> and update the data source.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter ();" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you create an instance of <see cref="T:System.Data.OleDb.OleDbDataAdapter" />, the following read/write properties are set to the following initial values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Properties </para>
                </term>
                <description>
                  <para>Initial value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingMappingAction" /> </para>
              </term>
              <description>
                <para>MissingMappingAction.Passthrough </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> </para>
              </term>
              <description>
                <para>MissingSchemaAction.Add </para>
              </description>
            </item>
          </list>
          <para>You can change the value of any of these properties through a separate call to the property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> class.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="selectCommand" Type="System.Data.OleDb.OleDbCommand" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This implementation of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> constructor sets the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property to the value specified in the <paramref name="selectCommand" /> parameter.</para>
          <para>When you create an instance of <see cref="T:System.Data.OleDb.OleDbDataAdapter" />, the following read/write properties are set to the following initial values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Properties </para>
                </term>
                <description>
                  <para>Initial value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingMappingAction" /> </para>
              </term>
              <description>
                <para>MissingMappingAction.Passthrough </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> </para>
              </term>
              <description>
                <para>MissingSchemaAction.Add </para>
              </description>
            </item>
          </list>
          <para>You can change the value of any of these properties through a separate call to the property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> class with the specified <see cref="T:System.Data.OleDb.OleDbCommand" /> as the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property.</para>
        </summary>
        <param name="selectCommand">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Data.OleDb.OleDbCommand" /> that is a SELECT statement or stored procedure, and is set as the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" />.</param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnection" Type="System.Data.OleDb.OleDbConnection" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This implementation of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> opens and closes an <see cref="T:System.Data.OleDb.OleDbConnection" /> if it is not already open. This can be useful in an application that must call the <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> method for two or more <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> objects. If the <see cref="T:System.Data.OleDb.OleDbConnection" /> is already open, you must explicitly call <see cref="M:System.Data.OleDb.OleDbConnection.Close" /> or Dispose to close it.</para>
          <para>When you create an instance of <see cref="T:System.Data.OleDb.OleDbDataAdapter" />, the following read/write properties are set to the following initial values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Properties </para>
                </term>
                <description>
                  <para>Initial value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingMappingAction" /> </para>
              </term>
              <description>
                <para>MissingMappingAction.Passthrough </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> </para>
              </term>
              <description>
                <para>MissingSchemaAction.Add </para>
              </description>
            </item>
          </list>
          <para>You can change the value of either of these properties through a separate call to the property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> class with a <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />.</para>
        </summary>
        <param name="selectCommandText">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" />. </param>
        <param name="selectConnection">
          <attribution license="cc4" from="Microsoft" modified="false" />An <see cref="T:System.Data.OleDb.OleDbConnection" /> that represents the connection. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (string selectCommandText, string selectConnectionString);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> constructor uses the <paramref name="selectConnectionString" /> parameter to set the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property. However, it does not open the connection. You still must explicitly open the connection.</para>
          <para>When you create an instance of <see cref="T:System.Data.OleDb.OleDbDataAdapter" />, the following read/write properties are set to the following initial values.</para>
          <list type="table">
            <listheader>
              <item>
                <term>
                  <para>Properties </para>
                </term>
                <description>
                  <para>Initial value </para>
                </description>
              </item>
            </listheader>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingMappingAction" /> </para>
              </term>
              <description>
                <para>MissingMappingAction.Passthrough </para>
              </description>
            </item>
            <item>
              <term>
                <para>
                  <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> </para>
              </term>
              <description>
                <para>MissingSchemaAction.Add </para>
              </description>
            </item>
          </list>
          <para>You can change the value of any of these properties through a separate call to the property.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Initializes a new instance of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> class with a <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />.</para>
        </summary>
        <param name="selectCommandText">
          <attribution license="cc4" from="Microsoft" modified="false" />A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OleDb.OleDbDataAdapter" />. </param>
        <param name="selectConnectionString">
          <attribution license="cc4" from="Microsoft" modified="false" />The connection string. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added: an object of type 'Data.DataRow'</param>
        <param name="command">To be added: an object of type 'Data.IDbCommand'</param>
        <param name="statementType">To be added: an object of type 'Data.StatementType'</param>
        <param name="tableMapping">To be added: an object of type 'Data.Common.DataTableMapping'</param>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'Data.Common.RowUpdatedEventArgs'</returns>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added: an object of type 'Data.DataRow'</param>
        <param name="command">To be added: an object of type 'Data.IDbCommand'</param>
        <param name="statementType">To be added: an object of type 'Data.StatementType'</param>
        <param name="tableMapping">To be added: an object of type 'Data.Common.DataTableMapping'</param>
        <summary>To be added</summary>
        <returns>To be added: an object of type 'Data.Common.RowUpdatingEventArgs'</returns>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand DeleteCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'OleDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, if this property is not set and primary key information is present in the <see cref="T:System.Data.DataSet" />, the <see cref="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand" /> can be generated automatically if you set the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property and use the <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />. Then, any additional commands that you do not set are generated by the <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />. This generation logic requires key column information to be present in the <see cref="T:System.Data.DataSet" />. For more information, see <format type="text/html"><a href="6e3fb8b5-373b-4f9e-ab03-a22693df8e91">Automatically Generated Commands</a></format>.</para>
          <para>When <see cref="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand" /> is assigned to a previously created <see cref="T:System.Data.OleDb.OleDbCommand" />, the <see cref="T:System.Data.OleDb.OleDbCommand" /> is not cloned. The <see cref="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand" /> maintains a reference to the previously created <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement or stored procedure for deleting records from the data set.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="ADODBRecordSet" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <see cref="T:System.Data.DataSet" />, but any updates to the data must be handled by ADO.NET. </para>
          <para>This overload of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> method does not close the input Recordset on completion of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation.</para>
          <para>When handling batch SQL statements that return multiple results, this implementation of <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> and <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" /> for the OLE DB.NET Framework Data Provider retrieves schema information for only the first result.</para>
          <para>The <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation adds the rows to the specified destination <see cref="T:System.Data.DataTable" /> object in the <see cref="T:System.Data.DataSet" />, creating the <see cref="T:System.Data.DataTable" /> object if it does not already exist. When you create a <see cref="T:System.Data.DataTable" /> object, the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation ordinarily creates only column name metadata. However, if the <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> property is set to AddWithKey, appropriate primary keys and constraints are also created.</para>
          <para>You can use the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> method multiple times on the same <see cref="T:System.Data.DataTable" />. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <see cref="T:System.Data.DataTable" />. If primary key information is present, any duplicate rows are reconciled and only appear one time in the <see cref="T:System.Data.DataTable" /> that corresponds to the <see cref="T:System.Data.DataSet" />. Primary key information may be set either through <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />, by specifying the <see cref="P:System.Data.DataTable.PrimaryKey" /> property of the <see cref="T:System.Data.DataTable" />, or by setting the <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> property to AddWithKey.</para>
          <para>If the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> returns the results of an OUTER JOIN, the DataAdapter does not set a <see cref="P:System.Data.DataTable.PrimaryKey" /> value for the resulting <see cref="T:System.Data.DataTable" />. You must explicitly define the primary key to make sure that duplicate rows are resolved correctly. For more information, see <format type="text/html"><a href="2ea85959-e763-4669-8bd9-46a9dab894bd">Defining a Primary Key for a Table</a></format>.</para>
          <para>To function correctly with the .NET Framework Data Provider for OLE DB, AddWithKey requires that the native OLE DB provider obtains required primary key information by setting the DBPROP_UNIQUEROWS property, and then determines which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the IColumnsRowset. Alternatively the user may explicitly set the primary key constraints on each <see cref="T:System.Data.DataTable" />. This makes sure that incoming records that match existing records are updated instead of appended.</para>
          <para>If the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> encounters duplicate columns while populating a <see cref="T:System.Data.DataTable" />, it generates names for the subsequent columns, using the pattern "columnname1", "columnname2", "columnname3", and so on. Empty column names are added to the <see cref="T:System.Data.DataTable" />, using an empty string for the first column, followed by "1", "2", "3", and so on for the subsequent empty columns.</para>
          <para>Values in ADO Recordset or Record objects are converted to common language runtime types for storage in the <see cref="T:System.Data.DataSet" />.</para>
          <block subset="none" type="note">
            <para>This overload of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> method does not implicitly call Close on the ADO object when the fill operation is complete. Therefore, always call Close when you are finished using ADO Recordset or Record objects. This makes sure that the underlying connection to a data source is released in a timely manner, and also prevents possible access violations because of unmanaged ADO objects being reclaimed by garbage collection when existing references still exist.</para>
          </block>
          <para>When you call the TableMappings.Add method on a DataAdapter and you explicitly map the source table parameter to an empty string, the dataset is successfully filled using the source table, but the dataset will be populated with nothing. For example, in the following example, rDataSet will be populated with nothing. </para>
          <code>rAdapter.TableMappings.Add("source table", "");
rAdapter.Fill(rDataSet, "source table");   </code>
          <para>This example shows how you can skip a result when dealing with multiple results.</para>
          <para>The following example uses an <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> to fill a <see cref="T:System.Data.DataTable" /> using an ADO Recordset. This example assumes that you have created an ADO Recordset.</para>
          <code>Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()
     Dim custDS As DataSet = New DataSet
     Dim custTable As DataTable = New DataTable("Customers")
     custTable.Columns.Add("CustomerID", Type.GetType("System.String"))
     custTable.Columns.Add("CompanyName", Type.GetType("System.String"))
     custDS.Tables.Add(custTable)
     'Use ADO objects from ADO library (msado15.dll) imported
     ' as.NET library ADODB.dll using TlbImp.exe
     Dim adoConn As ADODB.Connection = New ADODB.Connection()
     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)
     adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)
     custDA.Fill(custTable, adoRS)
     adoRS.Close()
     adoConn.Close()</code>
          <code>OleDbDataAdapter custDA = new OleDbDataAdapter();
     DataSet custDS = new DataSet();
     DataTable custTable = new DataTable("Customers");
     custTable.Columns.Add("CustomerID", typeof(String));
     custTable.Columns.Add("CompanyName", typeof(String));
     custDS.Tables.Add(custTable);
     //Use ADO objects from ADO library (msado15.dll) imported
     //  as.NET library ADODB.dll using TlbImp.exe
     ADODB.Connection adoConn = new ADODB.Connection();
     ADODB.Recordset adoRS = new ADODB.Recordset();
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);
     adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);
     custDA.Fill(custTable, adoRS);
     adoRS.Close();
     adoConn.Close();</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in an ADO Recordset or Record object using the specified <see cref="T:System.Data.DataTable" /> and ADO objects.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of rows successfully refreshed to the <see cref="T:System.Data.DataTable" />. This does not include rows affected by statements that do not return rows.</para>
        </returns>
        <param name="dataTable">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Data.DataTable" /> to fill with records and, if it is required, schema. </param>
        <param name="ADODBRecordSet">
          <attribution license="cc4" from="Microsoft" modified="false" />An ADO Recordset or Record object. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="ADODBRecordSet" Type="System.Object" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The link between ActiveX Data Objects (ADO) and ADO.NET is a one-way operation in that you can copy data from ADO to the <see cref="T:System.Data.DataSet" />, but any updates to the data must be handled by ADO.NET. </para>
          <para>The <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> method iterates through multiple results by calling the NextRecordset method on the Recordset, closing the input Recordset on completion of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation.</para>
          <para>The <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation adds the rows to the specified destination <see cref="T:System.Data.DataTable" /> object in the <see cref="T:System.Data.DataSet" />, creating the <see cref="T:System.Data.DataTable" /> object if it does not already exist. When you create a <see cref="T:System.Data.DataTable" /> object, the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation ordinarily creates only column name metadata. However, if the <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> property is set to AddWithKey, appropriate primary keys and constraints are also created.</para>
          <para>If primary key information is present, any duplicate rows are reconciled and only appear one time in the <see cref="T:System.Data.DataTable" /> that corresponds to the <see cref="T:System.Data.DataSet" />. Primary key information may be set either through <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />, by specifying the <see cref="P:System.Data.DataTable.PrimaryKey" /> property of the <see cref="T:System.Data.DataTable" />, or by setting the <see cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" /> property to AddWithKey.</para>
          <para>To function correctly with the .NET Framework Data Provider for OLE DB, AddWithKey requires the native OLE DB provider to obtain required primary key information by setting the DBPROP_UNIQUEROWS property, and then determine which columns are primary key columns by examining DBCOLUMN_KEYCOLUMN in the IColumnsRowset. Alternatively the user may explicitly set the primary key constraints on each <see cref="T:System.Data.DataTable" />. This ensures that incoming records that match existing records are updated instead of appended.</para>
          <para>If the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> returns the results of an OUTER JOIN, the DataAdapter does not set a <see cref="P:System.Data.DataTable.PrimaryKey" /> value for the resulting <see cref="T:System.Data.DataTable" />. You must explicitly define the primary key to make sure that duplicate rows are resolved correctly. For more information, see <format type="text/html"><a href="2ea85959-e763-4669-8bd9-46a9dab894bd">Defining a Primary Key for a Table</a></format>.</para>
          <para>If the Recordset is closed before the starting of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> operation, no error results. This is required for handling of multiple results, because queries that do not return rows are indicated by a closed Recordset. The <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> just calls NextRecordset on the closed Recordset and continues processing.</para>
          <para>If an error is encountered while populating the data set, rows added before the occurrence of the error remain in the <see cref="T:System.Data.DataSet" />. The rest of the operation is aborted.</para>
          <para>If the <see cref="T:System.Data.Common.DbDataAdapter" /> object encounters duplicate columns while populating a <see cref="T:System.Data.DataTable" />, it generates names for the subsequent columns, using the pattern "columnname1", "columnname2", "columnname3", and so on. If the incoming data contains unnamed columns, they are placed in the <see cref="T:System.Data.DataSet" /> according to the pattern "Column1", "Column2", and so on. When multiple result sets are added to the <see cref="T:System.Data.DataSet" /> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on.). Applications that use column and table names should make sure that conflicts with these naming patterns does not occur.</para>
          <para>Values in ADO Recordset or Record objects are converted to common language runtime types for storage in the <see cref="T:System.Data.DataSet" />. </para>
          <block subset="none" type="note">
            <para>This overload of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> method implicitly calls Close on the ADO object when the fill operation is complete.</para>
          </block>
          <para>The following example uses an <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> to fill a <see cref="T:System.Data.DataSet" /> using an ADO Recordset that is an ADO Record object. This example assumes that you have created an ADO RecordSet and Record object.</para>
          <code>Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()
     Dim custDS As DataSet = New DataSet
     'Use ADO objects from ADO library (msado15.dll) imported
     ' as.NET library ADODB.dll using TlbImp.exe
     Dim adoConn As ADODB.Connection = New ADODB.Connection()
     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)
     adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)
     custDA.Fill(custDS, adoRS, "Customers")
     adoConn.Close()</code>
          <code>OleDbDataAdapter custDA = new OleDbDataAdapter();
     DataSet custDS = new DataSet();
     //Use ADO objects from ADO library (msado15.dll) imported
     // as.NET library ADODB.dll using TlbImp.exe
     ADODB.Connection adoConn = new ADODB.Connection();
     ADODB.Recordset adoRS = new ADODB.Recordset();
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);
     adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);
     custDA.Fill(custDS, adoRS, "Customers");
     adoConn.Close();</code>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Adds or refreshes rows in the <see cref="T:System.Data.DataSet" /> to match those in an ADO Recordset or Record object using the specified <see cref="T:System.Data.DataSet" />, ADO object, and source table name.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</para>
        </returns>
        <param name="dataSet">
          <attribution license="cc4" from="Microsoft" modified="false" />A <see cref="T:System.Data.DataSet" /> to fill with records and, if it is required, schema. </param>
        <param name="ADODBRecordSet">
          <attribution license="cc4" from="Microsoft" modified="false" />An ADO Recordset or Record object. </param>
        <param name="srcTable">
          <attribution license="cc4" from="Microsoft" modified="false" />The source table used for the table mappings. </param>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand InsertCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'OleDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, if this property is not set and primary key information is present in the <see cref="T:System.Data.DataSet" />, the <see cref="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand" /> can be generated automatically if you set the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property and use the <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />. Then, any additional commands that you do not set are generated by the <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />. This generation logic requires key column information to be present in the <see cref="T:System.Data.DataSet" />. For more information, see <format type="text/html"><a href="6e3fb8b5-373b-4f9e-ab03-a22693df8e91">Automatically Generated Commands</a></format>.</para>
          <para>When <see cref="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand" /> is assigned to a previously created <see cref="T:System.Data.OleDb.OleDbCommand" />, the <see cref="T:System.Data.OleDb.OleDbCommand" /> is not cloned. The <see cref="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand" /> maintains a reference to the previously created <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
          <block subset="none" type="note">
            <para>If execution of this command returns rows, these rows may be added to the <see cref="T:System.Data.DataSet" /> depending on how you set the <see cref="P:System.Data.OleDb.OleDbCommand.UpdatedRowSource" /> property of the <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement or stored procedure used to insert new records into the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added: an object of type 'Data.Common.RowUpdatedEventArgs'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added: an object of type 'Data.Common.RowUpdatingEventArgs'</param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RowUpdated">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbRowUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, there are two events that occur per data row updated. The order of execution is as follows: </para>
          <list type="ordered">
            <item>
              <para>The values in the <see cref="T:System.Data.DataRow" /> are moved to the parameter values.</para>
            </item>
            <item>
              <para>The <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> event is raised.</para>
            </item>
            <item>
              <para>The command executes.</para>
            </item>
            <item>
              <para>If the command is set to FirstReturnedRecord, the first returned result is placed in the <see cref="T:System.Data.DataRow" />.</para>
            </item>
            <item>
              <para>If there are output parameters, they are placed in the <see cref="T:System.Data.DataRow" />.</para>
            </item>
            <item>
              <para>The <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> event is raised.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.Data.DataRow.AcceptChanges" /> is called.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> after a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RowUpdating">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbRowUpdatingEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When you use <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, there are two events that occur per data row updated. The order of execution is as follows: </para>
          <list type="ordered">
            <item>
              <para>The values in the <see cref="T:System.Data.DataRow" /> are moved to the parameter values.</para>
            </item>
            <item>
              <para>The <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> event is raised.</para>
            </item>
            <item>
              <para>The command executes.</para>
            </item>
            <item>
              <para>If the command is set to FirstReturnedRecord, the first returned result is placed in the <see cref="T:System.Data.DataRow" />.</para>
            </item>
            <item>
              <para>If there are output parameters, they are placed in the <see cref="T:System.Data.DataRow" />.</para>
            </item>
            <item>
              <para>The <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> event is raised.</para>
            </item>
            <item>
              <para>
                <see cref="M:System.Data.DataRow.AcceptChanges" /> is called.</para>
            </item>
          </list>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Occurs during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> before a command is executed against the data source. The attempt to update is made. Therefore, the event occurs.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand SelectCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'OleDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> is assigned to a previously created <see cref="T:System.Data.OleDb.OleDbCommand" />, the <see cref="T:System.Data.OleDb.OleDbCommand" /> is not cloned. The <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> maintains a reference to the previously created <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
          <para>If the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> returns no rows, no tables are added to the <see cref="T:System.Data.DataSet" />, and no exception is raised.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement or stored procedure used to select records in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="System.Data.IDataAdapter.TableMappings">
      <MemberSignature Language="C#" Value="System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> instance is cast to an <see cref="T:System.Data.IDbDataAdapter" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> instance is cast to an <see cref="T:System.Data.IDbDataAdapter" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Data.IDbDataAdapter.InsertCommand" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> instance is cast to an <see cref="T:System.Data.IDbDataAdapter" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Data.IDbDataAdapter.SelectCommand" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> instance is cast to an <see cref="T:System.Data.IDbDataAdapter" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This member is an explicit interface member implementation. It can be used only when the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> instance is cast to an <see cref="T:System.ICloneable" /> interface.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A new <see cref="T:System.Object" /> that is a copy of this instance.</para>
        </returns>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand UpdateCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'OleDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, if this property is not set and primary key information is present in the <see cref="T:System.Data.DataSet" />, the <see cref="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand" /> can be generated automatically if you set the <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> property and use the <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />. Then, any additional commands that you do not set are generated by the <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />. This generation logic requires key column information to be present in the <see cref="T:System.Data.DataSet" />. For more information, see <format type="text/html"><a href="6e3fb8b5-373b-4f9e-ab03-a22693df8e91">Automatically Generated Commands</a></format>.</para>
          <para>When <see cref="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand" /> is assigned to a previously created <see cref="T:System.Data.OleDb.OleDbCommand" />, the <see cref="T:System.Data.OleDb.OleDbCommand" /> is not cloned. The <see cref="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand" /> maintains a reference to the previously created <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
          <block subset="none" type="note">
            <para>If execution of this command returns rows, these rows may be merged with the <see cref="T:System.Data.DataSet" /> depending on how you set the <see cref="!:System.Data.OleDb.OleDbCommand.UpdatedRowSource" /> property of the <see cref="T:System.Data.OleDb.OleDbCommand" /> object.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement or stored procedure used to update records in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
  </Members>
</Type>