<?xml version="1.0" encoding="utf-8"?>
<Type Name="IDbDataAdapter" FullName="System.Data.IDbDataAdapter">
  <TypeSignature Language="C#" Maintainer="auto" Value="public interface IDbDataAdapter : System.Data.IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00]</AssemblyPublicKey>
    <AssemblyVersion>1.0.3300.0</AssemblyVersion>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>The <see cref="T:System.Data.IDbDataAdapter" /> interface inherits from the <see cref="T:System.Data.IDataAdapter" /> interface and allows an object to create a DataAdapter designed for use with a relational database. The <see cref="T:System.Data.IDbDataAdapter" /> interface and, optionally, the utility class, <see cref="T:System.Data.Common.DbDataAdapter" />, allow an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <see cref="T:System.Data.DataSet" />. For more information about DataAdapter classes, see <format type="text/html"><a href="3FA0AC7D-E266-4954-BFAC-3FBE2F913153">[&lt;topic://cpconpopulatingdatasetfromdataadapter&gt;]</a></format>. For more information about implementing .NET Framework data providers, see <format type="text/html"><a href="A9FA1926-071B-4C6F-997D-A16BAC633852">[&lt;topic://cpconimplementingnetdataprovider&gt;]</a></format>.</para>
      <para>An application does not create an instance of the <see cref="T:System.Data.IDbDataAdapter" /> interface directly, but creates an instance of a class that inherits <see cref="T:System.Data.IDbDataAdapter" /> and <see cref="T:System.Data.Common.DbDataAdapter" />.</para>
      <para>Classes that inherit <see cref="T:System.Data.IDbDataAdapter" /> must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the <see cref="T:System.Data.IDbDataAdapter" /> interface defines the <see cref="P:System.Data.IDbDataAdapter.SelectCommand" /> property, and the <see cref="T:System.Data.Common.DbDataAdapter" /> interface defines a <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> method that takes a <see cref="T:System.Data.DataTable" /> as a parameter. In turn, the <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> class inherits the <see cref="P:System.Data.IDbDataAdapter.SelectCommand" /> property and the <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> method, and also defines two additional overloads of the <see cref="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" /> method that take an ADO Recordset object as a parameter.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a set of command-related properties that are used to fill the <see cref="T:System.Data.DataSet" /> and update a data source, and is implemented by .NET Framework data providers that access relational databases.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand DeleteCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'IDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, if this property is not set and primary key information is present in the <see cref="T:System.Data.DataSet" />, the <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" /> can be generated automatically if you set the SelectCommand property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <see cref="T:System.Data.DataSet" />. For more information see <format type="text/html"><a href="6E3FB8B5-373B-4F9E-AB03-A22693DF8E91">[&lt;topic://cpconAutomaticallyGeneratedCommands&gt;]</a></format>.</para>
          <para>When <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" /> is assigned to a previously created <see cref="T:System.Data.IDbCommand" />, the <see cref="T:System.Data.IDbCommand" /> is not cloned. The <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" /> maintains a reference to the previously created <see cref="T:System.Data.IDbCommand" /> object.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement for deleting records from the data set.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand InsertCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'IDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, if this property is not set and primary key information is present in the <see cref="T:System.Data.DataSet" />, the <see cref="P:System.Data.IDbDataAdapter.InsertCommand" /> can be generated automatically if you set the SelectCommand property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <see cref="T:System.Data.DataSet" />. For more information see <format type="text/html"><a href="6E3FB8B5-373B-4F9E-AB03-A22693DF8E91">[&lt;topic://cpconAutomaticallyGeneratedCommands&gt;]</a></format>.</para>
          <para>When <see cref="P:System.Data.IDbDataAdapter.InsertCommand" /> is assigned to a previously created <see cref="T:System.Data.IDbCommand" />, the <see cref="T:System.Data.IDbCommand" /> is not cloned. The <see cref="P:System.Data.IDbDataAdapter.InsertCommand" /> maintains a reference to the previously created <see cref="T:System.Data.IDbCommand" /> object.</para>
          <block subset="none" type="note">
            <para>If execution of this command returns rows, these rows may be added to the <see cref="T:System.Data.DataSet" /> depending on how you set the <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> property of the <see cref="T:System.Data.IDbCommand" /> object.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement used to insert new records into the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand SelectCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'IDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>When <see cref="P:System.Data.IDbDataAdapter.SelectCommand" /> is assigned to a previously created <see cref="T:System.Data.IDbCommand" />, the <see cref="T:System.Data.IDbCommand" /> is not cloned. The <see cref="P:System.Data.IDbDataAdapter.SelectCommand" /> maintains a reference to the previously created <see cref="T:System.Data.IDbCommand" /> object.</para>
          <para>If the <see cref="P:System.Data.IDbDataAdapter.SelectCommand" /> does not return any rows, no tables are added to the <see cref="T:System.Data.DataSet" />, and no exception is raised.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement used to select records in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand UpdateCommand { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <value>To be added: an object of type 'IDbCommand'</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />, if this property is not set and primary key information is present in the <see cref="T:System.Data.DataSet" />, the <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" /> can be generated automatically if you set the SelectCommand property of a .NET Framework data provider. Then, any additional commands that you do not set are generated by the CommandBuilder. This generation logic requires key column information to be present in the <see cref="T:System.Data.DataSet" />. For more information see <format type="text/html"><a href="6E3FB8B5-373B-4F9E-AB03-A22693DF8E91">[&lt;topic://cpconAutomaticallyGeneratedCommands&gt;]</a></format>.</para>
          <para>When <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" /> is assigned to a previously created <see cref="T:System.Data.IDbCommand" />, the <see cref="T:System.Data.IDbCommand" /> is not cloned. The <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" /> maintains a reference to the previously created <see cref="T:System.Data.IDbCommand" /> object.</para>
          <block subset="none" type="note">
            <para>If execution of this command returns rows, these rows are added to the <see cref="T:System.Data.DataSet" />.</para>
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets or sets an SQL statement used to update records in the data source.</para>
        </summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>