<?xml version="1.0" encoding="utf-8"?>
<!--This file contains expected IL and metadata produced by compiler for each test-->
<tests>
  <test name="dtest-001.cs">
    <type name="C">
      <method name="Void set_Prop(System.Object)">
        <size>8</size>
      </method>
      <method name="System.Object get_Prop()">
        <size>7</size>
      </method>
      <method name="Void set_Prop2(System.Object)">
        <size>1</size>
      </method>
      <method name="Void set_Item(System.Object, System.Object)">
        <size>1</size>
      </method>
      <method name="System.Object get_Item(System.Object)">
        <size>7</size>
      </method>
      <method name="System.Object Method(System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor(Object)">
        <size>7</size>
      </method>
    </type>
    <type name="Del">
      <method name="System.Object Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>1053</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-002.cs">
    <type name="C">
      <method name="System.Object D()">
        <size>2</size>
      </method>
      <method name="System.Object D2()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AC">
      <method name="Void Foo(System.Object[])">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BC">
      <method name="Void Foo(System.Object[])">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-003.cs">
    <type name="AssertDynamicObject">
      <method name="System.Dynamic.DynamicMetaObject GetFakeMetaObject(System.Object)">
        <size>120</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Dynamic.DynamicMetaObject)">
        <size>62</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindConvert(System.Dynamic.ConvertBinder)">
        <size>53</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindGetIndex(System.Dynamic.GetIndexBinder, System.Dynamic.DynamicMetaObject[])">
        <size>96</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindGetMember(System.Dynamic.GetMemberBinder)">
        <size>53</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindInvoke(System.Dynamic.InvokeBinder, System.Dynamic.DynamicMetaObject[])">
        <size>96</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindInvokeMember(System.Dynamic.InvokeMemberBinder, System.Dynamic.DynamicMetaObject[])">
        <size>96</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindSetIndex(System.Dynamic.SetIndexBinder, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)">
        <size>102</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindSetMember(System.Dynamic.SetMemberBinder, System.Dynamic.DynamicMetaObject)">
        <size>62</size>
      </method>
      <method name="System.Dynamic.DynamicMetaObject BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
        <size>53</size>
      </method>
      <method name="System.Object &lt;BindGetIndex&gt;m__0(System.Dynamic.DynamicMetaObject)">
        <size>7</size>
      </method>
      <method name="System.Object &lt;BindInvoke&gt;m__1(System.Dynamic.DynamicMetaObject)">
        <size>7</size>
      </method>
      <method name="System.Object &lt;BindInvokeMember&gt;m__2(System.Dynamic.DynamicMetaObject)">
        <size>7</size>
      </method>
      <method name="System.Object &lt;BindSetIndex&gt;m__3(System.Dynamic.DynamicMetaObject)">
        <size>7</size>
      </method>
      <method name="Void .ctor(DynamicObjectMock, Expression)">
        <size>21</size>
      </method>
    </type>
    <type name="DynamicObjectMock">
      <method name="System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression)">
        <size>22</size>
      </method>
      <method name="Void DMethod(Int32)">
        <size>1</size>
      </method>
      <method name="Void DStaticMethod(System.Object)">
        <size>1</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void Assert[T](T, T, System.String)">
        <size>97</size>
      </method>
      <method name="Void Assert[T](IList`1, IList`1, System.String)">
        <size>249</size>
      </method>
      <method name="Void AssertArgument(System.Runtime.CompilerServices.CallSiteBinder, Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo[], System.String)">
        <size>169</size>
      </method>
      <method name="Void BinaryAdd_1(System.Object, DynamicObjectMock)">
        <size>123</size>
      </method>
      <method name="Void BinaryAdd_2(System.Object, DynamicObjectMock)">
        <size>133</size>
      </method>
      <method name="Void BinaryAdd_3(System.Object, DynamicObjectMock)">
        <size>123</size>
      </method>
      <method name="Void BinaryAdd_4(System.Object, DynamicObjectMock)">
        <size>127</size>
      </method>
      <method name="Void BinaryAddChecked_1(System.Object, DynamicObjectMock)">
        <size>123</size>
      </method>
      <method name="Void BinaryAddChecked_2(System.Object, DynamicObjectMock)">
        <size>69</size>
      </method>
      <method name="Void BinaryAddAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryAddAssignChecked_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryAnd_1(System.Object, DynamicObjectMock)">
        <size>123</size>
      </method>
      <method name="Void BinaryAndAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryDivide_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryDivideAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryEqual_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryExclusiveOr_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryExclusiveOrAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryGreaterThan_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryGreaterThanOrEqual_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryLeftShift_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryLeftShiftAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryLessThan_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryLessThanOrEqual_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryModulo_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryModuloAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryMultiply_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryMultiplyAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryNotEqual_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryOr_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryOrAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryRightShift_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinaryRightShiftAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinarySubtract_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void BinarySubtractAssign_1(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void Convert_1(System.Object, DynamicObjectMock)">
        <size>110</size>
      </method>
      <method name="Void Convert_2(System.Object, DynamicObjectMock)">
        <size>115</size>
      </method>
      <method name="Void Convert_3(System.Object, DynamicObjectMock)">
        <size>110</size>
      </method>
      <method name="Void Convert_4(System.Object, DynamicObjectMock)">
        <size>110</size>
      </method>
      <method name="Void GetIndex_1(System.Object, DynamicObjectMock)">
        <size>121</size>
      </method>
      <method name="Void GetIndex_2(System.Object, DynamicObjectMock)">
        <size>139</size>
      </method>
      <method name="Void GetIndex_3(System.Object, DynamicObjectMock)">
        <size>122</size>
      </method>
      <method name="Void GetMember_1(System.Object, DynamicObjectMock)">
        <size>115</size>
      </method>
      <method name="Void Invoke_1(System.Object, DynamicObjectMock)">
        <size>139</size>
      </method>
      <method name="Void Invoke_2(System.Object, DynamicObjectMock)">
        <size>113</size>
      </method>
      <method name="Void Invoke_3(System.Object, DynamicObjectMock)">
        <size>139</size>
      </method>
      <method name="Void Invoke_4(System.Object, DynamicObjectMock)">
        <size>148</size>
      </method>
      <method name="Void Invoke_5(System.Object, DynamicObjectMock)">
        <size>154</size>
      </method>
      <method name="Void InvokeMember_1(System.Object, DynamicObjectMock)">
        <size>131</size>
      </method>
      <method name="Void InvokeMember_2(System.Object, DynamicObjectMock)">
        <size>136</size>
      </method>
      <method name="Void InvokeMember_3(System.Object, DynamicObjectMock)">
        <size>135</size>
      </method>
      <method name="Void InvokeMember_4(System.Object, DynamicObjectMock)">
        <size>132</size>
      </method>
      <method name="Void InvokeMember_5(System.Object, DynamicObjectMock)">
        <size>105</size>
      </method>
      <method name="Void InvokeMember_6(System.Object, DynamicObjectMock)">
        <size>142</size>
      </method>
      <method name="Void InvokeMember_7(System.Object, DynamicObjectMock)">
        <size>137</size>
      </method>
      <method name="Void SetIndex_1(System.Object, DynamicObjectMock)">
        <size>136</size>
      </method>
      <method name="Void SetIndex_2(System.Object, DynamicObjectMock)">
        <size>150</size>
      </method>
      <method name="Void SetIndex_3(System.Object, DynamicObjectMock)">
        <size>139</size>
      </method>
      <method name="Void SetMember_1(System.Object, DynamicObjectMock)">
        <size>133</size>
      </method>
      <method name="Void UnaryPlus_1(System.Object, DynamicObjectMock)">
        <size>113</size>
      </method>
      <method name="Void UnaryMinus_1(System.Object, DynamicObjectMock)">
        <size>113</size>
      </method>
      <method name="Void UnaryNot_1(System.Object, DynamicObjectMock)">
        <size>113</size>
      </method>
      <method name="Void UnaryOnesComplement_1(System.Object, DynamicObjectMock)">
        <size>113</size>
      </method>
      <method name="Void UnaryDecrement_1(System.Object, DynamicObjectMock)">
        <size>116</size>
      </method>
      <method name="Void UnaryDecrement_2(System.Object, DynamicObjectMock)">
        <size>118</size>
      </method>
      <method name="Void UnaryIncrement_1(System.Object, DynamicObjectMock)">
        <size>116</size>
      </method>
      <method name="Void UnaryIncrement_2(System.Object, DynamicObjectMock)">
        <size>118</size>
      </method>
      <method name="Void UnaryIsFalse_1(System.Object, DynamicObjectMock)">
        <size>158</size>
      </method>
      <method name="Void UnaryIsFalse_2(System.Object, DynamicObjectMock)">
        <size>158</size>
      </method>
      <method name="Void UnaryIsFalse_3(System.Object, DynamicObjectMock)">
        <size>245</size>
      </method>
      <method name="Void UnaryIsTrue_1(System.Object, DynamicObjectMock)">
        <size>129</size>
      </method>
      <method name="Void UnaryIsTrue_2(System.Object, DynamicObjectMock)">
        <size>246</size>
      </method>
      <method name="Boolean RunTest(System.Reflection.MethodInfo)">
        <size>120</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
      <method name="Void &lt;BinaryAdd_1&gt;m__4(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>72</size>
      </method>
      <method name="Void &lt;BinaryAdd_2&gt;m__5(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>67</size>
      </method>
      <method name="Void &lt;BinaryAdd_3&gt;m__6(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>72</size>
      </method>
      <method name="Void &lt;BinaryAdd_4&gt;m__7(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>72</size>
      </method>
      <method name="Void &lt;BinaryAddChecked_1&gt;m__8(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>72</size>
      </method>
      <method name="Void &lt;BinaryAddChecked_2&gt;m__9(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>72</size>
      </method>
      <method name="Void &lt;BinaryAddAssign_1&gt;m__B(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryAddAssignChecked_1&gt;m__C(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryAnd_1&gt;m__D(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>72</size>
      </method>
      <method name="Void &lt;BinaryAndAssign_1&gt;m__E(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryDivide_1&gt;m__F(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryDivideAssign_1&gt;m__10(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryEqual_1&gt;m__11(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryExclusiveOr_1&gt;m__12(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryExclusiveOrAssign_1&gt;m__13(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryGreaterThan_1&gt;m__14(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryGreaterThanOrEqual_1&gt;m__15(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryLeftShift_1&gt;m__16(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryLeftShiftAssign_1&gt;m__17(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryLessThan_1&gt;m__18(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryLessThanOrEqual_1&gt;m__19(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryModulo_1&gt;m__1A(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryModuloAssign_1&gt;m__1B(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryMultiply_1&gt;m__1C(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryMultiplyAssign_1&gt;m__1D(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryNotEqual_1&gt;m__1E(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryOr_1&gt;m__1F(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryOrAssign_1&gt;m__20(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryRightShift_1&gt;m__21(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinaryRightShiftAssign_1&gt;m__22(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinarySubtract_1&gt;m__23(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="Void &lt;BinarySubtractAssign_1&gt;m__24(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="System.Object &lt;Convert_1&gt;m__25(System.Dynamic.ConvertBinder)">
        <size>50</size>
      </method>
      <method name="System.Object &lt;Convert_2&gt;m__26(System.Dynamic.ConvertBinder)">
        <size>50</size>
      </method>
      <method name="System.Object &lt;Convert_3&gt;m__27(System.Dynamic.ConvertBinder)">
        <size>50</size>
      </method>
      <method name="System.Object &lt;Convert_4&gt;m__28(System.Dynamic.ConvertBinder)">
        <size>50</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Object)">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>34</size>
      </method>
      <method name="Void Convert_5(System.Object, DynamicObjectMock)">
        <size>226</size>
      </method>
      <method name="System.Object &lt;Convert_5&gt;m__29(System.Dynamic.ConvertBinder)">
        <size>59</size>
      </method>
      <method name="Void &lt;GetIndex_1&gt;m__2A(System.Dynamic.GetIndexBinder, System.Object[])">
        <size>92</size>
      </method>
      <method name="Void &lt;GetIndex_2&gt;m__2B(System.Dynamic.GetIndexBinder, System.Object[])">
        <size>111</size>
      </method>
      <method name="Void &lt;Invoke_1&gt;m__2E(System.Dynamic.InvokeBinder, System.Object[])">
        <size>101</size>
      </method>
      <method name="Void &lt;Invoke_2&gt;m__2F(System.Dynamic.InvokeBinder, System.Object[])">
        <size>73</size>
      </method>
      <method name="Void &lt;Invoke_4&gt;m__30(System.Dynamic.InvokeBinder, System.Object[])">
        <size>127</size>
      </method>
      <method name="Void &lt;Invoke_5&gt;m__31(System.Dynamic.InvokeBinder, System.Object[])">
        <size>91</size>
      </method>
      <method name="Void &lt;Invoke_5&gt;m__32(System.Object)">
        <size>93</size>
      </method>
    </type>
    <type name="AssertDynamicObject+&lt;GetFakeMetaObject&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;BinaryAddChecked_2&gt;c__AnonStorey1">
      <method name="System.Object &lt;&gt;m__A()">
        <size>91</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;GetIndex_3&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__2C(System.Dynamic.GetIndexBinder, System.Object[])">
        <size>92</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_2&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_6&gt;c__AnonStorey4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;SetIndex_3&gt;c__AnonStorey5">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void Invoke_6(System.Object, DynamicObjectMock)">
        <size>124</size>
      </method>
      <method name="Void &lt;Invoke_6&gt;m__33(System.Dynamic.InvokeBinder, System.Object[])">
        <size>92</size>
      </method>
      <method name="Void &lt;InvokeMember_1&gt;m__34(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>110</size>
      </method>
      <method name="Void &lt;InvokeMember_3&gt;m__36(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>111</size>
      </method>
      <method name="Void &lt;InvokeMember_4&gt;m__37(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>110</size>
      </method>
      <method name="Void &lt;InvokeMember_7&gt;m__39(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>90</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_2&gt;c__AnonStorey3">
      <method name="Void &lt;&gt;m__35(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>109</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_6&gt;c__AnonStorey4">
      <method name="Void &lt;&gt;m__38(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>119</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void SetMember_2(System.Object, DynamicObjectMock)">
        <size>372</size>
      </method>
      <method name="System.Object &lt;GetMember_1&gt;m__2D(System.Dynamic.GetMemberBinder)">
        <size>67</size>
      </method>
    </type>
    <type name="Tester+&lt;SetMember_2&gt;c__AnonStorey6">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void InvokeMember_8(System.Object, DynamicObjectMock)">
        <size>140</size>
      </method>
      <method name="Void &lt;InvokeMember_8&gt;m__3A(System.Dynamic.InvokeMemberBinder, System.Object[])">
        <size>111</size>
      </method>
      <method name="Void &lt;SetIndex_1&gt;m__3B(System.Dynamic.SetIndexBinder, System.Object[], System.Object)">
        <size>124</size>
      </method>
      <method name="Void &lt;SetIndex_2&gt;m__3C(System.Dynamic.SetIndexBinder, System.Object[], System.Object)">
        <size>139</size>
      </method>
      <method name="Void &lt;SetMember_1&gt;m__3E(System.Dynamic.SetMemberBinder, System.Object)">
        <size>101</size>
      </method>
      <method name="Void &lt;SetMember_2&gt;m__40(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>68</size>
      </method>
      <method name="Void &lt;SetMember_2&gt;m__41(System.Dynamic.SetMemberBinder, System.Object)">
        <size>76</size>
      </method>
      <method name="System.Object &lt;UnaryPlus_1&gt;m__42(System.Dynamic.UnaryOperationBinder)">
        <size>47</size>
      </method>
      <method name="System.Object &lt;UnaryMinus_1&gt;m__43(System.Dynamic.UnaryOperationBinder)">
        <size>47</size>
      </method>
      <method name="System.Object &lt;UnaryNot_1&gt;m__44(System.Dynamic.UnaryOperationBinder)">
        <size>47</size>
      </method>
      <method name="System.Object &lt;UnaryOnesComplement_1&gt;m__45(System.Dynamic.UnaryOperationBinder)">
        <size>47</size>
      </method>
      <method name="System.Object &lt;UnaryDecrement_1&gt;m__46(System.Dynamic.UnaryOperationBinder)">
        <size>47</size>
      </method>
      <method name="System.Object &lt;UnaryDecrement_2&gt;m__47(System.Dynamic.UnaryOperationBinder)">
        <size>51</size>
      </method>
      <method name="System.Object &lt;UnaryIncrement_1&gt;m__48(System.Dynamic.UnaryOperationBinder)">
        <size>47</size>
      </method>
      <method name="System.Object &lt;UnaryIncrement_2&gt;m__49(System.Dynamic.UnaryOperationBinder)">
        <size>51</size>
      </method>
      <method name="System.Object &lt;UnaryIsFalse_1&gt;m__4A(System.Dynamic.UnaryOperationBinder)">
        <size>52</size>
      </method>
      <method name="Void &lt;UnaryIsFalse_1&gt;m__4B(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>68</size>
      </method>
      <method name="System.Object &lt;UnaryIsFalse_2&gt;m__4C(System.Dynamic.UnaryOperationBinder)">
        <size>52</size>
      </method>
      <method name="Void &lt;UnaryIsFalse_2&gt;m__4D(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>68</size>
      </method>
      <method name="System.Object &lt;UnaryIsFalse_3&gt;m__4E(System.Dynamic.UnaryOperationBinder)">
        <size>52</size>
      </method>
      <method name="Void &lt;UnaryIsFalse_3&gt;m__4F(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>67</size>
      </method>
      <method name="System.Object &lt;UnaryIsTrue_1&gt;m__50(System.Dynamic.UnaryOperationBinder)">
        <size>52</size>
      </method>
      <method name="System.Object &lt;UnaryIsTrue_2&gt;m__51(System.Dynamic.UnaryOperationBinder)">
        <size>52</size>
      </method>
      <method name="Void &lt;UnaryIsTrue_2&gt;m__52(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>68</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__55(System.Reflection.MethodInfo)">
        <size>12</size>
      </method>
    </type>
    <type name="Tester+&lt;SetIndex_3&gt;c__AnonStorey5">
      <method name="Void &lt;&gt;m__3D(System.Dynamic.SetIndexBinder, System.Object[], System.Object)">
        <size>119</size>
      </method>
    </type>
    <type name="Tester+&lt;SetMember_2&gt;c__AnonStorey6">
      <method name="System.Object &lt;&gt;m__3F(System.Dynamic.GetMemberBinder)">
        <size>72</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void BinaryLogicalAnd_1(System.Object, DynamicObjectMock)">
        <size>116</size>
      </method>
      <method name="Void BinaryLogicalOr_1(System.Object, DynamicObjectMock)">
        <size>117</size>
      </method>
      <method name="Void UnaryIsTrue_3(System.Object, DynamicObjectMock)">
        <size>248</size>
      </method>
      <method name="System.Object &lt;UnaryIsTrue_3&gt;m__53(System.Dynamic.UnaryOperationBinder)">
        <size>52</size>
      </method>
      <method name="Void &lt;UnaryIsTrue_3&gt;m__54(System.Dynamic.BinaryOperationBinder, System.Object)">
        <size>73</size>
      </method>
      <method name="System.String &lt;Main&gt;m__56(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__57(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__58(Boolean)">
        <size>5</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_3&gt;c__DynamicSite32+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_4&gt;c__DynamicSite33+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember_8&gt;c__DynamicSite37+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, System.Object ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-004.cs">
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="System.Object Create()">
        <size>7</size>
      </method>
      <method name="Void M[T]()">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>113</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-005.cs">
    <type name="MyObject">
      <method name="Boolean TryGetMember(System.Dynamic.GetMemberBinder, System.Object ByRef)">
        <size>27</size>
      </method>
      <method name="Boolean TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], System.Object ByRef)">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Int32 Main()">
        <size>242</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-006.cs">
    <type name="InverseLogicalOperator">
      <method name="Boolean op_True(InverseLogicalOperator)">
        <size>8</size>
      </method>
      <method name="Boolean op_False(InverseLogicalOperator)">
        <size>8</size>
      </method>
      <method name="Void .ctor(Boolean)">
        <size>8</size>
      </method>
    </type>
    <type name="MyType">
      <method name="Int16 get_ShortProp()">
        <size>7</size>
      </method>
      <method name="Void set_ShortProp(Int16)">
        <size>8</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>6</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="Boolean op_True(MyType)">
        <size>14</size>
      </method>
      <method name="Boolean op_False(MyType)">
        <size>11</size>
      </method>
      <method name="MyType op_Addition(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Subtraction(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Division(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Multiply(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Modulus(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_BitwiseAnd(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_BitwiseOr(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_ExclusiveOr(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="Boolean op_Equality(MyType, MyType)">
        <size>17</size>
      </method>
      <method name="Boolean op_Inequality(MyType, MyType)">
        <size>20</size>
      </method>
      <method name="Boolean op_GreaterThan(MyType, MyType)">
        <size>17</size>
      </method>
      <method name="Boolean op_LessThan(MyType, MyType)">
        <size>17</size>
      </method>
      <method name="Boolean op_GreaterThanOrEqual(MyType, MyType)">
        <size>20</size>
      </method>
      <method name="Boolean op_LessThanOrEqual(MyType, MyType)">
        <size>20</size>
      </method>
      <method name="Boolean op_LogicalNot(MyType)">
        <size>11</size>
      </method>
      <method name="Int32 op_OnesComplement(MyType)">
        <size>9</size>
      </method>
      <method name="MyType op_Increment(MyType)">
        <size>15</size>
      </method>
      <method name="MyType op_Decrement(MyType)">
        <size>15</size>
      </method>
      <method name="Int32 op_RightShift(MyType, Int32)">
        <size>13</size>
      </method>
      <method name="Int32 op_LeftShift(MyType, Int32)">
        <size>13</size>
      </method>
      <method name="MyType op_UnaryNegation(MyType)">
        <size>14</size>
      </method>
      <method name="MyType op_UnaryPlus(MyType)">
        <size>11</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="MyTypeExplicit">
      <method name="Int32 op_Explicit(MyTypeExplicit)">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
    </type>
    <type name="MyTypeImplicitOnly">
      <method name="Int16 op_Implicit(MyTypeImplicitOnly)">
        <size>8</size>
      </method>
      <method name="Boolean op_Implicit(MyTypeImplicitOnly)">
        <size>14</size>
      </method>
      <method name="Void .ctor(Int16)">
        <size>8</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void add_ev_assign(System.Action)">
        <size>47</size>
      </method>
      <method name="Void remove_ev_assign(System.Action)">
        <size>47</size>
      </method>
      <method name="Void Assert[T](T, T, System.String)">
        <size>78</size>
      </method>
      <method name="Void AssertChecked[T](System.Func`1[T], T, System.String)">
        <size>37</size>
      </method>
      <method name="Void AssertChecked(System.Action, System.String)">
        <size>30</size>
      </method>
      <method name="Void AddTest()">
        <size>1370</size>
      </method>
      <method name="Void AddNullableTest()">
        <size>2278</size>
      </method>
      <method name="Void AddEnumTest()">
        <size>874</size>
      </method>
      <method name="Void AddCheckedTest()">
        <size>345</size>
      </method>
      <method name="Void AddStringTest()">
        <size>1144</size>
      </method>
      <method name="Void AddAssignTest()">
        <size>1154</size>
      </method>
      <method name="Void AddAssignNullableTest()">
        <size>13</size>
      </method>
      <method name="Void AddAssignEnumTest()">
        <size>443</size>
      </method>
      <method name="Void AddAssignCheckedTest()">
        <size>319</size>
      </method>
      <method name="Void AddAssignStringTest()">
        <size>876</size>
      </method>
      <method name="Void AddAssignEvent()">
        <size>3</size>
      </method>
      <method name="Void AndTest()">
        <size>1536</size>
      </method>
      <method name="Void AndTestEnum()">
        <size>670</size>
      </method>
      <method name="Void AndTestNullable()">
        <size>1808</size>
      </method>
      <method name="Void AndAssignedTest()">
        <size>911</size>
      </method>
      <method name="Void AndAssignedTestEnum()">
        <size>683</size>
      </method>
      <method name="Void AndAlsoTest()">
        <size>1252</size>
      </method>
      <method name="Void DivideTest()">
        <size>927</size>
      </method>
      <method name="Void DivideNullableTest()">
        <size>2306</size>
      </method>
      <method name="Void DivideCheckedTest()">
        <size>1</size>
      </method>
      <method name="Void DivideAssignTest()">
        <size>1143</size>
      </method>
      <method name="Void DivideAssignCheckedTest()">
        <size>1</size>
      </method>
      <method name="Void ConvertImplicitTest()">
        <size>1265</size>
      </method>
      <method name="Int32 ConvertImplicitReturnTest()">
        <size>75</size>
      </method>
      <method name="IEnumerable`1 ConvertImplicitReturnTest_2()">
        <size>16</size>
      </method>
      <method name="Void ConvertExplicitTest()">
        <size>502</size>
      </method>
      <method name="Void ConvertExplicitCheckedTest()">
        <size>87</size>
      </method>
      <method name="Void ConvertArray()">
        <size>167</size>
      </method>
      <method name="Void EqualTest()">
        <size>1941</size>
      </method>
      <method name="Void EqualNullableTest()">
        <size>3033</size>
      </method>
      <method name="Void EqualEnumTest()">
        <size>1047</size>
      </method>
      <method name="Void EqualStringTest()">
        <size>630</size>
      </method>
      <method name="Void EqualDelegateTest()">
        <size>18</size>
      </method>
      <method name="Void ExclusiveOrTest()">
        <size>1546</size>
      </method>
      <method name="Void ExclusiveOrNullableTest()">
        <size>1816</size>
      </method>
      <method name="Void ExclusiveOrTestEnum()">
        <size>692</size>
      </method>
      <method name="Void ExclusiveOrAssignedTest()">
        <size>893</size>
      </method>
      <method name="Void ExclusiveOrAssignedTestEnum()">
        <size>685</size>
      </method>
      <method name="Void GreaterThanTest()">
        <size>1983</size>
      </method>
      <method name="Void GreaterThanNullableTest()">
        <size>2406</size>
      </method>
      <method name="Void GreaterThanEnumTest()">
        <size>1047</size>
      </method>
      <method name="Void GreaterThanEqualTest()">
        <size>1983</size>
      </method>
      <method name="Void GreaterThanEqualNullableTest()">
        <size>2406</size>
      </method>
      <method name="Void GreaterThanEqualEnumTest()">
        <size>1047</size>
      </method>
      <method name="Void LeftShiftTest()">
        <size>1366</size>
      </method>
      <method name="Void LeftShiftNullableTest()">
        <size>1137</size>
      </method>
      <method name="Void LeftShiftAssignTest()">
        <size>649</size>
      </method>
      <method name="Void LeftShiftAssignNullableTest()">
        <size>443</size>
      </method>
      <method name="Void LessThanTest()">
        <size>1983</size>
      </method>
      <method name="Void LessThanNullableTest()">
        <size>2420</size>
      </method>
      <method name="Void LessThanEnumTest()">
        <size>1047</size>
      </method>
      <method name="Void LessThanOrEqualTest()">
        <size>1983</size>
      </method>
      <method name="Void LessThanOrEqualNullableTest()">
        <size>2406</size>
      </method>
      <method name="Void LessThanOrEqualEnumTest()">
        <size>1047</size>
      </method>
      <method name="Void ModuloTest()">
        <size>923</size>
      </method>
      <method name="Void ModuloNullableTest()">
        <size>2294</size>
      </method>
      <method name="Void ModuloAssignTest()">
        <size>1137</size>
      </method>
      <method name="Void MultiplyTest()">
        <size>1167</size>
      </method>
      <method name="Void MultiplyNullableTest()">
        <size>2294</size>
      </method>
      <method name="Void MultiplyCheckedTest()">
        <size>343</size>
      </method>
      <method name="Void MultiplyAssignTest()">
        <size>1327</size>
      </method>
      <method name="Void MultiplyAssignCheckedTest()">
        <size>317</size>
      </method>
      <method name="Void Negate()">
        <size>1311</size>
      </method>
      <method name="Void NegateNullable()">
        <size>1117</size>
      </method>
      <method name="Void NegateChecked()">
        <size>51</size>
      </method>
      <method name="Void Not()">
        <size>404</size>
      </method>
      <method name="Void NotEqualTest()">
        <size>1945</size>
      </method>
      <method name="Void NotEqualNullableTest()">
        <size>3033</size>
      </method>
      <method name="Void NotEqualEnumTest()">
        <size>1047</size>
      </method>
      <method name="Void NotEqualStringTest()">
        <size>630</size>
      </method>
      <method name="Void OnesComplement()">
        <size>818</size>
      </method>
      <method name="Void OnesComplementNullable()">
        <size>418</size>
      </method>
      <method name="Void OrTest()">
        <size>1546</size>
      </method>
      <method name="Void OrTestEnum()">
        <size>674</size>
      </method>
      <method name="Void OrTestNullable()">
        <size>1592</size>
      </method>
      <method name="Void OrAssignedTest()">
        <size>911</size>
      </method>
      <method name="Void OrAssignedTestEnum()">
        <size>685</size>
      </method>
      <method name="Void OrElseTest()">
        <size>1257</size>
      </method>
      <method name="Void RightShiftTest()">
        <size>1152</size>
      </method>
      <method name="Void RightShiftNullableTest()">
        <size>1136</size>
      </method>
      <method name="Void RightShiftAssignTest()">
        <size>649</size>
      </method>
      <method name="Void RightShiftAssignNullableTest()">
        <size>442</size>
      </method>
      <method name="Void SubtractTest()">
        <size>1132</size>
      </method>
      <method name="Void SubtractNullableTest()">
        <size>2289</size>
      </method>
      <method name="Void SubtractEnumTest()">
        <size>896</size>
      </method>
      <method name="Void SubtractCheckedTest()">
        <size>346</size>
      </method>
      <method name="Void SubtractAssignTest()">
        <size>1154</size>
      </method>
      <method name="Void SubtractAssignEnumTest()">
        <size>454</size>
      </method>
      <method name="Void SubtractAssignCheckedTest()">
        <size>319</size>
      </method>
      <method name="Void SubtractAssignEvent()">
        <size>33</size>
      </method>
      <method name="Void UnaryDecrement()">
        <size>991</size>
      </method>
      <method name="Void UnaryDecrementCheckedTest()">
        <size>295</size>
      </method>
      <method name="Void UnaryIncrement()">
        <size>992</size>
      </method>
      <method name="Void UnaryIncrementCheckedTest()">
        <size>292</size>
      </method>
      <method name="Void UnaryIsTrue()">
        <size>428</size>
      </method>
      <method name="Void UnaryPlus()">
        <size>1114</size>
      </method>
      <method name="Void UnaryPlusNullable()">
        <size>1119</size>
      </method>
      <method name="Boolean RunTest(System.Reflection.MethodInfo)">
        <size>77</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
      <method name="Void &lt;SubtractAssignEvent&gt;m__C()">
        <size>11</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__F(System.Reflection.MethodInfo)">
        <size>12</size>
      </method>
      <method name="System.String &lt;Main&gt;m__10(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__11(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__12(Boolean)">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+EmptyDelegate">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Tester+&lt;AddCheckedTest&gt;c__AnonStorey1">
      <method name="System.Object &lt;&gt;m__0()">
        <size>96</size>
      </method>
      <method name="System.Object &lt;&gt;m__1()">
        <size>96</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;AddAssignCheckedTest&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__2()">
        <size>233</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;ConvertImplicitReturnTest_2&gt;c__Iterator0">
      <method name="System.String System.Collections.Generic.IEnumerator&lt;string&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;string&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>153</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;ConvertExplicitCheckedTest&gt;c__AnonStorey3">
      <method name="Int32 &lt;&gt;m__3()">
        <size>74</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__4()">
        <size>74</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MultiplyCheckedTest&gt;c__AnonStorey4">
      <method name="System.Object &lt;&gt;m__5()">
        <size>97</size>
      </method>
      <method name="System.Object &lt;&gt;m__6()">
        <size>97</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MultiplyAssignCheckedTest&gt;c__AnonStorey5">
      <method name="Void &lt;&gt;m__7()">
        <size>233</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;NegateChecked&gt;c__AnonStorey6">
      <method name="System.Object &lt;&gt;m__8()">
        <size>81</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;SubtractCheckedTest&gt;c__AnonStorey7">
      <method name="System.Object &lt;&gt;m__9()">
        <size>97</size>
      </method>
      <method name="System.Object &lt;&gt;m__A()">
        <size>97</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;SubtractAssignCheckedTest&gt;c__AnonStorey8">
      <method name="Void &lt;&gt;m__B()">
        <size>233</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;UnaryDecrementCheckedTest&gt;c__AnonStorey9">
      <method name="Void &lt;&gt;m__D()">
        <size>223</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;UnaryIncrementCheckedTest&gt;c__AnonStoreyA">
      <method name="Void &lt;&gt;m__E()">
        <size>219</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-007.cs">
    <type name="D">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="D2">
      <method name="Void Invoke(Decimal)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Decimal, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Class">
      <method name="UInt32 get_Item(Byte)">
        <size>9</size>
      </method>
      <method name="Void set_Item(Byte, UInt32)">
        <size>8</size>
      </method>
      <method name="Byte get_Prop()">
        <size>7</size>
      </method>
      <method name="Void set_Prop(Byte)">
        <size>8</size>
      </method>
      <method name="Void set_FixedValue(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_FixedValue()">
        <size>6</size>
      </method>
      <method name="System.String Method(System.String)">
        <size>2</size>
      </method>
      <method name="Int32 Method(Int32, Byte)">
        <size>4</size>
      </method>
      <method name="Void MethodInOut(Int32 ByRef, System.String ByRef)">
        <size>11</size>
      </method>
      <method name="Void GenericVoid[T](T)">
        <size>1</size>
      </method>
      <method name="Int32 StaticMethod(System.Int32[])">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>44</size>
      </method>
      <method name="Void .ctor(SByte)">
        <size>52</size>
      </method>
      <method name="Void .cctor()">
        <size>16</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void add_e(System.Func`1[System.Int32])">
        <size>47</size>
      </method>
      <method name="Void remove_e(System.Func`1[System.Int32])">
        <size>47</size>
      </method>
      <method name="Void Assert[T](T, T, System.String)">
        <size>78</size>
      </method>
      <method name="Void AssertError(System.Action, System.String)">
        <size>30</size>
      </method>
      <method name="Void GetIndexTest()">
        <size>915</size>
      </method>
      <method name="Void GetIndexError_Null()">
        <size>36</size>
      </method>
      <method name="Void InvokeTest()">
        <size>458</size>
      </method>
      <method name="Void InvokeMember()">
        <size>906</size>
      </method>
      <method name="Void InvokeConstructor()">
        <size>231</size>
      </method>
      <method name="Void IsEvent()">
        <size>2673</size>
      </method>
      <method name="Void MemberGetTest()">
        <size>810</size>
      </method>
      <method name="Void MemberGetError_Null()">
        <size>36</size>
      </method>
      <method name="Void MemberSetTest()">
        <size>2964</size>
      </method>
      <method name="Void MemberSetError_Null()">
        <size>36</size>
      </method>
      <method name="Void SetIndexTest()">
        <size>2900</size>
      </method>
      <method name="Void SetIndexError_Null()">
        <size>36</size>
      </method>
      <method name="Boolean RunTest(System.Reflection.MethodInfo)">
        <size>77</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
      <method name="Int32 &lt;InvokeTest&gt;m__1(System.String)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;GetIndexError_Null&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>91</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberGetError_Null&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberSetError_Null&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;SetIndexError_Null&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="EventClass">
      <method name="Void add_OutEvent(System.Func`1[System.Int32])">
        <size>47</size>
      </method>
      <method name="Void remove_OutEvent(System.Func`1[System.Int32])">
        <size>47</size>
      </method>
      <method name="Int32 CallEvent()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Int32 &lt;IsEvent&gt;m__4()">
        <size>2</size>
      </method>
    </type>
    <type name="Class">
      <method name="Void ArglistMethod(...)">
        <size>1</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void InvokeMember_Error()">
        <size>40</size>
      </method>
      <method name="Void &lt;InvokeMember_Error&gt;m__2()">
        <size>111</size>
      </method>
      <method name="Void &lt;InvokeConstructor&gt;m__3(Decimal)">
        <size>1</size>
      </method>
      <method name="Int32 &lt;IsEvent&gt;m__5()">
        <size>3</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__9(System.Reflection.MethodInfo)">
        <size>12</size>
      </method>
      <method name="System.String &lt;Main&gt;m__A(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__B(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__C(Boolean)">
        <size>5</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberGetError_Null&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__6()">
        <size>85</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberSetError_Null&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__7()">
        <size>95</size>
      </method>
    </type>
    <type name="Tester+&lt;SetIndexError_Null&gt;c__AnonStorey3">
      <method name="Void &lt;&gt;m__8()">
        <size>101</size>
      </method>
    </type>
    <type name="Tester+&lt;InvokeMember&gt;c__DynamicSite2+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Int32 ByRef, System.String ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-008.cs">
    <type name="Disposable">
      <method name="Void Dispose()">
        <size>13</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Boolean ForEachTest()">
        <size>404</size>
      </method>
      <method name="Boolean UsingTest()">
        <size>585</size>
      </method>
      <method name="Int32 Main()">
        <size>71</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean ForEachTest_2()">
        <size>299</size>
      </method>
      <method name="Boolean ForEachTest_3()">
        <size>219</size>
      </method>
    </type>
  </test>
  <test name="dtest-009.cs">
    <type name="B">
      <method name="Void Test(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>123</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-010.cs">
    <type name="A">
      <method name="T Test[T](T, T)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 TestCall()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>743</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-011.cs">
    <type name="C">
      <method name="Void foo(Int32)">
        <size>17</size>
      </method>
      <method name="Void foo(System.String)">
        <size>6</size>
      </method>
      <method name="Void foo_static(Int64)">
        <size>17</size>
      </method>
      <method name="Void test()">
        <size>196</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 MethodBest(Int16)">
        <size>2</size>
      </method>
      <method name="Int32 MethodBest(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="dtest-012.cs">
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="dynamic.C">
      <method name="Int32 Main()">
        <size>64</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-013.cs">
    <type name="ndynamic.C`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ndynamic.C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-014.cs">
    <type name="A">
      <method name="Int32 op_Inequality(A, System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 op_Equality(A, System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>41</size>
      </method>
      <method name="Boolean op_Equality(C, System.Object)">
        <size>8</size>
      </method>
      <method name="Boolean op_Inequality(C, System.Object)">
        <size>252</size>
      </method>
      <method name="Decimal op_Subtraction(System.Object, C)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-015.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>49</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-016.cs">
    <type name="Foo">
      <method name="Void Dyn(System.Object ByRef)">
        <size>4</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void Dyn(System.Object ByRef)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Method_A(Int32 ByRef)">
        <size>1</size>
      </method>
      <method name="Void Method_B(System.Object ByRef)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void DynOut(System.Object ByRef)">
        <size>4</size>
      </method>
      <method name="Void DynRef(System.Object ByRef)">
        <size>4</size>
      </method>
      <method name="Void TestErrorVersions()">
        <size>197</size>
      </method>
      <method name="Int32 Main()">
        <size>956</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 M(System.String, System.String)">
        <size>2</size>
      </method>
      <method name="Int32 M(System.Object ByRef, System.Object ByRef)">
        <size>5</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 DynParams(Int32, Int32, System.Int32[])">
        <size>6</size>
      </method>
    </type>
    <type name="D">
      <method name="Int32 Foo(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(System.Object[])">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="E">
      <method name="Int32 Foo(Int32, System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(Double, System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-017.cs">
    <type name="B`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="System.Object Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="DynamicAssignments">
      <method name="Int32 Main()">
        <size>158</size>
      </method>
      <method name="System.Object &lt;Main&gt;m__0(System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(IA`1)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="dtest-018.cs">
    <type name="XValue">
      <method name="Int64 get_Y()">
        <size>7</size>
      </method>
      <method name="Void set_Y(Int64)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Int32 Main()">
        <size>361</size>
      </method>
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="dtest-019.cs">
    <type name="C">
      <method name="Void Method(System.Object)">
        <size>1</size>
      </method>
      <method name="Void Method(System.Object, System.Object)">
        <size>1</size>
      </method>
      <method name="Void Method2(System.Object, Int32)">
        <size>1</size>
      </method>
      <method name="Void Method2(System.Object ByRef)">
        <size>4</size>
      </method>
      <method name="Void Main()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+D2">
      <method name="Void Invoke(System.Object ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(System.Object ByRef, IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-020.cs">
    <type name="Class1">
      <method name="Int32 Method1()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Class2`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Class3">
      <method name="Void Method2()">
        <size>89</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Main()">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-021.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T+B">
      <method name="Void set_Item(Int32, System.Object)">
        <size>69</size>
      </method>
      <method name="System.Object get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T+Program">
      <method name="Int32 Main()">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-022.cs">
    <type name="C">
      <method name="Void M[T](T)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-023.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-024.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>524</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>15</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-025.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>340</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Void SetValue(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Method[T](T ByRef)">
        <size>104</size>
      </method>
    </type>
    <type name="C+&lt;Method&gt;c__DynamicSite0`1+Container0[T]">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, T ByRef, System.Object)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__DynamicSite1+Container0">
      <method name="System.Object Invoke(System.Runtime.CompilerServices.CallSite, Nullable`1 ByRef, System.Object)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__DynamicSite1+Container1">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, S ByRef, System.Object)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-026.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>362</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-027.cs">
    <type name="C">
      <method name="Int32 M(System.Object, Int64)">
        <size>2</size>
      </method>
      <method name="Int32 M(Int64, System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 M(System.Object, System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>360</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 M2(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 M2(Byte)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="dtest-028.cs">
    <type name="C">
      <method name="Void MethodRef(Int32 ByRef)">
        <size>8</size>
      </method>
      <method name="Void MethodOut(UInt16 ByRef)">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>236</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__DynamicSite0+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__DynamicSite0+Container1">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, UInt16 ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void M(System.Object[] ByRef, System.Object[] ByRef)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="dtest-029.cs">
    <type name="C">
      <method name="Boolean Test[T,U](T, U)">
        <size>423</size>
      </method>
      <method name="Int32 Main()">
        <size>82</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test2(Int32)">
        <size>160</size>
      </method>
    </type>
  </test>
  <test name="dtest-030.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void M1[T](T)">
        <size>1</size>
      </method>
      <method name="Void M2[T,U](T, U)">
        <size>1</size>
      </method>
      <method name="Void M3[T,U](T, A`1[U])">
        <size>1</size>
      </method>
      <method name="Void M4[T,U](T, IEquatable`1)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>576</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-031.cs">
    <type name="A`1[T]">
      <method name="U CustomDelegate[U](U ByRef)">
        <size>25</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>7</size>
      </method>
      <method name="Void Foo[Z]()">
        <size>103</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Foo&gt;c__DynamicSite0`1+Container0[Z]">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Z ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-032.cs">
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Foo(Int32, A ByRef)">
        <size>9</size>
      </method>
      <method name="Int32 Main()">
        <size>140</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+&lt;Main&gt;c__DynamicSite0+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Type, System.Object, A ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-033.cs">
    <type name="Test">
      <method name="Byte get_Prop()">
        <size>2</size>
      </method>
      <method name="Void set_Prop(Byte)">
        <size>1</size>
      </method>
      <method name="Byte get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, Byte)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>3570</size>
      </method>
      <method name="Void .ctor()">
        <size>39</size>
      </method>
    </type>
  </test>
  <test name="dtest-034.cs">
    <type name="C">
      <method name="Void M[U,V](U ByRef, V ByRef)">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>464</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__DynamicSite0+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, System.Object ByRef, System.Object ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-035.cs">
    <type name="Test">
      <method name="System.Object get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, System.Object)">
        <size>1</size>
      </method>
      <method name="System.Object[] get_Prop()">
        <size>16</size>
      </method>
      <method name="Void set_Prop(System.Object[])">
        <size>1</size>
      </method>
      <method name="Int32 get_Prop2()">
        <size>2</size>
      </method>
      <method name="Void set_Prop2(Int32)">
        <size>1</size>
      </method>
      <method name="System.Object get_Prop3()">
        <size>12</size>
      </method>
      <method name="Void set_Prop3(System.Object)">
        <size>74</size>
      </method>
      <method name="Int32 Main()">
        <size>1096</size>
      </method>
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="dtest-036.cs">
    <type name="C">
      <method name="Void add_E(System.Func`2[System.Int32,System.Int32])">
        <size>47</size>
      </method>
      <method name="Void remove_E(System.Func`2[System.Int32,System.Int32])">
        <size>47</size>
      </method>
      <method name="Int32 Main()">
        <size>314</size>
      </method>
      <method name="Int32 Foo(Int32)">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-037.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>1166</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-038.cs">
    <type name="Test">
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>365</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-039.cs">
    <type name="A">
      <method name="System.Object Foo()">
        <size>2</size>
      </method>
      <method name="System.Object[] FooArray()">
        <size>2</size>
      </method>
      <method name="System.Object get_Prop()">
        <size>8</size>
      </method>
      <method name="Void set_Prop(System.Object)">
        <size>1</size>
      </method>
      <method name="System.Object[] get_PropArray()">
        <size>2</size>
      </method>
      <method name="System.Object get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.Object Foo()">
        <size>7</size>
      </method>
      <method name="System.Object[] FooArray()">
        <size>37</size>
      </method>
      <method name="Void set_Prop(System.Object)">
        <size>1</size>
      </method>
      <method name="System.Object[] get_PropArray()">
        <size>27</size>
      </method>
      <method name="Void set_Item(Int32, System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void Test()">
        <size>223</size>
      </method>
      <method name="Int32 Main()">
        <size>512</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-040.cs">
    <type name="A">
      <method name="S`2 Foo[U](U)">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="S`2 Foo[T](T)">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Int32 Main()">
        <size>378</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-041.cs">
    <type name="A`1[AA]">
      <method name="AA Foo[U](U)">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.Object Foo[T](T)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Int32 Main()">
        <size>82</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-042.cs">
    <type name="A">
      <method name="System.Object get_Prop()">
        <size>2</size>
      </method>
      <method name="Void set_Prop(System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="System.Object get_Prop()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Test()">
        <size>89</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-043.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>323</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-044.cs">
    <type name="C">
      <method name="Int32 Test[T,U](T, IComparable`1)">
        <size>2</size>
      </method>
      <method name="Int32 Test_2[T](IList`1, T)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>845</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-045.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>237</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-046.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>1076</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>4</size>
      </method>
      <method name="Void &lt;Main&gt;m__1()">
        <size>11</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32 ByRef)">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Int32 Invoke(Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32 ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(Int32 ByRef, IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__DynamicSite0+Container0">
      <method name="System.Object Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-047.cs">
    <type name="C`1[T]">
      <method name="Void add_E(System.Func`2[System.Int32,System.Int32])">
        <size>47</size>
      </method>
      <method name="Void remove_E(System.Func`2[System.Int32,System.Int32])">
        <size>47</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>163</size>
      </method>
      <method name="Int32 &lt;E&gt;m__0(Int32)">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>42</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-048.cs">
    <type name="A">
      <method name="Int32 M(System.String, System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 M(System.String, System.Object[])">
        <size>10</size>
      </method>
      <method name="Int32 Main()">
        <size>319</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-049.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+N">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+N">
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>90</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-050.cs">
    <type name="C">
      <method name="Boolean Throw()">
        <size>11</size>
      </method>
      <method name="Boolean Return(Boolean)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>1158</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Boolean op_True(S)">
        <size>6</size>
      </method>
      <method name="Boolean op_False(S)">
        <size>2</size>
      </method>
      <method name="System.String op_LogicalNot(S)">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="dtest-051.cs">
    <type name="C">
      <method name="Int32 get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>10</size>
      </method>
      <method name="Int32 Main()">
        <size>463</size>
      </method>
      <method name="Void .ctor()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="dtest-052.cs">
    <type name="A">
      <method name="Void Method(DynamicReference)">
        <size>191</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-053.cs">
    <type name="TestAttribute">
      <method name="Void .ctor(Object[])">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-054.cs">
    <type name="C">
      <method name="System.Action`1[T] Test[T](T)">
        <size>13</size>
      </method>
      <method name="System.Action Test2[T](T)">
        <size>26</size>
      </method>
      <method name="System.Action`1[T] Test3[T](T)">
        <size>13</size>
      </method>
      <method name="System.Action Test4[T](T)">
        <size>26</size>
      </method>
      <method name="Void Method(System.Object)">
        <size>1</size>
      </method>
      <method name="Void MethodRef(C ByRef)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
      <method name="Void &lt;Test`1&gt;m__0[T](T)">
        <size>102</size>
      </method>
      <method name="Void &lt;Test3`1&gt;m__2[T](T)">
        <size>104</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test2&gt;c__AnonStorey0`1[T]">
      <method name="Void &lt;&gt;m__1()">
        <size>45</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test4&gt;c__AnonStorey2`1[T]">
      <method name="Void &lt;&gt;m__3()">
        <size>113</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;&lt;Test3`1&gt;m__2&gt;c__DynamicSite1`1+Container0[T]">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, T ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Test2&gt;c__AnonStorey0`1+&lt;Test2&gt;c__AnonStorey1`1[T]">
      <method name="Void &lt;&gt;m__4()">
        <size>117</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test4&gt;c__AnonStorey2`1+&lt;&lt;&gt;m__3&gt;c__DynamicSite0+Container0[T]">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, T ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-cls-01.cs">
    <type name="A">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void CLSCompliantMethod(System.Object[])">
        <size>1</size>
      </method>
      <method name="Void CLSCompliantMethod(IEnumerable`1)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-collectioninit-01.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>475</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+Wrap">
      <method name="System.Object get_Numbers()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="dtest-error-01.cs">
    <type name="Helper">
      <method name="Int32* Foo(Int32)">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void Unsafe_1()">
        <size>41</size>
      </method>
      <method name="Void AssertError(System.Action, System.String)">
        <size>68</size>
      </method>
      <method name="Boolean RunTest(System.Reflection.MethodInfo)">
        <size>82</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;Unsafe_1&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void NullableConversion()">
        <size>47</size>
      </method>
      <method name="Void Using_1()">
        <size>40</size>
      </method>
      <method name="Void NonInvocable()">
        <size>40</size>
      </method>
      <method name="Void &lt;NonInvocable&gt;m__0()">
        <size>85</size>
      </method>
      <method name="Void &lt;Using_1&gt;m__1()">
        <size>89</size>
      </method>
      <method name="Void &lt;NullableConversion&gt;m__3()">
        <size>105</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__4(System.Reflection.MethodInfo)">
        <size>12</size>
      </method>
      <method name="System.String &lt;Main&gt;m__5(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__6(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__7(Boolean)">
        <size>5</size>
      </method>
    </type>
    <type name="Tester+&lt;Unsafe_1&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__2()">
        <size>110</size>
      </method>
    </type>
  </test>
  <test name="dtest-error-02.cs">
    <type name="A">
      <method name="System.Object Factory()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+N">
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>134</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-error-03.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>97</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-etree-01.cs">
    <type name="C">
      <method name="Void Conv1(System.Linq.Expressions.Expression`1[System.Func`2[System.Object,System.Object]])">
        <size>1</size>
      </method>
      <method name="Void Conv2(System.Linq.Expressions.Expression`1[System.Func`2[System.Object,System.Object]])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>382</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-etree-02.cs">
    <type name="C">
      <method name="Void Main()">
        <size>190</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-friend-01.cs">
    <type name="C">
      <method name="Void Main()">
        <size>90</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-implicitarray-01.cs">
    <type name="C">
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>104</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-iter-01.cs">
    <type name="Program">
      <method name="IEnumerable`1 D1()">
        <size>16</size>
      </method>
      <method name="IEnumerable`1 D2()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Program+&lt;D1&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;dynamic&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;dynamic&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;D2&gt;c__Iterator1">
      <method name="System.Func`1[System.Object] System.Collections.Generic.IEnumerator&lt;System.Func&lt;dynamic&gt;&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;System.Func&lt;dynamic&gt;&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-named-01.cs">
    <type name="Test">
      <method name="Void Foo(Int32 ByRef)">
        <size>4</size>
      </method>
      <method name="Int32 Main()">
        <size>117</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__DynamicSite0+Container0">
      <method name="Void Invoke(System.Runtime.CompilerServices.CallSite, System.Object, Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="dtest-named-02.cs">
    <type name="Test">
      <method name="Int32 M1()">
        <size>31</size>
      </method>
      <method name="Int32 M2()">
        <size>31</size>
      </method>
      <method name="System.Object M3()">
        <size>36</size>
      </method>
      <method name="Int32 Foo(Int32, Int32, Int32)">
        <size>29</size>
      </method>
      <method name="Int32 Main()">
        <size>219</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="dtest-optional-01.cs">
    <type name="G`1[T]">
      <method name="System.Object M1(T)">
        <size>7</size>
      </method>
      <method name="System.Object M2(T)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="System.Object Test(System.Object)">
        <size>2</size>
      </method>
      <method name="Void TestS(S)">
        <size>1</size>
      </method>
      <method name="System.Object TestD(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>854</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-001.cs">
    <type name="Stack`1[type]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Boot">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-002.cs">
    <type name="Cell`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-003.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-004.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Stack`1[Test])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-005.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-006.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>23</size>
      </method>
      <method name="Void Push(T)">
        <size>30</size>
      </method>
      <method name="T Pop()">
        <size>29</size>
      </method>
      <method name="Void Hello(T)">
        <size>17</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-007.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-008.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-009.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Test(T)">
        <size>14</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-010.cs">
    <type name="J">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>11</size>
      </method>
    </type>
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(T)">
        <size>27</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-011.cs">
    <type name="Stack`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(S)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-012.cs">
    <type name="Stack`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(S)">
        <size>1</size>
      </method>
    </type>
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(T)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-013.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-014.cs">
    <type name="Stack`1[S]">
      <method name="Void .ctor(S)">
        <size>7</size>
      </method>
      <method name="Void Push(S)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="gtest-015.cs">
    <type name="Stack`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[T,U](S, T, U)">
        <size>3</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-016.cs">
    <type name="Stack`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[T](S, T)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-017.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Stack)">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-018.cs">
    <type name="Stack">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[T](T)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Stack)">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-019.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-020.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Stack`1[S]">
      <method name="Void Hello(S)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-021.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor(Int32)">
        <size>58</size>
      </method>
      <method name="Void Test()">
        <size>23</size>
      </method>
    </type>
    <type name="Bar`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>45</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Print(System.Object)">
        <size>39</size>
      </method>
      <method name="Void Main()">
        <size>38</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(String)">
        <size>8</size>
      </method>
      <method name="System.String ToString()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-022.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello()">
        <size>1</size>
      </method>
      <method name="Void World(T)">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-023.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello()">
        <size>1</size>
      </method>
      <method name="Void World(T)">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-024.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(T)">
        <size>13</size>
      </method>
      <method name="Void Whatever(System.Object)">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Foo`1[System.Int32])">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-025.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[T](T)">
        <size>13</size>
      </method>
      <method name="Void Whatever(System.Object)">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Foo)">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-026.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-027.cs">
    <type name="TheBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void BaseFunc()">
        <size>1</size>
      </method>
    </type>
    <type name="Stack`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(S)">
        <size>1</size>
      </method>
    </type>
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(T)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>36</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-028.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="System.Object Test()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Test(Stack`1[System.Int32])">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-029.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor(Int32)">
        <size>19</size>
      </method>
      <method name="System.Object Test()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-030.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(T)">
        <size>1</size>
      </method>
    </type>
    <type name="Bar`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(T, U)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Bar`2[System.Int32,System.String])">
        <size>24</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-031.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Bar`2[System.Int32,System.String])">
        <size>24</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-032.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Bar`2)">
        <size>24</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-033.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Bar`3)">
        <size>35</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-034.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-035.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-036.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Stack`1[T])">
        <size>1</size>
      </method>
      <method name="Void Test()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-037.cs">
    <type name="Foo`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Foo`2[T,U])">
        <size>1</size>
      </method>
      <method name="Void Test()">
        <size>8</size>
      </method>
    </type>
    <type name="Bar`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Foo`2[T,System.Int64])">
        <size>8</size>
      </method>
    </type>
    <type name="Baz`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-038.cs">
    <type name="Queue`1[T]">
      <method name="Void .ctor(T, T)">
        <size>38</size>
      </method>
      <method name="Queue`1+Node`1[T,T] GetFoo()">
        <size>7</size>
      </method>
      <method name="Queue`1+Node`1[T,T] get_Foo()">
        <size>7</size>
      </method>
      <method name="Void Test(T)">
        <size>12</size>
      </method>
      <method name="Void Test()">
        <size>74</size>
      </method>
    </type>
    <type name="Queue`1+Node`1[T,U]">
      <method name="Void .ctor(Node`1, U)">
        <size>21</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="gtest-039.cs">
    <type name="Zoo`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="IMonkey`1 GetTheMonkey[U](U)">
        <size>8</size>
      </method>
      <method name="T get_Name()">
        <size>7</size>
      </method>
    </type>
    <type name="Zoo`1+Monkey`2[T,V,W]">
      <method name="Void .ctor(Zoo`1, W)">
        <size>21</size>
      </method>
      <method name="W Jump()">
        <size>44</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="gtest-040.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor(T)">
        <size>26</size>
      </method>
      <method name="INode`1 GetNode()">
        <size>7</size>
      </method>
      <method name="Stack`1+Foo`1[T,T] GetFoo(T)">
        <size>7</size>
      </method>
      <method name="Stack`1+Bar`1[T,T] GetBar(T)">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>66</size>
      </method>
    </type>
    <type name="Stack`1+Node[T]">
      <method name="Void .ctor(Stack`1)">
        <size>14</size>
      </method>
      <method name="Void Hello(T)">
        <size>1</size>
      </method>
    </type>
    <type name="Stack`1+Foo`1[T,T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Stack`1+Bar`1[T,T] GetBar()">
        <size>12</size>
      </method>
    </type>
    <type name="Stack`1+Bar`1[T,U]">
      <method name="Void .ctor(U)">
        <size>14</size>
      </method>
      <method name="Stack`1+Foo`1[T,T] GetFoo(Stack`1[T])">
        <size>7</size>
      </method>
    </type>
    <type name="Stack`1+Bar`1+Baz`1[T,U,V]">
      <method name="Void .ctor(V)">
        <size>14</size>
      </method>
      <method name="Stack`1+Foo`1[T,T] GetFoo(Stack`1[T])">
        <size>12</size>
      </method>
      <method name="Stack`1+Bar`1[T,V] GetBar()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+Test`1[U,T]">
      <method name="A`1+Test`1+Nested`1[U,T,T] Foo()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+Test`1+Nested`1[U,T,X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Int32 Main()">
        <size>39</size>
      </method>
    </type>
  </test>
  <test name="gtest-041.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int32, T[])">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="gtest-042.cs">
    <type name="A.A`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.B`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.C`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.D`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.E`2[X,Y]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.F`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B.MyTest`2[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C.S`1[K]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C.C`1[K]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-043.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>13</size>
      </method>
      <method name="Int32 GetCount()">
        <size>6</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 DoTheTest[T]()">
        <size>107</size>
      </method>
      <method name="Int32 Main()">
        <size>134</size>
      </method>
    </type>
  </test>
  <test name="gtest-044.cs">
    <type name="X`1[T]">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="X`1[T] op_Increment(X`1[T])">
        <size>14</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="gtest-045.cs">
    <type name="Test`2[A,B]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[U](U)">
        <size>1</size>
      </method>
      <method name="Void Foo[V](V[], V)">
        <size>1</size>
      </method>
      <method name="Void Hello[V,W](V, W, Test`2[V,W])">
        <size>1</size>
      </method>
      <method name="Void ArrayMethod[V](V[])">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>86</size>
      </method>
    </type>
  </test>
  <test name="gtest-046.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_MyEvent(Test`1[T])">
        <size>47</size>
      </method>
      <method name="Void remove_MyEvent(Test`1[T])">
        <size>47</size>
      </method>
      <method name="Void Hello(T)">
        <size>24</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void do_hello(System.String)">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>36</size>
      </method>
    </type>
    <type name="Test`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-047.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-048.cs">
    <type name="Stack`1[T]">
      <method name="Void .ctor()">
        <size>20</size>
      </method>
      <method name="Void Add(T)">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="gtest-049.cs">
    <type name="X`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A(T)">
        <size>1</size>
      </method>
      <method name="Void A(T[])">
        <size>1</size>
      </method>
      <method name="Void A(T[,])">
        <size>1</size>
      </method>
      <method name="Void A(T[][])">
        <size>1</size>
      </method>
      <method name="Void B(T[])">
        <size>1</size>
      </method>
      <method name="Void B(Int32)">
        <size>1</size>
      </method>
      <method name="Void C(T[])">
        <size>1</size>
      </method>
      <method name="Void C(T[,])">
        <size>1</size>
      </method>
      <method name="Void C(System.Int32[,,])">
        <size>1</size>
      </method>
      <method name="Void D(Int32, T)">
        <size>1</size>
      </method>
      <method name="Void D(T, Int64)">
        <size>1</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-050.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T F[T](System.String, T)">
        <size>2</size>
      </method>
      <method name="T G[T]()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>40</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(System.String, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-051.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(T)">
        <size>43</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello()">
        <size>11</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-052.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Create()">
        <size>36</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-053.cs">
    <type name="ReferenceTypeCounters.SimpleCounter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Increment()">
        <size>15</size>
      </method>
    </type>
    <type name="ReferenceTypeCounters.PrintingCounter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="Void Increment()">
        <size>15</size>
      </method>
    </type>
    <type name="ReferenceTypeCounters.ExplicitCounter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ICounter.Increment()">
        <size>15</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
    </type>
    <type name="ReferenceTypeCounters.InterfaceCounter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ICounter.Increment()">
        <size>15</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="Void Increment()">
        <size>15</size>
      </method>
    </type>
    <type name="Test.Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(T)">
        <size>50</size>
      </method>
    </type>
    <type name="Test.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>97</size>
      </method>
    </type>
    <type name="ValueTypeCounters.SimpleCounter">
      <method name="Void Increment()">
        <size>15</size>
      </method>
    </type>
    <type name="ValueTypeCounters.PrintingCounter">
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="Void Increment()">
        <size>15</size>
      </method>
    </type>
    <type name="ValueTypeCounters.ExplicitCounter">
      <method name="Void ICounter.Increment()">
        <size>15</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
    </type>
    <type name="ValueTypeCounters.InterfaceCounter">
      <method name="Void ICounter.Increment()">
        <size>15</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="Void Increment()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-054.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello()">
        <size>1</size>
      </method>
      <method name="C op_Implicit(B)">
        <size>6</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="B op_Explicit(C)">
        <size>6</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Simple[T](T)">
        <size>36</size>
      </method>
      <method name="Void Interface[T](T)">
        <size>8</size>
      </method>
      <method name="Void Class[T](T)">
        <size>71</size>
      </method>
      <method name="Void Array[T](T[])">
        <size>21</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-055.cs">
    <type name="N1.A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.A`1+B[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.A`1+C`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-056.cs">
    <type name="Log`1[T]">
      <method name="Void .ctor()">
        <size>31</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 get_InstanceCount()">
        <size>6</size>
      </method>
      <method name="Void Add(T)">
        <size>32</size>
      </method>
      <method name="Int32 get_Count()">
        <size>7</size>
      </method>
      <method name="T get_Last()">
        <size>47</size>
      </method>
      <method name="Void set_Last(T)">
        <size>68</size>
      </method>
      <method name="T[] get_All()">
        <size>70</size>
      </method>
    </type>
    <type name="TestLog">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestLog+MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>204</size>
      </method>
    </type>
  </test>
  <test name="gtest-057.cs">
    <type name="Hello`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IHello`1 Test[U]()">
        <size>6</size>
      </method>
      <method name="Void Print(T)">
        <size>17</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>48</size>
      </method>
    </type>
  </test>
  <test name="gtest-058.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1[T] get_Blah()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-059.cs">
    <type name="X`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-060.cs">
    <type name="MyList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(T)">
        <size>12</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="MyList`1[T] Map[T]()">
        <size>6</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="gtest-061.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="U Method[U](Test`2[T,U])">
        <size>13</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>83</size>
      </method>
    </type>
    <type name="Test`2[A,B]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="B Invoke(A)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(A, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="B EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="System.String &lt;Main&gt;m__0(Double)">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-062.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Test(Int32, Int64)">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>84</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>113</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-063.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 IndexOf[T](T[], T, Int32, Int32)">
        <size>2</size>
      </method>
      <method name="Int32 IndexOf(System.Array, System.Object)">
        <size>15</size>
      </method>
      <method name="Int32 IndexOf(System.Array, System.Object, Int32, Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>65</size>
      </method>
    </type>
  </test>
  <test name="gtest-064.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1+Hello[T] GetHello()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1+Hello[T]">
      <method name="Void .ctor(Foo`1)">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="IHello`1 IFoo&lt;T&gt;.GetHello()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-065.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>17</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>216</size>
      </method>
    </type>
    <type name="ComparablePair`2[T,U]">
      <method name="Void .ctor(T, U)">
        <size>15</size>
      </method>
      <method name="Int32 CompareTo(ComparablePair`2)">
        <size>68</size>
      </method>
      <method name="Boolean Equals(ComparablePair`2)">
        <size>73</size>
      </method>
      <method name="System.String ToString()">
        <size>64</size>
      </method>
    </type>
  </test>
  <test name="gtest-066.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1+Bar`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.FooEx`2[V,W]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
    </type>
  </test>
  <test name="gtest-067.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U](Test+Foo`1[U], U)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Add(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Void Main()">
        <size>26</size>
      </method>
    </type>
    <type name="Test+Foo`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(T, T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-068.cs">
    <type name="Martin.Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Baulig.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-069.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(IFoo`1)">
        <size>7</size>
      </method>
      <method name="Int32 Foo(IFoo)">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-070.cs">
    <type name="Martin.Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-071.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Test[U](U)">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-072.cs">
    <type name="Log`1[T]">
      <method name="Void .ctor()">
        <size>31</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 get_InstanceCount()">
        <size>6</size>
      </method>
      <method name="Void Add(T)">
        <size>32</size>
      </method>
      <method name="Int32 get_Count()">
        <size>7</size>
      </method>
      <method name="T get_Last()">
        <size>47</size>
      </method>
      <method name="Void set_Last(T)">
        <size>68</size>
      </method>
      <method name="T[] get_All()">
        <size>70</size>
      </method>
    </type>
    <type name="TestLog">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestLog+MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>209</size>
      </method>
      <method name="Void TestPairLog()">
        <size>181</size>
      </method>
    </type>
    <type name="Pair`2[T,U]">
      <method name="Void .ctor(T, U)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-073.cs">
    <type name="MyList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>55</size>
      </method>
    </type>
    <type name="MyList`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor(T)">
        <size>8</size>
      </method>
    </type>
    <type name="MyList`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-074.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor(T, T)">
        <size>21</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>85</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor(T, T)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-075.cs">
    <type name="ArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ArrayList`1[T]">
      <method name="Void IExtensible&lt;T&gt;.AddAll[U](U)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-076.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1 GetFoo(T)">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>41</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor(T)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-078.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Void System.IDisposable.Dispose()">
        <size>13</size>
      </method>
      <method name="Void Dispose()">
        <size>6</size>
      </method>
    </type>
    <type name="C">
      <method name="Void System.IDisposable.Dispose()">
        <size>1</size>
      </method>
      <method name="Void Dispose()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>209</size>
      </method>
      <method name="Void GenMethod[T](T)">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="gtest-079.cs">
    <type name="A.ArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void InsertAll(T)">
        <size>1</size>
      </method>
    </type>
    <type name="B.ArrayList`2[X,Y]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddAll[Z](Z)">
        <size>18</size>
      </method>
      <method name="Void InsertAll(Y)">
        <size>1</size>
      </method>
    </type>
    <type name="C.Foo`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C.ArrayList`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddAll[Y](Y)">
        <size>13</size>
      </method>
      <method name="Void InsertAll(C.Foo`1[X])">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A.ArrayList`1[T]">
      <method name="Void A.IExtensible&lt;T&gt;.AddAll[U](U)">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-080.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[T](IFoo`1)">
        <size>8</size>
      </method>
      <method name="Void InsertAll[U](IFoo`1)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-081.cs">
    <type name="ArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddAll[U](U)">
        <size>18</size>
      </method>
      <method name="Void InsertAll(T)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-082.cs">
    <type name="Queue`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Queue`1+Enumerator[T]">
      <method name="Void .ctor(Queue`1)">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-083.cs">
    <type name="CollectionValueBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T[] ToArray()">
        <size>2</size>
      </method>
    </type>
    <type name="CollectionBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="SequencedBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ArrayBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T[] ToArray()">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-084.cs">
    <type name="HasherBuilder.ByPrototype`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IHasher`1 Examine()">
        <size>2</size>
      </method>
    </type>
    <type name="ArrayList`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IHasher`1 GetHasher()">
        <size>6</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-085.cs">
    <type name="ArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 InsertAll[U](IFoo`1)">
        <size>2</size>
      </method>
      <method name="Int32 InsertAll(IFoo`1)">
        <size>2</size>
      </method>
      <method name="Int32 AddAll(IFoo`1)">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-086.cs">
    <type name="ArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 InsertAll[U](IFoo`1)">
        <size>2</size>
      </method>
      <method name="Int32 InsertAll(IFoo`1)">
        <size>2</size>
      </method>
      <method name="Int32 AddAll(IFoo`1)">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-087.cs">
    <type name="C5.HashedArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>12</size>
      </method>
    </type>
    <type name="C5.HashSet`1[T]">
      <method name="Void .ctor(IHasher`1)">
        <size>7</size>
      </method>
    </type>
    <type name="C5.KeyValuePairHasher`2[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-088.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>9</size>
      </method>
    </type>
    <type name="KeyValuePair`2[K,V]">
      <method name="Void .ctor(K, V)">
        <size>1</size>
      </method>
      <method name="Void .ctor(K)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-089.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(T, Int32 ByRef)">
        <size>4</size>
      </method>
      <method name="Void Hello(T)">
        <size>10</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-090.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T InsertAll[U](U)">
        <size>12</size>
      </method>
    </type>
    <type name="Bar`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T InsertAll[U](U)">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-091.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1+Node[T] Test[V]()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1+Node[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-092.cs">
    <type name="Element`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Void GetItem(T ByRef)">
        <size>13</size>
      </method>
      <method name="T GetItem(Int32, T ByRef)">
        <size>7</size>
      </method>
      <method name="Void SetItem(T)">
        <size>1</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1+Node[T] Test()">
        <size>52</size>
      </method>
    </type>
    <type name="Foo`1+Node[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-093.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Void Hello[U]()">
        <size>8</size>
      </method>
      <method name="Void maketreer(Foo`1+Node[T] ByRef)">
        <size>8</size>
      </method>
    </type>
    <type name="Foo`1+Node[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-094.cs">
    <type name="LinkedList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="LinkedList`1+Node[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="HashedLinkedList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-095.cs">
    <type name="GuardedCollectionValue`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IDirectedCollectionValue`1 Backwards()">
        <size>2</size>
      </method>
    </type>
    <type name="GuardedSequenced`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IDirectedCollectionValue`1 Test()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="GuardedCollectionValue`1[T]">
      <method name="IDirectedEnumerable`1 IDirectedEnumerable&lt;T&gt;.Backwards()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-096.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[T](Foo`1[T][], Int32)">
        <size>27</size>
      </method>
      <method name="Void Quicksort[U](Foo`1[U][])">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="gtest-097.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IFoo.Test[Y,Z]()">
        <size>1</size>
      </method>
      <method name="Void IFoo.Test[X]()">
        <size>1</size>
      </method>
    </type>
    <type name="Bar`3[X,Y,Z]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Bar`3[X,Y,Z]">
      <method name="Void IBar&lt;X&gt;.Test()">
        <size>1</size>
      </method>
      <method name="Void IBar&lt;Y,Z&gt;.Test()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-098.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IFoo.Test[Y,Z]()">
        <size>1</size>
      </method>
      <method name="Void IFoo.Test[X]()">
        <size>1</size>
      </method>
    </type>
    <type name="Bar`3[X,Y,Z]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Bar`3[X,Y,Z]">
      <method name="Void IBar&lt;X&gt;.Test()">
        <size>1</size>
      </method>
      <method name="Void IBar&lt;Y,Z&gt;.Test()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-100.cs">
    <type name="C5.ArrayBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C5.ArrayList`1[V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="C5.ArrayBase`1[T]">
      <method name="Void C5.ICollection&lt;T&gt;.Test[U]()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-101.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>9</size>
      </method>
    </type>
    <type name="SimpleStruct`1[T]">
      <method name="Void .ctor(T)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-102.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`2[U,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-103.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void World[U](U, IFoo`1)">
        <size>1</size>
      </method>
      <method name="Void World[V](IFoo`1)">
        <size>1</size>
      </method>
      <method name="Void Test(Foo)">
        <size>20</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-104.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
    <type name="MainClass+Gen`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
    </type>
    <type name="MainClass+Der">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-105.cs">
    <type name="A.KeyValuePairComparer`2[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Compare(KeyValuePair`2)">
        <size>2</size>
      </method>
    </type>
    <type name="A.TreeBag`1[T]">
      <method name="Void .ctor(IComparer`1)">
        <size>14</size>
      </method>
      <method name="Int32 Find(T ByRef)">
        <size>18</size>
      </method>
    </type>
    <type name="A.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>33</size>
      </method>
    </type>
    <type name="B.KeyValuePair`2[X,Y]">
      <method name="Void .ctor(X, Y)">
        <size>7</size>
      </method>
    </type>
    <type name="B.KeyValuePairComparer`2[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Compare(B.KeyValuePair`2[K,V])">
        <size>2</size>
      </method>
    </type>
    <type name="B.TreeBag`1[T]">
      <method name="Void .ctor(IComparer`1)">
        <size>14</size>
      </method>
      <method name="Int32 Find(T ByRef)">
        <size>18</size>
      </method>
    </type>
    <type name="B.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>32</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
    <type name="A.KeyValuePair`2[X,Y]">
      <method name="Void .ctor(X, Y)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-106.cs">
    <type name="KeyValuePairComparer`2[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Compare(KeyValuePair`2)">
        <size>2</size>
      </method>
    </type>
    <type name="TreeBag`1[T]">
      <method name="Void .ctor(IComparer`1, T)">
        <size>21</size>
      </method>
      <method name="Int32 Find()">
        <size>18</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>32</size>
      </method>
    </type>
    <type name="KeyValuePair`2[X,Y]">
      <method name="Void .ctor(X, Y)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-107.cs">
    <type name="Tree`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Void Map[V](Mapper`2[T,V])">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String themap(Int32)">
        <size>17</size>
      </method>
      <method name="Void Test()">
        <size>26</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
    <type name="Mapper`2[T,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="V Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="V EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-108.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>56</size>
      </method>
    </type>
    <type name="Test`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>81</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-109.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-110.cs">
    <type name="List`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Map[U](U)">
        <size>2</size>
      </method>
    </type>
    <type name="SpecialList`1[V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Map[W](W)">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
    </type>
  </test>
  <test name="gtest-111.cs">
    <type name="Collection`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Void Find(T ByRef)">
        <size>13</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
    </type>
    <type name="KeyValuePair`2[K,V]">
      <method name="Void .ctor(K, V)">
        <size>15</size>
      </method>
      <method name="Void .ctor(K)">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-112.cs">
    <type name="IC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Compare(Foo`1)">
        <size>1</size>
      </method>
    </type>
    <type name="List`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Sort(IComparer`1, T)">
        <size>8</size>
      </method>
    </type>
    <type name="Sorting">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IntroSort[T](IComparer`1, T)">
        <size>15</size>
      </method>
    </type>
    <type name="Sorting+Sorter`1[T]">
      <method name="Void .ctor(IComparer`1, Int32, T)">
        <size>26</size>
      </method>
      <method name="Void InsertionSort(Int32)">
        <size>26</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>27</size>
      </method>
    </type>
    <type name="Foo`1[K]">
      <method name="Void .ctor(K)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-113.cs">
    <type name="List`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Map[V](Mapper`2[T,V])">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>42</size>
      </method>
    </type>
    <type name="Mapper`2[T,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="V Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="V EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Double &lt;Main&gt;m__0(Int32)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-114.cs">
    <type name="NaturalComparer`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Compare(T, T)">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
    <type name="X+Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 CompareTo(X+Test)">
        <size>2</size>
      </method>
      <method name="Boolean Equals(X+Test)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-115.cs">
    <type name="LinkedList`1[T]">
      <method name="Void .ctor()">
        <size>30</size>
      </method>
      <method name="Void .ctor(T[])">
        <size>44</size>
      </method>
      <method name="IMyList`1 Map[U](Mapper`2[T,U])">
        <size>69</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Int32 get_Count()">
        <size>7</size>
      </method>
      <method name="T get_Item(Int32)">
        <size>13</size>
      </method>
      <method name="Void set_Item(Int32, T)">
        <size>14</size>
      </method>
      <method name="LinkedList`1+Node[T] get(Int32)">
        <size>114</size>
      </method>
      <method name="Void Add(T)">
        <size>14</size>
      </method>
      <method name="Void Insert(Int32, T)">
        <size>255</size>
      </method>
      <method name="Void RemoveAt(Int32)">
        <size>113</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>148</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>68</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>7</size>
      </method>
      <method name="LinkedList`1[T] op_Explicit(T[])">
        <size>7</size>
      </method>
      <method name="LinkedList`1[T] op_Addition(LinkedList`1[T], LinkedList`1[T])">
        <size>120</size>
      </method>
    </type>
    <type name="LinkedList`1+Node[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Void .ctor(T, Node, Node)">
        <size>28</size>
      </method>
    </type>
    <type name="LinkedList`1+LinkedListEnumerator[T]">
      <method name="Void .ctor(LinkedList`1)">
        <size>26</size>
      </method>
      <method name="T get_Current()">
        <size>24</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>71</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void Dispose()">
        <size>30</size>
      </method>
    </type>
    <type name="SortedList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Insert(T)">
        <size>137</size>
      </method>
    </type>
    <type name="PrintableLinkedList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Print(System.IO.TextWriter)">
        <size>89</size>
      </method>
    </type>
    <type name="MyString">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Int32 CompareTo(MyString)">
        <size>18</size>
      </method>
      <method name="Boolean Equals(MyString)">
        <size>18</size>
      </method>
      <method name="System.String get_Value()">
        <size>7</size>
      </method>
    </type>
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>467</size>
      </method>
    </type>
    <type name="Mapper`2[A,R]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="R Invoke(A)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(A, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="R EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="LinkedList`1+LinkedListEnumerator[T]">
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
    </type>
    <type name="MyTest">
      <method name="System.String &lt;Main&gt;m__0(Double)">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-116.cs">
    <type name="Slow.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DoNothing[T]()">
        <size>8</size>
      </method>
    </type>
    <type name="Slow.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>197</size>
      </method>
    </type>
  </test>
  <test name="gtest-117.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test(T)">
        <size>15</size>
      </method>
      <method name="Boolean Test()">
        <size>25</size>
      </method>
      <method name="Boolean TestB()">
        <size>25</size>
      </method>
    </type>
    <type name="Y`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Foo()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean TestB[T](T)">
        <size>15</size>
      </method>
      <method name="Boolean TestA(System.Object)">
        <size>10</size>
      </method>
      <method name="Int32 TestC()">
        <size>32</size>
      </method>
      <method name="Int32 Main()">
        <size>160</size>
      </method>
      <method name="Boolean Check1(Nullable`1)">
        <size>8</size>
      </method>
      <method name="Boolean Check2[T](E)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-118.cs">
    <type name="Polynomial`1[E]">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
      <method name="Void .ctor(E[])">
        <size>14</size>
      </method>
      <method name="Polynomial`1[E] Add(Polynomial`1[E])">
        <size>301</size>
      </method>
      <method name="Polynomial`1[E] Add(E)">
        <size>26</size>
      </method>
      <method name="Polynomial`1[E] Mul(E)">
        <size>78</size>
      </method>
      <method name="Polynomial`1[E] Mul(Polynomial`1[E])">
        <size>221</size>
      </method>
      <method name="E Eval(E)">
        <size>106</size>
      </method>
    </type>
    <type name="TestPolynomial">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>148</size>
      </method>
    </type>
    <type name="Int">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Int Add(Int)">
        <size>20</size>
      </method>
      <method name="Int Mul(Int)">
        <size>20</size>
      </method>
      <method name="System.String ToString()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-119.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
    </type>
  </test>
  <test name="gtest-120.cs">
    <type name="SequencedHasher`2[S,W]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(S, S)">
        <size>45</size>
      </method>
    </type>
    <type name="Sequenced`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(ISequenced`1)">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="gtest-121.cs">
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Add(T)">
        <size>2</size>
      </method>
      <method name="Void AddRange(System.Object)">
        <size>16</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-122.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>26</size>
      </method>
      <method name="Void D(Int32)">
        <size>22</size>
      </method>
    </type>
    <type name="A`1[T]">
      <method name="Void .ctor(B, T)">
        <size>21</size>
      </method>
      <method name="Void Run()">
        <size>18</size>
      </method>
    </type>
    <type name="A`1+B[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-123.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A`1+Foo[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="A`1+Bar`1[T,U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-124.cs">
    <type name="FooCollection`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
    <type name="FooCollection`1[T]">
      <method name="T IFoo&lt;T&gt;.get_Item(Int32)">
        <size>10</size>
      </method>
      <method name="Void IFoo&lt;T&gt;.set_Item(Int32, T)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-125.cs">
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-126.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean foo()">
        <size>2</size>
      </method>
    </type>
    <type name="MyFilter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="K Is(IB)">
        <size>10</size>
      </method>
    </type>
    <type name="MyBFilter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="B Is(IB)">
        <size>6</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Collections.Generic.List`1[T] foo1[T](Filter`1)">
        <size>38</size>
      </method>
      <method name="Void Main()">
        <size>45</size>
      </method>
    </type>
    <type name="K">
      <method name="Boolean foo()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-127.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add__changed(A`1+Changed[T])">
        <size>47</size>
      </method>
      <method name="Void remove__changed(A`1+Changed[T])">
        <size>47</size>
      </method>
      <method name="Void Register(A`1+Changed[T])">
        <size>20</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>25</size>
      </method>
      <method name="Void Del(A`1[System.Int32])">
        <size>11</size>
      </method>
    </type>
    <type name="A`1+Changed[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(A`1[T])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(A`1[T], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-128.cs">
    <type name="FLMID.Bugs.ParametersOne.Class`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Add(T)">
        <size>11</size>
      </method>
    </type>
    <type name="FLMID.Bugs.ParametersOne.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>119</size>
      </method>
    </type>
  </test>
  <test name="gtest-129.cs">
    <type name="B.Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-130.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>934</size>
      </method>
    </type>
  </test>
  <test name="gtest-131.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>1329</size>
      </method>
    </type>
  </test>
  <test name="gtest-132.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Nullable`1 Sqrt(Nullable`1)">
        <size>55</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>63</size>
      </method>
    </type>
  </test>
  <test name="gtest-133.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>199</size>
      </method>
    </type>
    <type name="S">
      <method name="Int32 get_X()">
        <size>7</size>
      </method>
      <method name="Void set_X(Int32)">
        <size>8</size>
      </method>
      <method name="Void Set(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-134.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>113</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="System.String Fmt()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-135.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>116</size>
      </method>
    </type>
  </test>
  <test name="gtest-136.cs">
    <type name="Martin.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>148</size>
      </method>
    </type>
    <type name="Martin.A">
      <method name="Void .ctor(Int64)">
        <size>8</size>
      </method>
      <method name="B op_Explicit(A)">
        <size>14</size>
      </method>
    </type>
    <type name="Martin.B">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="A op_Implicit(B)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-137.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>136</size>
      </method>
    </type>
  </test>
  <test name="gtest-138.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
    </type>
  </test>
  <test name="gtest-139.cs">
    <type name="MyStruct">
      <method name="Int32 op_Inequality(Nullable`1, System.String)">
        <size>2</size>
      </method>
      <method name="Int32 op_Equality(Nullable`1, System.String)">
        <size>2</size>
      </method>
      <method name="Int32 op_Inequality(System.String, Nullable`1)">
        <size>3</size>
      </method>
      <method name="Int32 op_Equality(System.String, Nullable`1)">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>60</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-140.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>132</size>
      </method>
    </type>
  </test>
  <test name="gtest-141.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>90</size>
      </method>
    </type>
  </test>
  <test name="gtest-142.cs">
    <type name="Assert">
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void IsNull[T](System.String, Nullable`1)">
        <size>24</size>
      </method>
      <method name="Void IsNotNull[T](System.String, Nullable`1)">
        <size>24</size>
      </method>
      <method name="Int32 get_Errors()">
        <size>6</size>
      </method>
      <method name="Void Error(System.String, System.String)">
        <size>25</size>
      </method>
      <method name="Void IsTrue(System.String, Boolean)">
        <size>18</size>
      </method>
      <method name="Void IsFalse(System.String, Boolean)">
        <size>18</size>
      </method>
      <method name="Void IsTrue(System.String, Nullable`1)">
        <size>36</size>
      </method>
      <method name="Void IsFalse(System.String, Nullable`1)">
        <size>36</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2243</size>
      </method>
    </type>
  </test>
  <test name="gtest-143.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>1073</size>
      </method>
      <method name="Int32 Main()">
        <size>30</size>
      </method>
      <method name="Int32 Index()">
        <size>26</size>
      </method>
      <method name="Nullable`1 get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Nullable`1)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-144.cs">
    <type name="Test.Application">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-145.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor(T[,])">
        <size>14</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-146.cs">
    <type name="MyLinkedList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyLinkedList`1+Node[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
    </type>
    <type name="SortedList`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Insert(U)">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-147.cs">
    <type name="B.Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A.IFoo.Hello(IFoo)">
        <size>1</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-148.cs">
    <type name="Test1">
      <method name="Void Foo[S,OP](UInt32)">
        <size>1</size>
      </method>
    </type>
    <type name="Test1+IOp`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test2">
      <method name="Void Foo[T,OP](UInt32)">
        <size>1</size>
      </method>
    </type>
    <type name="Test2+IOp`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-149.cs">
    <type name="Test1">
      <method name="Void Foo[S,OP](UInt32)">
        <size>1</size>
      </method>
    </type>
    <type name="Test1+IOp`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test2">
      <method name="Void Foo[T,OP](UInt32)">
        <size>1</size>
      </method>
    </type>
    <type name="Test2+IOp`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-150.cs">
    <type name="Test1">
      <method name="Void Foo[T,OP](UInt32)">
        <size>35</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="Test1+Op">
      <method name="UInt16 Test1.IOp&lt;ushort&gt;.Func(UInt32)">
        <size>5</size>
      </method>
      <method name="UInt32 Test1.IOp&lt;uint&gt;.Func(UInt32)">
        <size>4</size>
      </method>
    </type>
  </test>
  <test name="gtest-151.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-152.cs">
    <type name="EnumerableBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IFoo IFoo.Hello()">
        <size>7</size>
      </method>
      <method name="IFoo`1 Hello()">
        <size>0</size>
      </method>
    </type>
    <type name="CollectionBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="HashBag`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IFoo`1 Hello()">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-153.cs">
    <type name="MyClass`1[T]">
      <method name="Void .ctor()">
        <size>56</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-154.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T`1[X] M[X]()">
        <size>13</size>
      </method>
      <method name="T`1[System.Int64] N()">
        <size>30</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
    <type name="T`1[X]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(X)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(X, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 &lt;N&gt;m__1(Int64)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;M`1&gt;m__0[X](X)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-155.cs">
    <type name="MyClass`1[T]">
      <method name="Void .ctor()">
        <size>56</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-156.cs">
    <type name="FLMID.Bugs.Marshal15.D">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-157.cs">
    <type name="kv`2[k,v]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="m`2[k,v]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="m`2[k,v]">
      <method name="Void a&lt;kv&lt;k,v&gt;&gt;.x()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-158.cs">
    <type name="Moo`1[C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Moo`1+Foo[C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-159.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>98</size>
      </method>
    </type>
  </test>
  <test name="gtest-160.cs">
    <type name="Fun`2[A,B]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="List`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="List`1[T2] Map[T2](Fun`2[T,T2])">
        <size>6</size>
      </method>
      <method name="Void foo[T2]()">
        <size>17</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-161.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="U apply[T,U](T, FP+Mapping`2[T,U])">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>56</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(Int32)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-162.cs">
    <type name="Generic`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>33</size>
      </method>
    </type>
    <type name="Generic`1+Delegate[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Generic`1[T], T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Generic`1[T], T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-163.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 getEnumerator(Int32)">
        <size>22</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Foo`1+&lt;getEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>95</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-164.cs">
    <type name="FunEnumerable">
      <method name="Void .ctor(Int32, Int2Int)">
        <size>21</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Int2Int">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="FunEnumerable+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>97</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-165.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-166.cs">
    <type name="Foo">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-167.cs">
    <type name="TestAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestNotAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestMultiAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Class1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Class2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Class3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>86</size>
      </method>
    </type>
  </test>
  <test name="gtest-168.cs">
    <type name="lis`1[a]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="lis`1[a] Rev[a](lis`1[a])">
        <size>2</size>
      </method>
      <method name="lis`1[b] MapFromArray[a,b](a[])">
        <size>11</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-169.cs">
    <type name="list`1[A]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="list`1+Cons`1[A,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="list`1+Nil`1[A,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Rev[T](list`1[T])">
        <size>43</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-170.cs">
    <type name="C`1[A]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo[B](C`1[B])">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void append[A](C`1[A])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-171.cs">
    <type name="list`1[a]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Nil`1[a]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="gtest-172.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-173.cs">
    <type name="List`1[t]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo[b](List`1[t])">
        <size>27</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="gtest-174.cs">
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-175.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo Test(Foo, Foo)">
        <size>10</size>
      </method>
      <method name="Int32 Main()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="gtest-176.cs">
    <type name="lis`1[a]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="fn`3[a,b,r]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="r apply(a, b)">
        <size>0</size>
      </method>
    </type>
    <type name="fn1`1[a]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="lis`1[a] apply(lis`1[a], lis`1[a])">
        <size>8</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="b FoldLeft[a,b](a, b, fn`3[a,b,b])">
        <size>9</size>
      </method>
      <method name="lis`1[a] RevAppend[a](lis`1[a], lis`1[a])">
        <size>2</size>
      </method>
      <method name="lis`1[lis`1[a]] Concat[a](lis`1[lis`1[a]])">
        <size>17</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-177.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>25</size>
      </method>
      <method name="Int32 Main()">
        <size>96</size>
      </method>
    </type>
    <type name="X`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 Y(IEnumerable`1)">
        <size>7</size>
      </method>
      <method name="T Z(IList`1, Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-178.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-179.cs">
    <type name="X`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_i()">
        <size>2</size>
      </method>
      <method name="Void set_i(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 myMain()">
        <size>16</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-180.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>236</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-181.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator get_GetIt()">
        <size>8</size>
      </method>
      <method name="Void set_GetIt(IEnumerator)">
        <size>1</size>
      </method>
      <method name="IEnumerable get_Item(Int32)">
        <size>30</size>
      </method>
      <method name="Void set_Item(Int32, IEnumerable)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>184</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>148</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>167</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-182.cs">
    <type name="C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetId()">
        <size>3</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo[a](a)">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-183.cs">
    <type name="test.Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Lookup(T)">
        <size>30</size>
      </method>
    </type>
    <type name="test.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>71</size>
      </method>
    </type>
    <type name="test.Test`1+&lt;Lookup&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>90</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-184.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>68</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__0(System.String)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-185.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>47</size>
      </method>
    </type>
    <type name="FP">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T[] appendArrays[T](T[][])">
        <size>140</size>
      </method>
    </type>
  </test>
  <test name="gtest-186.cs">
    <type name="Tuple`2[a,b]">
      <method name="Void .ctor(a, b)">
        <size>21</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>120</size>
      </method>
    </type>
    <type name="TestSimpleObject">
      <method name="Void .ctor()">
        <size>25</size>
      </method>
      <method name="Void Print()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-187.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T next()">
        <size>7</size>
      </method>
    </type>
    <type name="Goo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-188.cs">
    <type name="Foo">
      <method name="Void .ctor(Object[])">
        <size>11</size>
      </method>
      <method name="Void .ctor(Object[], Object)">
        <size>201</size>
      </method>
      <method name="Void add_DoSomething(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_DoSomething(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
    <type name="Foo+&lt;Foo&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(System.Object, System.EventArgs)">
        <size>46</size>
      </method>
    </type>
    <type name="Foo+&lt;Foo&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-189.cs">
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Cont`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-190.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1+Node[T] GetRoot()">
        <size>6</size>
      </method>
      <method name="Void Test(Foo`1+Node[T])">
        <size>14</size>
      </method>
    </type>
    <type name="Foo`1+Node[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1+ConcatNode[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-191.cs">
    <type name="Test1.Test">
      <method name="IEnumerable`1 Replace[T]()">
        <size>16</size>
      </method>
    </type>
    <type name="Test2.Test`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Replace[T]()">
        <size>16</size>
      </method>
    </type>
    <type name="Test3.Test`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Replace[T](IEnumerable`1, IEnumerable`1)">
        <size>16</size>
      </method>
    </type>
    <type name="Test4.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Replace[T]()">
        <size>16</size>
      </method>
    </type>
    <type name="Test5.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Replace[T](T)">
        <size>30</size>
      </method>
    </type>
    <type name="Test6.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Replace[T](T)">
        <size>30</size>
      </method>
    </type>
    <type name="Test7.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Replace[T](T[])">
        <size>30</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test1.Test+&lt;Replace&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test2.Test`1+&lt;Replace&gt;c__Iterator1`1[S,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test3.Test`1+&lt;Replace&gt;c__Iterator2`1[S,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test4.Test+&lt;Replace&gt;c__Iterator3`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test5.Test+&lt;Replace&gt;c__Iterator4`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>76</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test6.Test+&lt;Replace&gt;c__Iterator5`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>88</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test7.Test+&lt;Replace&gt;c__Iterator6`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>88</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test1.Test+&lt;Replace&gt;c__Iterator0`1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Test2.Test`1+&lt;Replace&gt;c__Iterator1`1[S,T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Test3.Test`1+&lt;Replace&gt;c__Iterator2`1[S,T]">
      <method name="KeyValuePair`2 System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;S,T&gt;&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;S,T&gt;&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Test4.Test+&lt;Replace&gt;c__Iterator3`1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Test5.Test+&lt;Replace&gt;c__Iterator4`1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
    <type name="Test6.Test+&lt;Replace&gt;c__Iterator5`1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
    <type name="Test7.Test+&lt;Replace&gt;c__Iterator6`1[T]">
      <method name="T[] System.Collections.Generic.IEnumerator&lt;T[]&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T[]&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-192.cs">
    <type name="xX">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-193.cs">
    <type name="OrderedMultiDictionary`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 EnumerateKeys(RedBlackTree`1+RangeTester[System.Collections.Generic.KeyValuePair`2[T,U]])">
        <size>29</size>
      </method>
    </type>
    <type name="RedBlackTree`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 EnumerateRange(RedBlackTree`1+RangeTester[S])">
        <size>16</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="RedBlackTree`1+RangeTester[S]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(S)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(S, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="OrderedMultiDictionary`2+&lt;EnumerateKeys&gt;c__Iterator0[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>48</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="RedBlackTree`1+&lt;EnumerateRange&gt;c__Iterator1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="OrderedMultiDictionary`2+&lt;EnumerateKeys&gt;c__Iterator0[T,U]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
    <type name="RedBlackTree`1+&lt;EnumerateRange&gt;c__Iterator1[S]">
      <method name="S System.Collections.Generic.IEnumerator&lt;S&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;S&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="gtest-194.cs">
    <type name="RedBlackTree`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 EnumerateRange(RedBlackTree`1+RangeTester[S])">
        <size>16</size>
      </method>
    </type>
    <type name="OrderedMultiDictionary`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 EnumerateKeys(RedBlackTree`1+RangeTester[System.Collections.Generic.KeyValuePair`2[T,U]])">
        <size>29</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="RedBlackTree`1+RangeTester[S]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(S)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(S, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="RedBlackTree`1+&lt;EnumerateRange&gt;c__Iterator0[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="OrderedMultiDictionary`2+&lt;EnumerateKeys&gt;c__Iterator1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>48</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="RedBlackTree`1+&lt;EnumerateRange&gt;c__Iterator0[S]">
      <method name="S System.Collections.Generic.IEnumerator&lt;S&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;S&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="OrderedMultiDictionary`2+&lt;EnumerateKeys&gt;c__Iterator1[T,U]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-195.cs">
    <type name="OrderedMultiDictionary`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void EnumerateKeys(RedBlackTree`1+RangeTester[System.Collections.Generic.KeyValuePair`2[T,U]])">
        <size>13</size>
      </method>
    </type>
    <type name="RedBlackTree`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void EnumerateRange(RedBlackTree`1+RangeTester[S])">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="RedBlackTree`1+RangeTester[S]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(S)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(S, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-196.cs">
    <type name="Dict">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>114</size>
      </method>
    </type>
  </test>
  <test name="gtest-197.cs">
    <type name="Martin.Collections.Generic.EqualityComparer`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>95</size>
      </method>
      <method name="Int32 GetHashCode(T)">
        <size>0</size>
      </method>
      <method name="Boolean Equals(T, T)">
        <size>0</size>
      </method>
      <method name="Martin.Collections.Generic.EqualityComparer`1[T] get_Default()">
        <size>6</size>
      </method>
    </type>
    <type name="Martin.Collections.Generic.EqualityComparer`1+DefaultComparer[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetHashCode(T)">
        <size>14</size>
      </method>
      <method name="Boolean Equals(T, T)">
        <size>41</size>
      </method>
    </type>
    <type name="Martin.Collections.Generic.IEquatableOfTEqualityComparer`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetHashCode(T)">
        <size>14</size>
      </method>
      <method name="Boolean Equals(T, T)">
        <size>36</size>
      </method>
    </type>
    <type name="Martin.Collections.Generic.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-198.cs">
    <type name="ClassLibrary2.List1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ClassLibrary2.List2`1[T]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Void AddItem(T)">
        <size>13</size>
      </method>
    </type>
    <type name="ClassLibrary2.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-199.cs">
    <type name="Splay`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-200.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T QueryInterface[T](System.Object)">
        <size>45</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-201.cs">
    <type name="HashSet`1[T]">
      <method name="Void .ctor(Int64)">
        <size>14</size>
      </method>
      <method name="Int64 Test()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>83</size>
      </method>
    </type>
    <type name="HashSet`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>81</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Int64 System.Collections.Generic.IEnumerator&lt;long&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-202.cs">
    <type name="Generic`1[T]">
      <method name="Void .ctor()">
        <size>20</size>
      </method>
      <method name="T get_Item(Int32, Int32)">
        <size>14</size>
      </method>
      <method name="Void set_Item(Int32, Int32, T)">
        <size>15</size>
      </method>
    </type>
    <type name="Fault">
      <method name="Void Main()">
        <size>51</size>
      </method>
      <method name="System.String ToString()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-203.cs">
    <type name="C`2[X,Y]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo[A,B]()">
        <size>14</size>
      </method>
      <method name="Void bar[A,B]()">
        <size>69</size>
      </method>
    </type>
    <type name="C`2+Q`2[X,Y,A,B]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void apply(C`2[X,Y])">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-204.cs">
    <type name="Map`1[b]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="a Fold1[a](a)">
        <size>2</size>
      </method>
      <method name="c Fold[c](c)">
        <size>15</size>
      </method>
    </type>
    <type name="LocalContext">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="a Fold[a](a)">
        <size>13</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-205.cs">
    <type name="Foo`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Func(U)">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(System.Type, System.Object)">
        <size>31</size>
      </method>
      <method name="Void Main()">
        <size>144</size>
      </method>
    </type>
  </test>
  <test name="gtest-206.cs">
    <type name="Continuation`2[R,A]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Continuation`2[R,A] CallCC[B](System.Object)">
        <size>2</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Continuation`2[B,A] myTry[A,B](B, A)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>9</size>
      </method>
    </type>
  </test>
  <test name="gtest-207.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void p(System.String)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="gtest-208.cs">
    <type name="SomeClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Do(System.Object)">
        <size>12</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-209.cs">
    <type name="ClassLibrary3.Dictionary1`2[TKey,TValue]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ClassLibrary3.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-210.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T next()">
        <size>7</size>
      </method>
    </type>
    <type name="Goo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-211.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void f(Boolean, Boolean)">
        <size>59</size>
      </method>
      <method name="Void Main()">
        <size>447</size>
      </method>
    </type>
  </test>
  <test name="gtest-212.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Fun[T](T)">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="SomeStruct">
      <method name="Boolean get_Valid()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-213.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Fun[T](T)">
        <size>78</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="SomeStruct">
      <method name="Int32 get_Foo()">
        <size>7</size>
      </method>
      <method name="Void set_Foo(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-214.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>83</size>
      </method>
    </type>
  </test>
  <test name="gtest-215.cs">
    <type name="R">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-216.cs">
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Ret`1 Foo[T]()">
        <size>2</size>
      </method>
      <method name="Ret Foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="DerivedClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Ret`1 Foo[T]()">
        <size>2</size>
      </method>
      <method name="Ret Foo()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-217.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Map[Aa,Af,Rf,Rr](Fun`2[Af,Rf], IEnumerable`1)">
        <size>44</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>97</size>
      </method>
      <method name="IEnumerable`1 FromTo(Int32, Int32)">
        <size>44</size>
      </method>
    </type>
    <type name="Fun`2[A1,R]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="R Invoke(A1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(A1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="R EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="MyTest">
      <method name="System.String &lt;Main&gt;m__0(Int32)">
        <size>14</size>
      </method>
    </type>
    <type name="MyTest+&lt;Map&gt;c__Iterator0`4[Aa,Af,Rf,Rr]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>213</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="MyTest+&lt;FromTo&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>124</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="MyTest+&lt;Map&gt;c__Iterator0`4[Aa,Af,Rf,Rr]">
      <method name="Rr System.Collections.Generic.IEnumerator&lt;Rr&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Rr&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
    <type name="MyTest+&lt;FromTo&gt;c__Iterator1">
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-218.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-219.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>75</size>
      </method>
    </type>
  </test>
  <test name="gtest-220.cs">
    <type name="A`1[T1]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B`1[T1,T2]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B`1+C`1[T1,T2,T3]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="PopQuiz">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>148</size>
      </method>
    </type>
  </test>
  <test name="gtest-221.cs">
    <type name="C1`1[IFoo]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="C1`1[T] Hoge[T](C1`1[T])">
        <size>0</size>
      </method>
    </type>
    <type name="C3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="C1`1[T] Hoge[T](C1`1[T])">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-222.cs">
    <type name="Mona`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Mona`1[K] GetMona[K]()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-223.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo`1[K] Hoge[K]()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>72</size>
      </method>
    </type>
  </test>
  <test name="gtest-224.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-225.cs">
    <type name="Set`1[Element]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Locator locate(Element)">
        <size>31</size>
      </method>
    </type>
    <type name="Set`1+Node[Element]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="SetTest">
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Set`1+Locator+Replace[Element]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Set`1+Node[Element])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Set`1+Node[Element], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Set`1+&lt;locate&gt;c__AnonStorey0[Element]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(Set`1+Node[Element])">
        <size>15</size>
      </method>
    </type>
    <type name="Set`1+Locator[Element]">
      <method name="Void .ctor(Replace)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-226.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>24</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>84</size>
      </method>
    </type>
    <type name="Container`1[T]">
      <method name="Void .ctor(T)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-227.cs">
    <type name="Foo`1[G]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar()">
        <size>26</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-228.cs">
    <type name="GenParAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="cons`2[A,B]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void abc[M]()">
        <size>1</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-229.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 CompareTo(B)">
        <size>2</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-231.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="gtest-232.cs">
    <type name="M">
      <method name="Int32 Main()">
        <size>68</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-233.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>25</size>
      </method>
      <method name="Void list_ListChanged(System.Object, System.ComponentModel.ListChangedEventArgs)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-234.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IFoo`1 GetFooGeneric[T]()">
        <size>2</size>
      </method>
      <method name="IFoo GetFoo()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-235.cs">
    <type name="GettingStarted">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-236.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Foo`1[T])">
        <size>2</size>
      </method>
      <method name="Int32 Test(Foo`1[System.Int32])">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
    </type>
  </test>
  <test name="gtest-237.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(T)">
        <size>2</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>60</size>
      </method>
    </type>
  </test>
  <test name="gtest-238.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>39</size>
      </method>
    </type>
  </test>
  <test name="gtest-239.cs">
    <type name="Foo`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(T, U)">
        <size>2</size>
      </method>
      <method name="Int32 Test(Int32, U)">
        <size>2</size>
      </method>
      <method name="Int32 Test(T, Single)">
        <size>2</size>
      </method>
      <method name="Int32 Test(Int32, Single)">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>237</size>
      </method>
    </type>
  </test>
  <test name="gtest-240.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="MyClass">
      <method name="Void IMyInterface&lt;string&gt;.add_MyEvent(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void IMyInterface&lt;string&gt;.remove_MyEvent(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void IMyInterface&lt;int&gt;.add_MyEvent(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void IMyInterface&lt;int&gt;.remove_MyEvent(System.EventHandler)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-241.cs">
    <type name="a">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void func[T](T ByRef)">
        <size>0</size>
      </method>
    </type>
    <type name="b">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void func[T](T ByRef)">
        <size>1</size>
      </method>
    </type>
    <type name="main">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-242.cs">
    <type name="Container`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ReferenceType">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 CompareTo(ReferenceType)">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
    <type name="MyValueType">
      <method name="Int32 CompareTo(MyValueType)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-243.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(T)">
        <size>1</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo[T]()">
        <size>1</size>
      </method>
      <method name="Int32 Test()">
        <size>148</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-244.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Get[T]()">
        <size>10</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Get[T]()">
        <size>30</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-245.cs">
    <type name="DerivedGenericClass`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Void Baz()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-246.cs">
    <type name="TestCase.CTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Bar()">
        <size>1</size>
      </method>
    </type>
    <type name="TestCase.CGenericTest`2[T,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="V Foo()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-247.cs">
    <type name="EnumerableBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>0</size>
      </method>
    </type>
    <type name="CollectionValueBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void raiseItemsAdded(T, Int32)">
        <size>1</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>0</size>
      </method>
    </type>
    <type name="CollectionValueBase`1+RaiseForRemoveAllHandler[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CircularQueue`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>8</size>
      </method>
      <method name="Void Enqueue(T)">
        <size>1</size>
      </method>
    </type>
    <type name="HashSet`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void RemoveAll[U](IEnumerable`1)">
        <size>7</size>
      </method>
      <method name="Void AddAll[U](IEnumerable`1)">
        <size>63</size>
      </method>
      <method name="Boolean searchoradd(T ByRef, Boolean, Boolean, Boolean)">
        <size>2</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="CircularQueue`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="HashSet`1+&lt;GetEnumerator&gt;c__Iterator1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="CircularQueue`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
    <type name="HashSet`1+&lt;GetEnumerator&gt;c__Iterator1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-248.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test(System.Object)">
        <size>19</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-249.cs">
    <type name="EnumerableBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>0</size>
      </method>
    </type>
    <type name="ArrayBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="HashedArrayList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ArrayBase`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-250.cs">
    <type name="GuardedIndexedSorted`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IIndexedSorted`1 Map[V](Fun`2[T,V])">
        <size>13</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Fun`2[R,S]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="S Invoke(R)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(R, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="S EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-251.cs">
    <type name="SortedIndexedTester`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(ISorted`1)">
        <size>24</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-252.cs">
    <type name="EqualityComparer`1[T]">
      <method name="Void .cctor()">
        <size>16</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
    </type>
    <type name="SequencedEqualityComparer`2[T,W]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-253.cs">
    <type name="CollectionValueTester`2[R,S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ExtensibleTester`1[U]">
      <method name="Void .ctor(U)">
        <size>14</size>
      </method>
      <method name="Void Direct()">
        <size>24</size>
      </method>
    </type>
    <type name="Extensible`1[V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddAll[W](IEnumerable`1)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-254.cs">
    <type name="HashedLinkedList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="HashedLinkedList`1[T] GetList()">
        <size>6</size>
      </method>
      <method name="Void Test(Int32)">
        <size>55</size>
      </method>
      <method name="Void Test(HashedLinkedList`1[T])">
        <size>51</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-255.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Foo[T]()">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Foo[T]()">
        <size>10</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-256.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void Run()">
        <size>147</size>
      </method>
    </type>
    <type name="Test+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>138</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.String System.Collections.Generic.IEnumerator&lt;string&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-257.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="gtest-258.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-259.cs">
    <type name="Class1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MethodOfClass1(T, MyType)">
        <size>14</size>
      </method>
    </type>
    <type name="MyType">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MethodOfMyBaseType()">
        <size>1</size>
      </method>
    </type>
    <type name="MyBaseType">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MethodOfMyBaseType()">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-260.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-261.cs">
    <type name="Cons`2[T,U]">
      <method name="Void .ctor(T, U)">
        <size>21</size>
      </method>
      <method name="System.String ToString()">
        <size>68</size>
      </method>
    </type>
    <type name="List`1[A]">
      <method name="Void .ctor(A)">
        <size>9</size>
      </method>
      <method name="Void .ctor(A, List`1)">
        <size>9</size>
      </method>
      <method name="Void zip[B](List`1[B])">
        <size>18</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-262.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void f1(System.Object)">
        <size>1</size>
      </method>
      <method name="Void f2(System.String)">
        <size>1</size>
      </method>
      <method name="Void f3(Test)">
        <size>1</size>
      </method>
      <method name="Void f4(Int32)">
        <size>1</size>
      </method>
      <method name="Void f5(Int16)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>162</size>
      </method>
      <method name="Void f6(ParamEnum)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-263.cs">
    <type name="Foo`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="ICloneable Test(S)">
        <size>12</size>
      </method>
    </type>
    <type name="ConvertHelper">
      <method name="IEnumerator`1 Test[S,T](S)">
        <size>22</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ConvertHelper+&lt;Test&gt;c__Iterator0`2[S,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>86</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-264.cs">
    <type name="BaseList`1[SubType]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
    <type name="XXX">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Crash">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-265.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-266.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test`1+Inner`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>13</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-267.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](Handler`1[T])">
        <size>34</size>
      </method>
      <method name="Void Response[T](Handler`1[T])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Handler`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="T+&lt;Foo&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(IAsyncResult)">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-268.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test+G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-269.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Beer(Nullable`1)">
        <size>54</size>
      </method>
      <method name="Int64 PubToLong(IrishPub)">
        <size>12</size>
      </method>
      <method name="Int32 Test(Nullable`1)">
        <size>53</size>
      </method>
      <method name="Int32 TestWithNull(Nullable`1)">
        <size>55</size>
      </method>
      <method name="Nullable`1 Foo(Boolean)">
        <size>24</size>
      </method>
      <method name="Int32 Test(Boolean)">
        <size>52</size>
      </method>
      <method name="Int32 Main()">
        <size>194</size>
      </method>
    </type>
    <type name="IrishPub">
      <method name="Void .ctor(IrishBeer)">
        <size>8</size>
      </method>
      <method name="Int64 op_Implicit(Nullable`1)">
        <size>36</size>
      </method>
      <method name="Nullable`1 op_Implicit(Int64)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-270.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Nullable`1)">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="gtest-271.cs">
    <type name="Qux`2[X,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>8</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="Foo`2[X,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 CompareTo(Test`1[T])">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>55</size>
      </method>
    </type>
    <type name="Qux`2+GetEnumerator&gt;c__Iterator0[X,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Qux`2+&lt;GetEnumerator&gt;c__Iterator1[X,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Qux`2+GetEnumerator&gt;c__Iterator0[X,V]">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
    <type name="Qux`2+&lt;GetEnumerator&gt;c__Iterator1[X,V]">
      <method name="V System.Collections.Generic.IEnumerator&lt;V&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-272.cs">
    <type name="X">
      <method name="Void Foo[T](Handler`1[T])">
        <size>27</size>
      </method>
      <method name="Void Response[T](Handler`1[T])">
        <size>1</size>
      </method>
      <method name="Void Test[T](T)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
    <type name="Handler`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Foo&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(IAsyncResult)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-273.cs">
    <type name="ThisBaseClass`3[A,B,C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ThatBaseClass`3[B,A,C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ThisClass`3[A,B,C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ThatClass`3[B,A,C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ThisClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ThatClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-274.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>447</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Int64)">
        <size>8</size>
      </method>
      <method name="Foo op_Implicit(Int64)">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor(Foo)">
        <size>8</size>
      </method>
      <method name="Bar op_Implicit(Foo)">
        <size>7</size>
      </method>
    </type>
    <type name="Baz">
      <method name="Void .ctor(Foo)">
        <size>8</size>
      </method>
      <method name="Baz op_Explicit(Foo)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-275.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
    <type name="Test+C">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
    <type name="Test+D`2[T,U]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
    <type name="Test+E`1[T]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-276.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>30</size>
      </method>
    </type>
    <type name="Tests+GenericClass`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Z(IList`1, Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-277.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-278.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-279.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IList`1 Bar[T]()">
        <size>12</size>
      </method>
      <method name="Void Bar()">
        <size>11</size>
      </method>
    </type>
    <type name="BugReport">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-280.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>69</size>
      </method>
    </type>
    <type name="Test+TestDel">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-281.cs">
    <type name="List">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddRange[T](ICollection`1)">
        <size>1</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-282.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo+Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-283.cs">
    <type name="Point">
      <method name="Void .ctor(Int32, Int32)">
        <size>15</size>
      </method>
    </type>
    <type name="TestPoint">
      <method name="Void Serialize(IFoo)">
        <size>39</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-284.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CollectionTester">
      <method name="Int32 Test[T](IList`1)">
        <size>67</size>
      </method>
      <method name="Int32 Test()">
        <size>522</size>
      </method>
    </type>
    <type name="InterfaceTester">
      <method name="Void .cctor()">
        <size>136</size>
      </method>
      <method name="Int32 Test(System.Type, System.Type[])">
        <size>425</size>
      </method>
      <method name="Int32 Test()">
        <size>532</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>36</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
    </type>
  </test>
  <test name="gtest-285.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="gtest-286.cs">
    <type name="TestAttribute">
      <method name="Void .ctor(Type)">
        <size>14</size>
      </method>
    </type>
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>76</size>
      </method>
    </type>
  </test>
  <test name="gtest-287.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>36</size>
      </method>
      <method name="Void D()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-288.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test(Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
    </type>
    <type name="B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Foo(Int32)">
        <size>13</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-289.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Ev1(D)">
        <size>47</size>
      </method>
      <method name="Void remove_Ev1(D)">
        <size>47</size>
      </method>
    </type>
    <type name="Consts">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>74</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-290.cs">
    <type name="GenericEventNotUsedTest`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_TestEvent(GenericEventHandler`2[GenericEventNotUsedTest`1[T],T])">
        <size>47</size>
      </method>
      <method name="Void remove_TestEvent(GenericEventHandler`2[GenericEventNotUsedTest`1[T],T])">
        <size>47</size>
      </method>
      <method name="Void RaiseTestEvent(T)">
        <size>14</size>
      </method>
    </type>
    <type name="TestEntry">
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="GenericEventHandler`2[U,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(U, V)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(U, V, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-291.cs">
    <type name="Global">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
      <method name="System.String Test2(Nullable`1)">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-292.cs">
    <type name="Test.A`1[TA]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test.Handler`1[TA]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(TA)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TA, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-293.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Invalid(T)">
        <size>21</size>
      </method>
      <method name="Void Other(IEnumerable`1)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-294.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="A Test(A, B)">
        <size>10</size>
      </method>
      <method name="Int32 Main()">
        <size>73</size>
      </method>
    </type>
  </test>
  <test name="gtest-295.cs">
    <type name="Test.Cache`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.MyType`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-296.cs">
    <type name="MyCollection`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>14</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-297.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-298.cs">
    <type name="A">
      <method name="Void .ctor(TestFunc`1)">
        <size>14</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>46</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
    </type>
    <type name="TestFunc`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void &lt;a&gt;m__0(Int32)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-299.cs">
    <type name="N.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-300.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>66</size>
      </method>
    </type>
  </test>
  <test name="gtest-301.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-302.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>6</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
    </type>
    <type name="Test+GetEnumerator&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test">
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="Test+GetEnumerator&gt;c__Iterator0">
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-303.cs">
    <type name="test.BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Hello()">
        <size>6</size>
      </method>
    </type>
    <type name="test.Printer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Print[T](T)">
        <size>0</size>
      </method>
    </type>
    <type name="test.PrinterImpl">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Print[T](T)">
        <size>19</size>
      </method>
    </type>
    <type name="test.Starter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-304.cs">
    <type name="test.BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Hello()">
        <size>6</size>
      </method>
    </type>
    <type name="test.Printer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Print[T](System.Object)">
        <size>0</size>
      </method>
    </type>
    <type name="test.PrinterImpl">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Print[T](System.Object)">
        <size>31</size>
      </method>
    </type>
    <type name="test.Starter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-305.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>82</size>
      </method>
      <method name="Int32 Main()">
        <size>54</size>
      </method>
    </type>
  </test>
  <test name="gtest-306.cs">
    <type name="FuParentClass`1[Trow]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FuParentClass`1+FuChildClass[Trow]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-307.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 g()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
    </type>
    <type name="Foo`1+F[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-308.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Comparison`1[U] WrapComparison[U](System.Comparison`1[U])">
        <size>26</size>
      </method>
      <method name="Test+MyComparison`1[W] WrapMyComparison[W](Test+MyComparison`1[W])">
        <size>26</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 compare(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Int32 compare(System.String, System.String)">
        <size>8</size>
      </method>
      <method name="Void test(Int32)">
        <size>29</size>
      </method>
      <method name="Void Main()">
        <size>141</size>
      </method>
    </type>
    <type name="Test+MyComparison`1[V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(V, V)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(V, V, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;WrapComparison&gt;c__AnonStorey0`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0(U, U)">
        <size>14</size>
      </method>
    </type>
    <type name="Test+&lt;WrapMyComparison&gt;c__AnonStorey1`1[W]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__1(W, W)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-309.cs">
    <type name="Test`2[A,B]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[V,W](Test`2[A,W], Test`2[V,B])">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-310.cs">
    <type name="MonoBugs.IncompleteGenericInference">
      <method name="Void DoSomethingGeneric[T1,T2](IEnumerable`1, IDictionary`2)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-312.cs">
    <type name="CantCastGenericListToArray">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>51</size>
      </method>
    </type>
  </test>
  <test name="gtest-313.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor(TestEnum)">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="gtest-314.cs">
    <type name="test.App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="test.ThisClass`2[T,O]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="test.OtherClass`2[O,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(T)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-315.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-316.cs">
    <type name="X">
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Base">
      <method name="Void Method[R]()">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void Method[S]()">
        <size>7</size>
      </method>
      <method name="Void Method2[T]()">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-317.cs">
    <type name="Foo`1[K]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar`1[Q]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar`1+Baz[Q]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-318.cs">
    <type name="Foo`1[K]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar`1[Q]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar`1+Baz[Q]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Goo`1[Q]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-319.cs">
    <type name="Temp`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="Temp`1+Foo[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Temp`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>75</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Temp`1+Foo[T] System.Collections.Generic.IEnumerator&lt;Temp&lt;T&gt;.Foo&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-320.cs">
    <type name="Foo`1[K]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-321.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void TestMethod[T](System.String, App+TGenericDelegate`1[T])">
        <size>25</size>
      </method>
      <method name="Void ADelegate[T](System.String)">
        <size>12</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>13</size>
      </method>
      <method name="Void Run()">
        <size>49</size>
      </method>
    </type>
    <type name="App+TGenericDelegate`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-322.cs">
    <type name="MyBase`2[K,V]">
      <method name="Void .ctor(Callback)">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor(Callback)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="MyBase`2+Callback[K,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(K, V)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(K, V, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-323.cs">
    <type name="MyBase`2[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(MyBase`2+Callback[K,V])">
        <size>1</size>
      </method>
    </type>
    <type name="MyBase`2+Callback[K,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor(Callback)">
        <size>7</size>
      </method>
      <method name="Void Test(MyBase`2+Callback[System.String,System.Int32])">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-324.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
      <method name="Void add_D(A)">
        <size>45</size>
      </method>
      <method name="Void remove_D(A)">
        <size>45</size>
      </method>
      <method name="Void C()">
        <size>36</size>
      </method>
      <method name="Void F(Int64)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="B+&lt;C&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>39</size>
      </method>
    </type>
    <type name="B+&lt;C&gt;c__AnonStorey1+&lt;C&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>57</size>
      </method>
    </type>
  </test>
  <test name="gtest-325.cs">
    <type name="SomeClass`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>37</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-326.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>55</size>
      </method>
    </type>
  </test>
  <test name="gtest-327.cs">
    <type name="Tester`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Do()">
        <size>50</size>
      </method>
    </type>
    <type name="Reference">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
    <type name="Value">
      <method name="Void Test()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-328.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>34</size>
      </method>
      <method name="Void TestMethod(System.String, System.Collections.Generic.List`1[System.String], App+MyClass[])">
        <size>13</size>
      </method>
    </type>
    <type name="App+MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-329.cs">
    <type name="NullableInt">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>91</size>
      </method>
    </type>
  </test>
  <test name="gtest-330.cs">
    <type name="BaseCollection`1[T]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>17</size>
      </method>
    </type>
    <type name="BaseIntList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="IntList">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
    </type>
    <type name="BaseCollection`1[T]">
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-331.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Map[S](S)">
        <size>14</size>
      </method>
      <method name="Void Test(T)">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-332.cs">
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Type Test()">
        <size>15</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>77</size>
      </method>
    </type>
  </test>
  <test name="gtest-333.cs">
    <type name="Program">
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-334.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>105</size>
      </method>
      <method name="Void DelegateMethod(Boolean)">
        <size>1</size>
      </method>
      <method name="Int32 DelegateMethod(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="Test+DelegateA">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Boolean)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Boolean, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+DelegateB">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-335.cs">
    <type name="TestClass">
      <method name="Boolean Test_1()">
        <size>43</size>
      </method>
      <method name="Boolean Test_2()">
        <size>48</size>
      </method>
      <method name="Boolean Test_3()">
        <size>46</size>
      </method>
      <method name="Boolean Test_4()">
        <size>29</size>
      </method>
      <method name="Int32 Main()">
        <size>85</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test_5()">
        <size>63</size>
      </method>
      <method name="Int32 Test_6()">
        <size>53</size>
      </method>
    </type>
  </test>
  <test name="gtest-336.cs">
    <type name="TestAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Type)">
        <size>14</size>
      </method>
      <method name="System.Object get_Type()">
        <size>7</size>
      </method>
      <method name="Void set_Type(System.Object)">
        <size>8</size>
      </method>
    </type>
    <type name="N.C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar()">
        <size>1</size>
      </method>
      <method name="Void Bar2()">
        <size>1</size>
      </method>
      <method name="Void Bar3()">
        <size>1</size>
      </method>
      <method name="Void Bar4()">
        <size>1</size>
      </method>
    </type>
    <type name="N.CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-337.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void SetValue[T](System.Object, T)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-338.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](IList`1)">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
    <type name="FooList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 IndexOf(T)">
        <size>6</size>
      </method>
      <method name="Void Insert(Int32, T)">
        <size>6</size>
      </method>
      <method name="Void RemoveAt(Int32)">
        <size>6</size>
      </method>
      <method name="T get_Item(Int32)">
        <size>6</size>
      </method>
      <method name="Void set_Item(Int32, T)">
        <size>6</size>
      </method>
      <method name="Void Add(T)">
        <size>6</size>
      </method>
      <method name="Void Clear()">
        <size>6</size>
      </method>
      <method name="Boolean Contains(T)">
        <size>6</size>
      </method>
      <method name="Void CopyTo(T[], Int32)">
        <size>6</size>
      </method>
      <method name="Boolean Remove(T)">
        <size>6</size>
      </method>
      <method name="Int32 get_Count()">
        <size>6</size>
      </method>
      <method name="Boolean get_IsReadOnly()">
        <size>6</size>
      </method>
      <method name="IEnumerator GetEnumerator()">
        <size>6</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-339.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void SerializeDictionary(IDictionary)">
        <size>1</size>
      </method>
      <method name="Void SerializeDictionary(IDictionary`2)">
        <size>1</size>
      </method>
    </type>
    <type name="SerializerLazyDictionary">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>2</size>
      </method>
    </type>
    <type name="LazyDictionary">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>0</size>
      </method>
      <method name="Void System.Collections.Generic.IDictionary&lt;string,object&gt;.Add(System.String, System.Object)">
        <size>6</size>
      </method>
      <method name="Boolean System.Collections.Generic.IDictionary&lt;string,object&gt;.ContainsKey(System.String)">
        <size>6</size>
      </method>
      <method name="ICollection`1 System.Collections.Generic.IDictionary&lt;string,object&gt;.get_Keys()">
        <size>6</size>
      </method>
      <method name="Boolean System.Collections.Generic.IDictionary&lt;string,object&gt;.Remove(System.String)">
        <size>6</size>
      </method>
      <method name="Boolean System.Collections.Generic.IDictionary&lt;string,object&gt;.TryGetValue(System.String, System.Object ByRef)">
        <size>6</size>
      </method>
      <method name="ICollection`1 System.Collections.Generic.IDictionary&lt;string,object&gt;.get_Values()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IDictionary&lt;string,object&gt;.get_Item(System.String)">
        <size>6</size>
      </method>
      <method name="Void System.Collections.Generic.IDictionary&lt;string,object&gt;.set_Item(System.String, System.Object)">
        <size>6</size>
      </method>
      <method name="Void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.Add(KeyValuePair`2)">
        <size>6</size>
      </method>
      <method name="Void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.Clear()">
        <size>6</size>
      </method>
      <method name="Boolean System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.Contains(KeyValuePair`2)">
        <size>6</size>
      </method>
      <method name="Void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.CopyTo(System.Collections.Generic.KeyValuePair`2[System.String,System.Object][], Int32)">
        <size>6</size>
      </method>
      <method name="Int32 System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.get_Count()">
        <size>6</size>
      </method>
      <method name="Boolean System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.get_IsReadOnly()">
        <size>6</size>
      </method>
      <method name="Boolean System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.Remove(KeyValuePair`2)">
        <size>6</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.GetEnumerator()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-340.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T[] FindAll[T](T[], System.Predicate`1[T])">
        <size>7</size>
      </method>
      <method name="Boolean ProtectedOnly(System.Reflection.MemberInfo)">
        <size>2</size>
      </method>
      <method name="System.Reflection.MemberInfo[] foo()">
        <size>44</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-341.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetLength()">
        <size>2</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-342.cs">
    <type name="Base`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T op_Implicit(Base`1[T])">
        <size>7</size>
      </method>
    </type>
    <type name="TestMain">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-343.cs">
    <type name="Implementer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Combine[TOImplementer]()">
        <size>1</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-344.cs">
    <type name="ConfigurationElement">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="CustomConfigurationElement">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CustomConfigurationElementCollection">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseCollection`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-345.cs">
    <type name="ShiftReduceParser`2[TokenValueType,TokenLocationType]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Dump(System.String)">
        <size>6</size>
      </method>
    </type>
    <type name="Parser">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void NoCall[T](T)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-346.cs">
    <type name="test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void CreateSimpleCallSite[A]()">
        <size>1</size>
      </method>
      <method name="Void CreateSimpleCallSite[A](Int32)">
        <size>1</size>
      </method>
      <method name="Void CreateSimpleCallSite(Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-347.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Enumerable[T](System.String)">
        <size>6</size>
      </method>
      <method name="IEnumerable Enumerable(Int32)">
        <size>6</size>
      </method>
      <method name="IEnumerable Enumerable(System.String)">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-348.cs">
    <type name="Bar`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void OnWorldDestroyed()">
        <size>1</size>
      </method>
    </type>
    <type name="Baz`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DestroyWorld(U)">
        <size>14</size>
      </method>
    </type>
    <type name="Bling">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-349.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>103</size>
      </method>
      <method name="Int32 f2(IList, IList)">
        <size>2</size>
      </method>
      <method name="Int32 f2(IList, System.Object)">
        <size>2</size>
      </method>
    </type>
    <type name="X+Function`3[T1,T2,R]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="R Invoke(T1, T2)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T1, T2, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="R EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-350.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(T)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-351.cs">
    <type name="TestThing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>36</size>
      </method>
    </type>
    <type name="TestThing">
      <method name="Int32 SetEnum(System.String, System.Enum)">
        <size>2</size>
      </method>
      <method name="Int32 SetEnum(Int32, System.Enum)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-352.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>125</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Void .cctor()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-353.cs">
    <type name="A`3[D1,D2,D3]">
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1[DD2]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-354.cs">
    <type name="M">
      <method name="Void IC.Method(System.Int32[])">
        <size>1</size>
      </method>
      <method name="System.String IA&lt;string&gt;.Method(Int32)">
        <size>6</size>
      </method>
      <method name="Void IB.Method(Int32)">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-355.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String Foo[T](System.String)">
        <size>6</size>
      </method>
      <method name="Boolean Foo(System.String)">
        <size>2</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String Foo[T](System.String)">
        <size>6</size>
      </method>
      <method name="Boolean Goo(System.String)">
        <size>8</size>
      </method>
      <method name="Boolean Foo(System.String)">
        <size>2</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-356.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(B+E)">
        <size>1</size>
      </method>
    </type>
    <type name="B`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-357.cs">
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-358.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Boolean op_Equality(Foo, Foo)">
        <size>6</size>
      </method>
      <method name="Boolean op_Inequality(Foo, Foo)">
        <size>6</size>
      </method>
    </type>
    <type name="S2">
      <method name="Boolean op_Equality(S2, Nullable`1)">
        <size>6</size>
      </method>
      <method name="Boolean op_Inequality(S2, Nullable`1)">
        <size>6</size>
      </method>
    </type>
    <type name="S3">
      <method name="Decimal op_Inequality(S3, System.Object)">
        <size>7</size>
      </method>
      <method name="Decimal op_Equality(S3, System.Object)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>97</size>
      </method>
    </type>
  </test>
  <test name="gtest-359.cs">
    <type name="BaseGeneric`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseGeneric`1+InnerDerived[T]">
      <method name="Void .ctor(T)">
        <size>7</size>
      </method>
    </type>
    <type name="BaseGeneric`1+GenericInnerDerived`1[T,U]">
      <method name="Void .ctor(T, U)">
        <size>7</size>
      </method>
    </type>
    <type name="BaseConcrete">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Concrete_A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Concrete_B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseGeneric_2`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseGeneric_2`2+InnerDerived[T,U]">
      <method name="Void .ctor(T, U)">
        <size>7</size>
      </method>
    </type>
    <type name="BaseGeneric_1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Concrete_2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-360.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo[T](T, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Foo(System.String, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 InvokeMethod(System.String, System.Object[])">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-361.cs">
    <type name="Thing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>164</size>
      </method>
      <method name="Void Method(Thing+Handler, System.String[])">
        <size>1</size>
      </method>
    </type>
    <type name="Thing+Handler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Thing">
      <method name="Void &lt;Main&gt;m__0()">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__1()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-362.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Assert[T](T)">
        <size>1</size>
      </method>
      <method name="Void Assert[T](T, T)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>83</size>
      </method>
    </type>
  </test>
  <test name="gtest-363.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void InsertAt[T](T[], Int32, T[])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>39</size>
      </method>
    </type>
  </test>
  <test name="gtest-364.cs">
    <type name="BugReport.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>349</size>
      </method>
    </type>
    <type name="BugReport.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Nullable`1 get_Counter()">
        <size>7</size>
      </method>
      <method name="Void set_Counter(Nullable`1)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-365.cs">
    <type name="B.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>51</size>
      </method>
    </type>
  </test>
  <test name="gtest-366.cs">
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Assert[T](T, T)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
    <type name="MyType">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 op_Implicit(MyType)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-367.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Repro">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar[TFoo](TFoo)">
        <size>19</size>
      </method>
      <method name="Void Baz[T](T, System.Action`1[T])">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Gazonk(Repro)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-368.cs">
    <type name="C`1[T]">
      <method name="Void .ctor(D)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+D[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-369.cs">
    <type name="Db4objects.Db4o.Internal.ObjectContainerBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IList`1 Query[Extent](IList`1, IList`1)">
        <size>2</size>
      </method>
      <method name="IList Query()">
        <size>2</size>
      </method>
    </type>
    <type name="Db4objects.Db4o.Internal.ExternalObjectContainer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Db4objects.Db4o.Internal.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-370.cs">
    <type name="N2.X`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.X`1+A`1[T,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.X`1+A`1+B`1[T,T,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.X`1+A`1+B`1+C`1[T,T,T,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-371.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>86</size>
      </method>
    </type>
  </test>
  <test name="gtest-372.cs">
    <type name="TestClass`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Check(T, T)">
        <size>15</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestClass2`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Check(T, T)">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="gtest-373.cs">
    <type name="MonoBug.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>29</size>
      </method>
    </type>
    <type name="MonoBug.GenericType`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="T op_Implicit(MonoBug.GenericType`1[T])">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-374.cs">
    <type name="Z">
      <method name="Z IGenericInterface&lt;Z&gt;.Start()">
        <size>2</size>
      </method>
      <method name="Void Stop()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`3[Y,Y2,W]">
      <method name="Void SomeOperation(W)">
        <size>28</size>
      </method>
      <method name="Void SomeOtherOperation(Y)">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Int32 Main()">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-375.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Compute(Int32)">
        <size>2</size>
      </method>
      <method name="Boolean Compute2(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="gtest-376.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="S`1[T]">
      <method name="System.Object Box(Nullable`1)">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="gtest-377.cs">
    <type name="D">
      <method name="Void .cctor()">
        <size>26</size>
      </method>
      <method name="Void Main()">
        <size>91</size>
      </method>
    </type>
  </test>
  <test name="gtest-378.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object FooG[T](Nullable`1)">
        <size>7</size>
      </method>
      <method name="System.Object Foo(Nullable`1)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>58</size>
      </method>
    </type>
  </test>
  <test name="gtest-379.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Print(Nullable`1)">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>15</size>
      </method>
    </type>
    <type name="S">
      <method name="Boolean op_Equality(S, S)">
        <size>2</size>
      </method>
      <method name="Boolean op_Inequality(S, S)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-380.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>175</size>
      </method>
    </type>
    <type name="GTest`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-381.cs">
    <type name="TestGoto">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>69</size>
      </method>
      <method name="IEnumerable`1 setX()">
        <size>16</size>
      </method>
      <method name="IEnumerable`1 test()">
        <size>16</size>
      </method>
    </type>
    <type name="TestGoto+&lt;setX&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>112</size>
      </method>
      <method name="Void Dispose()">
        <size>53</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="TestGoto+&lt;test&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>186</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="TestGoto+&lt;setX&gt;c__Iterator0">
      <method name="Boolean System.Collections.Generic.IEnumerator&lt;bool&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;bool&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="TestGoto+&lt;test&gt;c__Iterator1">
      <method name="Boolean System.Collections.Generic.IEnumerator&lt;bool&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;bool&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="gtest-382.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
  </test>
  <test name="gtest-383.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>257</size>
      </method>
    </type>
    <type name="MyTypeA">
      <method name="Void .ctor(Int16)">
        <size>8</size>
      </method>
      <method name="MyTypeA op_Addition(MyTypeA, MyTypeA)">
        <size>6</size>
      </method>
      <method name="Boolean op_Equality(MyTypeA, MyTypeA)">
        <size>2</size>
      </method>
      <method name="Boolean op_Inequality(MyTypeA, MyTypeA)">
        <size>6</size>
      </method>
      <method name="Boolean op_GreaterThan(MyTypeA, MyTypeA)">
        <size>6</size>
      </method>
      <method name="Boolean op_LessThan(MyTypeA, MyTypeA)">
        <size>6</size>
      </method>
    </type>
    <type name="MyTypeB">
      <method name="Void .ctor(Int16)">
        <size>8</size>
      </method>
      <method name="MyTypeB op_Addition(MyTypeB, MyTypeB)">
        <size>2</size>
      </method>
      <method name="Boolean op_Equality(MyTypeB, MyTypeB)">
        <size>2</size>
      </method>
      <method name="Boolean op_Inequality(MyTypeB, MyTypeB)">
        <size>2</size>
      </method>
      <method name="Boolean op_GreaterThan(MyTypeB, MyTypeB)">
        <size>2</size>
      </method>
      <method name="Boolean op_LessThan(MyTypeB, MyTypeB)">
        <size>2</size>
      </method>
      <method name="MyTypeB op_BitwiseAnd(MyTypeB, MyTypeB)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-384.cs">
    <type name="N.TestG">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
    </type>
    <type name="NonGeneric">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Generic`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="m">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="NonGeneric compiles_fine(NonGeneric, NonGeneric ByRef)">
        <size>13</size>
      </method>
      <method name="Generic`1[System.Int32] does_not_compile(Generic`1[System.Int32], Generic`1[System.Int32] ByRef)">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-385.cs">
    <type name="DocAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(String)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
    <type name="Func`2[TArg,TRet]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-386.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>215</size>
      </method>
    </type>
    <type name="MyType">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="MyType op_UnaryNegation(MyType)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-387.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>168</size>
      </method>
    </type>
  </test>
  <test name="gtest-388.cs">
    <type name="Data">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void f(Data)">
        <size>19</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="gtest-389.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>233</size>
      </method>
    </type>
  </test>
  <test name="gtest-390.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>4</size>
      </method>
    </type>
  </test>
  <test name="gtest-391.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>193</size>
      </method>
      <method name="Boolean Test_1()">
        <size>36</size>
      </method>
      <method name="Void Test(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-392.cs">
    <type name="DieSubrangeType">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
      <method name="Nullable`1 get_UpperBound()">
        <size>7</size>
      </method>
      <method name="Void set_UpperBound(Nullable`1)">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>61</size>
      </method>
    </type>
  </test>
  <test name="gtest-393.cs">
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Type)">
        <size>34</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-394.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void FindMembers(Test+MemberFilter)">
        <size>1</size>
      </method>
      <method name="Void GetMethodGroup(Test+MemberFilter)">
        <size>43</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test+MemberFilter">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Boolean Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Boolean &lt;GetMethodGroup&gt;m__0()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-395.cs">
    <type name="RuleBuilder`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="RubyMethod">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="RuleBuilder`1[T] IDynamicObject.GetRule[T]()">
        <size>6</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-396.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Invoke[A,TR](System.Func`2[A,System.Func`1[TR]], A, TR)">
        <size>1</size>
      </method>
      <method name="System.Func`1[System.Int32] Method(System.String)">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="gtest-397.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo NegateFoo(Foo)">
        <size>12</size>
      </method>
      <method name="Foo NegateFooNullable(Nullable`1)">
        <size>7</size>
      </method>
      <method name="Nullable`1 NegateBarNullable(Nullable`1)">
        <size>7</size>
      </method>
      <method name="Nullable`1 NegateBar(Bar)">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>137</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Foo op_UnaryNegation(Nullable`1)">
        <size>42</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Nullable`1 op_UnaryNegation(Nullable`1)">
        <size>41</size>
      </method>
    </type>
  </test>
  <test name="gtest-398.cs">
    <type name="GenericClass`1[T]">
      <method name="Void .ctor(T)">
        <size>14</size>
      </method>
      <method name="Void Method()">
        <size>42</size>
      </method>
      <method name="Void Test(T)">
        <size>1</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>15</size>
      </method>
    </type>
    <type name="ToStr">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke(System.String, IFormatProvider)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, IFormatProvider, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-399.cs">
    <type name="TestIssue.Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestIssue.Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestIssue.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="gtest-400.cs">
    <type name="Gen`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Foo(T)">
        <size>15</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Foo[T]()">
        <size>17</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
  </test>
  <test name="gtest-401.cs">
    <type name="ParserTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>165</size>
      </method>
    </type>
  </test>
  <test name="gtest-402.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="gtest-403.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="S`1[T]">
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-404.cs">
    <type name="Test.Program">
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test.Class1`1[T1]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_doSomething(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_doSomething(System.EventHandler)">
        <size>47</size>
      </method>
    </type>
    <type name="Test.Class2`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_DoSomething(System.EventHandler)">
        <size>8</size>
      </method>
      <method name="Void remove_DoSomething(System.EventHandler)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-405.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-406.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[TOutput](System.Func`2[T,TOutput])">
        <size>1</size>
      </method>
    </type>
    <type name="C`2[A,B]">
      <method name="Void .ctor(IEnumerable`1)">
        <size>46</size>
      </method>
      <method name="B &lt;C&gt;m__0(B)">
        <size>2</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-407.cs">
    <type name="NullableColorTests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>99</size>
      </method>
    </type>
    <type name="MyColor">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Boolean op_Equality(MyColor, MyColor)">
        <size>17</size>
      </method>
      <method name="Boolean op_Inequality(MyColor, MyColor)">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-408.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>92</size>
      </method>
    </type>
  </test>
  <test name="gtest-409.cs">
    <type name="ConditionalParsing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Nullable`1 Test_3[T](System.Func`3[T,T,T], T)">
        <size>14</size>
      </method>
      <method name="Void Test_1(Boolean)">
        <size>20</size>
      </method>
      <method name="Void Test_2()">
        <size>31</size>
      </method>
      <method name="Void Test_4(Boolean, Boolean)">
        <size>39</size>
      </method>
      <method name="Void Test_5(Boolean, IDisposable)">
        <size>43</size>
      </method>
      <method name="Void Test_6(Boolean)">
        <size>47</size>
      </method>
      <method name="Void Test_7(System.Object)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ConditionalParsing+T">
      <method name="Void .ctor(String, Boolean)">
        <size>28</size>
      </method>
      <method name="Void .ctor(String, Boolean, Int32, Int32, Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="ConditionalParsing+Const">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ConditionalParsing">
      <method name="Void Test_8(DateTime)">
        <size>38</size>
      </method>
      <method name="Void Test_9()">
        <size>43</size>
      </method>
      <method name="Void Test_10()">
        <size>21</size>
      </method>
    </type>
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ConditionalParsing">
      <method name="Void Test_11()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-410.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-411.cs">
    <type name="Maybe">
      <method name="Maybe`1[T] C[T](T)">
        <size>2</size>
      </method>
    </type>
    <type name="Maybe`1[T]">
      <method name="Void .ctor(T)">
        <size>7</size>
      </method>
    </type>
    <type name="Extensions">
      <method name="R Match[T,R](T, System.Func`2[T,Maybe`1[R]][])">
        <size>10</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>131</size>
      </method>
      <method name="Maybe`1[System.String] &lt;Main&gt;m__0(System.String)">
        <size>7</size>
      </method>
      <method name="Maybe`1[System.String] &lt;Main&gt;m__1(System.String)">
        <size>7</size>
      </method>
      <method name="Maybe`1[System.String] &lt;Main&gt;m__2(System.String)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-412.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>218</size>
      </method>
    </type>
  </test>
  <test name="gtest-413.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>95</size>
      </method>
    </type>
    <type name="S">
      <method name="Int64 op_Addition(S, Int64)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-414.cs">
    <type name="MonoTest.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="MonoTest.TestImpl">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MonoTest.ITest.Get[T](System.Object)">
        <size>1</size>
      </method>
      <method name="Void Get[T]()">
        <size>1</size>
      </method>
      <method name="Void Get[T](System.Object)">
        <size>1</size>
      </method>
    </type>
    <type name="MonoTest.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MonoTest.IG&lt;int&gt;.M()">
        <size>1</size>
      </method>
      <method name="Void MonoTest.IG&lt;string&gt;.M()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-415.cs">
    <type name="Foo">
      <method name="Int32 Main()">
        <size>32</size>
      </method>
      <method name="Boolean Bar[T](T)">
        <size>15</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-416.cs">
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`2[X,Y]">
      <method name="X Foo(Y)">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Int32 Main()">
        <size>26</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-417.cs">
    <type name="Indirect">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Base">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestCase">
      <method name="Int32 Main()">
        <size>125</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-418.cs">
    <type name="N.Nested">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.Nested+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 N.Nested.I&lt;int&gt;.get_P()">
        <size>2</size>
      </method>
    </type>
    <type name="N.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>173</size>
      </method>
    </type>
  </test>
  <test name="gtest-419.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
      <method name="System.Object Test(System.String)">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="gtest-420.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(System.Object, System.Object, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test(System.Object, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>43</size>
      </method>
    </type>
  </test>
  <test name="gtest-421.cs">
    <type name="OneOff">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>50</size>
      </method>
      <method name="T[] Clone[T](T[])">
        <size>171</size>
      </method>
    </type>
  </test>
  <test name="gtest-422.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean op_GreaterThan(A, System.Object)">
        <size>2</size>
      </method>
      <method name="Boolean op_LessThan(A, System.Object)">
        <size>2</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
      <method name="Nullable`1 get_Id()">
        <size>7</size>
      </method>
      <method name="Boolean Test()">
        <size>51</size>
      </method>
    </type>
  </test>
  <test name="gtest-423.cs">
    <type name="MonoTest.A`1[TA]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoTest.A`1+B`1[TA,TB]">
      <method name="Void foo()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoTest.A`1+B`1+C[TA,TB]">
      <method name="Void bar()">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoTest.Program">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-424.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Block(A[])">
        <size>6</size>
      </method>
      <method name="Void Block(IEnumerable`1, A[])">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="gtest-425.cs">
    <type name="EventClass`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
    <type name="EventClass`1+HookDelegate[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-426.cs">
    <type name="OverloadTest.MyClass`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Method(MyInterface`1)">
        <size>20</size>
      </method>
      <method name="Boolean Method(System.Action`1[T])">
        <size>2</size>
      </method>
    </type>
    <type name="OverloadTest.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-427.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>19</size>
      </method>
      <method name="Void Attach(EventHandler)">
        <size>2</size>
      </method>
      <method name="Void Attach(EventHandler`1[System.String])">
        <size>1</size>
      </method>
      <method name="Void OnClick(System.String)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
    <type name="EventHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="EventHandler`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-428.cs">
    <type name="CInt">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="CInt op_Implicit(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 op_Implicit(CInt)">
        <size>8</size>
      </method>
    </type>
    <type name="Klass">
      <method name="Void .ctor(Nullable`1)">
        <size>14</size>
      </method>
      <method name="Nullable`1 get_Value()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>174</size>
      </method>
    </type>
  </test>
  <test name="gtest-429.cs">
    <type name="CInt">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="CInt op_Implicit(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 op_Implicit(CInt)">
        <size>8</size>
      </method>
    </type>
    <type name="Klass">
      <method name="Void .ctor(Nullable`1)">
        <size>14</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="gtest-430.cs">
    <type name="Tmp">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Nullable`1 get_Prop()">
        <size>42</size>
      </method>
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="gtest-431.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-432.cs">
    <type name="Test.Bar`2[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DoSomething[V]()">
        <size>1</size>
      </method>
    </type>
    <type name="Test.Baz">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void GetInTroubleHere()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-433.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="gtest-434.cs">
    <type name="testcase.Init">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void testcase.IInitializationExpression.AddRegistry[T](Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="testcase.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>75</size>
      </method>
    </type>
  </test>
  <test name="gtest-435.cs">
    <type name="testcase.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>257</size>
      </method>
    </type>
  </test>
  <test name="gtest-436.cs">
    <type name="SomeClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-438.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="ServiceType GetService[ServiceType](System.Object[])">
        <size>17</size>
      </method>
      <method name="Int32 Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-439.cs">
    <type name="MonoBug.Stuff">
      <method name="MonoBug.GenericStuff`2[T1,T2] CreateThing[T1,T2](T1, T2)">
        <size>8</size>
      </method>
    </type>
    <type name="MonoBug.GenericStuff`2[T1,T2]">
      <method name="Void .ctor(T1, T2)">
        <size>21</size>
      </method>
    </type>
    <type name="MonoBug.Program">
      <method name="Void Main()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="gtest-440.cs">
    <type name="AnyObjectId">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_W1()">
        <size>7</size>
      </method>
      <method name="Void set_W1(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="ObjectId">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-441.cs">
    <type name="Name.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Name.Subclass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Collections.Generic.List`1[System.Int32] get_List()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-442.cs">
    <type name="NonGenericBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>0</size>
      </method>
    </type>
    <type name="GenericBase`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T get_Instance()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>24</size>
      </method>
    </type>
    <type name="EntryPoint">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-443.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M[T]()">
        <size>23</size>
      </method>
      <method name="Int32 Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-444.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>114</size>
      </method>
    </type>
  </test>
  <test name="gtest-445.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Foo[T](T ByRef)">
        <size>1</size>
      </method>
      <method name="Void Foo[T](T[])">
        <size>1</size>
      </method>
      <method name="Void Foo[T](T[,])">
        <size>1</size>
      </method>
      <method name="Void Foo[T](T[,,])">
        <size>1</size>
      </method>
      <method name="Void Bar(Int32 ByRef)">
        <size>1</size>
      </method>
      <method name="Void Bar(System.Int32[])">
        <size>1</size>
      </method>
      <method name="Void Bar(System.Int32[,])">
        <size>1</size>
      </method>
      <method name="Void Bar(System.Int32[,,])">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-446.cs">
    <type name="BugTest.Bug`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void CreateObject(T ByRef)">
        <size>42</size>
      </method>
    </type>
    <type name="BugTest.Program">
      <method name="Int32 Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="gtest-447.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="gtest-448.cs">
    <type name="Impl`1[T]">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void Foo[U](IEnumerable`1)">
        <size>1</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1[K]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
    <type name="Test`1[TT]">
      <method name="Void Foo()">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-449.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
    </type>
  </test>
  <test name="gtest-450.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
    </type>
  </test>
  <test name="gtest-451.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-452.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>51</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Single op_Implicit(S)">
        <size>11</size>
      </method>
      <method name="Nullable`1 op_Implicit(S)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-453.cs">
    <type name="Test.CompilerTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Int32 DoSomething[T](System.String, T, T ByRef)">
        <size>73</size>
      </method>
      <method name="Void ThisDoesNotWork()">
        <size>27</size>
      </method>
      <method name="Void ThisWorksFine()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="gtest-454.cs">
    <type name="TestNS.TestCase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Compare[T](T[], T[])">
        <size>2</size>
      </method>
      <method name="Void DoSomething[T](System.Func`3[T,T,System.Int32])">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-455.cs">
    <type name="ConsoleApplication1.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="ConsoleApplication1.Inner`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Compare(System.Object, T)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-456.cs">
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G`1+S[T]">
      <method name="System.String Test()">
        <size>22</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-457.cs">
    <type name="Program">
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-458.cs">
    <type name="MyList`1[T]">
      <method name="MyList`1+Helper`2[T,U,V] GetHelper[U,V]()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyList`1+Helper`2[T,U,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-459.cs">
    <type name="GenericTest.OuterGeneric`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="GenericTest.OuterGeneric`1+InnerGeneric`1[T,U]">
      <method name="System.String GetTypeNames()">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="GenericTest.Program">
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-460.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1+Bar`1[T,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FooImpl">
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FooImpl+BarImpl">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-461.cs">
    <type name="Test.BaseContext">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.MyDataContext">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Entity`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Person">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.TheBox`1[T]">
      <method name="U GetById[U](Guid)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Program">
      <method name="Void Main()">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-462.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>79</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+Tester`1[T]">
      <method name="T Get(System.Object)">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-463.cs">
    <type name="STuple`1[Ta]">
      <method name="Void .ctor(Ta)">
        <size>8</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-464.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-465.cs">
    <type name="DerivedClass">
      <method name="Void GenericMethod_1[T]()">
        <size>1</size>
      </method>
      <method name="Void GenericMethod_2[T]()">
        <size>1</size>
      </method>
      <method name="Void GenericMethod_3[T]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-466.cs">
    <type name="Program">
      <method name="Boolean Test[T](T)">
        <size>10</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-467.cs">
    <type name="S">
      <method name="Int32 Main()">
        <size>79</size>
      </method>
    </type>
    <type name="A">
      <method name="A op_Implicit(S)">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-468.cs">
    <type name="TS">
      <method name="Nullable`1 get_v()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>43</size>
      </method>
      <method name="Nullable`1 op_Implicit(TS)">
        <size>7</size>
      </method>
      <method name="TS op_Implicit(Nullable`1)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-469.cs">
    <type name="Foo`2[T1,T2]">
      <method name="Void .ctor(T2)">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-470.cs">
    <type name="C">
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-471.cs">
    <type name="Q">
      <method name="Void bar[T](T ByRef)">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-472.cs">
    <type name="C`1[T]">
      <method name="Void CopyUnsafe(T[], System.Int64[])">
        <size>1</size>
      </method>
      <method name="Boolean CopyUnsafe(T[], Int64)">
        <size>2</size>
      </method>
      <method name="Void CopyUnsafe(T[])">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-473.cs">
    <type name="A`1[X]">
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Foo[T]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-474.cs">
    <type name="A`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-475.cs">
    <type name="Value`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
    </type>
    <type name="Test`2[T,U]">
      <method name="Value`1[T] get_Value()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test`2+B[T,U]">
      <method name="Void .ctor(Value`1)">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>16</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-476.cs">
    <type name="Test`1[T]">
      <method name="B First()">
        <size>10</size>
      </method>
      <method name="IFoo Second()">
        <size>15</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-477.cs">
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1+BNested[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AA`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AA`1+ANested[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-478.cs">
    <type name="M">
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Void GenFoo()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-479.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Test[T](I`1)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-480.cs">
    <type name="C">
      <method name="Void Foo()">
        <size>57</size>
      </method>
      <method name="Void Main()">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-481.cs">
    <type name="TestClass`1[T]">
      <method name="Void Add(T[][] ByRef)">
        <size>1</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>18</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-482.cs">
    <type name="TestBug.BugClass`1[T]">
      <method name="Void add_Evt(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void remove_Evt(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void Bug()">
        <size>19</size>
      </method>
      <method name="Void Handler(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestBug.MainClass">
      <method name="Void Main()">
        <size>25</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-483.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>86</size>
      </method>
      <method name="Void ReplaceContentsWith[T](T, T)">
        <size>95</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Int32Collection">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>17</size>
      </method>
      <method name="Int32 get_Count()">
        <size>12</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>13</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>14</size>
      </method>
      <method name="Void Add(Int32)">
        <size>13</size>
      </method>
      <method name="Void Clear()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-484.cs">
    <type name="MainClass">
      <method name="Void Foo(System.Action`1[MainClass][][])">
        <size>1</size>
      </method>
      <method name="System.Action`1[MainClass][] Set(System.Action`1[MainClass][])">
        <size>2</size>
      </method>
      <method name="Void Bar(MainClass)">
        <size>1</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>100</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-485.cs">
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-486.cs">
    <type name="MyCollection`1[T]">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void AddRange(IMyCollection`1)">
        <size>1</size>
      </method>
      <method name="Void AddRange(IEnumerable`1)">
        <size>1</size>
      </method>
      <method name="Int32 get_Count()">
        <size>2</size>
      </method>
      <method name="Boolean get_IsReadOnly()">
        <size>2</size>
      </method>
      <method name="Void Add(T)">
        <size>1</size>
      </method>
      <method name="Void Clear()">
        <size>1</size>
      </method>
      <method name="Boolean Contains(T)">
        <size>2</size>
      </method>
      <method name="Void CopyTo(T[], Int32)">
        <size>1</size>
      </method>
      <method name="Boolean Remove(T)">
        <size>2</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="P">
      <method name="MyCollection`1[System.String] get_IgnoreTokens()">
        <size>36</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-487.cs">
    <type name="Limada.MonoTests.Generics.MultiDictionary`3[K,V,TDictionary]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Limada.MonoTests.Generics.Test">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-488.cs">
    <type name="Ref">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Def">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FooProcessor`1[T]">
      <method name="Void Attach(T, Def)">
        <size>15</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-489.cs">
    <type name="sample">
      <method name="TValue Value[TKey,TValue]()">
        <size>0</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="sample+nested`1[T]">
      <method name="TValue Value[TKey,TValue]()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-490.cs">
    <type name="Foo">
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Foo&gt;.GetEnumerator()">
        <size>17</size>
      </method>
      <method name="IEnumerator GetEnumerator()">
        <size>17</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-491.cs">
    <type name="ArrayEqualityComparer`1[T]">
      <method name="Boolean Equals(T[], T[])">
        <size>2</size>
      </method>
      <method name="Int32 GetHashCode(T[])">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-492.cs">
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+C[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-493.cs">
    <type name="MonoGenericIteratorTest.MyType">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoGenericIteratorTest.MyCollectionBase`1[T]">
      <method name="IEnumerator GetEnumerator()">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoGenericIteratorTest.MyCollection">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoGenericIteratorTest.MainClass">
      <method name="Void Main(System.String[])">
        <size>77</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-494.cs">
    <type name="Grid`1[CT]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Grid`1+GPD[CT]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
    <type name="Grid`1+GPD+GC[CT]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="H">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="H+MyCT">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TheTest">
      <method name="Void Main(System.String[])">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-495.cs">
    <type name="Repro">
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Repro+Outer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Repro+Outer+Inner`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-496.cs">
    <type name="Base">
      <method name="T EndExecute[T](System.Object, System.String)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Derived EndExecute[TElement](System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="a">
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-497.cs">
    <type name="Item">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ItemCollection`1[T]">
      <method name="Void Bind[U](ItemCollection`1[U])">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="a">
      <method name="Void Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-498.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-499.cs">
    <type name="C">
      <method name="Int32 Test[T](T[])">
        <size>21</size>
      </method>
      <method name="Int32 TestExtra[T](T[,])">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>118</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-500.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>85</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-501.cs">
    <type name="UndoableDictionary`2[TKey,TValue]">
      <method name="Void TestFunc()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="UpdateableCollection`1[T]">
      <method name="Void AddReferences()">
        <size>1</size>
      </method>
      <method name="Void TestFunc()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="UpdateableCollection`1+X[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-502.cs">
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>31</size>
      </method>
    </type>
    <type name="C`1+Foo`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+Simple[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+N`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-503.cs">
    <type name="TestAttribute">
      <method name="Void .ctor(Type)">
        <size>7</size>
      </method>
    </type>
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+N`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Int32 Main()">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-504.cs">
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-505.cs">
    <type name="C">
      <method name="Int32 Test(System.Collections.Generic.List`1[System.Int32])">
        <size>3</size>
      </method>
      <method name="Int32 Test(System.String)">
        <size>3</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>2</size>
      </method>
      <method name="R Method[T,R](IEnumerable`1, System.Func`2[T,R])">
        <size>16</size>
      </method>
      <method name="R Method2[T,R](IEnumerable`1, System.Func`2[System.Collections.Generic.List`1[T],R])">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>73</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-506.cs">
    <type name="C">
      <method name="Void Main()">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-507.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>26</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1[T]">
      <method name="Int32 get_Item(T)">
        <size>2</size>
      </method>
      <method name="Int32 get_Item(System.Object)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-508.cs">
    <type name="B">
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="A`1[T]">
      <method name="Void .ctor(T)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-509.cs">
    <type name="Test.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.TestClass">
      <method name="T Test.IBase.Get[T](System.Object)">
        <size>10</size>
      </method>
      <method name="T Get[T](System.Object)">
        <size>10</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-510.cs">
    <type name="CA`2[U,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Map`2[K,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-511.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Foo[T](A`1[T])">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void Foo[T](A`1[T])">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>81</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-512.cs">
    <type name="C">
      <method name="Void Main()">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-513.cs">
    <type name="S">
      <method name="Void System.IDisposable.Dispose()">
        <size>13</size>
      </method>
      <method name="Void Dispose()">
        <size>6</size>
      </method>
    </type>
    <type name="C">
      <method name="Void System.IDisposable.Dispose()">
        <size>1</size>
      </method>
      <method name="Void Dispose()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>154</size>
      </method>
      <method name="Void GenMethod[T](T)">
        <size>33</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-514.cs">
    <type name="test2.Test`3[T,U,V]">
      <method name="Void Method()">
        <size>127</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="test2.MainClass">
      <method name="Void Dispose()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-515.cs">
    <type name="A">
      <method name="I`1 Foo[T]()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AA">
      <method name="I`1 Foo[V]()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Dispose()">
        <size>1</size>
      </method>
      <method name="I`1 Foo[R]()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-516.cs">
    <type name="B">
      <method name="Void Foo()">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-517.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-518.cs">
    <type name="Top`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top`1+C[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-519.cs">
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void Foo[U]()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-520.cs">
    <type name="A">
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>6</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;A&gt;.GetEnumerator()">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+GetEnumerator">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>118</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-521.cs">
    <type name="D">
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="E`1[T]">
      <method name="Void Test()">
        <size>25</size>
      </method>
      <method name="Void EH(System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="E`1+I[T]">
      <method name="Void add_E(D)">
        <size>47</size>
      </method>
      <method name="Void remove_E(D)">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-522.cs">
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Test[T](T)">
        <size>12</size>
      </method>
      <method name="Void A[U]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-523.cs">
    <type name="Test.TestClass4`1[T]">
      <method name="Boolean Equals(T)">
        <size>2</size>
      </method>
      <method name="Boolean Equals(TestClass4`1)">
        <size>2</size>
      </method>
      <method name="Boolean Equals(TestClass4`1, TestClass4`1)">
        <size>9</size>
      </method>
      <method name="Int32 GetHashCode(TestClass4`1)">
        <size>14</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>2</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>2</size>
      </method>
      <method name="Boolean op_Equality(TestClass4`1, TestClass4`1)">
        <size>9</size>
      </method>
      <method name="Boolean op_Equality(T, TestClass4`1)">
        <size>9</size>
      </method>
      <method name="Boolean op_Equality(TestClass4`1, T)">
        <size>9</size>
      </method>
      <method name="Boolean op_Equality(System.Object, TestClass4`1)">
        <size>15</size>
      </method>
      <method name="Boolean op_Equality(TestClass4`1, System.Object)">
        <size>15</size>
      </method>
      <method name="Boolean op_Inequality(TestClass4`1, TestClass4`1)">
        <size>11</size>
      </method>
      <method name="Boolean op_Inequality(T, TestClass4`1)">
        <size>11</size>
      </method>
      <method name="Boolean op_Inequality(TestClass4`1, T)">
        <size>11</size>
      </method>
      <method name="Boolean op_Inequality(System.Object, TestClass4`1)">
        <size>11</size>
      </method>
      <method name="Boolean op_Inequality(TestClass4`1, System.Object)">
        <size>11</size>
      </method>
    </type>
    <type name="Test.C">
      <method name="Void Main()">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-524.cs">
    <type name="C">
      <method name="T M[T]()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-525.cs">
    <type name="A">
      <method name="Void MA[T](System.String)">
        <size>1</size>
      </method>
      <method name="Void F()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+C">
      <method name="Void Foo()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-526.cs">
    <type name="A`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B`1+N[T]">
      <method name="Void Test(C)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-527.cs">
    <type name="CoalescingWithGenericsBug">
      <method name="T Provide[T]()">
        <size>23</size>
      </method>
      <method name="T FindExisting[T]()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
    <type name="CoalescingWithGenericsBug+Service">
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-528.cs">
    <type name="GenericType`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Base">
      <method name="T Test[T](GenericType`1[T])">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Override">
      <method name="T Test[T](GenericType`1[T])">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-529.cs">
    <type name="GenericType`2[U,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Base`1[V]">
      <method name="T Test[T](GenericType`2[T,V])">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Override`1[W]">
      <method name="T Test[T](GenericType`2[T,W])">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Int32 Main()">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-530.cs">
    <type name="B">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-531.cs">
    <type name="ATop`1[T]">
      <method name="T[] IB&lt;T&gt;.ToArray(T[])">
        <size>2</size>
      </method>
      <method name="Void IC.ToArray()">
        <size>1</size>
      </method>
      <method name="Void Test()">
        <size>37</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-532.cs">
    <type name="DictionaryServicesContainer">
      <method name="Void Register[I,T]()">
        <size>6</size>
      </method>
      <method name="Void Register[I](System.Object)">
        <size>6</size>
      </method>
      <method name="I Resolve[I]()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-533.cs">
    <type name="List`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="List`1+Comp`1[X,Y]">
      <method name="List`1+Comp`1[Y,X] flip(Y, X)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="List`1+Flip`1[X,Z]">
      <method name="Void .ctor(Comp`1)">
        <size>14</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>15</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-534.cs">
    <type name="A">
      <method name="Void Method(IG`1)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-535.cs">
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Int32 Foo[T](T, G`1[T])">
        <size>2</size>
      </method>
      <method name="Int32 Foo[T](T, System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>34</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-536.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+Expression`1[TDelegate]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+Expression">
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-537.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>86</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="System.String op_BitwiseOr(S, Nullable`1)">
        <size>6</size>
      </method>
      <method name="Nullable`1 op_Addition(S, Nullable`1)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-538.cs">
    <type name="S">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>6</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="S2">
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="Enumerator`1[T]">
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>6</size>
      </method>
      <method name="T get_Current()">
        <size>6</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>2</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void Dispose()">
        <size>13</size>
      </method>
    </type>
    <type name="MySystem">
      <method name="Int32 Main()">
        <size>182</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-539.cs">
    <type name="S">
      <method name="Int32 get_ID()">
        <size>7</size>
      </method>
      <method name="Void set_ID(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="C">
      <method name="C op_Explicit(S)">
        <size>11</size>
      </method>
      <method name="C op_Explicit(Nullable`1)">
        <size>39</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>79</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-540.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>844</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-541.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top`1[S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top`1+Base`1[S,T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top`1+Base`1+Derived`1[S,T,U]">
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-542.cs">
    <type name="A`1[T]">
      <method name="T getT()">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B[T]">
      <method name="A`1+B[T] getT()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-543.cs">
    <type name="Blah`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Blah`1+WrapperWrapper`1[T,N]">
      <method name="Blah`1+WrapperWrapper`1[T,N] NewWrapperWrapper(Wrapper`1[N])">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>12</size>
      </method>
      <method name="Void .ctor(Wrapper`1)">
        <size>14</size>
      </method>
    </type>
    <type name="Wrapper`1[U]">
      <method name="Void .ctor(U)">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>20</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>26</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-544.cs">
    <type name="A`1[T]">
      <method name="G Foo[G]()">
        <size>0</size>
      </method>
      <method name="G Foo2[G]()">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="G Foo[G]()">
        <size>10</size>
      </method>
      <method name="G Foo2[G]()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A2`1[T]">
      <method name="Void Foo[U]()">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B2">
      <method name="Void Foo[Y]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>51</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-545.cs">
    <type name="ApplicationContext">
      <method name="Boolean Foo()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>110</size>
      </method>
    </type>
  </test>
  <test name="gtest-546.cs">
    <type name="Factory">
      <method name="Factory+S`2[F1,F2] Create[F1,F2](F1, F2)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Factory+S`2[G1,G2]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="TR Test[T1,T2,TR](T1, T2, System.Func`3[T1,T2,TR])">
        <size>9</size>
      </method>
      <method name="Void Main()">
        <size>29</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-547.cs">
    <type name="Foo">
      <method name="Void GenericLock[T](T)">
        <size>33</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-548.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-549.cs">
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D+Impl">
      <method name="Void MA(Int32)">
        <size>1</size>
      </method>
      <method name="Void MB(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>21</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-550.cs">
    <type name="Foo.Magic">
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
    <type name="Foo.Magic`1[T]">
      <method name="Void Upsample(IUpDown)">
        <size>8</size>
      </method>
    </type>
    <type name="Foo.Instance">
      <method name="Int32 get_DestinationDimension()">
        <size>2</size>
      </method>
      <method name="Decimal get_Item(Int32)">
        <size>6</size>
      </method>
      <method name="Void set_Item(Int32, Decimal)">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-551.cs">
    <type name="Base`1[T]">
      <method name="Void .ctor()">
        <size>48</size>
      </method>
    </type>
    <type name="Derived`1[T]">
      <method name="Void .ctor()">
        <size>28</size>
      </method>
    </type>
    <type name="C">
      <method name="System.Object Clone()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-552.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+MM">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-553.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-554.cs">
    <type name="Mono.Test.Program">
      <method name="Int32 Main()">
        <size>125</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Mono.Test.A">
      <method name="Boolean get_Success()">
        <size>2</size>
      </method>
      <method name="Void Run()">
        <size>1</size>
      </method>
      <method name="Void Gen[U]()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Mono.Test.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-555.cs">
    <type name="Program">
      <method name="Int32 Test[T](T)">
        <size>24</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
    </type>
  </test>
  <test name="gtest-556.cs">
    <type name="A2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A2+N`1[T]">
      <method name="A2+N`1[T] Method()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-557.cs">
    <type name="Test">
      <method name="U[] Foo[T,U](T[])">
        <size>2</size>
      </method>
      <method name="Void TestByRef[T]()">
        <size>21</size>
      </method>
      <method name="Void PassByRef[T](T ByRef)">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>51</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-558.cs">
    <type name="A`1[T]">
      <method name="Void Foo[U](U)">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Foo[U](U)">
        <size>15</size>
      </method>
      <method name="Void Next[UU](UU)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-1.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U](U)">
        <size>1</size>
      </method>
      <method name="Void Test[T](T)">
        <size>64</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-10.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Test[T](T, T)">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>97</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>124</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-11.cs">
    <type name="Test`1[R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void World[S,T](S, T)">
        <size>1</size>
      </method>
      <method name="Void Hello[U,V](U, V)">
        <size>47</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test`1+&lt;Hello&gt;c__AnonStorey0`2[R,U,V]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-12.cs">
    <type name="World`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U](U)">
        <size>1</size>
      </method>
      <method name="Void Test(T)">
        <size>46</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="World`1+&lt;Test&gt;c__AnonStorey0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-13.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="X+ModuleBinder`1[TDelegate] CreateMethodUnscoped[TDelegate]()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="X+ModuleBinder`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="T Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="T EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="TDelegate &lt;CreateMethodUnscoped`1&gt;m__0[TDelegate](System.Object)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-14.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void SomeMethod(System.Converter`2[System.Int32,System.Int32])">
        <size>1</size>
      </method>
      <method name="Void SomeCaller()">
        <size>36</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Int32 &lt;SomeCaller&gt;m__0(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-15.cs">
    <type name="Test`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[S](T, S)">
        <size>42</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
    <type name="Foo`1[V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(V)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(V, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Bar`1[W]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(W)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(W, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test`1+&lt;Hello&gt;c__AnonStorey1`1[T,S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(Int64)">
        <size>57</size>
      </method>
    </type>
    <type name="Test`1+&lt;Hello&gt;c__AnonStorey1`1+&lt;Hello&gt;c__AnonStorey0`1[T,S]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1(T)">
        <size>65</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-16.cs">
    <type name="A">
      <method name="Void .ctor(TestFunc`1)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>47</size>
      </method>
      <method name="Void Func[T](TestFunc`1[T])">
        <size>1</size>
      </method>
    </type>
    <type name="TestFunc`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void &lt;a&gt;m__0(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-17.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test[T,U](C+Func`1[T], U)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>75</size>
      </method>
    </type>
    <type name="C+Func`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="T Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="T EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-18.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="TR Test[TR,TA](C+Func`2[TR,TA])">
        <size>10</size>
      </method>
      <method name="TR Test[TR,TA,TB](C+Func`2[TR,TA], C+Func`2[TR,TB])">
        <size>10</size>
      </method>
      <method name="Void Test2[T]()">
        <size>19</size>
      </method>
      <method name="Void Main()">
        <size>100</size>
      </method>
    </type>
    <type name="C+Func`2[TR,TA]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="TR Invoke(TA)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TA, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TR EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>16</size>
      </method>
      <method name="System.String &lt;Main&gt;m__2(Int32)">
        <size>6</size>
      </method>
      <method name="System.String &lt;Main&gt;m__3(Int32)">
        <size>6</size>
      </method>
      <method name="T &lt;Test2`1&gt;m__0[T](T)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-19.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void TestNaturalSort()">
        <size>31</size>
      </method>
      <method name="Void Main()">
        <size>6</size>
      </method>
    </type>
    <type name="Test+&lt;TestNaturalSort&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String &lt;&gt;m__1(System.Text.RegularExpressions.Match)">
        <size>113</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 &lt;TestNaturalSort&gt;m__0(System.String, System.String)">
        <size>106</size>
      </method>
    </type>
    <type name="Test+&lt;TestNaturalSort&gt;c__AnonStorey0">
      <method name="System.String &lt;&gt;m__2(System.Text.RegularExpressions.Match)">
        <size>113</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-2.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U](U)">
        <size>1</size>
      </method>
      <method name="Void Test[T](T)">
        <size>71</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>55</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`1+&lt;Test&gt;c__AnonStorey1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-20.cs">
    <type name="C`1[T]">
      <method name="Void Foo[U](U)">
        <size>20</size>
      </method>
      <method name="Void Run()">
        <size>1</size>
      </method>
      <method name="Void &lt;Foo`1&gt;m__0[U]()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-21.cs">
    <type name="BaseObject">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Collections.Generic.List`1[T] Query[T](Nullable`1 ByRef)">
        <size>53</size>
      </method>
      <method name="T MakeSomething[T]()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>10</size>
      </method>
      <method name="Void Closure(EmptyDelegate)">
        <size>1</size>
      </method>
    </type>
    <type name="EmptyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="BaseObject+&lt;Query&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-22.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(D1)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(D2)">
        <size>2</size>
      </method>
      <method name="Int32 FooE(System.Linq.Expressions.Expression`1[D1])">
        <size>2</size>
      </method>
      <method name="Int32 FooE(System.Linq.Expressions.Expression`1[D2])">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>82</size>
      </method>
    </type>
    <type name="D1">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="D2">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int64 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int64 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 &lt;Main&gt;m__0()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-23.cs">
    <type name="MemberAccessData">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_MyTypeProperty(Nullable`1)">
        <size>8</size>
      </method>
      <method name="Nullable`1 get_MyTypeProperty()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(C+D)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>246</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>38</size>
      </method>
    </type>
    <type name="C">
      <method name="Void &lt;Main&gt;m__3()">
        <size>16</size>
      </method>
      <method name="Void &lt;Main&gt;m__4()">
        <size>16</size>
      </method>
      <method name="Void &lt;Main&gt;m__5()">
        <size>61</size>
      </method>
    </type>
    <type name="B">
      <method name="Void BaseM()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void InstanceTests()">
        <size>18</size>
      </method>
      <method name="Void &lt;InstanceTests&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void &lt;Main&gt;m__6()">
        <size>53</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__2()">
        <size>32</size>
      </method>
    </type>
    <type name="C">
      <method name="Void &lt;BaseM&gt;__BaseCallProxy0()">
        <size>7</size>
      </method>
      <method name="Void Test(System.Action`1[E])">
        <size>8</size>
      </method>
      <method name="Void &lt;Main&gt;m__7(E)">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-24.cs">
    <type name="Disposable`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Dispose()">
        <size>1</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Func`1[T[]] For[T](System.Collections.Generic.List`1[T])">
        <size>38</size>
      </method>
      <method name="System.Func`1[T] Throw[T](T)">
        <size>26</size>
      </method>
      <method name="System.Func`1[T] Do[T](T)">
        <size>26</size>
      </method>
      <method name="System.Func`1[T] Lock[T](T)">
        <size>26</size>
      </method>
      <method name="System.Func`1[T] Catch[T](T)">
        <size>26</size>
      </method>
      <method name="System.Func`1[T] Finally[T](T)">
        <size>26</size>
      </method>
      <method name="System.Func`1[T] Using[T](T)">
        <size>52</size>
      </method>
      <method name="System.Func`1[T] Switch[T](T)">
        <size>38</size>
      </method>
      <method name="System.Func`1[System.Collections.Generic.List`1[T]] ForForeach[T](T[])">
        <size>26</size>
      </method>
      <method name="Int32 Main()">
        <size>576</size>
      </method>
    </type>
    <type name="Test+&lt;For&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T[] &lt;&gt;m__0()">
        <size>56</size>
      </method>
    </type>
    <type name="Test+&lt;Throw&gt;c__AnonStorey1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T &lt;&gt;m__1()">
        <size>23</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void ArrayMutate[T](T[])">
        <size>27</size>
      </method>
      <method name="System.Func`1[T[][]] ArrayMultiMutate[T](T[][])">
        <size>26</size>
      </method>
      <method name="System.Func`1[System.Type] TypeOf[T](T)">
        <size>38</size>
      </method>
    </type>
    <type name="Test+&lt;TypeOf&gt;c__AnonStorey2`1[T]">
      <method name="System.Type &lt;&gt;m__2()">
        <size>56</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Do&gt;c__AnonStorey3`1[T]">
      <method name="T &lt;&gt;m__3()">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Lock&gt;c__AnonStorey4`1[T]">
      <method name="T &lt;&gt;m__4()">
        <size>67</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Catch&gt;c__AnonStorey5`1[T]">
      <method name="T &lt;&gt;m__5()">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Finally&gt;c__AnonStorey6`1[T]">
      <method name="T &lt;&gt;m__6()">
        <size>50</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Using&gt;c__AnonStorey7`1[T]">
      <method name="T &lt;&gt;m__7()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Switch&gt;c__AnonStorey8`1[T]">
      <method name="T &lt;&gt;m__8()">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;ForForeach&gt;c__AnonStorey9`1[T]">
      <method name="System.Collections.Generic.List`1[T] &lt;&gt;m__9()">
        <size>56</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;ArrayMutate&gt;c__AnonStoreyA`1[T]">
      <method name="Void &lt;&gt;m__A(Int32)">
        <size>36</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;ArrayMultiMutate&gt;c__AnonStoreyB`1[T]">
      <method name="T[][] &lt;&gt;m__B()">
        <size>48</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CA`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="System.Func`1[T[]] NestedTypeMutate[T]()">
        <size>34</size>
      </method>
      <method name="System.Func`1[System.Int32] ArrayMultiMutate[T](T[,])">
        <size>26</size>
      </method>
    </type>
    <type name="Test+&lt;ArrayMultiMutate&gt;c__AnonStoreyC`1[T]">
      <method name="Int32 &lt;&gt;m__C()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;NestedTypeMutate&gt;c__AnonStoreyD`1[T]">
      <method name="T[] &lt;&gt;m__D()">
        <size>37</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-25.cs">
    <type name="HS`1[T]">
      <method name="Void .ctor(IEqualityComparer`1)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](IEqualityComparer`1)">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
    <type name="Test+&lt;Foo&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="HS`1[T] &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-26.cs">
    <type name="MonoBugs.BrokenGenericCast">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Converter`2[TSource,TDest] GetUpcaster[TSource,TDest]()">
        <size>13</size>
      </method>
      <method name="System.Converter`2[TSource,TDest] GetDowncaster[TSource,TDest]()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="TDest &lt;GetUpcaster`2&gt;m__0[TSource,TDest](TSource)">
        <size>12</size>
      </method>
      <method name="TDest &lt;GetDowncaster`2&gt;m__1[TSource,TDest](TSource)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-27.cs">
    <type name="BaseDataObjectFactory">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T GetBusinessQueryObjectFromReader[T]()">
        <size>8</size>
      </method>
      <method name="T[] GetQueryObjects[T](System.String)">
        <size>0</size>
      </method>
    </type>
    <type name="BusinessQueryObject">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MySqlDataObjectFactory">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T[] GetQueryObjects[T](System.String)">
        <size>63</size>
      </method>
      <method name="Void ExecuteReader(Int32, MySqlDataObjectFactory+PerformActionWithReader)">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="MySqlDataObjectFactory+PerformActionWithReader">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="MySqlDataObjectFactory+&lt;GetQueryObjects&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-28.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T]()">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T]()">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="B+Del">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Void &lt;Foo`1&gt;m__0[T]()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-29.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean TryAction[T](Test+Creator`1[T], T ByRef)">
        <size>17</size>
      </method>
      <method name="Boolean Func1[T](IList`1, Boolean, T ByRef)">
        <size>32</size>
      </method>
      <method name="T Item[T](IList`1)">
        <size>7</size>
      </method>
      <method name="T GetSingleItem[T](IList`1)">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="Test+Creator`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="T Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="T EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Func1&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-3.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U](U)">
        <size>1</size>
      </method>
      <method name="Void Test[T](T)">
        <size>28</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Foo`1[S]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(S)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(S, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;Test`1&gt;m__0[T](T)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-30.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U](U)">
        <size>1</size>
      </method>
      <method name="Void Test[T](T)">
        <size>46</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>55</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`1+&lt;Test&gt;c__AnonStorey1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-31.cs">
    <type name="A">
      <method name="Void Fail[X]()">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A+&lt;Fail&gt;c__AnonStorey0`1[X]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(System.Object, System.EventArgs)">
        <size>36</size>
      </method>
      <method name="Void &lt;&gt;m__1(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-32.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](IList`1)">
        <size>31</size>
      </method>
      <method name="Void Assert(System.Action`1[System.Int32])">
        <size>9</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Foo&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(Int32)">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-33.cs">
    <type name="IEnumerableRocks">
      <method name="System.String Implode[TSource,TResult](IEnumerable`1, System.String, System.Func`2[TSource,TResult])">
        <size>33</size>
      </method>
      <method name="System.String Implode[TSource](IEnumerable`1, System.String, System.Action`2[System.Text.StringBuilder,TSource])">
        <size>125</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>67</size>
      </method>
      <method name="System.String &lt;Main&gt;m__1(System.String)">
        <size>17</size>
      </method>
    </type>
    <type name="IEnumerableRocks+&lt;Implode&gt;c__AnonStorey0`2[TSource,TResult]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(System.Text.StringBuilder, TSource)">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-34.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 get_Answer()">
        <size>7</size>
      </method>
      <method name="Void set_Answer(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>82</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-35.cs">
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Func`1[T] XX()">
        <size>32</size>
      </method>
      <method name="T &lt;XX&gt;m__0()">
        <size>10</size>
      </method>
    </type>
    <type name="C2`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Func`1[C`1[T]] XX()">
        <size>32</size>
      </method>
      <method name="C`1[T] &lt;XX&gt;m__1()">
        <size>2</size>
      </method>
    </type>
    <type name="N1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Func`1[T] XX[T]()">
        <size>15</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>98</size>
      </method>
    </type>
    <type name="N1">
      <method name="T &lt;XX`1&gt;m__2[T]()">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-36.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_handler(Handler`1[T])">
        <size>47</size>
      </method>
      <method name="Void remove_handler(Handler`1[T])">
        <size>47</size>
      </method>
      <method name="Void add_Handler(Handler`1[T])">
        <size>48</size>
      </method>
      <method name="Void remove_Handler(Handler`1[T])">
        <size>8</size>
      </method>
      <method name="Void &lt;add_Handler&gt;m__0(System.Object)">
        <size>18</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>15</size>
      </method>
    </type>
    <type name="Handler`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-37.cs">
    <type name="Wrap`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Run[T](Wrap`1[T])">
        <size>56</size>
      </method>
      <method name="Int32 Main()">
        <size>16</size>
      </method>
    </type>
    <type name="Test+&lt;Run&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-38.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean ContainsAll[U](IEnumerable`1)">
        <size>40</size>
      </method>
      <method name="Boolean Contains(T)">
        <size>2</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
    <type name="Foo`1+&lt;ContainsAll&gt;c__AnonStorey0`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__0()">
        <size>201</size>
      </method>
    </type>
    <type name="Foo`1+&lt;ContainsAll&gt;c__AnonStorey0`1+&lt;ContainsAll&gt;c__AnonStorey1`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-39.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test_1[T](T)">
        <size>33</size>
      </method>
      <method name="Void Test_2[T](Nullable`1)">
        <size>33</size>
      </method>
      <method name="Void Main()">
        <size>39</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Test_1&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>24</size>
      </method>
    </type>
    <type name="Test+&lt;Test_2&gt;c__AnonStorey1`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>85</size>
      </method>
    </type>
    <type name="Test">
      <method name="T Test_3[T](System.Object)">
        <size>51</size>
      </method>
    </type>
    <type name="Test+&lt;Test_3&gt;c__AnonStorey2`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__2()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-4.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>59</size>
      </method>
      <method name="Int32 GetItem()">
        <size>50</size>
      </method>
      <method name="IEnumerable`1 GetItems()">
        <size>16</size>
      </method>
    </type>
    <type name="Test+&lt;GetItems&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>75</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-40.cs">
    <type name="RunTests">
      <method name="Int32 Main()">
        <size>7</size>
      </method>
    </type>
    <type name="Test1.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test1[R](R, Int32)">
        <size>150</size>
      </method>
      <method name="Void Run()">
        <size>13</size>
      </method>
    </type>
    <type name="Test1.Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test1.X+&lt;Test1&gt;c__AnonStorey1`1[R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>71</size>
      </method>
    </type>
    <type name="Test1.X+&lt;Test1&gt;c__AnonStorey0`1[R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test1.X+&lt;Test1&gt;c__AnonStorey2`1[R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-41.cs">
    <type name="C">
      <method name="Decimal Average[TSource](IEnumerable`1, System.Func`2[TSource,System.Decimal])">
        <size>37</size>
      </method>
      <method name="TResult Average[TElement,TAggregate,TResult](IEnumerable`1, System.Func`3[TAggregate,TElement,TAggregate], System.Func`3[TAggregate,TElement,TResult])">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Decimal &lt;Average`1&gt;m__0[TSource](Decimal, Decimal)">
        <size>8</size>
      </method>
      <method name="Decimal &lt;Average`1&gt;m__1[TSource](Decimal, Decimal)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-42.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test_3[T]()">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void &lt;Test_3`1&gt;m__0[T]()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-43.cs">
    <type name="TestC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Func`1[System.Type] Test[T]()">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>76</size>
      </method>
      <method name="System.Type &lt;Test`1&gt;m__0[T]()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-44.cs">
    <type name="UiaAtkBridgeTest.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Invoke(System.EventHandler)">
        <size>1</size>
      </method>
    </type>
    <type name="UiaAtkBridgeTest.GailTester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ThisCausesACrash[I]()">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void &lt;ThisCausesACrash`1&gt;m__0[I](System.Object, System.EventArgs)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-45.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AnyMethod[T]()">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
    <type name="C+&lt;AnyMethod&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1(System.String)">
        <size>14</size>
      </method>
    </type>
    <type name="C">
      <method name="Void &lt;AnyMethod`1&gt;m__0[T]()">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-46.cs">
    <type name="TheClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](T, System.Func`2[T,T])">
        <size>41</size>
      </method>
      <method name="Void Main()">
        <size>8</size>
      </method>
    </type>
    <type name="TheClass+&lt;Foo&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Func`1[T] &lt;&gt;m__0()">
        <size>31</size>
      </method>
      <method name="T &lt;&gt;m__1()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-47.cs">
    <type name="C">
      <method name="System.Func`2[T1,System.Func`2[T2,System.Action`1[T3]]] Curry[T1,T2,T3](System.Action`3[T1,T2,T3])">
        <size>26</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>59</size>
      </method>
      <method name="Void &lt;Main&gt;m__3(Int32, Int32, Int32)">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Curry&gt;c__AnonStorey0`3[T1,T2,T3]">
      <method name="System.Func`2[T2,System.Action`1[T3]] &lt;&gt;m__0(T1)">
        <size>33</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Curry&gt;c__AnonStorey0`3+&lt;Curry&gt;c__AnonStorey1`3[T1,T2,T3]">
      <method name="System.Action`1[T3] &lt;&gt;m__1(T2)">
        <size>45</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Curry&gt;c__AnonStorey0`3+&lt;Curry&gt;c__AnonStorey1`3+&lt;Curry&gt;c__AnonStorey2`3[T1,T2,T3]">
      <method name="Void &lt;&gt;m__2(T3)">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-48.cs">
    <type name="GeneratorEnumerable`1[T]">
      <method name="Void .ctor(Func`1)">
        <size>7</size>
      </method>
    </type>
    <type name="GeneratorExpression">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="GeneratorInvoker">
      <method name="Void .ctor(GeneratorExpression)">
        <size>7</size>
      </method>
      <method name="Void Invoke[T](T ByRef)">
        <size>1</size>
      </method>
    </type>
    <type name="Interpreter">
      <method name="System.Object InterpretGenerator[T](GeneratorExpression)">
        <size>31</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
    <type name="Func`1[TResult]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="TResult Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TResult EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="GeneratorNext`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(T ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Interpreter+&lt;InterpretGenerator&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="GeneratorNext`1[T] &lt;&gt;m__0()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-49.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void DetermineLinkedCells()">
        <size>74</size>
      </method>
    </type>
    <type name="Test+&lt;DetermineLinkedCells&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;DetermineLinkedCells&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__1(System.Object)">
        <size>13</size>
      </method>
      <method name="Boolean &lt;&gt;m__0(System.Object)">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-5.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>80</size>
      </method>
    </type>
    <type name="Hello">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo+&lt;Test&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>112</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="IEnumerable`1 Test(Foo)">
        <size>42</size>
      </method>
      <method name="Void Hello(Int32)">
        <size>19</size>
      </method>
      <method name="System.String ToString()">
        <size>22</size>
      </method>
    </type>
    <type name="Foo+&lt;Test&gt;c__Iterator0">
      <method name="Foo System.Collections.Generic.IEnumerator&lt;Foo&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Foo&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-50.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
    <type name="SomeGenericClass`1[SomeType]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Invoke(SomeGenericClass`1+SomeHandlerType[SomeType])">
        <size>7</size>
      </method>
      <method name="Void FailsToCompile()">
        <size>19</size>
      </method>
    </type>
    <type name="SomeGenericClass`1+SomeHandlerType[SomeType]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="SomeGenericClass`1+&lt;FailsToCompile&gt;c__AnonStorey0[SomeType]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="SomeGenericClass`1[SomeType]">
      <method name="Void &lt;FailsToCompile&gt;m__0()">
        <size>44</size>
      </method>
    </type>
    <type name="SomeGenericClass`1+&lt;FailsToCompile&gt;c__AnonStorey0[SomeType]">
      <method name="Void &lt;&gt;m__1()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-51.cs">
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void P(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Void Repro()">
        <size>100</size>
      </method>
    </type>
    <type name="Bla">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Driver+&lt;Repro&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-52.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B[T]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Void W[R](System.String, System.Func`2[T,R])">
        <size>39</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A`1+B+&lt;W&gt;c__AnonStorey0`1[T,R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(T[])">
        <size>55</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-53.cs">
    <type name="TestComp.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>1</size>
      </method>
    </type>
    <type name="TestComp.Program+MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MyTemplate(TestComp.Program+MyClass+MyDelegate)">
        <size>1</size>
      </method>
      <method name="Void UseATemplate()">
        <size>36</size>
      </method>
      <method name="Void &lt;UseATemplate&gt;m__0(System.Collections.Generic.List`1[System.Int32] ByRef)">
        <size>16</size>
      </method>
    </type>
    <type name="TestComp.Program+MyClass+MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Collections.Generic.List`1[System.Int32] ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Collections.Generic.List`1[System.Int32] ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(System.Collections.Generic.List`1[System.Int32] ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-54.cs">
    <type name="Class">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Property()">
        <size>6</size>
      </method>
      <method name="System.String Method()">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>39</size>
      </method>
    </type>
    <type name="Class+&lt;Method&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String &lt;&gt;m__0()">
        <size>56</size>
      </method>
    </type>
    <type name="Class+&lt;Method&gt;c__AnonStorey0+&lt;Method&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String &lt;&gt;m__1(System.String)">
        <size>52</size>
      </method>
    </type>
    <type name="Class+&lt;Method&gt;c__AnonStorey0+&lt;Method&gt;c__AnonStorey2+&lt;Method&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String &lt;&gt;m__2()">
        <size>39</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-55.cs">
    <type name="Thing`1[TFirst]">
      <method name="Void .ctor(Action`1)">
        <size>14</size>
      </method>
      <method name="Thing`1[TFirst] Create[TSecond](System.Func`2[TFirst,TSecond])">
        <size>31</size>
      </method>
      <method name="Void SomeAction()">
        <size>18</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Main()">
        <size>42</size>
      </method>
      <method name="System.Object &lt;Main&gt;m__1(System.Object)">
        <size>2</size>
      </method>
    </type>
    <type name="Thing`1+&lt;Create&gt;c__AnonStorey0`1[TFirst,TSecond]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(TFirst)">
        <size>47</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-56.cs">
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T def()">
        <size>10</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo(System.Object)">
        <size>1</size>
      </method>
      <method name="Void cf[T]()">
        <size>35</size>
      </method>
      <method name="Int32 Main()">
        <size>17</size>
      </method>
    </type>
    <type name="C+DF">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;cf&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-57.cs">
    <type name="X`1[T]">
      <method name="Void IFoo&lt;T&gt;.Test()">
        <size>37</size>
      </method>
      <method name="Void &lt;Test&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-58.cs">
    <type name="Test">
      <method name="X Foo[X](Boolean)">
        <size>45</size>
      </method>
      <method name="X FooNested[X](Boolean)">
        <size>66</size>
      </method>
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Foo&gt;c__AnonStorey0`1[X]">
      <method name="X &lt;&gt;m__0()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;FooNested&gt;c__AnonStorey1`1[X]">
      <method name="Call`1[X] &lt;&gt;m__1()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-59.cs">
    <type name="TestGenericsSubtypeMatching.Sender`1[T]">
      <method name="Void DoSend[TMessage](System.Action`1[T])">
        <size>83</size>
      </method>
      <method name="Void Send(System.Action`1[T])">
        <size>1</size>
      </method>
      <method name="Void ActionOnObject(System.Object)">
        <size>8</size>
      </method>
      <method name="Void Dispose()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGenericsSubtypeMatching.C">
      <method name="Void Main()">
        <size>40</size>
      </method>
      <method name="Void &lt;Main&gt;m__1(System.String)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGenericsSubtypeMatching.Sender`1+&lt;DoSend&gt;c__AnonStorey0`1[T,TMessage]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGenericsSubtypeMatching.Sender`1+&lt;DoSend&gt;c__AnonStorey1`1[T,TMessage]">
      <method name="Void &lt;&gt;m__0(T)">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-6.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello[U,V](U, V)">
        <size>1</size>
      </method>
      <method name="Void Test[A,B,C](A, B, C)">
        <size>49</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
    <type name="Foo`2[R,S]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(R, S)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(R, S, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`3[A,B,C]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(A, Int32)">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-60.cs">
    <type name="TestGenericsSubtypeMatching.Sender`1[T]">
      <method name="Void DoSend[TMessage](System.Action`1[T])">
        <size>83</size>
      </method>
      <method name="Void Send(System.Action`1[T])">
        <size>1</size>
      </method>
      <method name="Void ActionOnObject(System.Object)">
        <size>8</size>
      </method>
      <method name="Void Dispose()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGenericsSubtypeMatching.C">
      <method name="Int32 Main()">
        <size>41</size>
      </method>
      <method name="Void &lt;Main&gt;m__1(Int32)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGenericsSubtypeMatching.Sender`1+&lt;DoSend&gt;c__AnonStorey0`1[T,TMessage]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGenericsSubtypeMatching.Sender`1+&lt;DoSend&gt;c__AnonStorey1`1[T,TMessage]">
      <method name="Void &lt;&gt;m__0(T)">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-61.cs">
    <type name="TestCase">
      <method name="Void Main()">
        <size>32</size>
      </method>
      <method name="Void Test[T](IList`1)">
        <size>33</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestCase+&lt;Test&gt;c__AnonStorey0`1[T]">
      <method name="Void &lt;&gt;m__0()">
        <size>46</size>
      </method>
      <method name="Int32 &lt;&gt;m__1(IList`1)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-62.cs">
    <type name="D">
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="T">
      <method name="Void Assert(System.Object)">
        <size>1</size>
      </method>
      <method name="Void Execute(System.Action)">
        <size>1</size>
      </method>
      <method name="D GetD[T](System.Object)">
        <size>33</size>
      </method>
      <method name="Void Main()">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T+&lt;GetD&gt;c__AnonStorey2`1[T]">
      <method name="Void &lt;&gt;m__0(System.Object)">
        <size>77</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T+&lt;GetD&gt;c__AnonStorey2`1+&lt;GetD&gt;c__AnonStorey0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T+&lt;GetD&gt;c__AnonStorey2`1+&lt;GetD&gt;c__AnonStorey1`1[T]">
      <method name="Void &lt;&gt;m__1()">
        <size>51</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-63.cs">
    <type name="A">
      <method name="Void Foo[T](T, System.String[])">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Test(Int32)">
        <size>40</size>
      </method>
      <method name="Void Test2[T](T)">
        <size>34</size>
      </method>
      <method name="Void &lt;Foo&gt;__BaseCallProxy0[T](T, System.String[])">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+&lt;Test&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>32</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+&lt;Test2&gt;c__AnonStorey1`1[T]">
      <method name="Void &lt;&gt;m__1()">
        <size>40</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void Foo2[T]()">
        <size>1</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Test3()">
        <size>59</size>
      </method>
      <method name="Void &lt;Foo2&gt;__BaseCallProxy1[T]()">
        <size>7</size>
      </method>
    </type>
    <type name="B+&lt;Test3&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__2()">
        <size>19</size>
      </method>
      <method name="Void &lt;&gt;m__3()">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-64.cs">
    <type name="C`1[T]">
      <method name="Void Foo[U](U)">
        <size>81</size>
      </method>
      <method name="Void Run(T)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+&lt;Foo&gt;c__AnonStorey0`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+&lt;Foo&gt;c__AnonStorey1`1[T,U]">
      <method name="U &lt;&gt;m__0()">
        <size>12</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-65.cs">
    <type name="C">
      <method name="Void Foo[T]()">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="T &lt;Foo`1&gt;m__0[T](T)">
        <size>67</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Foo&gt;c__AnonStorey0`1[T]">
      <method name="T &lt;&gt;m__1()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-66.cs">
    <type name="A">
      <method name="Void Test[T,U]()">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Void &lt;Test`2&gt;m__0[T,U]()">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+&lt;Test&gt;c__AnonStorey0`2[T,U]">
      <method name="Void &lt;&gt;m__1()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-7.cs">
    <type name="MyDisposable">
      <method name="Void .ctor()">
        <size>26</size>
      </method>
      <method name="Void Dispose()">
        <size>1</size>
      </method>
      <method name="Int32 get_ID()">
        <size>7</size>
      </method>
      <method name="System.String ToString()">
        <size>28</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Test(Int32)">
        <size>30</size>
      </method>
      <method name="Void Main()">
        <size>60</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>194</size>
      </method>
      <method name="Void Dispose()">
        <size>73</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-8.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test[R](R, Int32)">
        <size>88</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey1`1[R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>34</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0`1[R]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-9.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 get_Foo()">
        <size>16</size>
      </method>
      <method name="Void set_Foo(IEnumerable`1)">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>80</size>
      </method>
      <method name="Foo op_Implicit(Test)">
        <size>30</size>
      </method>
      <method name="IEnumerable`1 op_Addition(Test, Test)">
        <size>44</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void &lt;op_Implicit&gt;m__0()">
        <size>11</size>
      </method>
    </type>
    <type name="Test+&lt;&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>71</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test+&lt;op_Addition&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>112</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test+&lt;&gt;c__Iterator0">
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Test+&lt;op_Addition&gt;c__Iterator1">
      <method name="Test System.Collections.Generic.IEnumerator&lt;Test&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Test&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-anon-type-12.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`1[&lt;ToString&gt;__T]">
      <method name="&lt;ToString&gt;__T get_ToString()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
      <method name="Void .ctor(&lt;ToString&gt;__T)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>53</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;Foo&gt;__T,&lt;Baz&gt;__T]">
      <method name="Void .ctor(&lt;Foo&gt;__T, &lt;Baz&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;Foo&gt;__T get_Foo()">
        <size>7</size>
      </method>
      <method name="&lt;Baz&gt;__T get_Baz()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-02.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object TestA(System.String)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>99</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`1[&lt;s&gt;__T]">
      <method name="Void .ctor(&lt;s&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;s&gt;__T get_s()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;Foo&gt;__T,&lt;Baz&gt;__T]">
      <method name="Void .ctor(&lt;Foo&gt;__T, &lt;Baz&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;Foo&gt;__T get_Foo()">
        <size>7</size>
      </method>
      <method name="&lt;Baz&gt;__T get_Baz()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-03.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 get_Baz()">
        <size>3</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;Foo&gt;__T,&lt;Baz&gt;__T]">
      <method name="Void .ctor(&lt;Foo&gt;__T, &lt;Baz&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;Foo&gt;__T get_Foo()">
        <size>7</size>
      </method>
      <method name="&lt;Baz&gt;__T get_Baz()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-04.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 get_Baz()">
        <size>3</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>111</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`4[&lt;Foo&gt;__T,&lt;Baz&gt;__T,&lt;Hello&gt;__T,&lt;Answer&gt;__T]">
      <method name="Void .ctor(&lt;Foo&gt;__T, &lt;Baz&gt;__T, &lt;Hello&gt;__T, &lt;Answer&gt;__T)">
        <size>36</size>
      </method>
      <method name="&lt;Foo&gt;__T get_Foo()">
        <size>7</size>
      </method>
      <method name="&lt;Baz&gt;__T get_Baz()">
        <size>7</size>
      </method>
      <method name="&lt;Hello&gt;__T get_Hello()">
        <size>7</size>
      </method>
      <method name="&lt;Answer&gt;__T get_Answer()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>123</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>132</size>
      </method>
      <method name="System.String ToString()">
        <size>258</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-05.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String Null()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>297</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;Name&gt;__T,&lt;Age&gt;__T]">
      <method name="Void .ctor(&lt;Name&gt;__T, &lt;Age&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;Name&gt;__T get_Name()">
        <size>7</size>
      </method>
      <method name="&lt;Age&gt;__T get_Age()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;Age&gt;__T,&lt;Name&gt;__T]">
      <method name="Void .ctor(&lt;Age&gt;__T, &lt;Name&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;Age&gt;__T get_Age()">
        <size>7</size>
      </method>
      <method name="&lt;Name&gt;__T get_Name()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>15</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>40</size>
      </method>
      <method name="System.String ToString()">
        <size>6</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType3`1[&lt;Foo&gt;__T]">
      <method name="Void .ctor(&lt;Foo&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;Foo&gt;__T get_Foo()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-06.cs">
    <type name="CastByExample">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T Cast[T](System.Object, T)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>29</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`1[&lt;Foo&gt;__T]">
      <method name="Void .ctor(&lt;Foo&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;Foo&gt;__T get_Foo()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-07.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>15</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>40</size>
      </method>
      <method name="System.String ToString()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-08.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;X&gt;__T,&lt;Y&gt;__T]">
      <method name="Void .ctor(&lt;X&gt;__T, &lt;Y&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;X&gt;__T get_X()">
        <size>7</size>
      </method>
      <method name="&lt;Y&gt;__T get_Y()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-09.cs">
    <type name="My.System.Test">
      <method name="Int32 Main()">
        <size>35</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`1[&lt;X&gt;__T]">
      <method name="Void .ctor(&lt;X&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;X&gt;__T get_X()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`1[&lt;Value&gt;__T]">
      <method name="Void .ctor(&lt;Value&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;Value&gt;__T get_Value()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-10.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_X()">
        <size>3</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>11</size>
      </method>
      <method name="Int32 Test()">
        <size>33</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`1[&lt;X&gt;__T]">
      <method name="Void .ctor(&lt;X&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;X&gt;__T get_X()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="gtest-anontype-11.cs">
    <type name="Alpha">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>18</size>
      </method>
    </type>
    <type name="Beta">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>18</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>49</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;First&gt;__T,&lt;Second&gt;__T]">
      <method name="Void .ctor(&lt;First&gt;__T, &lt;Second&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;First&gt;__T get_First()">
        <size>7</size>
      </method>
      <method name="&lt;Second&gt;__T get_Second()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="gtest-autoproperty-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>15</size>
      </method>
      <method name="System.String get_Foo()">
        <size>7</size>
      </method>
      <method name="Void set_Foo(System.String)">
        <size>8</size>
      </method>
      <method name="Int32 get_Answer()">
        <size>7</size>
      </method>
      <method name="Void set_Answer(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>97</size>
      </method>
    </type>
    <type name="Test+A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_B()">
        <size>7</size>
      </method>
      <method name="Void set_B(System.String)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-autoproperty-02.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Foo()">
        <size>6</size>
      </method>
      <method name="Void set_Foo(System.String)">
        <size>7</size>
      </method>
      <method name="Int32 get_Answer()">
        <size>6</size>
      </method>
      <method name="Void set_Answer(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>114</size>
      </method>
    </type>
    <type name="Test+A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_B()">
        <size>6</size>
      </method>
      <method name="Void set_B(System.String)">
        <size>7</size>
      </method>
      <method name="System.String get_C()">
        <size>6</size>
      </method>
      <method name="Void set_C(System.String)">
        <size>7</size>
      </method>
      <method name="Void DoThings()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-autoproperty-03.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Foo()">
        <size>7</size>
      </method>
      <method name="Void set_Foo(System.String)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>251</size>
      </method>
    </type>
  </test>
  <test name="gtest-autoproperty-04.cs">
    <type name="MonoTests.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String[] get_foo()">
        <size>7</size>
      </method>
      <method name="Void set_foo(System.String[])">
        <size>8</size>
      </method>
      <method name="System.String[] get_bar()">
        <size>0</size>
      </method>
      <method name="Void set_bar(System.String[])">
        <size>0</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>11</size>
      </method>
    </type>
    <type name="MonoTests.ChildClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String[] get_foo()">
        <size>7</size>
      </method>
      <method name="Void set_foo(System.String[])">
        <size>8</size>
      </method>
      <method name="System.String[] get_bar()">
        <size>7</size>
      </method>
      <method name="Void set_bar(System.String[])">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-autoproperty-05.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_X()">
        <size>7</size>
      </method>
      <method name="Void set_X(System.String)">
        <size>8</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-autoproperty-06.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="B I&lt;B&gt;.get_Prop()">
        <size>7</size>
      </method>
      <method name="Void I&lt;B&gt;.set_Prop(B)">
        <size>8</size>
      </method>
      <method name="A I&lt;A&gt;.get_Prop()">
        <size>7</size>
      </method>
      <method name="Void I&lt;A&gt;.set_Prop(A)">
        <size>8</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-collectioninit-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void TestList(System.Collections.Generic.List`1[System.Int32], Int32)">
        <size>89</size>
      </method>
      <method name="Int32 Main()">
        <size>528</size>
      </method>
    </type>
    <type name="Test+Wrap">
      <method name="Void .ctor()">
        <size>31</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>25</size>
      </method>
      <method name="System.Collections.ArrayList get_Numbers()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-collectioninit-02.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>73</size>
      </method>
    </type>
  </test>
  <test name="gtest-collectioninit-03.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>34</size>
      </method>
      <method name="Void R(System.Object ByRef)">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-01.cs">
    <type name="MyTypeExplicit">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Int32 op_Explicit(MyTypeExplicit)">
        <size>7</size>
      </method>
    </type>
    <type name="MemberAccessData">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>16</size>
      </method>
      <method name="Void add_EventField(System.Func`1[System.Boolean])">
        <size>47</size>
      </method>
      <method name="Void remove_EventField(System.Func`1[System.Boolean])">
        <size>47</size>
      </method>
      <method name="System.Linq.Expressions.Expression`1[System.Func`1[System.Func`1[System.Boolean]]] GetEvent()">
        <size>33</size>
      </method>
      <method name="Void set_MyTypeProperty(MyType)">
        <size>8</size>
      </method>
      <method name="MyType get_MyTypeProperty()">
        <size>7</size>
      </method>
      <method name="System.String get_StaticProperty()">
        <size>6</size>
      </method>
    </type>
    <type name="NewTest`1[T]">
      <method name="Void .ctor(T)">
        <size>27</size>
      </method>
      <method name="Void .ctor(T[])">
        <size>14</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>91</size>
      </method>
    </type>
    <type name="Indexer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="System.String get_Item(System.String[])">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Assert[T](T, T)">
        <size>9</size>
      </method>
      <method name="Void Assert[T](T, T, System.String)">
        <size>89</size>
      </method>
      <method name="Void Assert[T](T[], T[])">
        <size>220</size>
      </method>
      <method name="T GenericMethod[T](T)">
        <size>2</size>
      </method>
      <method name="Void AssertNodeType(System.Linq.Expressions.LambdaExpression, ExpressionType)">
        <size>56</size>
      </method>
      <method name="Void AddTest()">
        <size>99</size>
      </method>
      <method name="Void AddTest_2()">
        <size>117</size>
      </method>
      <method name="Void AddTest_3()">
        <size>129</size>
      </method>
      <method name="Void AddTest_4()">
        <size>190</size>
      </method>
      <method name="Void AddTest_5()">
        <size>133</size>
      </method>
      <method name="Void AddTest_6()">
        <size>158</size>
      </method>
      <method name="Void AddTest_7()">
        <size>142</size>
      </method>
      <method name="Void AddTest_8()">
        <size>246</size>
      </method>
      <method name="Void AddTest_9()">
        <size>142</size>
      </method>
      <method name="Void AddCheckedTest()">
        <size>99</size>
      </method>
      <method name="Void AddCheckedTest_2()">
        <size>117</size>
      </method>
      <method name="Void AddCheckedTest_3()">
        <size>129</size>
      </method>
      <method name="Void AddStringTest()">
        <size>128</size>
      </method>
      <method name="Void AddStringTest_2()">
        <size>173</size>
      </method>
      <method name="Void AddStringTest_3()">
        <size>174</size>
      </method>
      <method name="Void AddStringTest_4()">
        <size>174</size>
      </method>
      <method name="Void AndTest()">
        <size>140</size>
      </method>
      <method name="Void AndTest_2()">
        <size>161</size>
      </method>
      <method name="Void AndTest_3()">
        <size>161</size>
      </method>
      <method name="Void AndNullableTest()">
        <size>381</size>
      </method>
      <method name="Void AndNullableTest_2()">
        <size>237</size>
      </method>
      <method name="Void AndNullableTest_3()">
        <size>197</size>
      </method>
      <method name="Void AndAlsoTest()">
        <size>96</size>
      </method>
      <method name="Void AndAlsoTest_2()">
        <size>165</size>
      </method>
      <method name="Void AndAlsoTest_3()">
        <size>108</size>
      </method>
      <method name="Void ArrayIndexTest()">
        <size>145</size>
      </method>
      <method name="Void ArrayIndexTest_2()">
        <size>115</size>
      </method>
      <method name="Void ArrayIndexTest_3()">
        <size>199</size>
      </method>
      <method name="Void ArrayIndexTest_4()">
        <size>243</size>
      </method>
      <method name="Void ArrayIndexTest_5()">
        <size>108</size>
      </method>
      <method name="Void ArrayLengthTest()">
        <size>99</size>
      </method>
      <method name="Void ArrayLengthTest_2()">
        <size>91</size>
      </method>
      <method name="Void CallTest()">
        <size>126</size>
      </method>
      <method name="Void CallTest_2()">
        <size>107</size>
      </method>
      <method name="Void CallTest_3()">
        <size>195</size>
      </method>
      <method name="Void CallTest_4()">
        <size>109</size>
      </method>
      <method name="Void CallTest_5()">
        <size>99</size>
      </method>
      <method name="Void CallTest_6()">
        <size>70</size>
      </method>
      <method name="Void CallTest_7()">
        <size>124</size>
      </method>
      <method name="Void CallTest_8()">
        <size>227</size>
      </method>
      <method name="Void CallTest_9()">
        <size>88</size>
      </method>
      <method name="Void CoalesceTest()">
        <size>120</size>
      </method>
      <method name="Void CoalesceTest_2()">
        <size>171</size>
      </method>
      <method name="Void ConditionTest()">
        <size>170</size>
      </method>
      <method name="Void ConditionTest_2()">
        <size>301</size>
      </method>
      <method name="Void ConditionTest_3()">
        <size>179</size>
      </method>
      <method name="Void ConditionTest_4()">
        <size>183</size>
      </method>
      <method name="Void ConstantTest()">
        <size>59</size>
      </method>
      <method name="Void ConstantTest_2()">
        <size>62</size>
      </method>
      <method name="Void ConstantTest_3()">
        <size>54</size>
      </method>
      <method name="Void ConstantTest_4()">
        <size>44</size>
      </method>
      <method name="Void ConstantTest_5()">
        <size>59</size>
      </method>
      <method name="Void ConstantTest_6()">
        <size>67</size>
      </method>
      <method name="Void ConstantTest_7()">
        <size>62</size>
      </method>
      <method name="Void ConstantTest_8()">
        <size>72</size>
      </method>
      <method name="Void ConstantTest_9()">
        <size>72</size>
      </method>
      <method name="Void ConstantTest_10()">
        <size>72</size>
      </method>
      <method name="Void ConstantTest_11()">
        <size>59</size>
      </method>
      <method name="Void ConstantTest_13()">
        <size>59</size>
      </method>
      <method name="Void ConstantTest_14()">
        <size>72</size>
      </method>
      <method name="Void ConstantTest_15()">
        <size>62</size>
      </method>
      <method name="Void ConvertTest()">
        <size>82</size>
      </method>
      <method name="Void ConvertTest_2()">
        <size>83</size>
      </method>
      <method name="Void ConvertTest_3()">
        <size>93</size>
      </method>
      <method name="Void ConvertTest_4()">
        <size>102</size>
      </method>
      <method name="Void ConvertTest_5()">
        <size>109</size>
      </method>
      <method name="Void ConvertTest_6()">
        <size>238</size>
      </method>
      <method name="Void ConvertTest_7()">
        <size>122</size>
      </method>
      <method name="Void ConvertTest_8()">
        <size>118</size>
      </method>
      <method name="Void ConvertTest_9()">
        <size>97</size>
      </method>
      <method name="Void ConvertTest_10()">
        <size>163</size>
      </method>
      <method name="Void ConvertTest_11()">
        <size>101</size>
      </method>
      <method name="Void ConvertTest_12()">
        <size>141</size>
      </method>
      <method name="Void ConvertTest_13()">
        <size>86</size>
      </method>
      <method name="Void ConvertTest_14()">
        <size>88</size>
      </method>
      <method name="Void ConvertTest_15()">
        <size>132</size>
      </method>
      <method name="Void ConvertCheckedTest()">
        <size>82</size>
      </method>
      <method name="Void ConvertCheckedTest_2()">
        <size>83</size>
      </method>
      <method name="Void ConvertCheckedTest_3()">
        <size>93</size>
      </method>
      <method name="Void ConvertCheckedTest_4()">
        <size>102</size>
      </method>
      <method name="Void DivideTest()">
        <size>99</size>
      </method>
      <method name="Void DivideTest_2()">
        <size>184</size>
      </method>
      <method name="Void DivideTest_3()">
        <size>129</size>
      </method>
      <method name="Void DivideTest_4()">
        <size>191</size>
      </method>
      <method name="Void DivideTest_5()">
        <size>134</size>
      </method>
      <method name="Void DivideTest_6()">
        <size>196</size>
      </method>
      <method name="Void EqualTest()">
        <size>118</size>
      </method>
      <method name="Void EqualTest_2()">
        <size>168</size>
      </method>
      <method name="Void EqualTest_3()">
        <size>125</size>
      </method>
      <method name="Void EqualTest_4()">
        <size>208</size>
      </method>
      <method name="Void EqualTest_5()">
        <size>174</size>
      </method>
      <method name="Void EqualTest_6()">
        <size>119</size>
      </method>
      <method name="Void EqualTest_7()">
        <size>167</size>
      </method>
      <method name="Void EqualTest_8()">
        <size>116</size>
      </method>
      <method name="Void EqualTest_9()">
        <size>146</size>
      </method>
      <method name="Void EqualTest_10()">
        <size>169</size>
      </method>
      <method name="Void EqualTest_11()">
        <size>132</size>
      </method>
      <method name="Void EqualTest_12()">
        <size>127</size>
      </method>
      <method name="Void EqualTest_13()">
        <size>124</size>
      </method>
      <method name="Void EqualTestDelegate()">
        <size>113</size>
      </method>
      <method name="Void EqualTestDelegate_2()">
        <size>312</size>
      </method>
      <method name="Void ExclusiveOrTest()">
        <size>115</size>
      </method>
      <method name="Void ExclusiveOrTest_2()">
        <size>183</size>
      </method>
      <method name="Void ExclusiveOrTest_3()">
        <size>129</size>
      </method>
      <method name="Void ExclusiveOrTest_4()">
        <size>191</size>
      </method>
      <method name="Void ExclusiveOrTest_5()">
        <size>197</size>
      </method>
      <method name="Void ExclusiveOrTest_6()">
        <size>161</size>
      </method>
      <method name="Void ExclusiveOrTest_7()">
        <size>197</size>
      </method>
      <method name="Void ExclusiveOrTest_8()">
        <size>163</size>
      </method>
      <method name="Void GreaterThanTest()">
        <size>99</size>
      </method>
      <method name="Void GreaterThanTest_2()">
        <size>154</size>
      </method>
      <method name="Void GreaterThanTest_3()">
        <size>125</size>
      </method>
      <method name="Void GreaterThanTest_4()">
        <size>208</size>
      </method>
      <method name="Void GreaterThanTest_5()">
        <size>208</size>
      </method>
      <method name="Void GreaterThanTest_6()">
        <size>102</size>
      </method>
      <method name="Void GreaterThanTest_7()">
        <size>146</size>
      </method>
      <method name="Void GreaterThanTest_8()">
        <size>169</size>
      </method>
      <method name="Void GreaterThanOrEqualTest()">
        <size>99</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_2()">
        <size>169</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_3()">
        <size>130</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_4()">
        <size>208</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_5()">
        <size>208</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_6()">
        <size>102</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_7()">
        <size>146</size>
      </method>
      <method name="Void GreaterThanOrEqualTest_8()">
        <size>169</size>
      </method>
      <method name="Void InvokeTest()">
        <size>90</size>
      </method>
      <method name="Void InvokeTest_2()">
        <size>138</size>
      </method>
      <method name="Void LeftShiftTest()">
        <size>155</size>
      </method>
      <method name="Void LeftShiftTest_2()">
        <size>162</size>
      </method>
      <method name="Void LeftShiftTest_3()">
        <size>168</size>
      </method>
      <method name="Void LeftShiftTest_4()">
        <size>261</size>
      </method>
      <method name="Void LeftShiftTest_5()">
        <size>110</size>
      </method>
      <method name="Void LessThanTest()">
        <size>99</size>
      </method>
      <method name="Void LessThanTest_2()">
        <size>154</size>
      </method>
      <method name="Void LessThanTest_3()">
        <size>125</size>
      </method>
      <method name="Void LessThanTest_4()">
        <size>208</size>
      </method>
      <method name="Void LessThanTest_5()">
        <size>208</size>
      </method>
      <method name="Void LessThanTest_6()">
        <size>102</size>
      </method>
      <method name="Void LessThanTest_7()">
        <size>146</size>
      </method>
      <method name="Void LessThanTest_8()">
        <size>169</size>
      </method>
      <method name="Void LessThanOrEqualTest()">
        <size>99</size>
      </method>
      <method name="Void LessThanOrEqualTest_2()">
        <size>169</size>
      </method>
      <method name="Void LessThanOrEqualTest_3()">
        <size>125</size>
      </method>
      <method name="Void LessThanOrEqualTest_4()">
        <size>208</size>
      </method>
      <method name="Void LessThanOrEqualTest_5()">
        <size>208</size>
      </method>
      <method name="Void LessThanOrEqualTest_6()">
        <size>102</size>
      </method>
      <method name="Void LessThanOrEqualTest_7()">
        <size>146</size>
      </method>
      <method name="Void LessThanOrEqualTest_8()">
        <size>169</size>
      </method>
      <method name="Void ListInitTest()">
        <size>404</size>
      </method>
      <method name="Void ListInitTest_2()">
        <size>292</size>
      </method>
      <method name="Void MemberAccessTest()">
        <size>132</size>
      </method>
      <method name="Void MemberAccessTest_2()">
        <size>63</size>
      </method>
      <method name="Void MemberAccessTest_3()">
        <size>113</size>
      </method>
      <method name="Void MemberAccessTest_4()">
        <size>91</size>
      </method>
      <method name="Void MemberAccessTest_5()">
        <size>39</size>
      </method>
      <method name="Void MemberAccessTest_6()">
        <size>104</size>
      </method>
      <method name="Void MemberAccessTest_7()">
        <size>109</size>
      </method>
      <method name="Void MemberAccessTest_8()">
        <size>63</size>
      </method>
      <method name="Void MemberAccessTest_9()">
        <size>91</size>
      </method>
      <method name="Void MemberInitTest()">
        <size>302</size>
      </method>
      <method name="Void MemberInitTest_2()">
        <size>250</size>
      </method>
      <method name="Void MemberInitTest_3()">
        <size>124</size>
      </method>
      <method name="Void ModuloTest()">
        <size>100</size>
      </method>
      <method name="Void ModuloTest_2()">
        <size>184</size>
      </method>
      <method name="Void ModuloTest_3()">
        <size>129</size>
      </method>
      <method name="Void ModuloTest_4()">
        <size>191</size>
      </method>
      <method name="Void ModuloTest_5()">
        <size>133</size>
      </method>
      <method name="Void ModuloTest_6()">
        <size>200</size>
      </method>
      <method name="Void ModuloTest_7()">
        <size>110</size>
      </method>
      <method name="Void MultiplyTest()">
        <size>131</size>
      </method>
      <method name="Void MultiplyTest_2()">
        <size>184</size>
      </method>
      <method name="Void MultiplyTest_3()">
        <size>133</size>
      </method>
      <method name="Void MultiplyTest_4()">
        <size>194</size>
      </method>
      <method name="Void MultiplyTest_5()">
        <size>137</size>
      </method>
      <method name="Void MultiplyTest_6()">
        <size>202</size>
      </method>
      <method name="Void MultiplyTest_7()">
        <size>110</size>
      </method>
      <method name="Void MultiplyCheckedTest()">
        <size>117</size>
      </method>
      <method name="Void MultiplyCheckedTest_2()">
        <size>192</size>
      </method>
      <method name="Void MultiplyCheckedTest_3()">
        <size>133</size>
      </method>
      <method name="Void MultiplyCheckedTest_4()">
        <size>121</size>
      </method>
      <method name="Void MultiplyCheckedTest_5()">
        <size>124</size>
      </method>
      <method name="Void NegateTest()">
        <size>72</size>
      </method>
      <method name="Void NegateTest_2()">
        <size>92</size>
      </method>
      <method name="Void NegateTest_3()">
        <size>130</size>
      </method>
      <method name="Void NegateTest_4()">
        <size>97</size>
      </method>
      <method name="Void NegateTest_5()">
        <size>141</size>
      </method>
      <method name="Void NegateTest_6()">
        <size>121</size>
      </method>
      <method name="Void NegateTest_7()">
        <size>132</size>
      </method>
      <method name="Void NegateTest_8()">
        <size>97</size>
      </method>
      <method name="Void NegateTest_9()">
        <size>87</size>
      </method>
      <method name="Void NegateTestChecked()">
        <size>86</size>
      </method>
      <method name="Void NegateTestChecked_2()">
        <size>137</size>
      </method>
      <method name="Void NegateTestChecked_3()">
        <size>97</size>
      </method>
      <method name="Void NegateTestChecked_4()">
        <size>86</size>
      </method>
      <method name="Void NewArrayInitTest()">
        <size>92</size>
      </method>
      <method name="Void NewArrayInitTest_2()">
        <size>64</size>
      </method>
      <method name="Void NewArrayInitTest_3()">
        <size>136</size>
      </method>
      <method name="Void NewArrayInitTest_4()">
        <size>120</size>
      </method>
      <method name="Void NewArrayBoundsTest()">
        <size>123</size>
      </method>
      <method name="Void NewArrayBoundsTest_2()">
        <size>123</size>
      </method>
      <method name="Void NewTest()">
        <size>93</size>
      </method>
      <method name="Void NewTest_2()">
        <size>61</size>
      </method>
      <method name="Void NewTest_3()">
        <size>98</size>
      </method>
      <method name="Void NewTest_4()">
        <size>252</size>
      </method>
      <method name="Void NewTest_5()">
        <size>371</size>
      </method>
      <method name="Void NotTest()">
        <size>70</size>
      </method>
      <method name="Void NotTest_2()">
        <size>113</size>
      </method>
      <method name="Void NotTest_3()">
        <size>71</size>
      </method>
      <method name="Void NotTest_4()">
        <size>105</size>
      </method>
      <method name="Void NotTest_5()">
        <size>73</size>
      </method>
      <method name="Void NotTest_6()">
        <size>104</size>
      </method>
      <method name="Void NotNullableTest()">
        <size>114</size>
      </method>
      <method name="Void NotNullableTest_2()">
        <size>134</size>
      </method>
      <method name="Void NotNullableTest_3()">
        <size>130</size>
      </method>
      <method name="Void NotNullableTest_4()">
        <size>149</size>
      </method>
      <method name="Void NotNullableTest_5()">
        <size>148</size>
      </method>
      <method name="Void NotEqualTest()">
        <size>118</size>
      </method>
      <method name="Void NotEqualTest_2()">
        <size>166</size>
      </method>
      <method name="Void NotEqualTest_3()">
        <size>125</size>
      </method>
      <method name="Void NotEqualTest_4()">
        <size>208</size>
      </method>
      <method name="Void NotEqualTest_5()">
        <size>174</size>
      </method>
      <method name="Void NotEqualTest_6()">
        <size>119</size>
      </method>
      <method name="Void NotEqualTest_7()">
        <size>167</size>
      </method>
      <method name="Void NotEqualTest_8()">
        <size>116</size>
      </method>
      <method name="Void NotEqualTest_9()">
        <size>146</size>
      </method>
      <method name="Void NotEqualTest_10()">
        <size>169</size>
      </method>
      <method name="Void NotEqualTest_11()">
        <size>132</size>
      </method>
      <method name="Void OrTest()">
        <size>141</size>
      </method>
      <method name="Void OrTest_2()">
        <size>129</size>
      </method>
      <method name="Void OrTest_3()">
        <size>161</size>
      </method>
      <method name="Void OrNullableTest()">
        <size>382</size>
      </method>
      <method name="Void OrNullableTest_2()">
        <size>186</size>
      </method>
      <method name="Void OrNullableTest_3()">
        <size>176</size>
      </method>
      <method name="Void OrNullableTest_4()">
        <size>197</size>
      </method>
      <method name="Void OrElseTest()">
        <size>97</size>
      </method>
      <method name="Void OrElseTest_2()">
        <size>167</size>
      </method>
      <method name="Void ParameterTest()">
        <size>73</size>
      </method>
      <method name="Void ParameterTest_2()">
        <size>75</size>
      </method>
      <method name="Void ParameterTest_3()">
        <size>73</size>
      </method>
      <method name="Void ParameterTest_4()">
        <size>100</size>
      </method>
      <method name="Void QuoteTest()">
        <size>85</size>
      </method>
      <method name="Void RightShiftTest()">
        <size>152</size>
      </method>
      <method name="Void RightShiftTest_2()">
        <size>159</size>
      </method>
      <method name="Void RightShiftTest_3()">
        <size>168</size>
      </method>
      <method name="Void RightShiftTest_4()">
        <size>258</size>
      </method>
      <method name="Void SubtractTest()">
        <size>100</size>
      </method>
      <method name="Void SubtractTest_2()">
        <size>118</size>
      </method>
      <method name="Void SubtractTest_3()">
        <size>130</size>
      </method>
      <method name="Void SubtractTest_4()">
        <size>191</size>
      </method>
      <method name="Void SubtractTest_5()">
        <size>134</size>
      </method>
      <method name="Void SubtractTest_6()">
        <size>160</size>
      </method>
      <method name="Void SubtractTest_7()">
        <size>113</size>
      </method>
      <method name="Void SubtractTest_8()">
        <size>146</size>
      </method>
      <method name="Void SubtractTest_9()">
        <size>142</size>
      </method>
      <method name="Void SubtractTest_10()">
        <size>161</size>
      </method>
      <method name="Void SubtractTest_11()">
        <size>157</size>
      </method>
      <method name="Void SubtractCheckedTest()">
        <size>122</size>
      </method>
      <method name="Void SubtractCheckedTest_2()">
        <size>185</size>
      </method>
      <method name="Void SubtractCheckedTest_3()">
        <size>130</size>
      </method>
      <method name="Void SubtractCheckedTest_4()">
        <size>121</size>
      </method>
      <method name="Void TypeAsTest()">
        <size>80</size>
      </method>
      <method name="Void TypeAsTest_2()">
        <size>144</size>
      </method>
      <method name="Void TypeAsTest_3()">
        <size>85</size>
      </method>
      <method name="Void TypeIsTest()">
        <size>103</size>
      </method>
      <method name="Void TypeIsTest_2()">
        <size>103</size>
      </method>
      <method name="Void TypeIsTest_3()">
        <size>85</size>
      </method>
      <method name="Void TypeIsTest_5()">
        <size>74</size>
      </method>
      <method name="Void TypeIsTest_6()">
        <size>111</size>
      </method>
      <method name="Void UnaryPlusTest()">
        <size>67</size>
      </method>
      <method name="Void UnaryPlusTest_2()">
        <size>47</size>
      </method>
      <method name="Void UnaryPlusTest_3()">
        <size>97</size>
      </method>
      <method name="Void UnaryPlusTest_4()">
        <size>141</size>
      </method>
      <method name="Void UnaryPlusTest_5()">
        <size>140</size>
      </method>
      <method name="System.String InstanceMethod(System.String)">
        <size>2</size>
      </method>
      <method name="System.Object InstanceParamsMethod(Int32, System.Object[])">
        <size>30</size>
      </method>
      <method name="Int32 TestInt()">
        <size>3</size>
      </method>
      <method name="Void RefMethod(Int32 ByRef)">
        <size>8</size>
      </method>
      <method name="Boolean RunTest(System.Reflection.MethodInfo)">
        <size>77</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
    </type>
    <type name="Tester+EmptyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Tester+IntDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;A&gt;__T,&lt;Value&gt;__T]">
      <method name="Void .ctor(&lt;A&gt;__T, &lt;Value&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;A&gt;__T get_A()">
        <size>7</size>
      </method>
      <method name="&lt;Value&gt;__T get_Value()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void &lt;EqualTestDelegate_2&gt;m__0()">
        <size>1</size>
      </method>
      <method name="Void &lt;EqualTestDelegate_2&gt;m__1()">
        <size>1</size>
      </method>
      <method name="Void &lt;EqualTestDelegate_2&gt;m__2()">
        <size>1</size>
      </method>
      <method name="Void &lt;EqualTestDelegate_2&gt;m__3()">
        <size>1</size>
      </method>
      <method name="Void &lt;EqualTestDelegate_2&gt;m__4()">
        <size>1</size>
      </method>
      <method name="System.String &lt;InvokeTest_2&gt;m__5(Int32)">
        <size>18</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__6(System.Reflection.MethodInfo)">
        <size>12</size>
      </method>
      <method name="System.String &lt;Main&gt;m__7(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__8(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__9(Boolean)">
        <size>5</size>
      </method>
      <method name="Void NewArrayInitTest_5()">
        <size>158</size>
      </method>
      <method name="Void ConditionTest_5()">
        <size>107</size>
      </method>
      <method name="Void AndTest_4()">
        <size>92</size>
      </method>
      <method name="Void MemberInitTest_4()">
        <size>66</size>
      </method>
      <method name="Void NewTest_6()">
        <size>182</size>
      </method>
    </type>
    <type name="InverseLogicalOperator">
      <method name="Void .ctor(Boolean)">
        <size>8</size>
      </method>
      <method name="Boolean op_True(InverseLogicalOperator)">
        <size>8</size>
      </method>
      <method name="Boolean op_False(InverseLogicalOperator)">
        <size>8</size>
      </method>
    </type>
    <type name="MyType">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Int16 get_ShortProp()">
        <size>7</size>
      </method>
      <method name="Void set_ShortProp(Int16)">
        <size>8</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>6</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="Int32 op_Implicit(MyType)">
        <size>8</size>
      </method>
      <method name="Boolean op_True(MyType)">
        <size>16</size>
      </method>
      <method name="Boolean op_False(MyType)">
        <size>19</size>
      </method>
      <method name="MyType op_Addition(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Subtraction(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Division(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Multiply(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_Modulus(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_BitwiseAnd(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_BitwiseOr(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="MyType op_ExclusiveOr(MyType, MyType)">
        <size>21</size>
      </method>
      <method name="Boolean op_Equality(MyType, MyType)">
        <size>17</size>
      </method>
      <method name="Boolean op_Inequality(MyType, MyType)">
        <size>20</size>
      </method>
      <method name="Boolean op_GreaterThan(MyType, MyType)">
        <size>17</size>
      </method>
      <method name="Boolean op_LessThan(MyType, MyType)">
        <size>17</size>
      </method>
      <method name="Boolean op_GreaterThanOrEqual(MyType, MyType)">
        <size>20</size>
      </method>
      <method name="Boolean op_LessThanOrEqual(MyType, MyType)">
        <size>20</size>
      </method>
      <method name="Boolean op_LogicalNot(MyType)">
        <size>11</size>
      </method>
      <method name="Int32 op_RightShift(MyType, Int32)">
        <size>13</size>
      </method>
      <method name="Int32 op_LeftShift(MyType, Int32)">
        <size>13</size>
      </method>
      <method name="MyType op_UnaryNegation(MyType)">
        <size>14</size>
      </method>
      <method name="MyType op_UnaryPlus(MyType)">
        <size>13</size>
      </method>
    </type>
    <type name="MyTypeImplicitOnly">
      <method name="Void .ctor(Int16)">
        <size>8</size>
      </method>
      <method name="Int16 op_Implicit(MyTypeImplicitOnly)">
        <size>8</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void EqualTest_14()">
        <size>101</size>
      </method>
    </type>
    <type name="Tester+&lt;ConvertTest_9&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void NewArrayInitTest_6()">
        <size>103</size>
      </method>
      <method name="Void LambdaTest()">
        <size>89</size>
      </method>
      <method name="Void EqualTest_15()">
        <size>159</size>
      </method>
      <method name="Void ArrayIndexTest_6()">
        <size>122</size>
      </method>
      <method name="Void ArrayIndexTest_7()">
        <size>123</size>
      </method>
      <method name="Void NewArrayBoundsTest_3()">
        <size>85</size>
      </method>
      <method name="Void NewArrayBoundsTest_4()">
        <size>82</size>
      </method>
      <method name="Void LeftShiftTest_6()">
        <size>155</size>
      </method>
      <method name="Void RightShiftTest_5()">
        <size>152</size>
      </method>
      <method name="Void QuoteTest_2()">
        <size>99</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberAccessTest&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberAccessTest_3&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberAccessTest_4&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberAccessTest_6&gt;c__AnonStorey4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;MemberAccessTest_9&gt;c__AnonStorey5">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void NewTest_7()">
        <size>53</size>
      </method>
      <method name="Void ConvertTest_16()">
        <size>81</size>
      </method>
      <method name="Int32 ReturnNumber()">
        <size>2</size>
      </method>
      <method name="Void EqualTestDelegate_3()">
        <size>212</size>
      </method>
      <method name="Void DivideTest_7()">
        <size>185</size>
      </method>
      <method name="Void MultiplyTest_8()">
        <size>198</size>
      </method>
      <method name="Void RightShiftTest_6()">
        <size>145</size>
      </method>
      <method name="Void TypeAsTest_4()">
        <size>113</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void TypeIsTest_4()">
        <size>80</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-02.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](System.Linq.Expressions.Expression`1[System.Func`2[T,T]])">
        <size>1</size>
      </method>
      <method name="System.String Param(System.String)">
        <size>114</size>
      </method>
      <method name="Int32 Main()">
        <size>157</size>
      </method>
    </type>
    <type name="M+&lt;Param&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-03.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
    </type>
    <type name="S`1[T]">
      <method name="Int32 Test()">
        <size>145</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-04.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>366</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Boolean op_GreaterThan(Foo, Foo)">
        <size>6</size>
      </method>
      <method name="Boolean op_LessThan(Foo, Foo)">
        <size>6</size>
      </method>
      <method name="Boolean op_Equality(Foo, Foo)">
        <size>6</size>
      </method>
      <method name="Boolean op_Inequality(Foo, Foo)">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-05.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Assert[T](T, T)">
        <size>46</size>
      </method>
      <method name="Void AssertNodeType(System.Linq.Expressions.LambdaExpression, ExpressionType)">
        <size>56</size>
      </method>
      <method name="Int32 Main()">
        <size>350</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-06.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
      <method name="Int32 Value()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-07.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>14</size>
      </method>
      <method name="Int32* Foo()">
        <size>3</size>
      </method>
      <method name="Int32 Main()">
        <size>536</size>
      </method>
    </type>
    <type name="EmptyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="UnsafeDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32* Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32* EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Void M()">
        <size>1</size>
      </method>
      <method name="Int32 TestInstance()">
        <size>321</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-08.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 ThisMethod()">
        <size>3</size>
      </method>
      <method name="Int32 Goo(Boolean)">
        <size>204</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Foo+&lt;Goo&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-09.cs">
    <type name="Mono.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>274</size>
      </method>
      <method name="System.Int64[] GetValues()">
        <size>18</size>
      </method>
    </type>
    <type name="Mono.C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-10.cs">
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean ContainsAll[U](IEnumerable`1)">
        <size>191</size>
      </method>
      <method name="Boolean Contains(T)">
        <size>2</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
    <type name="Foo`1+&lt;ContainsAll&gt;c__AnonStorey0`1[T,U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-11.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Invalid(Int32)">
        <size>124</size>
      </method>
      <method name="Void Other(System.Int32[])">
        <size>1</size>
      </method>
    </type>
    <type name="Test+&lt;Invalid&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-12.cs">
    <type name="TestCase">
      <method name="Void .cctor()">
        <size>68</size>
      </method>
      <method name="Boolean StaticMethodTakingAnExpression(System.Linq.Expressions.Expression`1[System.Func`2[System.Object,System.Boolean]])">
        <size>2</size>
      </method>
      <method name="Void DummyToMakeTheStaticsInitialize()">
        <size>1</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-13.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
      <method name="IEnumerable`1 Test[T](Int32)">
        <size>30</size>
      </method>
    </type>
    <type name="Program+&lt;Test&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>114</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-14.cs">
    <type name="Person">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Age()">
        <size>7</size>
      </method>
      <method name="Void set_Age(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Repro">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
      <method name="IEnumerable`1 GetPersons[T](IEnumerable`1, Int32)">
        <size>44</size>
      </method>
      <method name="Boolean Test[T](T, System.Linq.Expressions.Expression`1[System.Func`2[T,System.Boolean]])">
        <size>13</size>
      </method>
    </type>
    <type name="Repro+&lt;GetPersons&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>52</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>301</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-15.cs">
    <type name="Foo">
      <method name="Int32 Helper(System.Linq.Expressions.Expression`1[System.Predicate`1[System.Int32]])">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>190</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-16.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>136</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-17.cs">
    <type name="CompilerCrashTest.QueryCompiler">
      <method name="D Compile[D](System.Linq.Expressions.Expression`1[D])">
        <size>12</size>
      </method>
      <method name="System.Delegate Compile(System.Linq.Expressions.LambdaExpression)">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-18.cs">
    <type name="FooBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>140</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-19.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
      <method name="T Value[T]()">
        <size>76</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-20.cs">
    <type name="S">
      <method name="Int32 Main()">
        <size>216</size>
      </method>
    </type>
    <type name="A">
      <method name="A op_Implicit(S)">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-22.cs">
    <type name="FieldInfoBug.MonoRuntime">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FieldInfoBug.GenericClass`1[T]">
      <method name="Void .ctor(String)">
        <size>58</size>
      </method>
    </type>
    <type name="FieldInfoBug.GenericClass`1+&lt;GenericClass&gt;c__AnonStorey0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-23.cs">
    <type name="Test.OrderBySpecification">
      <method name="Void .ctor(Expression`1)">
        <size>7</size>
      </method>
    </type>
    <type name="Test.RateOrderById">
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>44</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-24.cs">
    <type name="NotifyingProperty">
      <method name="Void CreateDependent[TValue](System.Linq.Expressions.Expression`1[System.Func`1[TValue]], System.Func`1[System.Object], System.Linq.Expressions.Expression`1[System.Func`1[System.Object]][])">
        <size>1</size>
      </method>
    </type>
    <type name="NotifyingPropertyTest">
      <method name="Void CreateDependent_NotifierNull()">
        <size>58</size>
      </method>
      <method name="Void CreateDependent_DependentsNull()">
        <size>83</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="System.Object &lt;CreateDependent_DependentsNull&gt;m__0()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="NotifyingPropertyTest+&lt;CreateDependent_NotifierNull&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="NotifyingPropertyTest+&lt;CreateDependent_DependentsNull&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-25.cs">
    <type name="Foo">
      <method name="Void OnBaz(IBaz)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void RunOnBaz(System.Action`1[IBaz])">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>214</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-etree-26.cs">
    <type name="A`1[TA]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B`1[TA,TB]">
      <method name="Void foo()">
        <size>39</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A`1+B`1+C`1[TA,TB,TC]">
      <method name="Void bar()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-01.cs">
    <type name="SimpleTest">
      <method name="System.String Prefix(System.String, System.String)">
        <size>8</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>157</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-02.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
    <type name="N.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test2()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-03.cs">
    <type name="A.A">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(Int32, System.String)">
        <size>3</size>
      </method>
    </type>
    <type name="B.X">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(Int32, Boolean)">
        <size>3</size>
      </method>
    </type>
    <type name="C.F">
      <method name="Boolean Foo(Byte)">
        <size>2</size>
      </method>
    </type>
    <type name="C.D.F">
      <method name="Int32 Foo(Int32)">
        <size>3</size>
      </method>
      <method name="Void TestX()">
        <size>9</size>
      </method>
    </type>
    <type name="C.M">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>61</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-04.cs">
    <type name="A.Test">
      <method name="System.String Test_1(Boolean)">
        <size>6</size>
      </method>
    </type>
    <type name="B.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-05.cs">
    <type name="A.Test_A">
      <method name="System.String Test_1(System.String)">
        <size>6</size>
      </method>
    </type>
    <type name="A.Test_B">
      <method name="System.String Test_2(System.String)">
        <size>6</size>
      </method>
    </type>
    <type name="B.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-06.cs">
    <type name="Gen">
      <method name="T Test_1[T](T)">
        <size>10</size>
      </method>
      <method name="System.String Test_1[T](System.String)">
        <size>6</size>
      </method>
    </type>
    <type name="B.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-07.cs">
    <type name="E">
      <method name="Void ToReadOnly[T](IEnumerable`1)">
        <size>1</size>
      </method>
      <method name="Void To(IA)">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Test(IEnumerable`1)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-08.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-09.cs">
    <type name="Test">
      <method name="Void Foo[T](System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-10.cs">
    <type name="AExtensions">
      <method name="Int32 Round(Double)">
        <size>8</size>
      </method>
    </type>
    <type name="BExtensions">
      <method name="T GetBy[T](T[], Double)">
        <size>13</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-11.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>20</size>
      </method>
    </type>
    <type name="Lol">
      <method name="Boolean OneEleven(System.Object)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-12.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>63</size>
      </method>
    </type>
    <type name="ChatClient">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Say(System.String, System.String)">
        <size>13</size>
      </method>
    </type>
    <type name="ChatExtensions">
      <method name="Void Say(ChatClient, System.String, System.Collections.Specialized.StringCollection)">
        <size>64</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-13.cs">
    <type name="Foo">
      <method name="IEnumerable`1 Reverse[T](IEnumerable`1)">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-14.cs">
    <type name="C">
      <method name="Void Bar[U](IA)">
        <size>7</size>
      </method>
      <method name="Void Foo[T](IA)">
        <size>1</size>
      </method>
      <method name="Void Foo(IA)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-15.cs">
    <type name="C">
      <method name="TAttribute GetCustomAttribute[TAttribute](ICustomAttributeProvider)">
        <size>15</size>
      </method>
      <method name="TAttribute[] GetCustomAttributes[TAttribute](ICustomAttributeProvider)">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-16.cs">
    <type name="Rocks">
      <method name="Boolean Extension(System.String)">
        <size>2</size>
      </method>
      <method name="Boolean Extension(D)">
        <size>2</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_e(D)">
        <size>47</size>
      </method>
      <method name="Void remove_e(D)">
        <size>47</size>
      </method>
      <method name="System.String get_Item(Int32)">
        <size>6</size>
      </method>
      <method name="System.String get_Property()">
        <size>6</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>44</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-17.cs">
    <type name="MainClass">
      <method name="Void Main()">
        <size>45</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-18.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean get_IsBar()">
        <size>2</size>
      </method>
    </type>
    <type name="FooExt">
      <method name="Boolean IsBar(Foo)">
        <size>7</size>
      </method>
    </type>
    <type name="Repro">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-19.cs">
    <type name="Rocks">
      <method name="Int32 Test_2[T](IEnumerable`1)">
        <size>3</size>
      </method>
      <method name="System.String Test_1(System.String)">
        <size>12</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>142</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-20.cs">
    <type name="Outer.Inner.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M(I)">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Outer.ExtensionMethods">
      <method name="Void AddRange[T](I, IEnumerable`1)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-21.cs">
    <type name="Outer.Inner.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M(I)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="External.ExtensionMethods">
      <method name="Void AddRange(I)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-22.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-23.cs">
    <type name="T">
      <method name="Void A(System.String, Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-24.cs">
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-25.cs">
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-26.cs">
    <type name="test.TypeExtensions">
      <method name="Boolean IsNullable(System.Type)">
        <size>2</size>
      </method>
    </type>
    <type name="testmono.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-27.cs">
    <type name="Foo.Extensions">
      <method name="System.String AsString(IList`1)">
        <size>6</size>
      </method>
    </type>
    <type name="Bar.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>17</size>
      </method>
      <method name="System.String Pan(System.Byte[])">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-28.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Extensions">
      <method name="Boolean IsFoo(Foo)">
        <size>2</size>
      </method>
      <method name="Boolean IsBar(Bar)">
        <size>2</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-29.cs">
    <type name="My">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>40</size>
      </method>
      <method name="Int32 ContentTransferEncoding[T](My)">
        <size>2</size>
      </method>
      <method name="Int32 ContentTransferEncoding(My)">
        <size>2</size>
      </method>
    </type>
    <type name="My">
      <method name="Void set_ContentTransferEncoding(Boolean)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-30.cs">
    <type name="Test">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Int32 get_First()">
        <size>2</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Test()">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-31.cs">
    <type name="N.S">
      <method name="Void Map[T](Int32, System.Func`2[T,System.String])">
        <size>1</size>
      </method>
    </type>
    <type name="N2.S2">
      <method name="Void Map(Int32, Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="M.C">
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-32.cs">
    <type name="A">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Int32 get_Count()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G`1[T]">
      <method name="Void Test()">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Extensions">
      <method name="Int32 Count(IEnumerable)">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-33.cs">
    <type name="Prop">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="HelperExtensions">
      <method name="Void Foo(I, I)">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="I get_Prop()">
        <size>2</size>
      </method>
      <method name="System.Int32[] get_Loc()">
        <size>2</size>
      </method>
      <method name="Void Test()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-34.cs">
    <type name="Program">
      <method name="Void Foo(System.Object)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-35.cs">
    <type name="A">
      <method name="Void Test(Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-36.cs">
    <type name="S">
      <method name="System.String get_Prop()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="E">
      <method name="Int32 Prop(S)">
        <size>2</size>
      </method>
      <method name="Int32 Prop(S2)">
        <size>3</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>43</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-37.cs">
    <type name="S">
      <method name="Void Extension(A, System.String, Boolean)">
        <size>11</size>
      </method>
    </type>
    <type name="A">
      <method name="Void Extension(System.String)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void TestMethod(System.Action`1[System.Boolean])">
        <size>1</size>
      </method>
      <method name="Int32 TestMethod(System.Action`1[System.String])">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>33</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-38.cs">
    <type name="Repro2.Color">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Void .cctor()">
        <size>38</size>
      </method>
    </type>
    <type name="Repro2.ExtensionMethods">
      <method name="Color Transparent(Color)">
        <size>6</size>
      </method>
    </type>
    <type name="Repro2.MainClass">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-39.cs">
    <type name="Extra.S">
      <method name="Int32 Prefix(System.String, System.String)">
        <size>2</size>
      </method>
    </type>
    <type name="SimpleTest">
      <method name="Int32 Prefix(System.String, System.String, Boolean)">
        <size>2</size>
      </method>
    </type>
    <type name="M">
      <method name="Int32 Main()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-exmethod-40.cs">
    <type name="N.Extensions.s">
      <method name="Void ShouldEqual(System.String, System.String, System.String, System.String, System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="N.Main.C">
      <method name="Void Main()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-01.cs">
    <type name="TestNew">
      <method name="Void SetTest()">
        <size>20</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Test()">
        <size>323</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-02.cs">
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-03.cs">
    <type name="Bug.RedSkyTimeCode">
      <method name="Void CopyTo(Bug.xxx*)">
        <size>99</size>
      </method>
      <method name="Void Convert(Bug.xxx*, UInt64*)">
        <size>93</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-04.cs">
    <type name="aClass">
      <method name="Void Main(System.String[])">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-05.cs">
    <type name="S2">
      <method name="Void Test()">
        <size>39</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-06.cs">
    <type name="Bug.Demo">
      <method name="Boolean Fixed()">
        <size>14</size>
      </method>
      <method name="Boolean Foo(System.Int32[])">
        <size>43</size>
      </method>
      <method name="Int32 Main()">
        <size>65</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-07.cs">
    <type name="C">
      <method name="Void Goo()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-08.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>150</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-09.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>125</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-fixedbuffer-10.cs">
    <type name="Program">
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestStruct">
      <method name="Void .ctor(String)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-02.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-03.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-04.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-05.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-06.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-07.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-08.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-09.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-10.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-11.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-12.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-13.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Void Test_2()">
        <size>11</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-friend-14.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-implicitarray-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>296</size>
      </method>
    </type>
  </test>
  <test name="gtest-implicitarray-02.cs">
    <type name="MyString">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String op_Implicit(MyString)">
        <size>6</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="gtest-implicitarray-03.cs">
    <type name="InferArrayType">
      <method name="Void foo(System.Func`2[System.Linq.Expressions.Expression,System.Boolean][])">
        <size>1</size>
      </method>
      <method name="Void bar(System.Action`1[System.Linq.Expressions.Expression], System.Func`2[System.Linq.Expressions.Expression,System.Boolean])">
        <size>44</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="InferArrayType+&lt;bar&gt;c__AnonStorey0">
      <method name="Boolean &lt;&gt;m__0(System.Linq.Expressions.Expression)">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-01.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 get_Answer()">
        <size>7</size>
      </method>
      <method name="Void set_Answer(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-02.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>1234</size>
      </method>
    </type>
    <type name="Test+Point">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+Line">
      <method name="Void .ctor()">
        <size>29</size>
      </method>
    </type>
    <type name="Test+Rectangle">
      <method name="Void .ctor()">
        <size>51</size>
      </method>
    </type>
    <type name="Test+Library">
      <method name="Void .ctor()">
        <size>53</size>
      </method>
    </type>
    <type name="Test+Thing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+Box">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-03.cs">
    <type name="Data">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Prop(Data)">
        <size>1</size>
      </method>
      <method name="System.Object Foo()">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-04.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>34</size>
      </method>
      <method name="Int32 Main()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-05.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>235</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-06.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>39</size>
      </method>
      <method name="Void Foo(Point ByRef)">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-07.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>8</size>
      </method>
      <method name="Boolean Matches(System.String)">
        <size>13</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-08.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Z[] get_Prop()">
        <size>7</size>
      </method>
      <method name="Void set_Prop(Z[])">
        <size>8</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor(String)">
        <size>70</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>70</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-09.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>53</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-10.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_P()">
        <size>7</size>
      </method>
      <method name="Void set_P(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
      <method name="Boolean Do(Foo)">
        <size>86</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-11.cs">
    <type name="InlineAssignmentTest.Foo">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
    </type>
    <type name="InlineAssignmentTest.MainClass">
      <method name="Int32 Main()">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-initialize-12.cs">
    <type name="C">
      <method name="Void set_Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void set_Foo(Int32)">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void set_Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-01.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="C+ArrayReadOnlyList`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T get_Item(Int32)">
        <size>13</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="C+ArrayReadOnlyList`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>142</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-02.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 Test()">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="KeyValuePair`2 System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-03.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="IEnumerable`1 Annotations[T]()">
        <size>23</size>
      </method>
      <method name="IEnumerable`1 Annotations(System.Type)">
        <size>37</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Test+&lt;Annotations&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>202</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test+&lt;Annotations&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>230</size>
      </method>
      <method name="Void Dispose()">
        <size>64</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Test+&lt;Annotations&gt;c__Iterator0`1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
    <type name="Test+&lt;Annotations&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-04.cs">
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ToString(System.Object)">
        <size>0</size>
      </method>
      <method name="IEnumerable`1 TestEnumerator()">
        <size>23</size>
      </method>
      <method name="Void Test()">
        <size>8</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="TestClass+&lt;TestEnumerator&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>37</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-05.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 TestRoutine[T](IEnumerable`1, Foo`1[T])">
        <size>44</size>
      </method>
      <method name="Void Main()">
        <size>31</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void CreateItem[G]()">
        <size>1</size>
      </method>
    </type>
    <type name="Test+&lt;TestRoutine&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>193</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-06.cs">
    <type name="Mono.Rocks.KeyValuePair">
      <method name="Nullable`1 Just[TKey,TValue](TKey, TValue)">
        <size>13</size>
      </method>
    </type>
    <type name="Mono.Rocks.Sequence">
      <method name="IEnumerable`1 Unfoldr[TSource,TResult](TSource, System.Func`2[TSource,System.Nullable`1[System.Collections.Generic.KeyValuePair`2[TResult,TSource]]])">
        <size>8</size>
      </method>
      <method name="IEnumerable`1 CreateUnfoldrIterator[TSource,TResult](TSource, System.Func`2[TSource,System.Nullable`1[System.Collections.Generic.KeyValuePair`2[TResult,TSource]]])">
        <size>44</size>
      </method>
    </type>
    <type name="Mono.Rocks.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>118</size>
      </method>
      <method name="Nullable`1 &lt;Main&gt;m__0(Int32)">
        <size>30</size>
      </method>
    </type>
    <type name="Mono.Rocks.Sequence+&lt;CreateUnfoldrIterator&gt;c__Iterator0`2[TSource,TResult]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>189</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="TResult System.Collections.Generic.IEnumerator&lt;TResult&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-07.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void TestFunction(IEnumerable`1)">
        <size>35</size>
      </method>
    </type>
    <type name="MySystem">
      <method name="Void .ctor()">
        <size>34</size>
      </method>
      <method name="IEnumerable`1 get_Items()">
        <size>23</size>
      </method>
    </type>
    <type name="MySystem+&lt;&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>193</size>
      </method>
      <method name="Void Dispose()">
        <size>64</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.String System.Collections.Generic.IEnumerator&lt;string&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;string&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-08.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable QueryEnumerable[T]()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>123</size>
      </method>
    </type>
    <type name="App+&lt;QueryEnumerable&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>90</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="App">
      <method name="T TestType[T]()">
        <size>21</size>
      </method>
      <method name="System.Object TestType(System.Type)">
        <size>6</size>
      </method>
    </type>
    <type name="App+&lt;QueryEnumerable&gt;c__Iterator0`1[T]">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-09.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 Create[T](T[,])">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>80</size>
      </method>
    </type>
    <type name="Test+&lt;Create&gt;c__Iterator0`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>136</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-10.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 FromTo(Int32, Int32)">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>163</size>
      </method>
    </type>
    <type name="Test+&lt;FromTo&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>52</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>109</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-11.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>8</size>
      </method>
    </type>
    <type name="Collection`1[T]">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Void Add(T)">
        <size>13</size>
      </method>
      <method name="IEnumerator`1 GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="BarCollection">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>143</size>
      </method>
    </type>
    <type name="Collection`1+&lt;GetEnumerator&gt;c__Iterator0[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>182</size>
      </method>
      <method name="Void Dispose()">
        <size>64</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-12.cs">
    <type name="H">
      <method name="Void Main(System.String[])">
        <size>1</size>
      </method>
      <method name="IEnumerable`1 Merge[T](IEnumerator`1)">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="H+&lt;Merge&gt;c__Iterator0`1[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>123</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-13.cs">
    <type name="C`1[T]">
      <method name="IEnumerator GetEnumerator()">
        <size>12</size>
      </method>
      <method name="IEnumerable`1 Filter(System.Func`2[T,System.Boolean])">
        <size>37</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>59</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+&lt;Filter&gt;c__Iterator0[T]">
      <method name="T System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()">
        <size>52</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>223</size>
      </method>
      <method name="Void Dispose()">
        <size>83</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-14.cs">
    <type name="A">
      <method name="Int32 get_BaseM()">
        <size>2</size>
      </method>
      <method name="Void set_BaseM(Int32)">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void set_BaseM(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="IEnumerable`1 GetIt()">
        <size>28</size>
      </method>
      <method name="Int32 &lt;GetHashCode&gt;__BaseCallProxy0()">
        <size>17</size>
      </method>
    </type>
    <type name="X">
      <method name="Void set_BaseM(Int32)">
        <size>11</size>
      </method>
      <method name="IEnumerable`1 GetIt()">
        <size>23</size>
      </method>
      <method name="Int32 Main()">
        <size>135</size>
      </method>
      <method name="Int32 &lt;get_BaseM&gt;__BaseCallProxy0()">
        <size>7</size>
      </method>
      <method name="Void &lt;set_BaseM&gt;__BaseCallProxy1(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S+&lt;GetIt&gt;c__Iterator0">
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>81</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator1">
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>92</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-15.cs">
    <type name="C`1[TFirst]">
      <method name="IEnumerable`1 GetEnumerable[V](IEnumerable`1)">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+VSlot`1[TFirst,T]">
      <method name="Void .ctor(T)">
        <size>8</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>111</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1+&lt;GetEnumerable&gt;c__Iterator0`1[TFirst,V]">
      <method name="V System.Collections.Generic.IEnumerator&lt;V&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;V&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>187</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-16.cs">
    <type name="Test.Base">
      <method name="IEnumerable`1 GetStuff(Int32)">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Derived">
      <method name="IEnumerable`1 GetStuff(Int32)">
        <size>37</size>
      </method>
      <method name="IEnumerable`1 &lt;GetStuff&gt;__BaseCallProxy0(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.SpecialDerived">
      <method name="IEnumerable`1 GetStuff(Int32)">
        <size>37</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
      <method name="IEnumerable`1 &lt;GetStuff&gt;__BaseCallProxy0(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Base+&lt;GetStuff&gt;c__Iterator0">
      <method name="Test.Base System.Collections.Generic.IEnumerator&lt;Test.Base&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Test.Base&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>76</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Derived+&lt;GetStuff&gt;c__Iterator1">
      <method name="Test.Base System.Collections.Generic.IEnumerator&lt;Test.Base&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Test.Base&gt;.GetEnumerator()">
        <size>52</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>193</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.SpecialDerived+&lt;GetStuff&gt;c__Iterator2">
      <method name="Test.Base System.Collections.Generic.IEnumerator&lt;Test.Base&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;Test.Base&gt;.GetEnumerator()">
        <size>52</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>193</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-17.cs">
    <type name="Test">
      <method name="IEnumerable`1 TestMethod()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;TestMethod&gt;c__Iterator0">
      <method name="Int32 System.Collections.Generic.IEnumerator&lt;int&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;int&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>40</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-18.cs">
    <type name="c">
      <method name="IEnumerable`1 func()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>53</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="c+&lt;func&gt;c__Iterator0">
      <method name="Char System.Collections.Generic.IEnumerator&lt;char&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>77</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-iter-19.cs">
    <type name="IEnumerableTransform">
      <method name="IEnumerable`1 Transform[TOut](IEnumerable`1, IEnumerableTransform+EmitterFunc`1[TOut])">
        <size>44</size>
      </method>
      <method name="IEnumerableTransform+EmitterFunc`1[TOut] Emit[TOut](TOut)">
        <size>26</size>
      </method>
      <method name="Int32 Main()">
        <size>51</size>
      </method>
    </type>
    <type name="IEnumerableTransform+EmitterFunc`1[TOut]">
      <method name="Void Invoke(TOut ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TOut ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(TOut ByRef, IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="IEnumerableTransform+&lt;Transform&gt;c__Iterator0`1[TOut]">
      <method name="TOut System.Collections.Generic.IEnumerator&lt;TOut&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;TOut&gt;.GetEnumerator()">
        <size>52</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>199</size>
      </method>
      <method name="Void Dispose()">
        <size>69</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="IEnumerableTransform+&lt;Emit&gt;c__AnonStorey1`1[TOut]">
      <method name="Void &lt;&gt;m__0(TOut ByRef)">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-01.cs">
    <type name="X">
      <method name="Int32 Main()">
        <size>300</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>4</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>4</size>
      </method>
      <method name="Void &lt;Main&gt;m__3(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>13</size>
      </method>
    </type>
    <type name="IntFunc">
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="VoidFunc">
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__2(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-02.cs">
    <type name="X">
      <method name="Void Foo(funci)">
        <size>16</size>
      </method>
      <method name="Void Foo(funcs)">
        <size>19</size>
      </method>
      <method name="Void Main()">
        <size>35</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(System.String)">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="funcs">
      <method name="System.String Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="funci">
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-03.cs">
    <type name="Demo">
      <method name="Y F[X,Y](Int32, X, Func`2[X,Y])">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>54</size>
      </method>
      <method name="TimeSpan &lt;Main&gt;m__0(System.String)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Func`2[TArg0,TResult]">
      <method name="TResult Invoke(TArg0)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TArg0, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TResult EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-04.cs">
    <type name="Demo">
      <method name="Z F[X,Y,Z](X, Func`2[X,Y], Func`2[Y,Z])">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>103</size>
      </method>
      <method name="TimeSpan &lt;Main&gt;m__0(System.String)">
        <size>7</size>
      </method>
      <method name="Double &lt;Main&gt;m__1(TimeSpan)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Func`2[TArg0,TResult]">
      <method name="TResult Invoke(TArg0)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TArg0, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TResult EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-05.cs">
    <type name="C">
      <method name="Boolean M(C+db)">
        <size>8</size>
      </method>
      <method name="System.String M(C+ds)">
        <size>6</size>
      </method>
      <method name="Int32 M(C+di)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>125</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(System.String)">
        <size>31</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>31</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+di">
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+ds">
      <method name="System.String Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+db">
      <method name="Boolean Invoke(Boolean)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Boolean, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="System.String &lt;&gt;m__2(System.String)">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey1">
      <method name="Int32 &lt;&gt;m__3(Int32)">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-06.cs">
    <type name="TestClass">
      <method name="Void P(TestClass+DT)">
        <size>26</size>
      </method>
      <method name="Void P(TestClass+DF)">
        <size>26</size>
      </method>
      <method name="T And(T, T)">
        <size>10</size>
      </method>
      <method name="F And(T, F)">
        <size>10</size>
      </method>
      <method name="F And(F, T)">
        <size>10</size>
      </method>
      <method name="F And(F, F)">
        <size>10</size>
      </method>
      <method name="T Or(T, T)">
        <size>10</size>
      </method>
      <method name="T Or(T, F)">
        <size>10</size>
      </method>
      <method name="T Or(F, T)">
        <size>10</size>
      </method>
      <method name="F Or(F, F)">
        <size>10</size>
      </method>
      <method name="F Not(T)">
        <size>10</size>
      </method>
      <method name="T Not(F)">
        <size>10</size>
      </method>
      <method name="Void StopTrue(T)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void &lt;Main&gt;m__0(F)">
        <size>31</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestClass+DT">
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="TestClass+DF">
      <method name="Void Invoke(F)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(F, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="TestClass+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__1(T)">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestClass+&lt;Main&gt;c__AnonStorey0+&lt;Main&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__2(F)">
        <size>77</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-07.cs">
    <type name="C">
      <method name="Void Test(D)">
        <size>1</size>
      </method>
      <method name="Void Test(System.Object, D)">
        <size>1</size>
      </method>
      <method name="Void Test(D, D)">
        <size>1</size>
      </method>
      <method name="Void Test2(System.Object, E)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>207</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__1()">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__2()">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__3()">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__4()">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__5(Boolean)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="E">
      <method name="Void Invoke(Boolean)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Boolean, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-08.cs">
    <type name="C">
      <method name="Void Test[T,R](System.Func`2[T,R])">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>321</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>4</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__1(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32)">
        <size>4</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__3(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__4(Int32)">
        <size>4</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__5(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__6(Int32)">
        <size>4</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-09.cs">
    <type name="C">
      <method name="IEnumerable`1 Test[T](T)">
        <size>2</size>
      </method>
      <method name="IEnumerable`1 Test[T](Func`1[T])">
        <size>2</size>
      </method>
      <method name="IEnumerable`1 Test2[T](Func`2[T,T])">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>113</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0()">
        <size>6</size>
      </method>
      <method name="System.String &lt;Main&gt;m__1()">
        <size>6</size>
      </method>
      <method name="System.String &lt;Main&gt;m__2(System.String)">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Func`1[TD]">
      <method name="TD Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TD EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Func`2[TA,TR]">
      <method name="TR Invoke(TA)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TA, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TR EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-10.cs">
    <type name="C">
      <method name="Void Foo[TSource](IEnumerable`1)">
        <size>1</size>
      </method>
      <method name="Void Foo[TCollection,TSource](IEnumerable`1, System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]])">
        <size>1</size>
      </method>
      <method name="Void Foo[TCollection,TSource](IEnumerable`1, System.Func`3[TSource,TCollection[],System.Collections.Generic.IEnumerable`1[TCollection]])">
        <size>1</size>
      </method>
      <method name="Void Foo[TCollection,TSource](System.Func`2[TCollection[],System.Collections.Generic.IEnumerable`1[TSource]])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>97</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="IEnumerable`1 &lt;&gt;m__0(Int32)">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__1(Int32, System.Int32[])">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__2(System.Int32[])">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-11.cs">
    <type name="Pair`2[T1,T2]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Foo[TInput,TValue,TIntermediate](Group`2[TInput,TValue], System.Func`2[TValue,Group`2[TInput,TIntermediate]])">
        <size>1</size>
      </method>
    </type>
    <type name="E`1[TI]">
      <method name="Void Rep1[TV](Group`2[TI,TV])">
        <size>37</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Group`2[T1,T2]">
      <method name="Pair`2[T1,T2] Invoke(T1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Pair`2[T1,T2] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="E`1+&lt;Rep1&gt;c__AnonStorey0`1[TI,TV]">
      <method name="Group`2[TI,TV] &lt;&gt;m__0(TV)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-12.cs">
    <type name="Demo">
      <method name="Void F[T](T[], T, Func`1[T])">
        <size>42</size>
      </method>
      <method name="Int32 Main()">
        <size>65</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Func`1[TA]">
      <method name="Void Invoke(TA)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(TA, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Demo+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0(Int32)">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-13.cs">
    <type name="TestUnary">
      <method name="Void Foo(System.Action`1[System.Int32])">
        <size>1</size>
      </method>
      <method name="Void Bar()">
        <size>35</size>
      </method>
      <method name="Void &lt;Bar&gt;m__0(Int32)">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Foo(System.Action`1[System.String])">
        <size>12</size>
      </method>
      <method name="T Foo[T](System.Func`2[System.String,T])">
        <size>12</size>
      </method>
      <method name="System.String Bar()">
        <size>35</size>
      </method>
      <method name="Void Main()">
        <size>76</size>
      </method>
      <method name="System.String &lt;Bar&gt;m__1(System.String)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__2(System.String)">
        <size>2</size>
      </method>
      <method name="Void &lt;Main&gt;m__3(System.String)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-14.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Foo[T]()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T &lt;Foo`1&gt;m__0[T](T)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-15.cs">
    <type name="Enumerable">
      <method name="Int32 Sum[TSource](IEnumerable`1, System.Func`2[TSource,System.Int32])">
        <size>32</size>
      </method>
      <method name="TR Sum[TA,TR](IEnumerable`1, System.Func`3[TR,TA,TR])">
        <size>123</size>
      </method>
    </type>
    <type name="Repro">
      <method name="Int32 Main()">
        <size>115</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(System.String)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Enumerable+&lt;Sum&gt;c__AnonStorey0`1[TSource]">
      <method name="Int32 &lt;&gt;m__0(Int32, TSource)">
        <size>15</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-16.cs">
    <type name="Repro">
      <method name="Void AssertFoo[T](IList`1)">
        <size>34</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Repro+Runner`1[T]">
      <method name="Void .ctor(Action`1, T)">
        <size>7</size>
      </method>
    </type>
    <type name="Repro+&lt;AssertFoo&gt;c__AnonStorey0`1[T]">
      <method name="Void &lt;&gt;m__0(Int32)">
        <size>54</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-17.cs">
    <type name="TestCase">
      <method name="Void Testing()">
        <size>75</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void &lt;Testing&gt;m__0()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-18.cs">
    <type name="Test">
      <method name="Void Foo[T1,T2,TResult](T1, T2, System.Func`3[T1,T2,TResult])">
        <size>33</size>
      </method>
      <method name="Void Bar[T1,T2,TResult](T1, T2, System.Func`4[T1,T2,System.Int32,TResult])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test+&lt;Foo&gt;c__AnonStorey0`3[T1,T2,TResult]">
      <method name="TResult &lt;&gt;m__0(T1, T2, Int32)">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-19.cs">
    <type name="Crasher">
      <method name="Void Crash()">
        <size>36</size>
      </method>
      <method name="Void Do(System.Action)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Crasher+&lt;Crash&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-20.cs">
    <type name="Z">
      <method name="Void &lt;Z&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>37</size>
      </method>
    </type>
    <type name="Test">
      <method name="Boolean Foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestMethod">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-21.cs">
    <type name="Program">
      <method name="Void Foo(System.Action`1[System.String])">
        <size>12</size>
      </method>
      <method name="T Foo[T](System.Func`2[System.String,T])">
        <size>12</size>
      </method>
      <method name="System.String Bar()">
        <size>35</size>
      </method>
      <method name="Int32 Main()">
        <size>95</size>
      </method>
      <method name="System.String &lt;Bar&gt;m__0(System.String)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__1(System.String)">
        <size>2</size>
      </method>
      <method name="Void &lt;Main&gt;m__2(System.String)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-22.cs">
    <type name="Product">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void Main()">
        <size>136</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Product)">
        <size>7</size>
      </method>
      <method name="Product &lt;Main&gt;m__1(Product)">
        <size>2</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Linq.IGrouping`2[System.Int32,Product],System.Collections.Generic.IEnumerable`1[Product]] &lt;Main&gt;m__2(IGrouping`2)">
        <size>48</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;g&gt;__T,&lt;ExpensiveProducts&gt;__T]">
      <method name="&lt;g&gt;__T get_g()">
        <size>7</size>
      </method>
      <method name="&lt;ExpensiveProducts&gt;__T get_ExpensiveProducts()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;g&gt;__T, &lt;ExpensiveProducts&gt;__T)">
        <size>21</size>
      </method>
    </type>
    <type name="MainClass+&lt;Main&gt;c__AnonStorey0">
      <method name="Boolean &lt;&gt;m__3(Product)">
        <size>52</size>
      </method>
      <method name="Decimal &lt;&gt;m__4(Product)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-23.cs">
    <type name="C">
      <method name="U Test[T,U](T[], System.Func`2[T,U])">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>77</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(System.String)">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-24.cs">
    <type name="E">
      <method name="System.String Test[T](C, T, System.Func`1[T])">
        <size>6</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Test[T](T, System.Func`1[System.Boolean])">
        <size>2</size>
      </method>
      <method name="System.String Foo[T](T, System.Action`1[T])">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>42</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0(System.String)">
        <size>24</size>
      </method>
      <method name="Void &lt;&gt;m__1(System.String)">
        <size>47</size>
      </method>
      <method name="System.String &lt;&gt;m__2()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-25.cs">
    <type name="MonoBugs.Bar">
      <method name="Void DoStuff[T](T, System.Action`1[T])">
        <size>11</size>
      </method>
      <method name="Void DoStuff[T](Nullable`1, System.Action`1[T])">
        <size>14</size>
      </method>
    </type>
    <type name="MonoBugs.Program">
      <method name="Void Main()">
        <size>59</size>
      </method>
      <method name="Void &lt;Main&gt;m__0(Foo`1)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-26.cs">
    <type name="C">
      <method name="Void Main()">
        <size>35</size>
      </method>
      <method name="Void Execute(System.Action)">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-lambda-27.cs">
    <type name="MainClass">
      <method name="Void Main()">
        <size>71</size>
      </method>
      <method name="T[] Test1[T](System.Func`2[IB,T[]])">
        <size>2</size>
      </method>
      <method name="IA`1[T][] Test2[T](System.Func`2[IB,IA`1[T][]])">
        <size>2</size>
      </method>
      <method name="System.String[] &lt;Main&gt;m__0(IB)">
        <size>7</size>
      </method>
      <method name="IA`1[System.String][] &lt;Main&gt;m__1(IB)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-01.cs">
    <type name="from.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>2180</size>
      </method>
      <method name="Void Foo(Int32, Boolean)">
        <size>11</size>
      </method>
      <method name="Void Do(System.String[])">
        <size>16</size>
      </method>
    </type>
    <type name="from.D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean check(System.Object, System.Object)">
        <size>26</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;i&gt;__T,&lt;j&gt;__T]">
      <method name="Void .ctor(&lt;i&gt;__T, &lt;j&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;i&gt;__T get_i()">
        <size>7</size>
      </method>
      <method name="&lt;j&gt;__T get_j()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;i&gt;__T,&lt;l&gt;__T]">
      <method name="Void .ctor(&lt;i&gt;__T, &lt;l&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;i&gt;__T get_i()">
        <size>7</size>
      </method>
      <method name="&lt;l&gt;__T get_l()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType3`2[&lt;i9&gt;__T,&lt;i&gt;__T]">
      <method name="Void .ctor(&lt;i9&gt;__T, &lt;i&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;i9&gt;__T get_i9()">
        <size>7</size>
      </method>
      <method name="&lt;i&gt;__T get_i()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="from.C">
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>2</size>
      </method>
      <method name="Nullable`1 &lt;Main&gt;m__2(Nullable`1)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="from.C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__4(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="from.C">
      <method name="Int32 &lt;Main&gt;m__5(Int32, Int32)">
        <size>2</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__6(Int32)">
        <size>10</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__7(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__8(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__9(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__A(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__B(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__C(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1B(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1E(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__20(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__21(Int32)">
        <size>2</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.Int32,System.Int32] &lt;Main&gt;m__25(Int32)">
        <size>10</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__39(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType2`2[&lt;&lt;&gt;__TranspIdent2&gt;__T,&lt;l2&gt;__T]">
      <method name="&lt;&lt;&gt;__TranspIdent2&gt;__T get_&lt;&gt;__TranspIdent2()">
        <size>7</size>
      </method>
      <method name="&lt;l2&gt;__T get_l2()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;&lt;&gt;__TranspIdent2&gt;__T, &lt;l2&gt;__T)">
        <size>21</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType4`2[&lt;&lt;&gt;__TranspIdent7&gt;__T,&lt;l2&gt;__T]">
      <method name="&lt;&lt;&gt;__TranspIdent7&gt;__T get_&lt;&gt;__TranspIdent7()">
        <size>7</size>
      </method>
      <method name="&lt;l2&gt;__T get_l2()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;&lt;&gt;__TranspIdent7&gt;__T, &lt;l2&gt;__T)">
        <size>21</size>
      </method>
    </type>
    <type name="from.C">
      <method name="Int32 &lt;Main&gt;m__D(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__E(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__F(ITest)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__10(Int32, ITest)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__11(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__12(ITest)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__13(Int32, ITest)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__14(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__15(ITest)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,from.ITest] &lt;Main&gt;m__16(Int32, ITest)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__17(&lt;&gt;__AnonType0`2[System.Int32,from.ITest])">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__18(ITest)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__19(&lt;&gt;__AnonType0`2[System.Int32,from.ITest], ITest)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1A(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1C(Int32, IEnumerable`1)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1D(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1F(Int32, IEnumerable`1)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__22(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__23(Int32)">
        <size>2</size>
      </method>
      <method name="IGrouping`2 &lt;Main&gt;m__24(IGrouping`2)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__26(&lt;&gt;__AnonType1`2[System.Int32,System.Int32])">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.Int32,System.Int32] &lt;Main&gt;m__27(Int32)">
        <size>10</size>
      </method>
      <method name="&lt;&gt;__AnonType2`2[&lt;&gt;__AnonType1`2[System.Int32,System.Int32],System.Int32] &lt;Main&gt;m__28(&lt;&gt;__AnonType1`2[System.Int32,System.Int32])">
        <size>15</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__29(&lt;&gt;__AnonType2`2[&lt;&gt;__AnonType1`2[System.Int32,System.Int32],System.Int32])">
        <size>12</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2A(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2B(Int32)">
        <size>2</size>
      </method>
      <method name="&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32] &lt;Main&gt;m__2D(IGrouping`2, Int32)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2E(&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32])">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2F(&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32])">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32] &lt;Main&gt;m__31(IGrouping`2, Int32)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__32(&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32])">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__33(&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32])">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32] &lt;Main&gt;m__35(IGrouping`2, Int32)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__36(&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32])">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__37(&lt;&gt;__AnonType3`2[System.Linq.IGrouping`2[System.Int32,System.Int32],System.Int32])">
        <size>7</size>
      </method>
      <method name="IGrouping`2 &lt;Main&gt;m__38(IGrouping`2)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3A(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3B(Int32)">
        <size>2</size>
      </method>
      <method name="&lt;&gt;__AnonType4`2[&lt;&gt;__AnonType1`2[System.Int32,System.Collections.Generic.IEnumerable`1[System.Int32]],System.Int32] &lt;Main&gt;m__3D(&lt;&gt;__AnonType1`2[System.Int32,System.Collections.Generic.IEnumerable`1[System.Int32]])">
        <size>9</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3E(&lt;&gt;__AnonType4`2[&lt;&gt;__AnonType1`2[System.Int32,System.Collections.Generic.IEnumerable`1[System.Int32]],System.Int32])">
        <size>2</size>
      </method>
    </type>
    <type name="from.C+&lt;Main&gt;c__AnonStorey0">
      <method name="IEnumerable`1 &lt;&gt;m__2C(IGrouping`2)">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__30(IGrouping`2)">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__34(IGrouping`2)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.Int32,System.Collections.Generic.IEnumerable`1[System.Int32]] &lt;&gt;m__3C(Int32)">
        <size>47</size>
      </method>
      <method name="Int32 &lt;&gt;m__3F(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-02.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>507</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>3</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3(Int32)">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-03.cs">
    <type name="WhereTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__0(Int32)">
        <size>5</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__1(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32)">
        <size>4</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-04.cs">
    <type name="TestGroupBy">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>559</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>4</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32)">
        <size>4</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-05.cs">
    <type name="OrderByTests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>1254</size>
      </method>
    </type>
    <type name="OrderByTests+Data">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_ID()">
        <size>7</size>
      </method>
      <method name="Void set_ID(Int32)">
        <size>8</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>8</size>
      </method>
      <method name="System.String ToString()">
        <size>28</size>
      </method>
    </type>
    <type name="OrderByTests">
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3(Int32)">
        <size>4</size>
      </method>
      <method name="System.String &lt;Main&gt;m__4(System.String)">
        <size>2</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__5(System.String)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__6(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__7(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__8(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__9(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__A(OrderByTests+Data)">
        <size>11</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__B(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__C(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__D(OrderByTests+Data)">
        <size>11</size>
      </method>
      <method name="System.String &lt;Main&gt;m__E(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__F(OrderByTests+Data)">
        <size>7</size>
      </method>
      <method name="OrderByTests+Data &lt;Main&gt;m__10(OrderByTests+Data)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-06.cs">
    <type name="Let">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>408</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;i&gt;__T,&lt;u&gt;__T]">
      <method name="Void .ctor(&lt;i&gt;__T, &lt;u&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;i&gt;__T get_i()">
        <size>7</size>
      </method>
      <method name="&lt;u&gt;__T get_u()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="Let">
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.Int32] &lt;Main&gt;m__0(Int32)">
        <size>10</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(&lt;&gt;__AnonType0`2[System.Int32,System.Int32])">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.Int32] &lt;Main&gt;m__2(Int32)">
        <size>10</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[&lt;&gt;__AnonType0`2[System.Int32,System.Int32],System.Int32] &lt;Main&gt;m__3(&lt;&gt;__AnonType0`2[System.Int32,System.Int32])">
        <size>15</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__4(&lt;&gt;__AnonType1`2[&lt;&gt;__AnonType0`2[System.Int32,System.Int32],System.Int32])">
        <size>18</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__5(&lt;&gt;__AnonType1`2[&lt;&gt;__AnonType0`2[System.Int32,System.Int32],System.Int32])">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;&lt;&gt;__TranspIdent1&gt;__T,&lt;v&gt;__T]">
      <method name="Void .ctor(&lt;&lt;&gt;__TranspIdent1&gt;__T, &lt;v&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;&lt;&gt;__TranspIdent1&gt;__T get_&lt;&gt;__TranspIdent1()">
        <size>7</size>
      </method>
      <method name="&lt;v&gt;__T get_v()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-07.cs">
    <type name="SelectMany">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>748</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;i1&gt;__T,&lt;i2&gt;__T]">
      <method name="Void .ctor(&lt;i1&gt;__T, &lt;i2&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;i1&gt;__T get_i1()">
        <size>7</size>
      </method>
      <method name="&lt;i2&gt;__T get_i2()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType2`3[&lt;pp&gt;__T,&lt;i1&gt;__T,&lt;i3&gt;__T]">
      <method name="Void .ctor(&lt;pp&gt;__T, &lt;i1&gt;__T, &lt;i3&gt;__T)">
        <size>28</size>
      </method>
      <method name="&lt;pp&gt;__T get_pp()">
        <size>7</size>
      </method>
      <method name="&lt;i1&gt;__T get_i1()">
        <size>7</size>
      </method>
      <method name="&lt;i3&gt;__T get_i3()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>96</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>109</size>
      </method>
      <method name="System.String ToString()">
        <size>199</size>
      </method>
    </type>
    <type name="SelectMany+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__0(Int32)">
        <size>12</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__3(Int32)">
        <size>12</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__5(&lt;&gt;__AnonType0`2[System.Int32,System.String])">
        <size>12</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__9(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="SelectMany">
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.String] &lt;Main&gt;m__1(Int32, System.String)">
        <size>8</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__2(Int32)">
        <size>5</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.String] &lt;Main&gt;m__4(Int32, System.String)">
        <size>8</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[&lt;&gt;__AnonType0`2[System.Int32,System.String],System.Int32] &lt;Main&gt;m__6(&lt;&gt;__AnonType0`2[System.Int32,System.String], Int32)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__7(&lt;&gt;__AnonType1`2[&lt;&gt;__AnonType0`2[System.Int32,System.String],System.Int32])">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType2`3[System.Int32,System.Int32,System.Int32] &lt;Main&gt;m__8(&lt;&gt;__AnonType1`2[&lt;&gt;__AnonType0`2[System.Int32,System.String],System.Int32])">
        <size>25</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.String] &lt;Main&gt;m__A(Int32, System.String)">
        <size>8</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;&lt;&gt;__TranspIdent0&gt;__T,&lt;i3&gt;__T]">
      <method name="&lt;&lt;&gt;__TranspIdent0&gt;__T get_&lt;&gt;__TranspIdent0()">
        <size>7</size>
      </method>
      <method name="&lt;i3&gt;__T get_i3()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;&lt;&gt;__TranspIdent0&gt;__T, &lt;i3&gt;__T)">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-08.cs">
    <type name="TestA">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="System.String Select[U](System.Func`2[TestA,U])">
        <size>7</size>
      </method>
    </type>
    <type name="TestB">
      <method name="TestA Where(TestA, System.Func`2[TestA,System.Boolean])">
        <size>25</size>
      </method>
    </type>
    <type name="CustomQueryExpressionPattern">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>153</size>
      </method>
      <method name="TestA &lt;Main&gt;m__0(TestA)">
        <size>2</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__1(TestA)">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-09.cs">
    <type name="Data">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Join">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>911</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`1[&lt;Result&gt;__T]">
      <method name="Void .ctor(&lt;Result&gt;__T)">
        <size>14</size>
      </method>
      <method name="&lt;Result&gt;__T get_Result()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>63</size>
      </method>
      <method name="System.String ToString()">
        <size>67</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;a&gt;__T,&lt;b&gt;__T]">
      <method name="Void .ctor(&lt;a&gt;__T, &lt;b&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;a&gt;__T get_a()">
        <size>7</size>
      </method>
      <method name="&lt;b&gt;__T get_b()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="Join">
      <method name="Int32 &lt;Main&gt;m__0(Data)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Data)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`1[System.String] &lt;Main&gt;m__2(Data, Data)">
        <size>23</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3(Data)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__4(Data)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[Data,Data] &lt;Main&gt;m__5(Data, Data)">
        <size>8</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__6(&lt;&gt;__AnonType1`2[Data,Data])">
        <size>22</size>
      </method>
      <method name="&lt;&gt;__AnonType0`1[System.String] &lt;Main&gt;m__7(&lt;&gt;__AnonType1`2[Data,Data])">
        <size>33</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__8(Data)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__9(Data)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`1[System.String] &lt;Main&gt;m__A(Data, Data)">
        <size>23</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__B(Data)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__C(Data)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[Data,Data] &lt;Main&gt;m__D(Data, Data)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__E(&lt;&gt;__AnonType1`2[Data,Data])">
        <size>12</size>
      </method>
      <method name="Data &lt;Main&gt;m__F(&lt;&gt;__AnonType1`2[Data,Data])">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-10.cs">
    <type name="DataA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="DataB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="GroupJoin">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>734</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;a&gt;__T,&lt;ab&gt;__T]">
      <method name="Void .ctor(&lt;a&gt;__T, &lt;ab&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;a&gt;__T get_a()">
        <size>7</size>
      </method>
      <method name="&lt;ab&gt;__T get_ab()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;a&gt;__T,&lt;b&gt;__T]">
      <method name="Void .ctor(&lt;a&gt;__T, &lt;b&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;a&gt;__T get_a()">
        <size>7</size>
      </method>
      <method name="&lt;b&gt;__T get_b()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="GroupJoin">
      <method name="Int32 &lt;Main&gt;m__0(DataA)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(DataB)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[DataA,System.Collections.Generic.IEnumerable`1[DataB]] &lt;Main&gt;m__2(DataA, IEnumerable`1)">
        <size>8</size>
      </method>
      <method name="IEnumerable`1 &lt;Main&gt;m__3(&lt;&gt;__AnonType0`2[DataA,System.Collections.Generic.IEnumerable`1[DataB]])">
        <size>12</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.String,System.String] &lt;Main&gt;m__4(&lt;&gt;__AnonType0`2[DataA,System.Collections.Generic.IEnumerable`1[DataB]], DataB)">
        <size>39</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__5(DataA)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__6(DataB)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[DataA,System.Collections.Generic.IEnumerable`1[DataB]] &lt;Main&gt;m__7(DataA, IEnumerable`1)">
        <size>8</size>
      </method>
      <method name="IEnumerable`1 &lt;Main&gt;m__8(&lt;&gt;__AnonType0`2[DataA,System.Collections.Generic.IEnumerable`1[DataB]])">
        <size>12</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.String,System.String] &lt;Main&gt;m__9(&lt;&gt;__AnonType0`2[DataA,System.Collections.Generic.IEnumerable`1[DataB]], DataB)">
        <size>39</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__A(DataA)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__B(DataB)">
        <size>7</size>
      </method>
      <method name="DataA &lt;Main&gt;m__C(DataA, IEnumerable`1)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-11.cs">
    <type name="IntoTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>275</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__0(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(Int32)">
        <size>4</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__3(Int32)">
        <size>5</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__4(Int32)">
        <size>4</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-12.cs">
    <type name="NestedQuery">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void XX()">
        <size>108</size>
      </method>
      <method name="Int32 Main()">
        <size>472</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;values&gt;__T,&lt;length&gt;__T]">
      <method name="Void .ctor(&lt;values&gt;__T, &lt;length&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;values&gt;__T get_values()">
        <size>7</size>
      </method>
      <method name="&lt;length&gt;__T get_length()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;type&gt;__T,&lt;x&gt;__T]">
      <method name="Void .ctor(&lt;type&gt;__T, &lt;x&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;type&gt;__T get_type()">
        <size>7</size>
      </method>
      <method name="&lt;x&gt;__T get_x()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="NestedQuery">
      <method name="&lt;&gt;__AnonType0`2[System.String,System.Int32] &lt;XX&gt;m__0(System.String)">
        <size>13</size>
      </method>
    </type>
    <type name="NestedQuery+&lt;XX&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="NestedQuery+&lt;Main&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="NestedQuery">
      <method name="IEnumerable`1 &lt;XX&gt;m__1(&lt;&gt;__AnonType0`2[System.String,System.Int32])">
        <size>110</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__2(System.String)">
        <size>10</size>
      </method>
      <method name="IEnumerable`1 &lt;Main&gt;m__3(System.String)">
        <size>36</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.String,System.Int32] &lt;Main&gt;m__4(System.String)">
        <size>13</size>
      </method>
      <method name="IEnumerable`1 &lt;Main&gt;m__5(&lt;&gt;__AnonType0`2[System.String,System.Int32])">
        <size>110</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.Char,System.Int32] &lt;XX&gt;m__6(Char)">
        <size>9</size>
      </method>
      <method name="Char &lt;XX&gt;m__8(&lt;&gt;__AnonType1`2[System.Char,System.Int32])">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__9(Char)">
        <size>6</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.Char,System.Int32] &lt;Main&gt;m__A(Char)">
        <size>9</size>
      </method>
      <method name="Char &lt;Main&gt;m__C(&lt;&gt;__AnonType1`2[System.Char,System.Int32])">
        <size>7</size>
      </method>
    </type>
    <type name="NestedQuery+&lt;XX&gt;c__AnonStorey0">
      <method name="Boolean &lt;&gt;m__7(&lt;&gt;__AnonType1`2[System.Char,System.Int32])">
        <size>15</size>
      </method>
    </type>
    <type name="NestedQuery+&lt;Main&gt;c__AnonStorey1">
      <method name="Boolean &lt;&gt;m__B(&lt;&gt;__AnonType1`2[System.Char,System.Int32])">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-13.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Foo(TypeDefinition)">
        <size>47</size>
      </method>
      <method name="MethodDefinition &lt;Foo&gt;m__0(MethodDefinition)">
        <size>2</size>
      </method>
    </type>
    <type name="Extension">
      <method name="IEnumerable`1 Cast[T](IFoo)">
        <size>2</size>
      </method>
    </type>
    <type name="MethodDefinition">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TypeDefinition">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="MethodDefinitionCollection get_Methods()">
        <size>2</size>
      </method>
      <method name="Void set_Methods(MethodDefinitionCollection)">
        <size>1</size>
      </method>
    </type>
    <type name="MethodDefinitionCollection">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-14.cs">
    <type name="Person">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Style get_Style()">
        <size>7</size>
      </method>
      <method name="Void set_Style(Style)">
        <size>8</size>
      </method>
    </type>
    <type name="Extensions">
      <method name="IMarker`1 Cast[T](IObjectContainer)">
        <size>2</size>
      </method>
      <method name="IMarker`1 Where[T](IMarker`1, System.Linq.Expressions.Expression`1[System.Func`2[T,System.Boolean]])">
        <size>2</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Assert(System.Action)">
        <size>1</size>
      </method>
      <method name="Void Test(IObjectContainer, Style)">
        <size>38</size>
      </method>
    </type>
    <type name="Program+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>117</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-15.cs">
    <type name="NameCollisionTest.Data">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="NameCollisionTest.Ex">
      <method name="IEnumerable`1 Foo[T,TR](IEnumerable`1, System.Func`2[T,TR])">
        <size>44</size>
      </method>
    </type>
    <type name="NameCollisionTest.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>78</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(NameCollisionTest.Data)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__1(Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="NameCollisionTest.Ex+&lt;Foo&gt;c__Iterator0`2[T,TR]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>12</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>92</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="TR System.Collections.Generic.IEnumerator&lt;TR&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;TR&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-16.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void Test_1(Int32)">
        <size>27</size>
      </method>
      <method name="Void Test_2()">
        <size>31</size>
      </method>
      <method name="System.Func`1[System.Collections.Generic.IEnumerable`1[System.Int32]] &lt;Test_2&gt;m__1(Int32)">
        <size>26</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;a&gt;__T,&lt;b&gt;__T]">
      <method name="Void .ctor(&lt;a&gt;__T, &lt;b&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;a&gt;__T get_a()">
        <size>7</size>
      </method>
      <method name="&lt;b&gt;__T get_b()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="C+&lt;Test_1&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__0()">
        <size>67</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.Int32] &lt;&gt;m__3(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;&gt;m__4(&lt;&gt;__AnonType0`2[System.Int32,System.Int32])">
        <size>14</size>
      </method>
    </type>
    <type name="C+&lt;Test_2&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable`1 &lt;&gt;m__2()">
        <size>67</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.Int32] &lt;&gt;m__5(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;&gt;m__6(&lt;&gt;__AnonType0`2[System.Int32,System.Int32])">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-17.cs">
    <type name="TestGroupBy">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>157</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-18.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test(System.Func`2[System.Int32,System.Boolean])">
        <size>2</size>
      </method>
      <method name="Boolean Test2(System.Func`2[System.Int32,System.Int32])">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>648</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.Boolean] &lt;Main&gt;m__0(Int32)">
        <size>42</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__1(&lt;&gt;__AnonType0`2[System.Int32,System.Boolean])">
        <size>11</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__2(&lt;&gt;__AnonType0`2[System.Int32,System.Boolean])">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__3(Int32)">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__4(Int32)">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__5(Int32)">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__6(Int32)">
        <size>31</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[System.Int32,System.Int32] &lt;Main&gt;m__7(Int32)">
        <size>10</size>
      </method>
      <method name="&lt;&gt;__AnonType2`2[&lt;&gt;__AnonType1`2[System.Int32,System.Int32],System.Int32] &lt;Main&gt;m__8(&lt;&gt;__AnonType1`2[System.Int32,System.Int32])">
        <size>15</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__9(&lt;&gt;__AnonType2`2[&lt;&gt;__AnonType1`2[System.Int32,System.Int32],System.Int32])">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__A(&lt;&gt;__AnonType2`2[&lt;&gt;__AnonType1`2[System.Int32,System.Int32],System.Int32])">
        <size>15</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__B(&lt;&gt;__AnonType2`2[&lt;&gt;__AnonType1`2[System.Int32,System.Int32],System.Int32])">
        <size>12</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;ck&gt;__T,&lt;xy&gt;__T]">
      <method name="Void .ctor(&lt;ck&gt;__T, &lt;xy&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;ck&gt;__T get_ck()">
        <size>7</size>
      </method>
      <method name="&lt;xy&gt;__T get_xy()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;i&gt;__T,&lt;l&gt;__T]">
      <method name="Void .ctor(&lt;i&gt;__T, &lt;l&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;i&gt;__T get_i()">
        <size>7</size>
      </method>
      <method name="&lt;l&gt;__T get_l()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey5">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey6">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Boolean &lt;Main&gt;m__C(Int32)">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__D(Int32)">
        <size>31</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__E(Int32, Int32)">
        <size>2</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__F(Int32)">
        <size>31</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__10(Int32)">
        <size>31</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__11(Int32, IEnumerable`1)">
        <size>2</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType2`2[&lt;&lt;&gt;__TranspIdent1&gt;__T,&lt;g&gt;__T]">
      <method name="Void .ctor(&lt;&lt;&gt;__TranspIdent1&gt;__T, &lt;g&gt;__T)">
        <size>21</size>
      </method>
      <method name="&lt;&lt;&gt;__TranspIdent1&gt;__T get_&lt;&gt;__TranspIdent1()">
        <size>7</size>
      </method>
      <method name="&lt;g&gt;__T get_g()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Boolean &lt;&gt;m__12(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey1">
      <method name="Boolean &lt;&gt;m__13(Int32)">
        <size>15</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey2">
      <method name="Boolean &lt;&gt;m__14(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey3">
      <method name="Boolean &lt;&gt;m__15(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey4">
      <method name="Int32 &lt;&gt;m__16(Int32)">
        <size>9</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey5">
      <method name="Int32 &lt;&gt;m__17(Int32)">
        <size>9</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey6">
      <method name="Boolean &lt;&gt;m__18(Int32)">
        <size>20</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey7">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__19(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey8">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__1A(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey9">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__1B(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStoreyA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__1C(Int32)">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-19.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>45</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Char &lt;E&gt;m__0(Char)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-20.cs">
    <type name="Maybe`1[T]">
      <method name="T get_Value()">
        <size>7</size>
      </method>
      <method name="Void set_Value(T)">
        <size>8</size>
      </method>
      <method name="Boolean get_HasValue()">
        <size>7</size>
      </method>
      <method name="Void set_HasValue(Boolean)">
        <size>8</size>
      </method>
      <method name="System.String ToString()">
        <size>38</size>
      </method>
      <method name="Maybe`1[U] SelectMany[U](System.Func`2[T,Maybe`1[U]])">
        <size>30</size>
      </method>
      <method name="Maybe`1[V] SelectMany[U,V](System.Func`2[T,Maybe`1[U]], System.Func`3[T,U,V])">
        <size>71</size>
      </method>
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Void .ctor(T)">
        <size>21</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="MaybeExtensions">
      <method name="Maybe`1[T] ToMaybe[T](T)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>138</size>
      </method>
      <method name="Maybe`1[System.Int32] &lt;Main&gt;m__0(Int32)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.Int32,System.Int32] &lt;Main&gt;m__1(Int32, Int32)">
        <size>8</size>
      </method>
      <method name="Maybe`1[System.Int32] &lt;Main&gt;m__2(&lt;&gt;__AnonType0`2[System.Int32,System.Int32])">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__3(&lt;&gt;__AnonType0`2[System.Int32,System.Int32], Int32)">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;x&gt;__T,&lt;y&gt;__T]">
      <method name="&lt;x&gt;__T get_x()">
        <size>7</size>
      </method>
      <method name="&lt;y&gt;__T get_y()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;x&gt;__T, &lt;y&gt;__T)">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-21.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>90</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey0">
      <method name="IEnumerable`1 &lt;&gt;m__0(Int32)">
        <size>7</size>
      </method>
      <method name="System.Action &lt;&gt;m__1(Int32, Int32)">
        <size>40</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey0+&lt;Main&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__2()">
        <size>49</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-22.cs">
    <type name="Test.MainClass">
      <method name="Void Main()">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;item&gt;__T,&lt;parsed&gt;__T]">
      <method name="&lt;item&gt;__T get_item()">
        <size>7</size>
      </method>
      <method name="&lt;parsed&gt;__T get_parsed()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;item&gt;__T, &lt;parsed&gt;__T)">
        <size>21</size>
      </method>
    </type>
    <type name="Test.MainClass+&lt;Main&gt;c__AnonStorey0">
      <method name="&lt;&gt;__AnonType0`2[System.Char,System.Boolean] &lt;&gt;m__0(Char)">
        <size>23</size>
      </method>
      <method name="DateTime &lt;&gt;m__1(&lt;&gt;__AnonType0`2[System.Char,System.Boolean])">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-23.cs">
    <type name="OrderByBugExample.Foo">
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>8</size>
      </method>
      <method name="Int32 get_Value1()">
        <size>7</size>
      </method>
      <method name="Void set_Value1(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_Value2()">
        <size>7</size>
      </method>
      <method name="Void set_Value2(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="OrderByBugExample.Program">
      <method name="Int32 Main()">
        <size>345</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(OrderByBugExample.Foo)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1(OrderByBugExample.Foo)">
        <size>7</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__2(OrderByBugExample.Foo)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-24.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="A[] get_Prop()">
        <size>15</size>
      </method>
      <method name="Void Test()">
        <size>56</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Int32 &lt;Test&gt;m__0(A)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-25.cs">
    <type name="A">
      <method name="System.String get_Header()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.String get_Name()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void Test(System.Action)">
        <size>7</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>159</size>
      </method>
      <method name="IEnumerable`1 &lt;Main&gt;m__1(A)">
        <size>7</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[A,B] &lt;Main&gt;m__2(A, B)">
        <size>8</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__3(&lt;&gt;__AnonType0`2[A,B])">
        <size>67</size>
      </method>
      <method name="&lt;&gt;__AnonType1`2[A,B] &lt;Main&gt;m__4(&lt;&gt;__AnonType0`2[A,B])">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;c&gt;__T,&lt;p&gt;__T]">
      <method name="&lt;c&gt;__T get_c()">
        <size>7</size>
      </method>
      <method name="&lt;p&gt;__T get_p()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;c&gt;__T, &lt;p&gt;__T)">
        <size>21</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType1`2[&lt;C&gt;__T,&lt;P&gt;__T]">
      <method name="&lt;C&gt;__T get_C()">
        <size>7</size>
      </method>
      <method name="&lt;P&gt;__T get_P()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;C&gt;__T, &lt;P&gt;__T)">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-26.cs">
    <type name="Test.S`1[T]">
      <method name="System.String Where(System.Func`2[Test.C,System.String])">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Extension">
      <method name="System.String Is(Test.C)">
        <size>2</size>
      </method>
    </type>
    <type name="Test.Program">
      <method name="Void Main()">
        <size>79</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(Test.C)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Main&gt;m__1(Test.C)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-linq-27.cs">
    <type name="C">
      <method name="Void Main()">
        <size>144</size>
      </method>
      <method name="System.String &lt;Main&gt;m__0(System.String)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="&lt;&gt;__AnonType0`2[&lt;b&gt;__T,&lt;t&gt;__T]">
      <method name="&lt;b&gt;__T get_b()">
        <size>7</size>
      </method>
      <method name="&lt;t&gt;__T get_t()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>69</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>86</size>
      </method>
      <method name="System.String ToString()">
        <size>142</size>
      </method>
      <method name="Void .ctor(&lt;b&gt;__T, &lt;t&gt;__T)">
        <size>21</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="IEnumerable`1 &lt;&gt;m__1(System.String)">
        <size>75</size>
      </method>
      <method name="&lt;&gt;__AnonType0`2[System.String,System.Boolean] &lt;&gt;m__2(System.String)">
        <size>47</size>
      </method>
      <method name="Boolean &lt;&gt;m__3(&lt;&gt;__AnonType0`2[System.String,System.Boolean])">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0+&lt;Main&gt;c__AnonStorey1">
      <method name="Boolean &lt;&gt;m__4(Char)">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-named-01.cs">
    <type name="C">
      <method name="Int32 Test(Int32, Int32, System.String)">
        <size>6</size>
      </method>
      <method name="T Foo[T](T, Int32)">
        <size>2</size>
      </method>
      <method name="Void Lambda(System.Func`2[System.Int32,System.Int32])">
        <size>9</size>
      </method>
      <method name="Int32 Main()">
        <size>173</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__1(Int32)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-named-02.cs">
    <type name="D">
      <method name="Void Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-named-03.cs">
    <type name="C">
      <method name="Int32 Foo(Int32, Int32, Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>77</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32, Int32, Int32)">
        <size>21</size>
      </method>
      <method name="Int32 get_Item(Int32, Int32, Int32)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-named-04.cs">
    <type name="Test">
      <method name="Int32 f(Int32)">
        <size>23</size>
      </method>
      <method name="Void m(Int32, Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Void m(Int32, Int32, Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>303</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-01.cs">
    <type name="C">
      <method name="Void TestA(Int32)">
        <size>1</size>
      </method>
      <method name="Void TestB(Int64)">
        <size>1</size>
      </method>
      <method name="Void TestC(Decimal)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>325</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-02.cs">
    <type name="C">
      <method name="Boolean Test2(Nullable`1)">
        <size>11</size>
      </method>
      <method name="Int32 Test(Nullable`1)">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>122</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test3(Nullable`1)">
        <size>21</size>
      </method>
      <method name="Int64 Test4(Nullable`1)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-03.cs">
    <type name="C">
      <method name="Int32 Test(Int32, System.String, Boolean, UInt16)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>236</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-04.cs">
    <type name="C">
      <method name="Void Foo[T](T, T)">
        <size>1</size>
      </method>
      <method name="Void TestParams(System.Int32[])">
        <size>6</size>
      </method>
      <method name="Void TestParams(Int32)">
        <size>1</size>
      </method>
      <method name="Void TestStruct(Nullable`1)">
        <size>24</size>
      </method>
      <method name="System.String get_Item(Int32, System.String)">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, System.String, System.String)">
        <size>4</size>
      </method>
      <method name="Int32 Main()">
        <size>134</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void TestStruct2(Nullable`1)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-05.cs">
    <type name="Blah">
      <method name="Int32 Foo(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Int32 Main()">
        <size>46</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Blah+MyDelegate">
      <method name="Int32 Invoke(Int32, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-06.cs">
    <type name="C">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-07.cs">
    <type name="Tests">
      <method name="Void foo(Foo)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-08.cs">
    <type name="Tests">
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-09.cs">
    <type name="Program">
      <method name="Int32 Test_1(Int32, SByte)">
        <size>2</size>
      </method>
      <method name="Int32 Test_1[T](T)">
        <size>2</size>
      </method>
      <method name="Int32 Test_1(Int32, Int64)">
        <size>2</size>
      </method>
      <method name="Int32 Test_2(Int16)">
        <size>2</size>
      </method>
      <method name="Int32 Test_2(Int32, SByte)">
        <size>2</size>
      </method>
      <method name="Int32 Test_3(System.String)">
        <size>2</size>
      </method>
      <method name="Int32 Test_3(System.String, SByte)">
        <size>2</size>
      </method>
      <method name="Int32 Test_4(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Test_4(System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_5()">
        <size>2</size>
      </method>
      <method name="Int32 Test_5(Int32, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_6(System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_6(Int32, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_7(Boolean, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_7(Boolean, Int32, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>118</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-10.cs">
    <type name="Program">
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program`1[T]">
      <method name="Void .ctor(Generic`1)">
        <size>7</size>
      </method>
    </type>
    <type name="Generic`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-11.cs">
    <type name="C">
      <method name="Int32 TestA(Int32)">
        <size>2</size>
      </method>
      <method name="T TestB[T](T, T)">
        <size>2</size>
      </method>
      <method name="System.Object TestC(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>211</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 TestD(Int32, Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-12.cs">
    <type name="C">
      <method name="Int32 M(System.String, Int32, System.Int32[])">
        <size>4</size>
      </method>
      <method name="Int32 Main()">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-13.cs">
    <type name="A">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Foo2(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 get_Item(System.String, Int32)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 Foo(Int32)">
        <size>4</size>
      </method>
      <method name="Int32 Foo2(Int32)">
        <size>3</size>
      </method>
      <method name="Int32 get_Item(System.String, Int32)">
        <size>4</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>137</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-14.cs">
    <type name="A">
      <method name="Int32 GetValues(System.String[], System.String)">
        <size>2</size>
      </method>
      <method name="Int32 GetValues(System.String, System.String[])">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 Main()">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-15.cs">
    <type name="Program">
      <method name="Void Test(S)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>63</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-16.cs">
    <type name="MainClass">
      <method name="Int32 TestParams(System.Object, System.Object[])">
        <size>58</size>
      </method>
      <method name="Int32 Main()">
        <size>49</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-17.cs">
    <type name="BI">
      <method name="BI op_Implicit(Int32)">
        <size>10</size>
      </method>
    </type>
    <type name="C">
      <method name="Void M(BI)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>96</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M2(System.Object)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="gtest-optional-18.cs">
    <type name="C">
      <method name="Void Test(Decimal)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-partial-01.cs">
    <type name="B`1[U]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-partial-02.cs">
    <type name="A`1[T]">
      <method name="Void Test()">
        <size>13</size>
      </method>
      <method name="T get_CurrentItem()">
        <size>7</size>
      </method>
      <method name="Void set_CurrentItem(T)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-var-04.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>231</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-1.cs">
    <type name="Foo">
      <method name="System.String get_Bar()">
        <size>7</size>
      </method>
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>57</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-10.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 I&lt;string&gt;.get_Count()">
        <size>2</size>
      </method>
      <method name="Int32 I&lt;Foo&gt;.get_Count()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-11.cs">
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Contra[T](IContravariant`1, IContravariant`1)">
        <size>41</size>
      </method>
      <method name="Boolean Covariant[T](ICovariant`1, ICovariant`1)">
        <size>41</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-12.cs">
    <type name="D">
      <method name="Void add_field(D`1[System.String])">
        <size>47</size>
      </method>
      <method name="Void remove_field(D`1[System.String])">
        <size>47</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D`1[T]">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-13.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](T, IList`1)">
        <size>1</size>
      </method>
      <method name="Void Test()">
        <size>17</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo[T](T, I`1)">
        <size>1</size>
      </method>
      <method name="Void Test[U](U, I`1)">
        <size>8</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-14.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+D`1[T]">
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C+D`2[T,U]">
      <method name="T Invoke(U)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(U, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="T EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-15.cs">
    <type name="C">
      <method name="Void M[T](T ByRef, C+D`1[T])">
        <size>13</size>
      </method>
      <method name="Void M2[T](T, C+D`1[T])">
        <size>8</size>
      </method>
      <method name="Void MethodArg(System.Object)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>53</size>
      </method>
      <method name="Void &lt;Main&gt;m__0(System.Object)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+D`1[T]">
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-16.cs">
    <type name="S">
      <method name="System.String op_Implicit(S)">
        <size>6</size>
      </method>
    </type>
    <type name="C">
      <method name="T Foo[T](T, I`1)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-17.cs">
    <type name="A">
      <method name="Void InterfaceContravariat&lt;int&gt;.set_Prop(Int32)">
        <size>6</size>
      </method>
      <method name="Void InterfaceContravariat&lt;int&gt;.set_Item(Int32, Int32)">
        <size>6</size>
      </method>
      <method name="Int64 InterfaceCovariant&lt;long&gt;.get_Prop()">
        <size>6</size>
      </method>
      <method name="Int64 InterfaceCovariant&lt;long&gt;.get_Item(Int32)">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-18.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-19.cs">
    <type name="Test">
      <method name="Void Bla[T,U]()">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-2.cs">
    <type name="Foo">
      <method name="System.String Bar(System.Object)">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>92</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-20.cs">
    <type name="DocAttribute">
      <method name="Void .ctor(String)">
        <size>7</size>
      </method>
    </type>
    <type name="Func`2[T1,TR]">
      <method name="TR Invoke(T1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TR EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-3.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>56</size>
      </method>
      <method name="Int32 Bar(Foo`1[System.Object])">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="T Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="T EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__AnonStorey0">
      <method name="System.String &lt;&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-4.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>58</size>
      </method>
      <method name="Int32 Bar(Foo`1[System.String], System.String)">
        <size>8</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(System.Object)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo`1[T]">
      <method name="Int32 Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-5.cs">
    <type name="BothVariants`2[T1,T2]">
      <method name="T1 get_Foo()">
        <size>7</size>
      </method>
      <method name="Void set_Foo(T1)">
        <size>8</size>
      </method>
      <method name="Int32 Bar(T2)">
        <size>35</size>
      </method>
      <method name="Void .ctor(T1)">
        <size>14</size>
      </method>
    </type>
    <type name="Invariant`1[T]">
      <method name="T get_Foo()">
        <size>36</size>
      </method>
      <method name="Int32 Bar(T)">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="System.String get_Fruit()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.String get_Fruit()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="System.String get_Fruit()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>110</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-6.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Cov1`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 Invoke(IContravariant`1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(IContravariant`1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Cov2`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 Invoke(IContravariant`1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(IContravariant`1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Cov3`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 Invoke(IContravariant`1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(IContravariant`1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Cov4`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="ICovariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Cov5`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Contra5`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 Invoke(U, ICovariant`1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(U, ICovariant`1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Contra6`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Contra7`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 Invoke(U, ICovariant`1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(U, ICovariant`1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Contra8`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 Invoke(U, ICovariant`1)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(U, ICovariant`1, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="IContravariant`1 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-7.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Covariant`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="T Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="T EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Contra`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="CoContra`2[TR,T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="TR Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="TR EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="None`1[T]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Covariant`1[Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[U]]]]]]]] Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Covariant`1[Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[U]]]]]]]] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test2`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Contra`1[Covariant`1[Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[U]]]]]]]]] Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Contra`1[Covariant`1[Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[U]]]]]]]]] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test3`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Contra`1[Contra`1[U]]]]]]]] Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Contra`1[Contra`1[U]]]]]]]] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test4`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Contra`1[Contra`1[Covariant`1[Covariant`1[Contra`1[Contra`1[Contra`1[Contra`1[U]]]]]]]] Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Contra`1[Contra`1[Covariant`1[Covariant`1[Contra`1[Contra`1[Contra`1[Contra`1[U]]]]]]]] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test5`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Contra`1[Contra`1[Covariant`1[Covariant`1[Contra`1[Contra`1[Contra`1[U]]]]]]] Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Contra`1[Contra`1[Covariant`1[Covariant`1[Contra`1[Contra`1[Contra`1[U]]]]]]] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test6`1[U]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Covariant`1[Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[U]]]]]]]])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Covariant`1[Contra`1[Contra`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[Covariant`1[U]]]]]]]], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Both`2[U,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(CoContra`2[U,V])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(CoContra`2[U,V], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Both2`2[U,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(CoContra`2[U,Contra`1[U]])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(CoContra`2[U,Contra`1[U]], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Both3`2[U,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(CoContra`2[U,Contra`1[System.Int32]])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(CoContra`2[U,Contra`1[System.Int32]], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Both4`2[U,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Both`2[V,U])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Both`2[V,U], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Both5`2[U,V]">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Both`2[V,System.Int32])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Both`2[V,System.Int32], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-8.cs">
    <type name="A`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>114</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="gtest-variance-9.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(IIn`1)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="test-1.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-10.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void asbyte(Byte, UInt16, UInt32, UInt64, Char)">
        <size>1</size>
      </method>
      <method name="Void bsbyte()">
        <size>35</size>
      </method>
      <method name="Void abyte(SByte, Char)">
        <size>1</size>
      </method>
      <method name="Void bbyte()">
        <size>22</size>
      </method>
      <method name="Void ashort(SByte, Byte, UInt16, UInt32, UInt64, Char)">
        <size>1</size>
      </method>
      <method name="Void bshort()">
        <size>39</size>
      </method>
      <method name="Void aushort(SByte, Byte, Int16, Char)">
        <size>1</size>
      </method>
      <method name="Void bushort()">
        <size>29</size>
      </method>
      <method name="Void aint(SByte, Byte, Int16, UInt16, UInt32, UInt64, Char)">
        <size>1</size>
      </method>
      <method name="Void bint()">
        <size>42</size>
      </method>
      <method name="Void auint(SByte, Byte, Int16, UInt16, Int32, Char)">
        <size>1</size>
      </method>
      <method name="Void buint()">
        <size>38</size>
      </method>
      <method name="Void along(SByte, Byte, Int16, UInt16, Int32, UInt32, UInt64, Char)">
        <size>1</size>
      </method>
      <method name="Void blong()">
        <size>47</size>
      </method>
      <method name="Void aulong(SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, Char)">
        <size>1</size>
      </method>
      <method name="Void bulong()">
        <size>47</size>
      </method>
      <method name="Void achar(SByte, Byte, Int16)">
        <size>1</size>
      </method>
      <method name="Void bchar()">
        <size>27</size>
      </method>
      <method name="Void afloat(SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Char, Decimal)">
        <size>1</size>
      </method>
      <method name="Void bfloat()">
        <size>67</size>
      </method>
      <method name="Void adouble(SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Char, Single, Decimal)">
        <size>1</size>
      </method>
      <method name="Void bdouble()">
        <size>75</size>
      </method>
      <method name="Void TestDecimal(Decimal)">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ExtraTst()">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="test-100.cs">
    <type name="GLib.Object">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Raw()">
        <size>2</size>
      </method>
      <method name="Void set_Raw(Int32)">
        <size>8</size>
      </method>
      <method name="Void GetProperty()">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-101.cs">
    <type name="Test.MyAttribute">
      <method name="Void .ctor(String)">
        <size>20</size>
      </method>
    </type>
    <type name="Test.My2Attribute">
      <method name="Void .ctor(String, Int32)">
        <size>31</size>
      </method>
    </type>
    <type name="Test.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>92</size>
      </method>
    </type>
  </test>
  <test name="test-102.cs">
    <type name="N1.MineAttribute">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="N1.ReturnAttribute">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="N1.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>250</size>
      </method>
    </type>
  </test>
  <test name="test-103.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo()">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
      <method name="Int32 M()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-104.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-105.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 F(Int32)">
        <size>33</size>
      </method>
      <method name="Void async_callback(IAsyncResult)">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>407</size>
      </method>
    </type>
    <type name="Test+SimpleDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-107.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 F(Int32)">
        <size>27</size>
      </method>
      <method name="Void async_callback(IAsyncResult)">
        <size>100</size>
      </method>
      <method name="Int32 Main()">
        <size>89</size>
      </method>
    </type>
    <type name="Test+SimpleDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-108.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>79</size>
      </method>
    </type>
  </test>
  <test name="test-109.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-11.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 boxtest()">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-110.cs">
    <type name="test.test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 test_method(Int32)">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-111.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_obj()">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-112.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Int32[] g()">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-113.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void g_object_get(IntPtr, System.String, System.String ByRef, IntPtr)">
        <size>4</size>
      </method>
      <method name="Void GetProperty(System.String, System.String ByRef)">
        <size>21</size>
      </method>
      <method name="Void g_object_get(IntPtr, System.String, Boolean ByRef, IntPtr)">
        <size>4</size>
      </method>
      <method name="Void GetProperty(System.String, Boolean ByRef)">
        <size>21</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-114.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>15</size>
      </method>
    </type>
    <type name="MyClass+IsAnything">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Boolean Invoke(Char)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Char, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-115.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="X op_Explicit(A)">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="test-116.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-117.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-118.cs">
    <type name="Container">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-119.cs">
    <type name="Value">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 op_Explicit(Value)">
        <size>2</size>
      </method>
      <method name="MyObject op_Explicit(Value)">
        <size>7</size>
      </method>
      <method name="UInt32 op_Explicit(Value)">
        <size>2</size>
      </method>
    </type>
    <type name="MyObject">
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Derived Blah()">
        <size>18</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-12.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>270</size>
      </method>
      <method name="System.String s(System.String, Int32)">
        <size>13</size>
      </method>
      <method name="System.String x(System.String, System.Object)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-120.cs">
    <type name="test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>140</size>
      </method>
    </type>
  </test>
  <test name="test-121.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 g()">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>81</size>
      </method>
    </type>
  </test>
  <test name="test-122.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-123.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_non_null()">
        <size>6</size>
      </method>
      <method name="System.Object get_null()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>95</size>
      </method>
    </type>
  </test>
  <test name="test-124.cs">
    <type name="t">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void a()">
        <size>16</size>
      </method>
      <method name="Void b()">
        <size>16</size>
      </method>
      <method name="Void c()">
        <size>24</size>
      </method>
      <method name="Void d()">
        <size>28</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-125.cs">
    <type name="Fraction">
      <method name="Void .ctor(Int32, Int32)">
        <size>31</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>31</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>36</size>
      </method>
      <method name="System.String ToString()">
        <size>47</size>
      </method>
      <method name="Fraction op_Implicit(Int32)">
        <size>17</size>
      </method>
      <method name="Int32 op_Explicit(Fraction)">
        <size>24</size>
      </method>
      <method name="Boolean op_Equality(Fraction, Fraction)">
        <size>48</size>
      </method>
      <method name="Boolean op_Inequality(Fraction, Fraction)">
        <size>21</size>
      </method>
      <method name="Fraction op_Addition(Fraction, Fraction)">
        <size>102</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>148</size>
      </method>
    </type>
  </test>
  <test name="test-126.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Iface.Method()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-127.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-128.cs">
    <type name="SimpleAttribute">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="MineAttribute">
      <method name="Void .ctor(Type[])">
        <size>14</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 MM()">
        <size>168</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Value()">
        <size>7</size>
      </method>
      <method name="Void set_Value(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 Another()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-129.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-13.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean MyMethod()">
        <size>12</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-130.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-131.cs">
    <type name="SimpleAttribute">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-132.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>57</size>
      </method>
    </type>
  </test>
  <test name="test-133.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DecodeOp(UInt16, OpCode ByRef, OpFlags ByRef)">
        <size>21</size>
      </method>
      <method name="Void get_struct(S ByRef)">
        <size>24</size>
      </method>
      <method name="Int32 Main()">
        <size>75</size>
      </method>
    </type>
  </test>
  <test name="test-134.cs">
    <type name="AA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>8</size>
      </method>
      <method name="Void B()">
        <size>8</size>
      </method>
      <method name="Void C()">
        <size>8</size>
      </method>
      <method name="Boolean get_OK()">
        <size>32</size>
      </method>
    </type>
    <type name="BB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>18</size>
      </method>
      <method name="Void B()">
        <size>8</size>
      </method>
      <method name="Void C()">
        <size>8</size>
      </method>
      <method name="Boolean get_OK()">
        <size>32</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>1</size>
      </method>
      <method name="Void B()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>76</size>
      </method>
    </type>
  </test>
  <test name="test-135.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void doh()">
        <size>1</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="A get_Prop()">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>37</size>
      </method>
      <method name="IA IB.get_Prop()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-136.cs">
    <type name="MyCar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IDiagnostic.Stop()">
        <size>8</size>
      </method>
      <method name="Void IAutomobile.Stop()">
        <size>8</size>
      </method>
      <method name="Void Stop()">
        <size>16</size>
      </method>
    </type>
    <type name="TestConflict">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>74</size>
      </method>
    </type>
  </test>
  <test name="test-137.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X()">
        <size>15</size>
      </method>
      <method name="Int32 Main()">
        <size>95</size>
      </method>
    </type>
  </test>
  <test name="test-138.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-139.cs">
    <type name="T">
      <method name="Void one()">
        <size>13</size>
      </method>
      <method name="Void two(T)">
        <size>8</size>
      </method>
      <method name="Void three(T ByRef)">
        <size>13</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="test-14.cs">
    <type name="Obj.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 F()">
        <size>2</size>
      </method>
      <method name="Int32 G()">
        <size>2</size>
      </method>
      <method name="Int32 H()">
        <size>3</size>
      </method>
    </type>
    <type name="Obj.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 F()">
        <size>2</size>
      </method>
      <method name="Int32 G()">
        <size>2</size>
      </method>
      <method name="Int32 H()">
        <size>3</size>
      </method>
    </type>
    <type name="Obj.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>182</size>
      </method>
    </type>
  </test>
  <test name="test-140.cs">
    <type name="BreakTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void B()">
        <size>47</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="test-141.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
      <method name="Boolean Test1()">
        <size>31</size>
      </method>
      <method name="Boolean Test2()">
        <size>32</size>
      </method>
      <method name="Boolean Test3()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-142.cs">
    <type name="TestClass">
      <method name="Void .ctor(EventHandler)">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="TestBaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Blah(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Blah(System.EventHandler)">
        <size>47</size>
      </method>
    </type>
  </test>
  <test name="test-143.cs">
    <type name="MonoEnumInfo">
      <method name="Void stuff()">
        <size>8</size>
      </method>
      <method name="Int32 GetInfo(MonoEnumInfo ByRef)">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-144.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-145.cs">
    <type name="JagArrayTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-146.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>335</size>
      </method>
    </type>
  </test>
  <test name="test-147.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>15</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
      <method name="X Foo()">
        <size>6</size>
      </method>
      <method name="X Bar()">
        <size>6</size>
      </method>
      <method name="X Baz()">
        <size>6</size>
      </method>
      <method name="UInt32 get_Property()">
        <size>2</size>
      </method>
      <method name="UInt32 get_StaticProperty()">
        <size>3</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>15</size>
      </method>
      <method name="Void .cctor()">
        <size>9</size>
      </method>
      <method name="Y Foo()">
        <size>6</size>
      </method>
      <method name="Y Bar()">
        <size>6</size>
      </method>
      <method name="Y Baz()">
        <size>6</size>
      </method>
      <method name="UInt32 get_Property()">
        <size>2</size>
      </method>
      <method name="UInt32 get_StaticProperty()">
        <size>3</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>94</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>252</size>
      </method>
    </type>
  </test>
  <test name="test-148.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Bar(Int32)">
        <size>2</size>
      </method>
      <method name="Int64 get_Bar(Double)">
        <size>3</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int64 get_Whatever(Double)">
        <size>3</size>
      </method>
      <method name="Single get_Whatever(Int64, Int32)">
        <size>6</size>
      </method>
      <method name="Int32 InstanceTest()">
        <size>54</size>
      </method>
      <method name="Int32 Test()">
        <size>356</size>
      </method>
      <method name="Int32 Main()">
        <size>94</size>
      </method>
    </type>
    <type name="Z+MyArray">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_Item(Int32)">
        <size>8</size>
      </method>
      <method name="Void set_Item(Int32, System.Object)">
        <size>9</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Monkey(Int32)">
        <size>4</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int64 get_Item(Int64, Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>4</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int64 get_Item(Int64, Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_g()">
        <size>6</size>
      </method>
      <method name="Void set_g(System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="F">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_g()">
        <size>6</size>
      </method>
    </type>
    <type name="DisposableNotifyList">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ChildList">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>14</size>
      </method>
    </type>
    <type name="Y">
      <method name="Int32 X.get_Foo(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-149.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void add_Foo(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Foo(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void add_TestEvent(MyDelegate)">
        <size>47</size>
      </method>
      <method name="Void remove_TestEvent(MyDelegate)">
        <size>47</size>
      </method>
      <method name="Int32 Test()">
        <size>134</size>
      </method>
      <method name="Void callback1(System.Object, System.EventArgs)">
        <size>7</size>
      </method>
      <method name="Int64 callback2(Int32)">
        <size>19</size>
      </method>
      <method name="Void callback3(System.Object, System.EventArgs)">
        <size>7</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_BuildStarted(Z+SomeEventHandler)">
        <size>45</size>
      </method>
      <method name="Void remove_BuildStarted(Z+SomeEventHandler)">
        <size>45</size>
      </method>
      <method name="Int32 a()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>80</size>
      </method>
    </type>
    <type name="Static">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Test(System.EventHandler)">
        <size>45</size>
      </method>
      <method name="Void remove_Test(System.EventHandler)">
        <size>45</size>
      </method>
      <method name="Void Fire()">
        <size>23</size>
      </method>
    </type>
    <type name="Z+SomeEventHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int64 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int64 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void X.add_Foo(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void X.remove_Foo(System.EventHandler)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-15.cs">
    <type name="Implementor">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 A()">
        <size>2</size>
      </method>
    </type>
    <type name="Run">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>53</size>
      </method>
    </type>
    <type name="StructImplementor">
      <method name="Int32 A()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-150.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-151.cs">
    <type name="A.Iface">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void bah()">
        <size>1</size>
      </method>
    </type>
    <type name="A.my">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void doit(System.Object)">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-152.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>101</size>
      </method>
    </type>
  </test>
  <test name="test-153.cs">
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test2(System.String, System.Object[])">
        <size>1</size>
      </method>
      <method name="Void Test(System.String, System.Object[])">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>86</size>
      </method>
    </type>
  </test>
  <test name="test-154.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void test1(Single ByRef)">
        <size>6</size>
      </method>
      <method name="Void test2(Int32, Single ByRef)">
        <size>38</size>
      </method>
      <method name="Void test3(System.Int64[], Int32)">
        <size>21</size>
      </method>
      <method name="Int32 test4(Int32, Single ByRef)">
        <size>33</size>
      </method>
      <method name="Int32 test5(Single ByRef, Int64)">
        <size>68</size>
      </method>
      <method name="Int32 test6(Single ByRef)">
        <size>10</size>
      </method>
      <method name="Int64 test7(System.Int32[], Int32)">
        <size>64</size>
      </method>
      <method name="Int64 test8(Int32)">
        <size>34</size>
      </method>
      <method name="Int64 test9(Int32)">
        <size>28</size>
      </method>
      <method name="Void test10(Int32, Single ByRef)">
        <size>23</size>
      </method>
      <method name="Int64 test11(Int32)">
        <size>44</size>
      </method>
      <method name="Void test12(Single ByRef)">
        <size>20</size>
      </method>
      <method name="Void test13(Int32, Single ByRef)">
        <size>23</size>
      </method>
      <method name="Int64 test14(Int32, Single ByRef)">
        <size>66</size>
      </method>
      <method name="Int32 test15(Int32, Single ByRef)">
        <size>33</size>
      </method>
      <method name="Void test16()">
        <size>54</size>
      </method>
      <method name="Void test17()">
        <size>62</size>
      </method>
      <method name="Void test18(Int32, Int32 ByRef)">
        <size>30</size>
      </method>
      <method name="Int32 test19()">
        <size>39</size>
      </method>
      <method name="Int32 test20()">
        <size>12</size>
      </method>
      <method name="Int32 test21()">
        <size>23</size>
      </method>
      <method name="Int32 test22()">
        <size>22</size>
      </method>
      <method name="Int32 test23(System.Object, Int32, Boolean ByRef)">
        <size>29</size>
      </method>
      <method name="Int64 test24(Int32)">
        <size>67</size>
      </method>
      <method name="Int64 test25(Int32)">
        <size>34</size>
      </method>
      <method name="Void test26()">
        <size>22</size>
      </method>
      <method name="Int32 test27()">
        <size>12</size>
      </method>
      <method name="Void test28(System.Object ByRef)">
        <size>18</size>
      </method>
      <method name="Boolean test29(Int32 ByRef)">
        <size>23</size>
      </method>
      <method name="System.String test30(System.String ByRef)">
        <size>31</size>
      </method>
      <method name="System.String test31(Int32)">
        <size>78</size>
      </method>
      <method name="Void test32()">
        <size>11</size>
      </method>
      <method name="Int32 test33()">
        <size>4</size>
      </method>
      <method name="Void test34()">
        <size>20</size>
      </method>
      <method name="Void test35(Int32, Boolean)">
        <size>28</size>
      </method>
      <method name="Void test36()">
        <size>41</size>
      </method>
      <method name="Void test37()">
        <size>42</size>
      </method>
      <method name="Int32 test38()">
        <size>2</size>
      </method>
      <method name="Int32 test40(Int32)">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-155.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>44</size>
      </method>
    </type>
    <type name="Test+TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String test(System.String)">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-156.cs">
    <type name="Internal">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Public">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="X+NestedPublic">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+NestedAssembly">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+NestedFamilyAndAssembly">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+NestedFamily">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+NestedPrivate">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="F">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(YI)">
        <size>1</size>
      </method>
    </type>
    <type name="Y+YA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YD">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YE">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YF">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YG">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+YH">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Z+P">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WD">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WE">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WCA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WCB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WCB+WCD">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="W+WCB+WCD+WCE">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(X)">
        <size>1</size>
      </method>
    </type>
    <type name="G+I">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G+I+J">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Foo)">
        <size>1</size>
      </method>
    </type>
    <type name="H">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(System.Int32[])">
        <size>1</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(System.String)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-157.cs">
    <type name="Test.MyAttribute">
      <method name="Void .ctor(String)">
        <size>20</size>
      </method>
    </type>
    <type name="Test.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>197</size>
      </method>
    </type>
  </test>
  <test name="test-158.cs">
    <type name="My">
      <method name="Void .ctor(Object)">
        <size>14</size>
      </method>
    </type>
    <type name="My+Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>87</size>
      </method>
    </type>
  </test>
  <test name="test-159.cs">
    <type name="A.Iface">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void bah()">
        <size>1</size>
      </method>
    </type>
    <type name="A.my">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void doit(System.Object)">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-16.cs">
    <type name="Mine.Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 op_Addition(Mine.Blah, Mine.Blah)">
        <size>12</size>
      </method>
      <method name="Int32 op_Implicit(Mine.Blah)">
        <size>12</size>
      </method>
      <method name="Byte op_Implicit(Mine.Blah)">
        <size>12</size>
      </method>
      <method name="Int16 op_Implicit(Mine.Blah)">
        <size>12</size>
      </method>
    </type>
    <type name="Mine.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>118</size>
      </method>
    </type>
  </test>
  <test name="test-160.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 blah(System.Object)">
        <size>62</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-161.cs">
    <type name="ZipEntry">
      <method name="Void .ctor(String)">
        <size>18</size>
      </method>
      <method name="Void .ctor(ZipEntry)">
        <size>18</size>
      </method>
      <method name="DateTime get_DateTime()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-162.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void test_output(A)">
        <size>1</size>
      </method>
      <method name="Void test_output(B)">
        <size>1</size>
      </method>
      <method name="Void test_output(E)">
        <size>1</size>
      </method>
      <method name="Void test_output(F)">
        <size>1</size>
      </method>
      <method name="Void test1()">
        <size>21</size>
      </method>
      <method name="Void test2()">
        <size>32</size>
      </method>
      <method name="Void test3()">
        <size>21</size>
      </method>
      <method name="Void test4(A)">
        <size>9</size>
      </method>
      <method name="Void test5(A ByRef)">
        <size>9</size>
      </method>
      <method name="Void test6(B ByRef)">
        <size>8</size>
      </method>
      <method name="Void test7()">
        <size>28</size>
      </method>
      <method name="Void test8()">
        <size>50</size>
      </method>
      <method name="Void test9()">
        <size>26</size>
      </method>
      <method name="Void test10()">
        <size>82</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>27</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor(Int64)">
        <size>8</size>
      </method>
      <method name="Void .ctor(String)">
        <size>13</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor(Int32)">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-163.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(System.String)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-164.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>26</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
      <method name="Int32 Hello()">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>46</size>
      </method>
    </type>
    <type name="X+FooDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-165.cs">
    <type name="Testing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 TestEnumInit(Fruit)">
        <size>21</size>
      </method>
      <method name="Int32 Main()">
        <size>62</size>
      </method>
    </type>
  </test>
  <test name="test-166.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_TargetIntegerSize()">
        <size>2</size>
      </method>
      <method name="Int32 Hello(IInferior)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>61</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 ITest.get_Item(Int32)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-167.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(X+Foo[])">
        <size>23</size>
      </method>
      <method name="Int32 Main()">
        <size>44</size>
      </method>
    </type>
  </test>
  <test name="test-168.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
    <type name="X">
      <method name="System.String op_Implicit(X)">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-169.cs">
    <type name="basec">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
    </type>
    <type name="der">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
    </type>
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Thingy()">
        <size>7</size>
      </method>
      <method name="Void set_Thingy(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_BaseThingy()">
        <size>7</size>
      </method>
      <method name="Void set_Thingy(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>97</size>
      </method>
    </type>
  </test>
  <test name="test-17.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>39</size>
      </method>
      <method name="Byte op_Implicit(Blah)">
        <size>12</size>
      </method>
      <method name="Int16 op_Implicit(Blah)">
        <size>12</size>
      </method>
      <method name="Int32 op_Implicit(Blah)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-170.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_prop()">
        <size>7</size>
      </method>
      <method name="Void set_prop(Int32)">
        <size>8</size>
      </method>
      <method name="Void set_AAA(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Int32 get_prop()">
        <size>7</size>
      </method>
      <method name="Void set_prop(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 A()">
        <size>38</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-171.cs">
    <type name="IntPtr_Conv.Class1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-172.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>31</size>
      </method>
      <method name="Boolean ff()">
        <size>14</size>
      </method>
      <method name="Boolean tt()">
        <size>14</size>
      </method>
      <method name="Int32 test_if()">
        <size>599</size>
      </method>
      <method name="Int32 test_while()">
        <size>437</size>
      </method>
      <method name="Int32 test_inline()">
        <size>29</size>
      </method>
      <method name="Int32 Main()">
        <size>109</size>
      </method>
    </type>
  </test>
  <test name="test-173.cs">
    <type name="Base">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Int32 get_Value()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>18</size>
      </method>
      <method name="Void .ctor(UInt32)">
        <size>18</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor(Int64)">
        <size>18</size>
      </method>
      <method name="Void .ctor(UInt64)">
        <size>18</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor(Int16)">
        <size>18</size>
      </method>
      <method name="Void .ctor(UInt16)">
        <size>18</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(SByte)">
        <size>18</size>
      </method>
      <method name="Void .ctor(Byte)">
        <size>18</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor(Int64)">
        <size>19</size>
      </method>
      <method name="Void .ctor(E)">
        <size>19</size>
      </method>
      <method name="E op_Implicit(Int64)">
        <size>7</size>
      </method>
    </type>
    <type name="F">
      <method name="Void .ctor(Int32)">
        <size>19</size>
      </method>
      <method name="Void .ctor(F)">
        <size>19</size>
      </method>
      <method name="F op_Implicit(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>231</size>
      </method>
      <method name="Int32 Main()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="test-174.cs">
    <type name="ProtectedAccessToPropertyOnChild">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
    <type name="TestAccessToPrivateMemberInParentClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Double[][] get_Array()">
        <size>7</size>
      </method>
    </type>
    <type name="TestAccessToPrivateMemberInParentClass+CholeskyDecomposition">
      <method name="Void .ctor(TestAccessToPrivateMemberInParentClass)">
        <size>37</size>
      </method>
    </type>
    <type name="TestAccessToProtectedOnChildInstanceFromParent">
      <method name="Void .ctor()">
        <size>29</size>
      </method>
      <method name="Int32 Test()">
        <size>27</size>
      </method>
    </type>
    <type name="TestAccessToProtectedOnChildInstanceFromParent+Parent">
      <method name="Void .ctor()">
        <size>26</size>
      </method>
      <method name="Int32 TestAccessToProtected(TestAccessToProtectedOnChildInstanceFromParent+Child)">
        <size>15</size>
      </method>
    </type>
    <type name="TestAccessToProtectedOnChildInstanceFromParent+Child">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-175.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
    </type>
    <type name="RVA">
      <method name="Void .ctor(UInt32)">
        <size>8</size>
      </method>
      <method name="RVA op_Implicit(UInt32)">
        <size>7</size>
      </method>
      <method name="UInt32 op_Implicit(RVA)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-176.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-177.cs">
    <type name="MethodAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ReturnAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-178.cs">
    <type name="BrowsableClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>54</size>
      </method>
      <method name="BrowsableClass op_Increment(BrowsableClass)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-179.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Item(Double, Double)">
        <size>15</size>
      </method>
      <method name="Double get_Item(Double)">
        <size>29</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Item(Double, Double)">
        <size>15</size>
      </method>
      <method name="Double get_Item(Double)">
        <size>29</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Item(System.String, System.String)">
        <size>15</size>
      </method>
      <method name="System.String get_Item(System.String)">
        <size>30</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>15</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>21</size>
      </method>
    </type>
    <type name="EntryPoint">
      <method name="Int32 Main(System.String[])">
        <size>150</size>
      </method>
    </type>
  </test>
  <test name="test-18.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void m()">
        <size>55</size>
      </method>
      <method name="Int32 ret(Int32)">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>62</size>
      </method>
    </type>
  </test>
  <test name="test-180.cs">
    <type name="Testing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-181.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void test()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>43</size>
      </method>
    </type>
  </test>
  <test name="test-182.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>26</size>
      </method>
    </type>
    <type name="TS">
      <method name="Int64 get_Ticks()">
        <size>19</size>
      </method>
    </type>
    <type name="DT">
      <method name="Int64 get_Ticks()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-183.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 M(Int32, Int32 ByRef)">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>67</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32, Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32 ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(Int32 ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-184.cs">
    <type name="User">
      <method name="Void .ctor(Interface)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>55</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
    <type name="Struct">
      <method name="Void .ctor(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_X()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-185.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>36</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="test-186.cs">
    <type name="TestBUG.myAttribute">
      <method name="Void .ctor(String, String, String, Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="TestBUG.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-187.cs">
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Container get_Item(System.String)">
        <size>2</size>
      </method>
      <method name="Void set_Item(System.String, Container)">
        <size>1</size>
      </method>
    </type>
    <type name="Container">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Container op_Addition(Container, System.Object)">
        <size>2</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A(System.Collections.Specialized.NameValueCollection, MyClass, System.Object)">
        <size>65</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-188.cs">
    <type name="Enumerator">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>21</size>
      </method>
      <method name="Char get_Current()">
        <size>3</size>
      </method>
    </type>
    <type name="RealEnumerator">
      <method name="Void .ctor(Coll)">
        <size>14</size>
      </method>
      <method name="Void Dispose()">
        <size>13</size>
      </method>
    </type>
    <type name="Coll">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Enumerator GetEnumerator()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>80</size>
      </method>
    </type>
  </test>
  <test name="test-189.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>63</size>
      </method>
      <method name="Int32 m(Int32, Double)">
        <size>2</size>
      </method>
      <method name="Int32 m(Int32, System.Int32[])">
        <size>2</size>
      </method>
    </type>
    <type name="MonoTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 method1(System.String, System.Object[])">
        <size>2</size>
      </method>
      <method name="Void testmethod()">
        <size>27</size>
      </method>
    </type>
    <type name="MonoTest2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 method1(System.String, System.Object[])">
        <size>2</size>
      </method>
      <method name="Void testmethod2()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-19.cs">
    <type name="I">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>18</size>
      </method>
      <method name="System.String fn(System.String)">
        <size>17</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Thread_func()">
        <size>11</size>
      </method>
      <method name="Int32 Func(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Void Bar()">
        <size>44</size>
      </method>
      <method name="Boolean MyFilter(System.Reflection.MemberInfo, System.Object)">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>303</size>
      </method>
      <method name="Int32 multiply_by_three(Int32)">
        <size>4</size>
      </method>
    </type>
    <type name="TestNamespace.TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="I+GetTextFn">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="TestNamespace.TestClass+NotWorkingDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Single Invoke(Single, System.Object[])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Single, System.Object[], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Single EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="NameSpace.TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-190.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>8</size>
      </method>
    </type>
    <type name="A+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(A)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-191.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+D+P">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+Op">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="R">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-192.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-193.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>88</size>
      </method>
      <method name="Int32 Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-194.cs">
    <type name="TestParams">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>38</size>
      </method>
      <method name="Int32 Params(System.Object[])">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="test-195.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 C()">
        <size>36</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>8</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-196.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bug1()">
        <size>15</size>
      </method>
      <method name="Void Bug2()">
        <size>15</size>
      </method>
      <method name="Int32 Main()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-197.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>0</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>11</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="test-198.cs">
    <type name="N1.N3.N4.Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.N2.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N5.N6.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N5.N7.N8.Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FirstOuter.FirstInner.First">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_MyIdentity()">
        <size>12</size>
      </method>
    </type>
    <type name="FirstOuter.Second">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FirstOuter.SecondInner.Third">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FirstOuter.FirstInner.Fourth">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Fifth">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M1.M2.M3.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="P1.P2.Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-199.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
    </type>
    <type name="N1.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.Foo+Foo2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.Bar2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Talk()">
        <size>2</size>
      </method>
    </type>
    <type name="N2.Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.Bar+Bar2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Talk()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-2.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-20.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X()">
        <size>8</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X()">
        <size>8</size>
      </method>
      <method name="Void TestB()">
        <size>7</size>
      </method>
    </type>
    <type name="Ax">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>8</size>
      </method>
      <method name="Void B()">
        <size>8</size>
      </method>
    </type>
    <type name="Bx">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>8</size>
      </method>
      <method name="Void B()">
        <size>8</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>100</size>
      </method>
    </type>
  </test>
  <test name="test-200.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>104</size>
      </method>
    </type>
  </test>
  <test name="test-201.cs">
    <type name="Parent">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Child">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Child+Nested">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
    <type name="Collide">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Void .cctor()">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-202.cs">
    <type name="X.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.B.C.D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-203.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Modifiers get_Modifiers()">
        <size>2</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-204.cs">
    <type name="X">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="System.String ToString()">
        <size>22</size>
      </method>
      <method name="Int32 Test()">
        <size>153</size>
      </method>
      <method name="Int32 Main()">
        <size>24</size>
      </method>
      <method name="X op_BitwiseAnd(X, X)">
        <size>19</size>
      </method>
      <method name="X op_BitwiseOr(X, X)">
        <size>19</size>
      </method>
      <method name="Boolean op_True(X)">
        <size>15</size>
      </method>
      <method name="Boolean op_False(X)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-205.cs">
    <type name="A">
      <method name="Void .ctor(Object)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-206.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="System.Int32[] get_Item(System.Int32[])">
        <size>39</size>
      </method>
      <method name="Void Main()">
        <size>91</size>
      </method>
    </type>
  </test>
  <test name="test-207.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void hello(Int32)">
        <size>13</size>
      </method>
      <method name="Void world(Int32)">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>138</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-208.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Item(System.String)">
        <size>2</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="test-209.cs">
    <type name="X">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Int32 get_Foo()">
        <size>9</size>
      </method>
      <method name="Void set_Foo(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>8</size>
      </method>
      <method name="Void set_Item(System.String, System.String)">
        <size>7</size>
      </method>
      <method name="Void set_Bar(System.String)">
        <size>7</size>
      </method>
      <method name="A get_A()">
        <size>7</size>
      </method>
      <method name="Void set_A(A)">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>75</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-21.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>47</size>
      </method>
    </type>
    <type name="Blah+Foo">
      <method name="Void .ctor()">
        <size>17</size>
      </method>
      <method name="Int32 Bar(Int32, Int32)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-210.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void foo()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>25</size>
      </method>
    </type>
    <type name="FooHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-211.cs">
    <type name="X">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="X op_Implicit(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor(X)">
        <size>14</size>
      </method>
      <method name="Y op_Implicit(X)">
        <size>7</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor(Y)">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>27</size>
      </method>
      <method name="Z op_Implicit(Y)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-212.cs">
    <type name="Problem">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Int32 Multi(Int32, Problem[])">
        <size>4</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>76</size>
      </method>
      <method name="Problem op_Implicit(Int32)">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-213.cs">
    <type name="MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>31</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Void Print()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-214.cs">
    <type name="N2.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>7</size>
      </method>
    </type>
    <type name="N1.C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-215.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="N1.C1 get_C1()">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
    <type name="N1.C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-216.cs">
    <type name="cls">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_OnWhatever(OnWhateverDelegate)">
        <size>47</size>
      </method>
      <method name="Void remove_OnWhatever(OnWhateverDelegate)">
        <size>47</size>
      </method>
      <method name="Void CallMyDel(System.String)">
        <size>13</size>
      </method>
    </type>
    <type name="cls+nestedcls">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void CallParentDel(cls, System.String)">
        <size>13</size>
      </method>
    </type>
    <type name="MonoEmbed">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>36</size>
      </method>
      <method name="Void Whatever(System.String)">
        <size>7</size>
      </method>
    </type>
    <type name="OnWhateverDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-217.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>174</size>
      </method>
      <method name="System.Object compare_gte(Int32, Int32)">
        <size>13</size>
      </method>
      <method name="System.Object compare_lte(Int32, Int32)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-218.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>27</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void compareQueryQuery1(System.Object)">
        <size>1</size>
      </method>
    </type>
    <type name="T+foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-219.cs">
    <type name="TestAttribute">
      <method name="Void .ctor(Type)">
        <size>14</size>
      </method>
      <method name="System.Type get_Type()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>75</size>
      </method>
    </type>
  </test>
  <test name="test-22.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>63</size>
      </method>
    </type>
    <type name="S">
      <method name="T GetT()">
        <size>7</size>
      </method>
      <method name="Void Init()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-220.cs">
    <type name="MonoBUG.Bug">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>136</size>
      </method>
    </type>
    <type name="MonoBUG.Foo">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoBUG.FooList">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void Add(MonoBUG.Foo)">
        <size>19</size>
      </method>
      <method name="MonoBUG.FooList+FooEnumerator GetEnumerator()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoBUG.FooList+FooEnumerator">
      <method name="Void .ctor(FooList)">
        <size>31</size>
      </method>
      <method name="Boolean System.Collections.IEnumerator.MoveNext()">
        <size>12</size>
      </method>
      <method name="Void System.Collections.IEnumerator.Reset()">
        <size>12</size>
      </method>
      <method name="MonoBUG.Foo get_Current()">
        <size>46</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>12</size>
      </method>
      <method name="Void Reset()">
        <size>12</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-221.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Blah()">
        <size>2</size>
      </method>
      <method name="Void set_Blah(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Blah()">
        <size>2</size>
      </method>
      <method name="Boolean Test()">
        <size>54</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Blah()">
        <size>0</size>
      </method>
      <method name="Void set_Blah(Int32)">
        <size>0</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Blah()">
        <size>2</size>
      </method>
      <method name="Void set_Blah(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Blah()">
        <size>7</size>
      </method>
      <method name="Boolean Test()">
        <size>54</size>
      </method>
    </type>
    <type name="F">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_Blah()">
        <size>2</size>
      </method>
      <method name="Void set_Blah(Int32)">
        <size>1</size>
      </method>
      <method name="Boolean Test()">
        <size>106</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
    </type>
    <type name="F">
      <method name="Int32 IBlah.get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void IBlah.set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Int32 IBlah.get_Blah()">
        <size>2</size>
      </method>
      <method name="Void IBlah.set_Blah(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-222.cs">
    <type name="Class_1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UIntPtr Valid()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-223.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>65</size>
      </method>
    </type>
  </test>
  <test name="test-224.cs">
    <type name="XmlMemberArrayAttribute">
      <method name="Void .ctor(String)">
        <size>38</size>
      </method>
      <method name="System.Char[] get_Separator()">
        <size>7</size>
      </method>
      <method name="Void set_Separator(System.Char[])">
        <size>8</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>8</size>
      </method>
      <method name="Boolean get_IsRequired()">
        <size>7</size>
      </method>
      <method name="Void set_IsRequired(Boolean)">
        <size>8</size>
      </method>
    </type>
    <type name="t">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-225.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-226.cs">
    <type name="Test226">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>35</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-227.cs">
    <type name="A.T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="test-228.cs">
    <type name="BadRefTest.CtorInc">
      <method name="Void .ctor()">
        <size>30</size>
      </method>
      <method name="Int32 IncByRef(Int32 ByRef)">
        <size>10</size>
      </method>
      <method name="Boolean Results(Int32)">
        <size>98</size>
      </method>
    </type>
    <type name="BadRefTest.Runner">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>43</size>
      </method>
    </type>
  </test>
  <test name="test-229.cs">
    <type name="List">
      <method name="Void .ctor(Int32)">
        <size>19</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>12</size>
      </method>
      <method name="Void Add(Int32)">
        <size>26</size>
      </method>
      <method name="MyEnumerator GetEnumerator()">
        <size>7</size>
      </method>
    </type>
    <type name="UberList">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>38</size>
      </method>
      <method name="Boolean One()">
        <size>62</size>
      </method>
      <method name="Boolean Two()">
        <size>62</size>
      </method>
      <method name="Boolean Three()">
        <size>62</size>
      </method>
    </type>
    <type name="List+MyEnumerator">
      <method name="Void .ctor(List)">
        <size>15</size>
      </method>
      <method name="System.Object get_Current()">
        <size>24</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>31</size>
      </method>
      <method name="Void Reset()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-23.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
      <method name="Int32 get_Value()">
        <size>6</size>
      </method>
      <method name="Void set_Value(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>170</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="System.String get_Value()">
        <size>7</size>
      </method>
      <method name="Void set_Value(System.String)">
        <size>8</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .cctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_IVal()">
        <size>6</size>
      </method>
      <method name="Void set_IVal(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 get_XVal()">
        <size>7</size>
      </method>
      <method name="Void set_XVal(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-230.cs">
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
    </type>
  </test>
  <test name="test-231.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>39</size>
      </method>
      <method name="Void Foo()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-232.cs">
    <type name="CtorInfoTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>977</size>
      </method>
      <method name="Void Assert(System.Object, System.Object)">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="test-233.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>16</size>
      </method>
      <method name="Int32 test_0_beq()">
        <size>29</size>
      </method>
      <method name="Int32 test_0_bne_un()">
        <size>29</size>
      </method>
      <method name="Int32 test_0_conv_r8()">
        <size>29</size>
      </method>
      <method name="Int32 test_0_conv_i()">
        <size>76</size>
      </method>
      <method name="Int32 test_5_conv_r4()">
        <size>8</size>
      </method>
      <method name="Int32 test_5_double_conv_r4()">
        <size>16</size>
      </method>
      <method name="Int32 test_5_float_conv_r8()">
        <size>12</size>
      </method>
      <method name="Int32 test_5_conv_r8()">
        <size>8</size>
      </method>
      <method name="Int32 test_5_add()">
        <size>25</size>
      </method>
      <method name="Int32 test_5_sub()">
        <size>25</size>
      </method>
      <method name="Int32 test_24_mul()">
        <size>25</size>
      </method>
      <method name="Int32 test_4_div()">
        <size>25</size>
      </method>
      <method name="Int32 test_2_rem()">
        <size>25</size>
      </method>
      <method name="Int32 test_2_neg()">
        <size>14</size>
      </method>
      <method name="Int32 test_46_float_add_spill()">
        <size>129</size>
      </method>
      <method name="Int32 test_362880_float_mul_spill()">
        <size>129</size>
      </method>
      <method name="Int32 test_4_long_cast()">
        <size>29</size>
      </method>
      <method name="Int32 test_16_float_cmp()">
        <size>317</size>
      </method>
      <method name="Int32 test_15_float_cmp_un()">
        <size>297</size>
      </method>
      <method name="Int32 test_15_float_branch()">
        <size>219</size>
      </method>
      <method name="Int32 test_15_float_branch_un()">
        <size>219</size>
      </method>
    </type>
    <type name="TestDriver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 RunTests(System.Type, System.String[])">
        <size>571</size>
      </method>
      <method name="Int32 RunTests(System.Type)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-234.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>701</size>
      </method>
    </type>
  </test>
  <test name="test-235.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(T, T)">
        <size>1</size>
      </method>
      <method name="Void Foo(System.Object[])">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-236.cs">
    <type name="Tests.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>42</size>
      </method>
      <method name="System.Object Tests.IIndexer.get_Item(Int32)">
        <size>9</size>
      </method>
      <method name="Void Tests.IIndexer.set_Item(Int32, System.Object)">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="test-237.cs">
    <type name="Params">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>96</size>
      </method>
      <method name="Void foo(System.String, System.Object[])">
        <size>132</size>
      </method>
      <method name="Void Main()">
        <size>45</size>
      </method>
    </type>
    <type name="Params+FOO">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String, System.Object[])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.Object[], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-238.cs">
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ConditionalMethod()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-239.cs">
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ConditionalMethod()">
        <size>7</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ConditionalMethod()">
        <size>1</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-24.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_S()">
        <size>6</size>
      </method>
      <method name="Void set_S(System.String)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>92</size>
      </method>
    </type>
  </test>
  <test name="test-240.cs">
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
      <method name="Void ConditionalMethod()">
        <size>17</size>
      </method>
      <method name="Int32 Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-241.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_SomeProperty()">
        <size>3</size>
      </method>
      <method name="Int32 M()">
        <size>3</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Foo+FooPrivate">
      <method name="Void .ctor(Foo)">
        <size>14</size>
      </method>
      <method name="Int32 get_SomeProperty()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="test-242.cs">
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Location()">
        <size>3</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-243.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Resolve(System.String)">
        <size>2</size>
      </method>
      <method name="System.String Test()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-244.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>136</size>
      </method>
      <method name="MyBool get_t()">
        <size>29</size>
      </method>
      <method name="MyBool get_f()">
        <size>29</size>
      </method>
    </type>
    <type name="MyBool">
      <method name="Void .ctor(Boolean)">
        <size>8</size>
      </method>
      <method name="System.String ToString()">
        <size>18</size>
      </method>
      <method name="MyBool op_BitwiseAnd(MyBool, MyBool)">
        <size>21</size>
      </method>
      <method name="MyBool op_BitwiseOr(MyBool, MyBool)">
        <size>21</size>
      </method>
      <method name="Boolean op_True(MyBool)">
        <size>8</size>
      </method>
      <method name="Boolean op_False(MyBool)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-245.cs">
    <type name="Class2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_def_kind()">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-246.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>38</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void Dispose()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-247.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>71</size>
      </method>
    </type>
    <type name="Blah">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-248.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Foo GetFoo()">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-249.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-25.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>214</size>
      </method>
    </type>
  </test>
  <test name="test-250.cs">
    <type name="Test.foo3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-251.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-252.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Bar(Foo)">
        <size>47</size>
      </method>
      <method name="Void remove_Bar(Foo)">
        <size>47</size>
      </method>
      <method name="Void m1()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>61</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-253.cs">
    <type name="AccessibleAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
  </test>
  <test name="test-254.cs">
    <type name="TestAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test_1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="Test_2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Test()">
        <size>2</size>
      </method>
      <method name="Void set_Test(Int32)">
        <size>1</size>
      </method>
      <method name="Void set_Test2(Boolean)">
        <size>1</size>
      </method>
    </type>
    <type name="Test_3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_e_1(test_delegate)">
        <size>47</size>
      </method>
      <method name="Void remove_e_1(test_delegate)">
        <size>47</size>
      </method>
      <method name="Void add_e_2(test_delegate)">
        <size>47</size>
      </method>
      <method name="Void remove_e_2(test_delegate)">
        <size>47</size>
      </method>
    </type>
    <type name="Test_4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_e_1(test_delegate)">
        <size>1</size>
      </method>
      <method name="Void remove_e_1(test_delegate)">
        <size>1</size>
      </method>
      <method name="Void add_e_2(test_delegate)">
        <size>1</size>
      </method>
      <method name="Void remove_e_2(test_delegate)">
        <size>1</size>
      </method>
      <method name="Void add_e_3(test_delegate)">
        <size>1</size>
      </method>
      <method name="Void remove_e_3(test_delegate)">
        <size>1</size>
      </method>
    </type>
    <type name="ClassMain">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void Assert(System.Object[], Boolean, Int32)">
        <size>71</size>
      </method>
      <method name="Int32 Main()">
        <size>1159</size>
      </method>
    </type>
    <type name="test_delegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.Delegate Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Delegate EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-255.cs">
    <type name="TestAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-256.cs">
    <type name="TableColumn">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_MagicValue()">
        <size>2</size>
      </method>
      <method name="Void set_MagicValue(System.Object)">
        <size>1</size>
      </method>
    </type>
    <type name="Bug">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_TInt()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-257.cs">
    <type name="X">
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void call(Int32 ByRef)">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-258.cs">
    <type name="MyTest.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyTest.Test2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MyTest.Test.Inner.Foo()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-259.cs">
    <type name="Testing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-26.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Int32 Test1()">
        <size>114</size>
      </method>
      <method name="Int32 Adder(System.Int32[])">
        <size>34</size>
      </method>
      <method name="Int32 Test2()">
        <size>46</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
    <type name="Blah+MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Blah+List">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(System.Int32[])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Int32[], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-260.cs">
    <type name="x.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="y.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="b.a">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-261.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="T get_Me()">
        <size>16</size>
      </method>
      <method name="T GetMe()">
        <size>16</size>
      </method>
      <method name="Int32 Test(T)">
        <size>106</size>
      </method>
      <method name="Int32 Main()">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="test-262.cs">
    <type name="n1.Attribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="n3.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Attribute()">
        <size>1</size>
      </method>
      <method name="Void X()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-263.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String GetString(System.Byte[])">
        <size>19</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-264.cs">
    <type name="Proef">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_OnDoSomething(System.EventHandler)">
        <size>24</size>
      </method>
      <method name="Void remove_OnDoSomething(System.EventHandler)">
        <size>24</size>
      </method>
      <method name="Void Temp(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-265.cs">
    <type name="ClassFormatError">
      <method name="Void .ctor(String, Object[])">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="UnsupportedClassVersionError">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-266.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-267.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String Text()">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-268.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>26</size>
      </method>
    </type>
    <type name="X+Nested">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="MyEnum D()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-269.cs">
    <type name="Class1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>359</size>
      </method>
      <method name="Int32 AddABunchOfInts(...)">
        <size>63</size>
      </method>
      <method name="Int32 AddASecondBunchOfInts(Int32, ...)">
        <size>63</size>
      </method>
      <method name="Result VtAddABunchOfInts(...)">
        <size>68</size>
      </method>
      <method name="Result VtAddASecondBunchOfInts(Int32, ...)">
        <size>68</size>
      </method>
      <method name="Int32 InstAddABunchOfInts(...)">
        <size>63</size>
      </method>
      <method name="Int32 InstAddASecondBunchOfInts(Int32, ...)">
        <size>63</size>
      </method>
      <method name="Result InstVtAddABunchOfInts(...)">
        <size>68</size>
      </method>
      <method name="Result InstVtAddASecondBunchOfInts(Int32, ...)">
        <size>68</size>
      </method>
    </type>
    <type name="Result">
      <method name="Void .ctor(Int32)">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="test-27.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean MyMethod(Int32)">
        <size>12</size>
      </method>
      <method name="Int32 AnotherMethod(Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar(Int32, Int32)">
        <size>9</size>
      </method>
      <method name="Int32 Main()">
        <size>134</size>
      </method>
    </type>
    <type name="Blah+MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-270.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(System.String, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>75</size>
      </method>
      <method name="Int32 Test(System.String, ...)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-271.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="C X()">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>63</size>
      </method>
    </type>
    <type name="T+C">
      <method name="IEnumerator GetEnumerator()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-272.cs">
    <type name="BazAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Foo)">
        <size>7</size>
      </method>
      <method name="Void set_foo3(Foo)">
        <size>1</size>
      </method>
      <method name="Foo get_foo3()">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void f0()">
        <size>1</size>
      </method>
      <method name="Void f1()">
        <size>1</size>
      </method>
      <method name="Void f2()">
        <size>1</size>
      </method>
      <method name="Void f3()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-273.cs">
    <type name="FooAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-274.cs">
    <type name="MyClass">
      <method name="Void .ctor(String[])">
        <size>7</size>
      </method>
    </type>
    <type name="ChildClass">
      <method name="Void .ctor()">
        <size>13</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-275.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>111</size>
      </method>
    </type>
    <type name="DelType">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
    </type>
    <type name="S">
      <method name="Void add_MyEvent(DelType)">
        <size>47</size>
      </method>
      <method name="Void remove_MyEvent(DelType)">
        <size>47</size>
      </method>
    </type>
    <type name="DelType">
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="S">
      <method name="Void add_MyEventStatic(DelType)">
        <size>45</size>
      </method>
      <method name="Void remove_MyEventStatic(DelType)">
        <size>45</size>
      </method>
      <method name="Int32 RunInstance()">
        <size>12</size>
      </method>
      <method name="Int32 RunStatic()">
        <size>11</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 &lt;Main&gt;m__0()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__1()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-276.cs">
    <type name="EventTestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Elapsed(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Elapsed(System.EventHandler)">
        <size>47</size>
      </method>
    </type>
    <type name="EntryPoint">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean test(System.Type)">
        <size>17</size>
      </method>
      <method name="Int32 Main()">
        <size>48</size>
      </method>
    </type>
  </test>
  <test name="test-277.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>7</size>
      </method>
      <method name="Int32 X(Byte)">
        <size>2</size>
      </method>
      <method name="Int32 X(Int16)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-278.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>73</size>
      </method>
    </type>
    <type name="Rect">
      <method name="Int32 get_X()">
        <size>7</size>
      </method>
      <method name="Void set_X(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-279.cs">
    <type name="FlagsAttributeDemo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="test-28.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>0</size>
      </method>
      <method name="Int32 EmulateIndexer(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 M()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>20</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>26</size>
      </method>
      <method name="Int32 Main()">
        <size>122</size>
      </method>
    </type>
  </test>
  <test name="test-280.cs">
    <type name="AppFramework.Util.Logic">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Boolean EnumInSet(System.Enum, System.Enum[])">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="test-281.cs">
    <type name="Foo.Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar.Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
    </type>
    <type name="Test.Test1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 World()">
        <size>6</size>
      </method>
    </type>
    <type name="Test.Test2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 World()">
        <size>6</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="test-282.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Add(integer, System.Object)">
        <size>70</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
    </type>
    <type name="integer">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="integer op_Implicit(Int32)">
        <size>7</size>
      </method>
      <method name="Double op_Implicit(integer)">
        <size>13</size>
      </method>
      <method name="integer op_Addition(integer, integer)">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-283.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Y+D GetIt()">
        <size>13</size>
      </method>
      <method name="Y+D GetIt2()">
        <size>13</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
    </type>
    <type name="Y+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-284.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-285.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-286.cs">
    <type name="MethodWrapper">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void SetDeclaredExceptions(MapXml.Throws[])">
        <size>57</size>
      </method>
    </type>
    <type name="MapXml.Throws">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-287.cs">
    <type name="StaticClass">
      <method name="System.String Name()">
        <size>6</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>83</size>
      </method>
    </type>
    <type name="StaticClass+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.Object Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-288.cs">
    <type name="Test.BookAboutMovie">
      <method name="Void .ctor(String)">
        <size>25</size>
      </method>
      <method name="System.String GetItem(Int32)">
        <size>7</size>
      </method>
      <method name="System.String get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>57</size>
      </method>
    </type>
  </test>
  <test name="test-289.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void set_Value(System.String)">
        <size>1</size>
      </method>
      <method name="Void set_Value()">
        <size>1</size>
      </method>
      <method name="Void set_Item(Int32, Int32, Boolean)">
        <size>1</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Boolean get_Item(Boolean)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-29.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Add(Int32)">
        <size>18</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Add(Double)">
        <size>18</size>
      </method>
    </type>
    <type name="Demo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>51</size>
      </method>
    </type>
  </test>
  <test name="test-290.cs">
    <type name="EntryPoint">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_FooEvent(EntryPoint+EventHandler)">
        <size>45</size>
      </method>
      <method name="Void remove_FooEvent(EntryPoint+EventHandler)">
        <size>45</size>
      </method>
      <method name="Void bar_f(System.Object)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>35</size>
      </method>
    </type>
    <type name="EntryPoint+EventHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-291.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-292.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="test-293.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Warning()">
        <size>6</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Warning()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-294.cs">
    <type name="ObsoleteClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>13</size>
      </method>
      <method name="Void .ctor(String, Boolean)">
        <size>14</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>8</size>
      </method>
    </type>
    <type name="DerivedTest">
      <method name="Void .ctor(String)">
        <size>16</size>
      </method>
      <method name="System.String Method()">
        <size>7</size>
      </method>
      <method name="Void T2()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ObsoleteClass2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ObsoleteClass3">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Void .cctor()">
        <size>25</size>
      </method>
    </type>
    <type name="ObsoleteClass4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void T()">
        <size>73</size>
      </method>
    </type>
  </test>
  <test name="test-295.cs">
    <type name="MyAttribute">
      <method name="Void .ctor(Object)">
        <size>14</size>
      </method>
      <method name="System.Object get_my()">
        <size>7</size>
      </method>
    </type>
    <type name="MyConstructorBuilder">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>116</size>
      </method>
      <method name="System.Type MyCreateCallee(System.AppDomain)">
        <size>329</size>
      </method>
    </type>
  </test>
  <test name="test-296.cs">
    <type name="GetElementTypeTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-297.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>326</size>
      </method>
      <method name="Void Login(System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="My">
      <method name="Void .ctor(Object)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-298.cs">
    <type name="A">
      <method name="Int32 op_Addition(Int16, A)">
        <size>2</size>
      </method>
      <method name="Int32 op_UnaryNegation(A)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 op_Addition(Int32, B)">
        <size>2</size>
      </method>
      <method name="Int32 op_UnaryNegation(B)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-299.cs">
    <type name="SampleClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SuperClass op_Increment(SampleClass)">
        <size>6</size>
      </method>
    </type>
    <type name="SuperClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-3.cs">
    <type name="TestIntOps">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SByte sbyte_add(SByte, SByte)">
        <size>7</size>
      </method>
      <method name="Int16 short_add(Int16, Int16)">
        <size>5</size>
      </method>
      <method name="Double double_add(Double, Double)">
        <size>4</size>
      </method>
      <method name="Int32 int_add(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Int32 int_sub(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Int32 int_mul(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Int32 Main()">
        <size>215</size>
      </method>
    </type>
  </test>
  <test name="test-30.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IA.Draw()">
        <size>8</size>
      </method>
      <method name="Void IB.Draw()">
        <size>8</size>
      </method>
    </type>
    <type name="test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>192</size>
      </method>
    </type>
  </test>
  <test name="test-300.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>499</size>
      </method>
    </type>
    <type name="A+B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-301.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>226</size>
      </method>
    </type>
  </test>
  <test name="test-302.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
    </type>
    <type name="A+B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-303.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void System.IDisposable.Dispose()">
        <size>11</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>31</size>
      </method>
    </type>
    <type name="A+B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void System.IDisposable.Dispose()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-304.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>499</size>
      </method>
    </type>
    <type name="A+B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-305.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>226</size>
      </method>
    </type>
  </test>
  <test name="test-306.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
    </type>
    <type name="A+B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-307.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="A+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void System.IDisposable.Dispose()">
        <size>11</size>
      </method>
    </type>
    <type name="A+B">
      <method name="Void .ctor()">
        <size>31</size>
      </method>
    </type>
    <type name="A+B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void System.IDisposable.Dispose()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-308.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-309.cs">
    <type name="MonoBASIC.Parser">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="MonoBASIC.Parser+StateMachine">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void HandleToken(Token)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-31.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>8</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>8</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="test-310.cs">
    <type name="test.Impl">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String GetType(Int32)">
        <size>6</size>
      </method>
      <method name="Boolean IsDone()">
        <size>2</size>
      </method>
    </type>
    <type name="test.myclass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-311.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>38</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
      <method name="Void set_Message(System.String)">
        <size>7</size>
      </method>
      <method name="Boolean DenyMethod()">
        <size>2</size>
      </method>
      <method name="Void Test2()">
        <size>1</size>
      </method>
      <method name="Void Test3()">
        <size>1</size>
      </method>
      <method name="Void Test4()">
        <size>1</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>175</size>
      </method>
    </type>
    <type name="Test2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-312.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Boolean Method(PointF)">
        <size>72</size>
      </method>
      <method name="Boolean Call_constructor_and_implicit()">
        <size>29</size>
      </method>
      <method name="Boolean Init_with_implicit_conv()">
        <size>52</size>
      </method>
      <method name="Boolean Init_ValueType()">
        <size>26</size>
      </method>
      <method name="Boolean InstanceAssignTest()">
        <size>75</size>
      </method>
      <method name="Int32 T()">
        <size>54</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
    </type>
    <type name="PointF">
      <method name="Void .ctor(Single, Single)">
        <size>47</size>
      </method>
    </type>
    <type name="Point">
      <method name="Void .ctor(Int32, Int32)">
        <size>37</size>
      </method>
      <method name="PointF op_Implicit(Point)">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-313.cs">
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A.B.METHOD()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>138</size>
      </method>
    </type>
  </test>
  <test name="test-314.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>28</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>28</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Int32 Main()">
        <size>57</size>
      </method>
    </type>
  </test>
  <test name="test-315.cs">
    <type name="GuardedCollectionValue">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IDirectedEnumerable IDirectedEnumerable.Backwards()">
        <size>2</size>
      </method>
      <method name="IDirectedCollectionValue Backwards()">
        <size>2</size>
      </method>
    </type>
    <type name="GuardedSequenced">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IDirectedCollectionValue Test()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-316.cs">
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 IA.Add(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 IB.Add(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 IA.Add(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 IB.Add(Int32)">
        <size>2</size>
      </method>
      <method name="Void doom()">
        <size>1</size>
      </method>
      <method name="System.Object Clone()">
        <size>2</size>
      </method>
      <method name="Void Dispose()">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(IC)">
        <size>49</size>
      </method>
      <method name="Void Test2(IE)">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-317.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-318.cs">
    <type name="Ev">
      <method name="Void .ctor()">
        <size>29</size>
      </method>
      <method name="Void add_Disposed(System.EventHandler)">
        <size>19</size>
      </method>
      <method name="Void remove_Disposed(System.EventHandler)">
        <size>19</size>
      </method>
      <method name="Void OnClick(System.EventArgs)">
        <size>38</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void my_from_fixed(Int32 ByRef)">
        <size>4</size>
      </method>
      <method name="Void month_from_fixed(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 CreateFromString(Int32)">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void EventInterface.add_Event(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void EventInterface.remove_Event(System.EventHandler)">
        <size>1</size>
      </method>
    </type>
    <type name="C">
      <method name="Double* GetValue(Double)">
        <size>5</size>
      </method>
    </type>
  </test>
  <test name="test-319.cs">
    <type name="ConstFields">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>137</size>
      </method>
      <method name="Int32 Main()">
        <size>324</size>
      </method>
    </type>
  </test>
  <test name="test-32.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="test-320.cs">
    <type name="X">
      <method name="Void .ctor(SByte*, Int32, Int32)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-321.cs">
    <type name="X">
      <method name="Void Dispose()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="test-322.cs">
    <type name="Y">
      <method name="Void .ctor(Byte)">
        <size>14</size>
      </method>
      <method name="Int32 op_Implicit(Y)">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="test-323.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-324.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DoStuff()">
        <size>11</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
    <type name="B">
      <method name="Boolean get_Val()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-325.cs">
    <type name="RequestAttribute">
      <method name="Void .ctor(String, String, String[])">
        <size>7</size>
      </method>
    </type>
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 SomeRequest()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-326.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
    </type>
    <type name="Mapper">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Double Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Double EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Double &lt;Main&gt;m__0(Int32)">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-327.cs">
    <type name="X2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.B.Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-328.cs">
    <type name="A.B.Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-329.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Object)">
        <size>21</size>
      </method>
      <method name="Int32 Main()">
        <size>74</size>
      </method>
    </type>
  </test>
  <test name="test-33.cs">
    <type name="FirstOuter.FirstInner.First">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_MyIdentity()">
        <size>12</size>
      </method>
    </type>
    <type name="FirstOuter.Second">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FirstOuter.SecondInner.Third">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FirstOuter.FirstInner.Fourth">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Fifth">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Application">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>139</size>
      </method>
    </type>
  </test>
  <test name="test-330.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-331.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Byte* get_Ptr()">
        <size>7</size>
      </method>
      <method name="Void set_Ptr(Byte*)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-332.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-333.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Something()">
        <size>1</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Something()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-334.cs">
    <type name="Test.Foo.Index.CompoundFileReader">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test.Foo.Store.Directory">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-335.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Void C(Int32 ByRef)">
        <size>4</size>
      </method>
      <method name="Void Main()">
        <size>70</size>
      </method>
    </type>
    <type name="X+B">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32 ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(Int32 ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-336.cs">
    <type name="X">
      <method name="Void .ctor(Foo)">
        <size>7</size>
      </method>
      <method name="Void .ctor(Bar)">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>19</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-337.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="test-338.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Y+Z fz()">
        <size>6</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y+Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-339.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>17</size>
      </method>
      <method name="Int32 Main()">
        <size>86</size>
      </method>
    </type>
  </test>
  <test name="test-34.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Int32 ByRef, Int32 ByRef)">
        <size>7</size>
      </method>
      <method name="Int32 Bar(Int32, System.Int32[])">
        <size>61</size>
      </method>
      <method name="Void Foo(Int32, Int32)">
        <size>7</size>
      </method>
      <method name="Void In(Int32 ByRef)">
        <size>7</size>
      </method>
      <method name="Void Out(Int32 ByRef)">
        <size>7</size>
      </method>
      <method name="Int32 AddArray(System.Int32[])">
        <size>30</size>
      </method>
      <method name="Int32 AddFancy(FancyInt[])">
        <size>39</size>
      </method>
      <method name="Int32 Main()">
        <size>269</size>
      </method>
    </type>
    <type name="FancyInt">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-340.cs">
    <type name="FLMID.Bugs.BoolOne.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Add(Boolean, Boolean, UInt32, Boolean)">
        <size>8</size>
      </method>
    </type>
    <type name="FLMID.Bugs.BoolOne.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FLMID.Bugs.BoolOne.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-341.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Libs">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-342.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Void Foo(Double)">
        <size>11</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Double)">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>24</size>
      </method>
    </type>
    <type name="A">
      <method name="Boolean get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Boolean get_Item(Double)">
        <size>11</size>
      </method>
    </type>
    <type name="B">
      <method name="Boolean get_Item(Double)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-343.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Concat(System.String, System.String, System.String)">
        <size>1</size>
      </method>
      <method name="Void Concat(System.String[])">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-344.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_y(Y)">
        <size>47</size>
      </method>
      <method name="Void remove_y(Y)">
        <size>47</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>13</size>
      </method>
      <method name="Void Foo()">
        <size>50</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Foo&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-345.cs">
    <type name="EntryPoint">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-346.cs">
    <type name="TestMethods.Class1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>91</size>
      </method>
    </type>
    <type name="TestMethods.ParamClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestMethods.TestParam">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestMethods.BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 AddItem(TestMethods.ParamClass)">
        <size>0</size>
      </method>
    </type>
    <type name="TestMethods.TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 AddItem(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 AddItem(TestMethods.ParamClass)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-347.cs">
    <type name="Whatever.Core.Project">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Whatever.Core.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Whatever.Core.Project get_Project()">
        <size>6</size>
      </method>
    </type>
    <type name="SomethingElse.Core.Project">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Whatever.App.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String Execute()">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-348.cs">
    <type name="BoundAttribute">
      <method name="Void .ctor(Double, Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-349.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Ev1(D)">
        <size>47</size>
      </method>
      <method name="Void remove_Ev1(D)">
        <size>47</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void add_Ev1(D)">
        <size>45</size>
      </method>
      <method name="Void remove_Ev1(D)">
        <size>45</size>
      </method>
      <method name="Void add_Ev2(D)">
        <size>45</size>
      </method>
      <method name="Void remove_Ev2(D)">
        <size>45</size>
      </method>
    </type>
    <type name="X2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>19</size>
      </method>
      <method name="Int32 Main()">
        <size>63</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-35.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
      <method name="Void a()">
        <size>17</size>
      </method>
      <method name="Void w(Int32)">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>298</size>
      </method>
    </type>
  </test>
  <test name="test-350.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+BAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-351.cs">
    <type name="Test.Testee">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar(System.String, System.Object[])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>242</size>
      </method>
    </type>
    <type name="Test.Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String, System.Object[])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.Object[], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-352.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-353.cs">
    <type name="Three">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="One">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Two">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-354.cs">
    <type name="MYAttr">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-355.cs">
    <type name="Level1.Level1.Level2.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-356.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-357.cs">
    <type name="SD.Sd">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void F(Boolean)">
        <size>1</size>
      </method>
    </type>
    <type name="Foo.Bar">
      <method name="Void .ctor()">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>27</size>
      </method>
    </type>
    <type name="Foo.Bar+f_t">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Boolean)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Boolean, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-358.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>56</size>
      </method>
    </type>
  </test>
  <test name="test-359.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-36.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>276</size>
      </method>
    </type>
    <type name="X">
      <method name="IEnumerator GetEnumerator()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="test-360.cs">
    <type name="Application">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-361.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-362.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>17</size>
      </method>
      <method name="Void Test()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-363.cs">
    <type name="Location">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="Element">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Location get_Location()">
        <size>7</size>
      </method>
      <method name="Void set_Location(Location)">
        <size>8</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-364.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>34</size>
      </method>
      <method name="Int32 t1(Int32)">
        <size>33</size>
      </method>
      <method name="Int32 t2(Int32)">
        <size>47</size>
      </method>
      <method name="Void Main2(System.String[])">
        <size>72</size>
      </method>
    </type>
    <type name="Delegable">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_MyDelegate(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_MyDelegate(System.EventHandler)">
        <size>47</size>
      </method>
    </type>
    <type name="X+Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;t1&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;t2&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__1()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Main2&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__2(System.Object, System.EventArgs)">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-365.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
      <method name="Void set_LiteralType(LiteralType)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-366.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="test-367.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="test-368.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-369.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>47</size>
      </method>
      <method name="Boolean op_Equality(Test, Test)">
        <size>14</size>
      </method>
      <method name="Boolean op_Inequality(Test, Test)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-37.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void m(System.Int32[])">
        <size>9</size>
      </method>
      <method name="Int32 test_int_single_dim()">
        <size>88</size>
      </method>
      <method name="Int32 simple_test_double_dim()">
        <size>78</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-370.cs">
    <type name="Test.Application">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 ParseType(System.String)">
        <size>168</size>
      </method>
      <method name="Int32 Main()">
        <size>54</size>
      </method>
    </type>
  </test>
  <test name="test-371.cs">
    <type name="X">
      <method name="Void .ctor(Boolean&amp;)">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor(Boolean&amp;)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-372.cs">
    <type name="GenericNode">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetStat()">
        <size>2</size>
      </method>
    </type>
    <type name="GenericFileNode">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 NotUsed()">
        <size>2</size>
      </method>
    </type>
    <type name="WorkingTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetStat()">
        <size>3</size>
      </method>
    </type>
    <type name="FailingTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetStat()">
        <size>3</size>
      </method>
    </type>
    <type name="TestWrapper">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test(Node, System.String)">
        <size>39</size>
      </method>
      <method name="Int32 Main()">
        <size>44</size>
      </method>
    </type>
  </test>
  <test name="test-373.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="test-374.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Rest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-375.cs">
    <type name="a">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="a+b">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="c">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="c+d">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-376.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>72</size>
      </method>
    </type>
  </test>
  <test name="test-377.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void test()">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-378.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-379.cs">
    <type name="DeadCode">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="System.String SomeFunc(System.String)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-38.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>20</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>26</size>
      </method>
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
      <method name="Int32 get_Bar()">
        <size>7</size>
      </method>
      <method name="Void set_Bar(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 get_Item(UInt32)">
        <size>20</size>
      </method>
      <method name="Void set_Item(UInt32, UInt32)">
        <size>26</size>
      </method>
      <method name="UInt32 Foo()">
        <size>2</size>
      </method>
      <method name="UInt32 get_Bar()">
        <size>7</size>
      </method>
      <method name="Void set_Bar(UInt32)">
        <size>8</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>268</size>
      </method>
    </type>
  </test>
  <test name="test-380.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-381.cs">
    <type name="Application">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-382.cs">
    <type name="Dec">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>108</size>
      </method>
    </type>
  </test>
  <test name="test-383.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>37</size>
      </method>
      <method name="X testme(Int32 ByRef)">
        <size>5</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-384.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
      <method name="Void Test()">
        <size>40</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-385.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-386.cs">
    <type name="SuperDecimal">
      <method name="Void .ctor(Decimal)">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
      <method name="SuperDecimal op_Implicit(Decimal)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-387.cs">
    <type name="ObjectID">
      <method name="Void .ctor(Int64)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
      <method name="Int64 op_Implicit(ObjectID)">
        <size>8</size>
      </method>
      <method name="ObjectID op_Implicit(Int64)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-388.cs">
    <type name="Schemas.basefieldtype">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>2</size>
      </method>
    </type>
    <type name="Schemas.fieldtype">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>18</size>
      </method>
    </type>
    <type name="Schemas.compoundfield">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>18</size>
      </method>
    </type>
    <type name="Schemas.field">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>18</size>
      </method>
    </type>
    <type name="Schemas.formdata">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>12</size>
      </method>
    </type>
    <type name="Schemas.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-389.cs">
    <type name="Schemas.basefieldtype">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>2</size>
      </method>
    </type>
    <type name="Schemas.fieldtype">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>18</size>
      </method>
    </type>
    <type name="Schemas.compoundfield">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>18</size>
      </method>
    </type>
    <type name="Schemas.field">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>18</size>
      </method>
    </type>
    <type name="Schemas.formdata">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object Instantiate()">
        <size>12</size>
      </method>
    </type>
    <type name="Schemas.M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-39.cs">
    <type name="SimpleAttribute">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="System.String get_AnotherArg()">
        <size>7</size>
      </method>
      <method name="Void set_AnotherArg(System.String)">
        <size>8</size>
      </method>
      <method name="Int64 get_LongValue()">
        <size>3</size>
      </method>
      <method name="Void set_LongValue(Int64)">
        <size>1</size>
      </method>
      <method name="System.Int64[] get_ArrayValue()">
        <size>7</size>
      </method>
      <method name="Void set_ArrayValue(System.Int64[])">
        <size>1</size>
      </method>
    </type>
    <type name="Blah2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Blah3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>181</size>
      </method>
    </type>
  </test>
  <test name="test-390.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="C+O">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
    <type name="C+N">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
    <type name="C+M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-391.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Void Foo(Int32 ByRef)">
        <size>1</size>
      </method>
      <method name="Void Bar(Boolean ByRef)">
        <size>4</size>
      </method>
      <method name="Void Bar(Boolean)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-392.cs">
    <type name="C">
      <method name="Int32 Test()">
        <size>80</size>
      </method>
      <method name="Int32 Main()">
        <size>16</size>
      </method>
    </type>
    <type name="C+S">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-393.cs">
    <type name="A">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="A MethodSampleA(System.String)">
        <size>7</size>
      </method>
      <method name="B MethodSampleB(System.String)">
        <size>7</size>
      </method>
      <method name="C MethodSampleC(System.String)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>113</size>
      </method>
    </type>
    <type name="Tester+MethodHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="A Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="A EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-394.cs">
    <type name="A">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor(String, String)">
        <size>31</size>
      </method>
      <method name="System.String get_Value()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String MethodSampleA(A)">
        <size>7</size>
      </method>
      <method name="System.String MethodSampleB(B)">
        <size>7</size>
      </method>
      <method name="System.String MethodSampleC(C)">
        <size>23</size>
      </method>
      <method name="Void Main()">
        <size>128</size>
      </method>
    </type>
    <type name="Tester+MethodHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke(C)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(C, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-395.cs">
    <type name="A">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor(String)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor(String, String)">
        <size>31</size>
      </method>
      <method name="System.String get_Value()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MethodSample(B, A, C)">
        <size>55</size>
      </method>
      <method name="Void Main()">
        <size>71</size>
      </method>
    </type>
    <type name="Tester+MethodHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(C, C, C)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(C, C, C, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-396.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-397.cs">
    <type name="TypeCheckAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="PropertyCheckAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AccessorCheckAttribute">
      <method name="Void .ctor(MethodAttributes)">
        <size>14</size>
      </method>
      <method name="MethodAttributes get_Attributes()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>132</size>
      </method>
      <method name="Void CheckFlags(System.Reflection.PropertyInfo, System.Reflection.MethodInfo)">
        <size>153</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Value1()">
        <size>2</size>
      </method>
      <method name="Void set_Value1(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_Value2()">
        <size>2</size>
      </method>
      <method name="Void set_Value2(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_Value3()">
        <size>2</size>
      </method>
      <method name="Void set_Value3(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_Value4()">
        <size>2</size>
      </method>
      <method name="Void set_Value4(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_Value5()">
        <size>2</size>
      </method>
      <method name="Void set_Value5(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-398.cs">
    <type name="Tester">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>118</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Int32 get_Count()">
        <size>7</size>
      </method>
      <method name="Void set_Count(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Void set_Count(Int32)">
        <size>1</size>
      </method>
      <method name="Void SetCount(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>8</size>
      </method>
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
      <method name="Void set_Message(System.String)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-399.cs">
    <type name="TestVararg">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>343</size>
      </method>
      <method name="Void F(RuntimeArgumentHandle)">
        <size>1</size>
      </method>
      <method name="Void G(...)">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-4.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void test(SByte)">
        <size>8</size>
      </method>
      <method name="Void test(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>102</size>
      </method>
    </type>
  </test>
  <test name="test-40.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>203</size>
      </method>
    </type>
  </test>
  <test name="test-400.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>52</size>
      </method>
      <method name="Int32 TestDereference()">
        <size>89</size>
      </method>
      <method name="Int32 TestPtrAdd()">
        <size>86</size>
      </method>
      <method name="Int32 TestPtrAssign()">
        <size>198</size>
      </method>
      <method name="Int32 TestPtrArithmetic()">
        <size>226</size>
      </method>
      <method name="Int32 TestMultiple()">
        <size>93</size>
      </method>
      <method name="Int32 Main()">
        <size>82</size>
      </method>
    </type>
  </test>
  <test name="test-401.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>170</size>
      </method>
    </type>
  </test>
  <test name="test-402.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-403.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>91</size>
      </method>
    </type>
  </test>
  <test name="test-404.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>48</size>
      </method>
      <method name="Int32* get_v()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="test-405.cs">
    <type name="testapp.LibTestAPI">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Create()">
        <size>17</size>
      </method>
    </type>
    <type name="testapp.TestApp">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-406.cs">
    <type name="TestCase.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>180</size>
      </method>
      <method name="UInt32 DoOp(UInt32*)">
        <size>11</size>
      </method>
      <method name="UInt32 DoOp2(UInt32*)">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="test-407.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-408.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>44</size>
      </method>
    </type>
  </test>
  <test name="test-409.cs">
    <type name="X">
      <method name="Int32 Main()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-41.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A(Int32 ByRef, UInt32 ByRef, SByte ByRef, Byte ByRef, Int64 ByRef, UInt64 ByRef, Int16 ByRef, UInt16 ByRef, Char ByRef, X ByRef, Single ByRef, Double ByRef)">
        <size>188</size>
      </method>
      <method name="Int32 Main()">
        <size>228</size>
      </method>
    </type>
  </test>
  <test name="test-410.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-411.cs">
    <type name="QtSamples.QtClass">
      <method name="Void .ctor()">
        <size>24</size>
      </method>
      <method name="Void pressEvent()">
        <size>1</size>
      </method>
    </type>
    <type name="QtSamples.Testing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-412.cs">
    <type name="Foo.Baz">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-413.cs">
    <type name="Driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-414.cs">
    <type name="BB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Data()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-415.cs">
    <type name="MyTestExtended">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String GetName()">
        <size>6</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-416.cs">
    <type name="ModTest">
      <method name="Void Main(System.String[])">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="n1.Adder">
      <method name="Int32 Add(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-417.cs">
    <type name="blah2.MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_DoSomething(blah.MyFunnyDelegate)">
        <size>47</size>
      </method>
      <method name="Void remove_DoSomething(blah.MyFunnyDelegate)">
        <size>47</size>
      </method>
      <method name="Void DoSomethingFunny()">
        <size>46</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-418.cs">
    <type name="M3">
      <method name="Int32 Main()">
        <size>144</size>
      </method>
      <method name="Void .ctor()">
        <size>12</size>
      </method>
    </type>
    <type name="M1">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="M2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-419.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-42.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>14</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>15</size>
      </method>
      <method name="Int32 get_P()">
        <size>7</size>
      </method>
      <method name="Void set_P(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Z get_P()">
        <size>2</size>
      </method>
      <method name="Void set_P(Z)">
        <size>1</size>
      </method>
      <method name="Z op_Increment(Z)">
        <size>16</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 p_pre_increment(X)">
        <size>18</size>
      </method>
      <method name="Int32 p_post_increment(X)">
        <size>18</size>
      </method>
      <method name="Int32 i_pre_increment(X)">
        <size>24</size>
      </method>
      <method name="Int32 i_post_increment(X)">
        <size>24</size>
      </method>
      <method name="Z overload_increment(Z)">
        <size>10</size>
      </method>
      <method name="Z overload_pre_increment(Z)">
        <size>10</size>
      </method>
      <method name="Z ugly(Z)">
        <size>21</size>
      </method>
      <method name="Int32 simple(Int32)">
        <size>62</size>
      </method>
      <method name="Int32 arrays()">
        <size>234</size>
      </method>
      <method name="Int32 Main()">
        <size>161</size>
      </method>
    </type>
  </test>
  <test name="test-420.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-421.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void SetObject(System.String)">
        <size>12</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void SetObject(System.String)">
        <size>18</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="test-422.cs">
    <type name="HelloWorld.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>17</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>1</size>
      </method>
      <method name="Boolean CheckTrueThat()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-423.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Func(Int32 ByRef)">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>10</size>
      </method>
      <method name="Void lowLevelCall(Int32*)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-424.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-425.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="AAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-426.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-427.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-428.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
    <type name="X+A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-429.cs">
    <type name="Foo.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-43.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 test_single(System.Int32[])">
        <size>34</size>
      </method>
      <method name="Int32 test_continue(System.Int32[])">
        <size>54</size>
      </method>
      <method name="Boolean test_double(System.Double[])">
        <size>58</size>
      </method>
      <method name="Int32 test_break(System.Int32[])">
        <size>54</size>
      </method>
      <method name="Boolean test_multi(System.Int32[,])">
        <size>87</size>
      </method>
      <method name="Int32 Main()">
        <size>284</size>
      </method>
    </type>
  </test>
  <test name="test-430.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
    <type name="X+A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-431.cs">
    <type name="Foo.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-432.cs">
    <type name="Foo.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-433.cs">
    <type name="Foo.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="test-434.cs">
    <type name="Foo.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="test-435.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-436.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-437.cs">
    <type name="T2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>71</size>
      </method>
    </type>
  </test>
  <test name="test-438.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-439.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>45</size>
      </method>
    </type>
    <type name="LayerMask">
      <method name="Int32 op_Implicit(LayerMask)">
        <size>8</size>
      </method>
      <method name="LayerMask op_Implicit(Int32)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-44.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 dob(System.Int32[,])">
        <size>83</size>
      </method>
      <method name="Int32 count(System.Object)">
        <size>39</size>
      </method>
      <method name="Int32 Main()">
        <size>133</size>
      </method>
    </type>
  </test>
  <test name="test-440.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>26</size>
      </method>
      <method name="Double op_Implicit(A)">
        <size>10</size>
      </method>
      <method name="Int32 op_Implicit(A)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-441.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-442.cs">
    <type name="ConsoleApplication1.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>70</size>
      </method>
    </type>
  </test>
  <test name="test-443.cs">
    <type name="C">
      <method name="Void .ctor(ITopic)">
        <size>31</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-444.cs">
    <type name="쯠쯡쯢">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-445.cs">
    <type name="ConvFromInt">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>16</size>
      </method>
      <method name="ConvFromInt op_Implicit(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>45</size>
      </method>
      <method name="Void Main()">
        <size>111</size>
      </method>
    </type>
  </test>
  <test name="test-446.cs">
    <type name="FooTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void Foo(UInt64)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-447.cs">
    <type name="System.MonoTODOAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="System.Web.HttpBrowserCapabilities">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Version get_A()">
        <size>6</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-448.cs">
    <type name="MonoDivideProblem">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>17</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-449.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Z()">
        <size>19</size>
      </method>
      <method name="Void &lt;Z&gt;m__0(System.Object)">
        <size>25</size>
      </method>
      <method name="Void &lt;Z&gt;m__1(System.Object)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-45.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>97</size>
      </method>
      <method name="Int32 Main()">
        <size>765</size>
      </method>
    </type>
  </test>
  <test name="test-450.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>53</size>
      </method>
      <method name="Byte op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="A op_Implicit(Int32)">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-451.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-452.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-453.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-454.cs">
    <type name="FooAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>247</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-455.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>27</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Int32 GetHashCode()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-456.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void foo()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-457.cs">
    <type name="Number">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IDouble.Add(Double)">
        <size>11</size>
      </method>
      <method name="Void IInteger.Add(Int32)">
        <size>11</size>
      </method>
      <method name="Int32 Main()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-458.cs">
    <type name="MyAttr">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Type)">
        <size>7</size>
      </method>
      <method name="Void .ctor(String)">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="ClassA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ClassB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ClassC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ClassD">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-459.cs">
    <type name="CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
    <type name="CC+IfElseStateMachine">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void HandleToken(Token)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-46.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 cast_int(System.Object)">
        <size>7</size>
      </method>
      <method name="UInt32 cast_uint(System.Object)">
        <size>7</size>
      </method>
      <method name="Int16 cast_short(System.Object)">
        <size>7</size>
      </method>
      <method name="Char cast_char(System.Object)">
        <size>7</size>
      </method>
      <method name="UInt16 cast_ushort(System.Object)">
        <size>7</size>
      </method>
      <method name="Byte cast_byte(System.Object)">
        <size>7</size>
      </method>
      <method name="SByte cast_sbyte(System.Object)">
        <size>7</size>
      </method>
      <method name="Int64 cast_long(System.Object)">
        <size>7</size>
      </method>
      <method name="UInt64 cast_ulong(System.Object)">
        <size>7</size>
      </method>
      <method name="Single cast_float(System.Object)">
        <size>7</size>
      </method>
      <method name="Double cast_double(System.Object)">
        <size>7</size>
      </method>
      <method name="Boolean cast_bool(System.Object)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>1126</size>
      </method>
    </type>
  </test>
  <test name="test-460.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-461.cs">
    <type name="Valtest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>50</size>
      </method>
    </type>
    <type name="Value">
      <method name="Void .ctor(Object)">
        <size>1</size>
      </method>
      <method name="System.Object get_Val()">
        <size>7</size>
      </method>
      <method name="System.Enum get_Val2()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-462.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method(X)">
        <size>1</size>
      </method>
      <method name="Void Method(System.String)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-463.cs">
    <type name="PropertySorter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="PathItemBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="PathItemBase+TypeConverter">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-464.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>85</size>
      </method>
    </type>
  </test>
  <test name="test-465.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>85</size>
      </method>
    </type>
  </test>
  <test name="test-466.cs">
    <type name="A.X.Test">
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-467.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+D">
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+D">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-468.cs">
    <type name="CorMetaDataDispenserExClass">
      <method name="Void .ctor()">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void XXX()">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-469.cs">
    <type name="Lambda">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void f(Int32)">
        <size>7</size>
      </method>
      <method name="Del[] Make2(Int32)">
        <size>50</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
    </type>
    <type name="Del">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Lambda+&lt;Make2&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(Int32)">
        <size>23</size>
      </method>
      <method name="Void &lt;&gt;m__1(Int32)">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-47.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Boolean f()">
        <size>24</size>
      </method>
      <method name="Boolean t()">
        <size>24</size>
      </method>
      <method name="Int32 Main()">
        <size>404</size>
      </method>
    </type>
  </test>
  <test name="test-470.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_ASTNodeTypeName()">
        <size>16</size>
      </method>
    </type>
    <type name="Demo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-471.cs">
    <type name="AAttribute">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Int32 Main()">
        <size>39</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-472.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Prop()">
        <size>7</size>
      </method>
      <method name="Void set_Prop(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>79</size>
      </method>
    </type>
  </test>
  <test name="test-473.cs">
    <type name="UnixMarshal">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>24</size>
      </method>
      <method name="Void Default(Int32)">
        <size>1</size>
      </method>
      <method name="System.String GetDescription(Error)">
        <size>2</size>
      </method>
    </type>
    <type name="UnixMarshal2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String GetDescription(Error)">
        <size>2</size>
      </method>
    </type>
    <type name="Stdlib">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestConst">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="XX">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Syscall">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 poll(Pollfd[], UInt32, Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="EnumWrapper">
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="SignalHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="PS">
      <method name="Void GetDescription(Error)">
        <size>1</size>
      </method>
    </type>
    <type name="Value">
      <method name="EnumWrapper op_Explicit(Value)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-474.cs">
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void TestPreinc(Int32)">
        <size>57</size>
      </method>
      <method name="Void TestPostinc(Int32)">
        <size>57</size>
      </method>
      <method name="Void Assert(Int32, Int32)">
        <size>67</size>
      </method>
    </type>
    <type name="Z+X">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Z+&lt;TestPreinc&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>38</size>
      </method>
    </type>
    <type name="Z+&lt;TestPostinc&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="test-475.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>24</size>
      </method>
      <method name="Void add_e(MyDelegate)">
        <size>45</size>
      </method>
      <method name="Void remove_e(MyDelegate)">
        <size>45</size>
      </method>
      <method name="Void Test(Int32)">
        <size>17</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
    <type name="MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-476.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-477.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Int32 ByRef)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-478.cs">
    <type name="Test.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test.TestAttribute">
      <method name="Void .ctor(TestEnum2)">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Test2Attribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-479.cs">
    <type name="Test.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-48.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
      <method name="Void Test_1()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-480.cs">
    <type name="A">
      <method name="Void Dispose()">
        <size>1</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Test(System.Object)">
        <size>271</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void &lt;Test&gt;m__0(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-481.cs">
    <type name="TestClass">
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
    <type name="TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32 ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(Int32 ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void &lt;Main&gt;m__0(Int32 ByRef)">
        <size>4</size>
      </method>
    </type>
  </test>
  <test name="test-482.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M4(Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void M4(Int32, ...)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-483.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
    <type name="B">
      <method name="System.Object clone()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-484.cs">
    <type name="Test.TestBit">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-485.cs">
    <type name="MonoBUG">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-486.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>131</size>
      </method>
    </type>
  </test>
  <test name="test-487.cs">
    <type name="X">
      <method name="Void .ctor(Object)">
        <size>72</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-488.cs">
    <type name="P">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>166</size>
      </method>
    </type>
    <type name="Q">
      <method name="Void .ctor(P)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-489.cs">
    <type name="test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-49.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 s(Byte)">
        <size>2182</size>
      </method>
      <method name="Int32 test(Int32)">
        <size>70</size>
      </method>
      <method name="Int32 tests(System.String)">
        <size>152</size>
      </method>
      <method name="Int32 testn(System.String)">
        <size>76</size>
      </method>
      <method name="Int32 testm(System.String)">
        <size>77</size>
      </method>
      <method name="Int32 testo(System.String)">
        <size>79</size>
      </method>
      <method name="Int32 testp(System.String)">
        <size>109</size>
      </method>
      <method name="Int32 test_def(System.String)">
        <size>119</size>
      </method>
      <method name="Int32 test_coverage(Int32)">
        <size>18</size>
      </method>
      <method name="Int32 test_goto(Int32)">
        <size>39</size>
      </method>
      <method name="Int32 test_memberaccess(System.String)">
        <size>76</size>
      </method>
      <method name="Int32 test_string_multiple_targets(System.String)">
        <size>128</size>
      </method>
      <method name="Int32 test_casts(Int32)">
        <size>17</size>
      </method>
      <method name="Int32 testSwitchEnumLong(TestEnum)">
        <size>56</size>
      </method>
      <method name="Int32 test_long_enum_switch()">
        <size>66</size>
      </method>
      <method name="Int32 tests_default(System.String)">
        <size>107</size>
      </method>
      <method name="Int32 tests_default_2(System.String)">
        <size>124</size>
      </method>
      <method name="Void test_76590(System.String)">
        <size>107</size>
      </method>
      <method name="Void test_77964()">
        <size>37</size>
      </method>
      <method name="Boolean bug_78860()">
        <size>114</size>
      </method>
      <method name="Int32 Main()">
        <size>1037</size>
      </method>
    </type>
  </test>
  <test name="test-490.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>39</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-491.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="AttrA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AttrB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-492.cs">
    <type name="Test.My1Attribute">
      <method name="Void .ctor(Object)">
        <size>19</size>
      </method>
    </type>
    <type name="Test.My2Attribute">
      <method name="Void .ctor(String[])">
        <size>21</size>
      </method>
    </type>
    <type name="Test.My3Attribute">
      <method name="Void .ctor(Byte)">
        <size>24</size>
      </method>
    </type>
    <type name="Test.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>60</size>
      </method>
    </type>
  </test>
  <test name="test-493.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_f()">
        <size>2</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 bar()">
        <size>11</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-494.cs">
    <type name="Agresso.Foundation.Function">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Agresso.Foundation.Translate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Agresso.Foundation.Function, System.Text.StringBuilder ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Agresso.Foundation.Function, System.Text.StringBuilder ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(System.Text.StringBuilder ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-495.cs">
    <type name="plj.aClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="plj.aClass op_Implicit(plj.fromClass)">
        <size>2</size>
      </method>
    </type>
    <type name="plj.realClass1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="plj.realClass1 op_Implicit(plj.fromClass)">
        <size>2</size>
      </method>
    </type>
    <type name="plj.fromClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-496.cs">
    <type name="Baz">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-497.cs">
    <type name="PlotMenuItem">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(EventHandler)">
        <size>54</size>
      </method>
      <method name="Int32 Main()">
        <size>50</size>
      </method>
      <method name="Void MenuItem_Click(System.Object, System.EventArgs)">
        <size>11</size>
      </method>
      <method name="System.EventHandler get_Callback()">
        <size>7</size>
      </method>
      <method name="Void set_Callback(System.EventHandler)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-498.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>81</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Single)">
        <size>0</size>
      </method>
      <method name="Int32 get_Foo()">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-499.cs">
    <type name="A">
      <method name="Int32 switch1(UInt64)">
        <size>96</size>
      </method>
      <method name="Int32 switch2(SByte)">
        <size>26</size>
      </method>
      <method name="Int32 switch3(Int64)">
        <size>27</size>
      </method>
      <method name="Int32 switch4(UInt64)">
        <size>39</size>
      </method>
      <method name="Int32 switch5(UInt64)">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>116</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-5.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="test-500.cs">
    <type name="SomeCustomAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>115</size>
      </method>
    </type>
  </test>
  <test name="test-501.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DumpException(Tests+FilterStackFrame)">
        <size>1</size>
      </method>
      <method name="Void foo(Boolean ByRef)">
        <size>49</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>8</size>
      </method>
    </type>
    <type name="Tests+FilterStackFrame">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Boolean Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Boolean &lt;foo&gt;m__0(System.Object)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-502.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Property()">
        <size>3</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Property()">
        <size>3</size>
      </method>
    </type>
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Value()">
        <size>2</size>
      </method>
      <method name="Void set_Value(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="DerivedClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Value()">
        <size>2</size>
      </method>
    </type>
    <type name="ErrorClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Value()">
        <size>2</size>
      </method>
      <method name="Void set_Value(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-503.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-504.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
      <method name="Int32 f()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-505.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 f()">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-506.cs">
    <type name="ProtectedSetter.BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>0</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>0</size>
      </method>
    </type>
    <type name="ProtectedSetter.DerivedClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Name()">
        <size>2</size>
      </method>
      <method name="Void set_Name(System.String)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-507.cs">
    <type name="NewslotVirtualFinal.NewslotVirtualFinal">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void SomeMethod()">
        <size>1</size>
      </method>
      <method name="Void SomeMethod2()">
        <size>1</size>
      </method>
    </type>
    <type name="NewslotVirtualFinal.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>83</size>
      </method>
    </type>
  </test>
  <test name="test-508.cs">
    <type name="OutputParam">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>14</size>
      </method>
      <method name="Void Method(Int32 ByRef)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-509.cs">
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_OnEvent(DelegateHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_OnEvent(DelegateHandler)">
        <size>47</size>
      </method>
    </type>
    <type name="ExtendingClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="DelegateHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-51.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>25</size>
      </method>
      <method name="Int32 get_b_int_property()">
        <size>7</size>
      </method>
      <method name="Void set_b_int_property(Int32)">
        <size>8</size>
      </method>
      <method name="System.String b_get_id()">
        <size>6</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>26</size>
      </method>
      <method name="Int32 get_b_int_property()">
        <size>7</size>
      </method>
      <method name="Void set_b_int_property(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 Test()">
        <size>138</size>
      </method>
    </type>
    <type name="boot">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-510.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void test39(Int32 ByRef)">
        <size>36</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-511.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>17</size>
      </method>
      <method name="Void f()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-512.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>17</size>
      </method>
      <method name="Void f()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-513.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>246</size>
      </method>
    </type>
  </test>
  <test name="test-514.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void HandleConflict(Int32)">
        <size>31</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-515.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="test-516.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="test-517.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-518.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-519.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
      <method name="Void f()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-52.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>28</size>
      </method>
      <method name="System.Object get_Current()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>36</size>
      </method>
      <method name="Y GetEnumerator()">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>501</size>
      </method>
    </type>
  </test>
  <test name="test-520.cs">
    <type name="FakeInt">
      <method name="Void .ctor(Int64)">
        <size>14</size>
      </method>
      <method name="Int64 op_Implicit(FakeInt)">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-521.cs">
    <type name="Tests">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void CallWithContextN(System.Object, System.Object[])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Tests+CallTargetWithContextN">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object, System.Object[])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.Object[], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-522.cs">
    <type name="Const">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-523.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 stuff()">
        <size>15</size>
      </method>
      <method name="Int32 stuff2()">
        <size>29</size>
      </method>
      <method name="Int32 stuff3()">
        <size>29</size>
      </method>
      <method name="Void stuff4()">
        <size>10</size>
      </method>
      <method name="Void stuff_finally()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-524.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>100</size>
      </method>
    </type>
  </test>
  <test name="test-525.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Finalize()">
        <size>36</size>
      </method>
      <method name="Int32 Test1()">
        <size>28</size>
      </method>
      <method name="Void Test2()">
        <size>56</size>
      </method>
      <method name="Void Main()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-526.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Foo(IListCounter)">
        <size>8</size>
      </method>
      <method name="Void Foo2(IC)">
        <size>8</size>
      </method>
      <method name="Void Foo3(ICC)">
        <size>8</size>
      </method>
      <method name="Void Foo4(IM2)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-527.cs">
    <type name="Repro">
      <method name="Void .ctor()">
        <size>19</size>
      </method>
      <method name="Int32 Main()">
        <size>48</size>
      </method>
      <method name="Void foo()">
        <size>61</size>
      </method>
      <method name="Int32 bar()">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="test-528.cs">
    <type name="MicroFocus.MONO.Bugs.Odd">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-529.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-53.cs">
    <type name="MyDispose">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Dispose()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>247</size>
      </method>
    </type>
  </test>
  <test name="test-530.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void e(System.Object[])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-531.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-532.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>47</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-533.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void True(Boolean)">
        <size>10</size>
      </method>
      <method name="Void False(Boolean)">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
    </type>
  </test>
  <test name="test-535.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>76</size>
      </method>
      <method name="Void Compile()">
        <size>19</size>
      </method>
      <method name="Void M(Int64)">
        <size>1</size>
      </method>
      <method name="Void M(UInt64)">
        <size>1</size>
      </method>
      <method name="Void M(System.Object)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-536.cs">
    <type name="Test">
      <method name="Void add_Foo(FooHandler)">
        <size>45</size>
      </method>
      <method name="Void remove_Foo(FooHandler)">
        <size>45</size>
      </method>
      <method name="Void OnFooTest()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>31</size>
      </method>
    </type>
    <type name="FooHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void &lt;Main&gt;m__0()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-537.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_H()">
        <size>6</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+Derived+Nested">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void G()">
        <size>21</size>
      </method>
    </type>
    <type name="Derived">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Derived+Nested">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void G()">
        <size>18</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-538.cs">
    <type name="concrete">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="concrete getConcrete(IInterface)">
        <size>6</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>20</size>
      </method>
    </type>
    <type name="testDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="IInterface Invoke(concrete)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(concrete, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="IInterface EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-539.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>84</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-54.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean v()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-540.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Byte op_Implicit(A)">
        <size>3</size>
      </method>
    </type>
    <type name="Constraint">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(System.Object)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>89</size>
      </method>
      <method name="Constraint op_LogicalNot(Constraint)">
        <size>2</size>
      </method>
      <method name="Constraint op_UnaryPlus(Constraint)">
        <size>2</size>
      </method>
      <method name="Constraint op_OnesComplement(Constraint)">
        <size>2</size>
      </method>
      <method name="Constraint op_UnaryNegation(Constraint)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-541.cs">
    <type name="ClassMain">
      <method name="Void Main()">
        <size>31</size>
      </method>
      <method name="Void set_test(Boolean)">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__0(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ClassMain+D">
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-542.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ARec">
      <method name="Void .ctor(Decimal)">
        <size>14</size>
      </method>
      <method name="Decimal Round(Int32)">
        <size>13</size>
      </method>
      <method name="Decimal Round(Decimal, Int32)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-543.cs">
    <type name="BetterMethod">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(System.Boolean[])">
        <size>2</size>
      </method>
      <method name="System.String get_Item(Boolean, System.Object)">
        <size>6</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Item(Int32, System.String[])">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, System.String[], Int32)">
        <size>40</size>
      </method>
      <method name="System.Object get_Item(Int32, System.Object[])">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, System.Object[], System.Object)">
        <size>40</size>
      </method>
      <method name="Boolean get_Item(Int32, Boolean, System.Object[])">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, Boolean, System.Object[], Boolean)">
        <size>40</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>258</size>
      </method>
    </type>
  </test>
  <test name="test-544.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-545.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Dingus">
      <method name="Void .ctor(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-546.cs">
    <type name="NameSpace.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-547.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-548.cs">
    <type name="Bugs.Bug0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
    <type name="Bugs.Bug0+MyBoolean">
      <method name="Void .ctor(Boolean)">
        <size>8</size>
      </method>
      <method name="MyBoolean op_Implicit(Boolean)">
        <size>7</size>
      </method>
      <method name="Boolean op_Implicit(MyBoolean)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-549.cs">
    <type name="Do">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Register(Get)">
        <size>1</size>
      </method>
      <method name="Void Register(System.Object)">
        <size>1</size>
      </method>
      <method name="System.Object MyGet(Do)">
        <size>2</size>
      </method>
      <method name="Void X()">
        <size>19</size>
      </method>
    </type>
    <type name="User">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Get">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.Object Invoke(Do)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Do, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-55.cs">
    <type name="A.B.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hola()">
        <size>11</size>
      </method>
    </type>
    <type name="X.Y.Z.W">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Ahoj()">
        <size>11</size>
      </method>
    </type>
    <type name="Foo.System">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X()">
        <size>11</size>
      </method>
    </type>
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-550.cs">
    <type name="Bla.Blub.Fo‿o">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-551.cs">
    <type name="System.Int32">
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-552.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(C)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-553.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Add(System.Object)">
        <size>1</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Add(System.Object)">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-554.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>145</size>
      </method>
    </type>
  </test>
  <test name="test-555.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>351</size>
      </method>
    </type>
  </test>
  <test name="test-556.cs">
    <type name="S">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Frobnikator()">
        <size>1</size>
      </method>
      <method name="Void CharToX()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="test-557.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-558.cs">
    <type name="TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
      <method name="Void TestMethod(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="TestClass+OneDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-559.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_TestEvent(B+TestDelegate)">
        <size>47</size>
      </method>
      <method name="Void remove_TestEvent(B+TestDelegate)">
        <size>47</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-56.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_P()">
        <size>7</size>
      </method>
      <method name="Void set_P(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_Q()">
        <size>0</size>
      </method>
      <method name="Void set_Q(Int32)">
        <size>0</size>
      </method>
      <method name="Int32 get_R()">
        <size>7</size>
      </method>
      <method name="Void set_R(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_P()">
        <size>7</size>
      </method>
      <method name="Void set_P(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_Q()">
        <size>7</size>
      </method>
      <method name="Void set_Q(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Q()">
        <size>7</size>
      </method>
      <method name="Void set_Q(Int32)">
        <size>8</size>
      </method>
      <method name="Int32 get_R()">
        <size>7</size>
      </method>
      <method name="Void set_R(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>221</size>
      </method>
    </type>
  </test>
  <test name="test-560.cs">
    <type name="Bugs.Bug2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>81</size>
      </method>
    </type>
    <type name="Bugs.Bug2+MyByte">
      <method name="Void .ctor(Byte)">
        <size>8</size>
      </method>
      <method name="MyByte op_Implicit(Byte)">
        <size>7</size>
      </method>
      <method name="Byte op_Implicit(MyByte)">
        <size>8</size>
      </method>
    </type>
    <type name="Bugs.Bug2+MyInt">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="MyInt op_Implicit(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 op_Implicit(MyInt)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-561.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void I.M()">
        <size>1</size>
      </method>
      <method name="Void M()">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-562.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
    </type>
  </test>
  <test name="test-563.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object TestMethod(TestCollection)">
        <size>66</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-564.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-565.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-566.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Spec()">
        <size>12</size>
      </method>
      <method name="Void Foo(C)">
        <size>7</size>
      </method>
      <method name="Void Foo2(CC)">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="CA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Spec(System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="CB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Spec(System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-567.cs">
    <type name="preservesig_test.Class1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>143</size>
      </method>
    </type>
    <type name="preservesig_test.TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_e(preservesig_test.TestClass+D)">
        <size>47</size>
      </method>
      <method name="Void remove_e(preservesig_test.TestClass+D)">
        <size>47</size>
      </method>
      <method name="Int32 DoFoo()">
        <size>2</size>
      </method>
      <method name="Int32 get_Foo()">
        <size>2</size>
      </method>
    </type>
    <type name="preservesig_test.TestClass+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-568.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-569.cs">
    <type name="MyAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="SubAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void method()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-57.cs">
    <type name="Button">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Click(EventHandler)">
        <size>24</size>
      </method>
      <method name="Void remove_Click(EventHandler)">
        <size>24</size>
      </method>
      <method name="Void OnClick(Int32, Int32)">
        <size>36</size>
      </method>
      <method name="Void Reset()">
        <size>8</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Void Connect()">
        <size>59</size>
      </method>
      <method name="Void Button1_Click(Int32, Int32)">
        <size>34</size>
      </method>
      <method name="Void Foo_Click(Int32, Int32)">
        <size>34</size>
      </method>
      <method name="Void Disconnect()">
        <size>34</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
    <type name="EventHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32, Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-570.cs">
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="test-571.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-572.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Color get_Color()">
        <size>10</size>
      </method>
      <method name="Void ResetCustomColors()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Color">
      <method name="Color From(Int32)">
        <size>10</size>
      </method>
      <method name="Int32 ToArgb()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-573.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-574.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-575.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-576.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="test-577.cs">
    <type name="C">
      <method name="Void IA.add_e_a(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void IA.remove_e_a(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void IA.add_e_b(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void IA.remove_e_b(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-578.cs">
    <type name="Test1.TestItem1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_OnUpdate(Test1.TestDelegate1)">
        <size>34</size>
      </method>
      <method name="Void remove_OnUpdate(Test1.TestDelegate1)">
        <size>34</size>
      </method>
      <method name="Int32 Test()">
        <size>12</size>
      </method>
    </type>
    <type name="Test1.TestItem2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_OnUpdate(Test1.TestDelegate1)">
        <size>18</size>
      </method>
      <method name="Void remove_OnUpdate(Test1.TestDelegate1)">
        <size>18</size>
      </method>
    </type>
    <type name="Test1.CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>57</size>
      </method>
    </type>
    <type name="Test1.TestDelegate1">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test1.CC">
      <method name="Int32 &lt;Main&gt;m__0()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-579.cs">
    <type name="TestCase">
      <method name="Int32 Main()">
        <size>32</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-58.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-580.cs">
    <type name="Bla">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void BuildNode(System.String ByRef)">
        <size>43</size>
      </method>
      <method name="Void BuildNode(System.String[] ByRef)">
        <size>58</size>
      </method>
      <method name="Void BuildNode_B(System.Object ByRef)">
        <size>18</size>
      </method>
      <method name="System.String BuildNode_C(System.String ByRef)">
        <size>80</size>
      </method>
      <method name="System.String BuildNode_D()">
        <size>166</size>
      </method>
      <method name="Void BuildNode_E(System.String[,] ByRef)">
        <size>83</size>
      </method>
      <method name="Int32 Main()">
        <size>290</size>
      </method>
      <method name="Boolean Test_Object()">
        <size>162</size>
      </method>
      <method name="Boolean Test_Decimal()">
        <size>128</size>
      </method>
    </type>
  </test>
  <test name="test-581.cs">
    <type name="TestParams">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_Item(System.String[])">
        <size>4</size>
      </method>
      <method name="Void set_Item(System.String[], System.Object)">
        <size>40</size>
      </method>
      <method name="Void TestMethod()">
        <size>173</size>
      </method>
    </type>
    <type name="TestNonParams">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_Item(System.String)">
        <size>2</size>
      </method>
      <method name="Void set_Item(System.String, System.Object)">
        <size>40</size>
      </method>
      <method name="Void TestMethod()">
        <size>71</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-582.cs">
    <type name="TrueClass">
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-583.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>19</size>
      </method>
    </type>
    <type name="ObjectContainerBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-584.cs">
    <type name="Style">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Style get_CurrentStyle()">
        <size>2</size>
      </method>
      <method name="Void set_CurrentStyle(Style)">
        <size>1</size>
      </method>
      <method name="Boolean LoadCurrentStyle()">
        <size>20</size>
      </method>
      <method name="Style Load()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-585.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-586.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>99</size>
      </method>
    </type>
    <type name="Program+MyColor">
      <method name="Void .ctor(Single)">
        <size>8</size>
      </method>
      <method name="Single get_Value()">
        <size>7</size>
      </method>
      <method name="MyColor op_Addition(MyColor, MyColor)">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-587.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-588.cs">
    <type name="TestNamespace.TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void HelloWorld()">
        <size>1</size>
      </method>
    </type>
    <type name="SuperClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="TestNamespace.TestClass get_TestClass()">
        <size>7</size>
      </method>
    </type>
    <type name="SubClass">
      <method name="Void .ctor()">
        <size>12</size>
      </method>
    </type>
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-589.cs">
    <type name="TestNamespace.TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void HelloWorld()">
        <size>1</size>
      </method>
    </type>
    <type name="SuperClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="TestNamespace.TestClass get_TestClass()">
        <size>7</size>
      </method>
      <method name="Void set_TestClass(TestNamespace.TestClass)">
        <size>1</size>
      </method>
    </type>
    <type name="SubClass">
      <method name="Void .ctor()">
        <size>12</size>
      </method>
    </type>
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-59.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 test_explicit()">
        <size>224</size>
      </method>
      <method name="Int32 test_implicit()">
        <size>102</size>
      </method>
      <method name="Int32 Main()">
        <size>57</size>
      </method>
    </type>
  </test>
  <test name="test-590.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
      <method name="System.String Foo()">
        <size>6</size>
      </method>
      <method name="System.String get_Prop()">
        <size>7</size>
      </method>
      <method name="Void set_Prop(System.String)">
        <size>8</size>
      </method>
      <method name="System.String get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, System.String)">
        <size>8</size>
      </method>
      <method name="Int32 Do(System.String, System.String, System.String)">
        <size>330</size>
      </method>
    </type>
  </test>
  <test name="test-591.cs">
    <type name="C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(System.String)">
        <size>49</size>
      </method>
    </type>
    <type name="C2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-592.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 fib(Int32)">
        <size>53</size>
      </method>
      <method name="Int32 xx(Int32)">
        <size>33</size>
      </method>
      <method name="Void foo(Int32)">
        <size>38</size>
      </method>
      <method name="Void XXXA()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-593.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(I)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-594.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>84</size>
      </method>
    </type>
  </test>
  <test name="test-595.cs">
    <type name="AttributesCollection">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object get_Item(SymbolId)">
        <size>2</size>
      </method>
      <method name="Void set_Item(SymbolId, System.Object)">
        <size>1</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object SetDictionaryValue(System.Object, SymbolId, System.Object)">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-596.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-597.cs">
    <type name="TestNS.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestNS.XElement">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="TestNS.Bar get_Document()">
        <size>2</size>
      </method>
      <method name="System.Object get_CrashHere()">
        <size>29</size>
      </method>
    </type>
    <type name="TestNS.Element">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="TestNS.Foo get_Document()">
        <size>2</size>
      </method>
    </type>
    <type name="TestNS.Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IHoge get_Root()">
        <size>2</size>
      </method>
    </type>
    <type name="TestNS.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-598.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>35</size>
      </method>
      <method name="V get_v()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="V">
      <method name="Void set_Item(Int32, Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-599.cs">
    <type name="Test.String">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Test.String op_Implicit(System.String)">
        <size>15</size>
      </method>
      <method name="System.String op_Implicit(Test.String)">
        <size>15</size>
      </method>
    </type>
    <type name="TestCompiler.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>80</size>
      </method>
    </type>
  </test>
  <test name="test-6.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="test-60.cs">
    <type name="ns5.Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Run()">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-600.cs">
    <type name="Test.Regression">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>90</size>
      </method>
    </type>
  </test>
  <test name="test-601.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="C+MarkerUpdatedVMDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(IntPtr, IntPtr)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(IntPtr, IntPtr, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-602.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>95</size>
      </method>
      <method name="Int32 Error(System.String, System.Object[])">
        <size>8</size>
      </method>
      <method name="Int32 Format(System.String, System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 Format(System.String, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Format(System.String, System.Object, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_A(System.String)">
        <size>2</size>
      </method>
      <method name="Int32 Test_A(System.String, System.Object[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_C(System.Type, System.Int32[])">
        <size>2</size>
      </method>
      <method name="Int32 Test_C(System.Type, System.Int32[], System.Int32[])">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-603.cs">
    <type name="ConsoleApplication1.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-604.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>83</size>
      </method>
    </type>
    <type name="Program+ImplementingExplicitInterfacesMembers">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Program.Iface1.IfaceMethod1()">
        <size>1</size>
      </method>
      <method name="Void Program.Iface2.IfaceMethod2()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-605.cs">
    <type name="TestA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Method()">
        <size>2</size>
      </method>
    </type>
    <type name="TestB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Method()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-606.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>163</size>
      </method>
    </type>
    <type name="Info">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean System.Collections.IEnumerator.MoveNext()">
        <size>2</size>
      </method>
      <method name="Void System.Collections.IEnumerator.Reset()">
        <size>1</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>2</size>
      </method>
      <method name="System.Object Mono.Test.ITest.get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void Mono.Test.ITest.set_Item(Int32, System.Object)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-607.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>120</size>
      </method>
    </type>
  </test>
  <test name="test-608.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>60</size>
      </method>
    </type>
  </test>
  <test name="test-609.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-61.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_XX(X+MyEvent)">
        <size>3</size>
      </method>
      <method name="Void remove_XX(X+MyEvent)">
        <size>3</size>
      </method>
      <method name="Int32 get_Property()">
        <size>4</size>
      </method>
      <method name="Void set_Property(Int32)">
        <size>3</size>
      </method>
      <method name="Int32 get_P2()">
        <size>2</size>
      </method>
      <method name="Void set_P3(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="X+MyEvent">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-610.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+C+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.B+C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.B+C+E">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.B+A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.B+A+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-611.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T+Protected">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D+Private">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Stuff(T+Protected)">
        <size>1</size>
      </method>
    </type>
    <type name="D2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D2+P">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D2+P+Private">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Stuff(T+Protected)">
        <size>1</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-612.cs">
    <type name="Abcdefghijklmnopqrstuvwxyz">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="OO">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void D()">
        <size>5293</size>
      </method>
    </type>
    <type name="Zyxwvutsrqp">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="XXX">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean IsAltered()">
        <size>859</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-613.cs">
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean g()">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>62</size>
      </method>
    </type>
  </test>
  <test name="test-614.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void And()">
        <size>73</size>
      </method>
      <method name="Void Or()">
        <size>129</size>
      </method>
      <method name="Int32 Main()">
        <size>70</size>
      </method>
    </type>
  </test>
  <test name="test-615.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="test-617.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X.add_Foo(MyDelegate)">
        <size>1</size>
      </method>
      <method name="Void X.remove_Foo(MyDelegate)">
        <size>1</size>
      </method>
      <method name="Void add_Foo(MyDelegate)">
        <size>47</size>
      </method>
      <method name="Void remove_Foo(MyDelegate)">
        <size>47</size>
      </method>
      <method name="Int32 X.get_Prop()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>86</size>
      </method>
    </type>
    <type name="MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int64 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int64 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-618.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void ZeroBasedReductions()">
        <size>15</size>
      </method>
      <method name="Void ZeroBasedReductionsWithConversion()">
        <size>15</size>
      </method>
      <method name="Int32 Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-619.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-62.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="X[] GetX()">
        <size>2</size>
      </method>
      <method name="System.Int32[] getInt()">
        <size>2</size>
      </method>
      <method name="System.Int32[,,] getMoreInt()">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-620.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A(Int32 ByRef)">
        <size>7</size>
      </method>
      <method name="Void B(Int32 ByRef)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-621.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>129</size>
      </method>
    </type>
  </test>
  <test name="test-622.cs">
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(A ByRef)">
        <size>8</size>
      </method>
      <method name="Void Foo(System.Object ByRef)">
        <size>9</size>
      </method>
      <method name="Int32 Main()">
        <size>16</size>
      </method>
    </type>
  </test>
  <test name="test-623.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void a()">
        <size>0</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void a()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-624.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Type()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="test-625.cs">
    <type name="Location">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Null()">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-626.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
    </type>
  </test>
  <test name="test-627.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X.B()">
        <size>1</size>
      </method>
      <method name="Void A.B()">
        <size>1</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void N(System.Object)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-628.cs">
    <type name="N1.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-629.cs">
    <type name="Foo">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo+Nested">
      <method name="Int32 get_Bar()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-63.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>81</size>
      </method>
    </type>
  </test>
  <test name="test-630.cs">
    <type name="MyEx">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Ex">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 test(Int32)">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>70</size>
      </method>
    </type>
  </test>
  <test name="test-631.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SByte op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="Byte op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="Int16 op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="UInt16 op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="Int32 op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="UInt32 op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="Int64 op_Implicit(A)">
        <size>3</size>
      </method>
      <method name="UInt64 op_Implicit(A)">
        <size>3</size>
      </method>
    </type>
    <type name="A2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SByte op_Implicit(A2)">
        <size>2</size>
      </method>
      <method name="Byte op_Implicit(A2)">
        <size>2</size>
      </method>
      <method name="Int16 op_Implicit(A2)">
        <size>2</size>
      </method>
      <method name="UInt32 op_Implicit(A2)">
        <size>2</size>
      </method>
      <method name="Int64 op_Implicit(A2)">
        <size>3</size>
      </method>
      <method name="UInt64 op_Implicit(A2)">
        <size>3</size>
      </method>
    </type>
    <type name="A3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SByte op_Implicit(A3)">
        <size>2</size>
      </method>
      <method name="UInt32 op_Implicit(A3)">
        <size>2</size>
      </method>
      <method name="Int64 op_Implicit(A3)">
        <size>3</size>
      </method>
      <method name="UInt64 op_Implicit(A3)">
        <size>3</size>
      </method>
    </type>
    <type name="A4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 op_Implicit(A4)">
        <size>2</size>
      </method>
      <method name="Int64 op_Implicit(A4)">
        <size>3</size>
      </method>
      <method name="UInt64 op_Implicit(A4)">
        <size>3</size>
      </method>
    </type>
    <type name="A5">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 op_Implicit(A5)">
        <size>2</size>
      </method>
      <method name="Int32 op_Implicit(A5)">
        <size>2</size>
      </method>
    </type>
    <type name="A6">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Byte op_Implicit(A6)">
        <size>2</size>
      </method>
    </type>
    <type name="MyDecimal">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Decimal op_Implicit(MyDecimal)">
        <size>8</size>
      </method>
    </type>
    <type name="Constraint">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>293</size>
      </method>
    </type>
  </test>
  <test name="test-632.cs">
    <type name="Bug379822">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Assert(Boolean, Boolean)">
        <size>19</size>
      </method>
      <method name="Void TestAnd(Boolean)">
        <size>79</size>
      </method>
      <method name="Void TestOr(Boolean)">
        <size>88</size>
      </method>
      <method name="Void Test(Boolean)">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-633.cs">
    <type name="Test.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-634.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void TestFunc()">
        <size>2</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>6</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-635.cs">
    <type name="ShortCircuitFold">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean get_False()">
        <size>14</size>
      </method>
      <method name="Boolean get_True()">
        <size>14</size>
      </method>
      <method name="Void a(Boolean, Boolean)">
        <size>19</size>
      </method>
      <method name="Void c(Int32)">
        <size>67</size>
      </method>
      <method name="Boolean f()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>167</size>
      </method>
    </type>
  </test>
  <test name="test-636.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean get_False()">
        <size>14</size>
      </method>
      <method name="Void ping()">
        <size>13</size>
      </method>
      <method name="Int32 test_while(Int32)">
        <size>53</size>
      </method>
      <method name="Int32 test_do_while(Int32)">
        <size>53</size>
      </method>
      <method name="Int32 test_for(Int32)">
        <size>64</size>
      </method>
      <method name="Void test_for_empty()">
        <size>35</size>
      </method>
      <method name="Void Main()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="test-637.cs">
    <type name="A">
      <method name="System.Type get_Value()">
        <size>7</size>
      </method>
      <method name="Void set_Value(System.Type)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Object)">
        <size>19</size>
      </method>
    </type>
    <type name="TestProp">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>106</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-638.cs">
    <type name="Fail">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>110</size>
      </method>
    </type>
    <type name="Fail+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(System.Object, System.EventArgs)">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-639.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_s()">
        <size>13</size>
      </method>
      <method name="Void set_s(System.String)">
        <size>34</size>
      </method>
      <method name="Void Main()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="test-64.cs">
    <type name="Operator">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Blah">
      <method name="Void .ctor(Operator)">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>9</size>
      </method>
    </type>
  </test>
  <test name="test-640.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>100</size>
      </method>
    </type>
  </test>
  <test name="test-641.cs">
    <type name="Identifier">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
      <method name="Boolean op_Equality(Identifier, Identifier)">
        <size>2</size>
      </method>
      <method name="Boolean op_Inequality(Identifier, Identifier)">
        <size>2</size>
      </method>
      <method name="Identifier op_Implicit(System.String)">
        <size>2</size>
      </method>
      <method name="System.String op_Implicit(Identifier)">
        <size>2</size>
      </method>
      <method name="Decimal op_Implicit(Identifier)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-642.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-643.cs">
    <type name="PointerArithmeticTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>120</size>
      </method>
      <method name="Int32* Conversions(Int64)">
        <size>3</size>
      </method>
      <method name="Int32 CheckAdd(Byte*, Int32)">
        <size>14</size>
      </method>
      <method name="Int32 CheckSub(Int16*, Int32)">
        <size>16</size>
      </method>
      <method name="Int32 CheckSub2(Int16*, Int32)">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-644.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object M(Int32)">
        <size>2</size>
      </method>
      <method name="Void Test_1()">
        <size>59</size>
      </method>
      <method name="Boolean Test_2()">
        <size>24</size>
      </method>
      <method name="Boolean Test_3()">
        <size>24</size>
      </method>
      <method name="Boolean Test_4(Program+D)">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>75</size>
      </method>
    </type>
    <type name="Program+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.Object Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-645.cs">
    <type name="C">
      <method name="Void Main()">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-646.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int64 CastUIntPtrToInt64(UIntPtr)">
        <size>7</size>
      </method>
      <method name="UInt32 CastIntPtrToUInt32(IntPtr)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>113</size>
      </method>
    </type>
  </test>
  <test name="test-647.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-648.cs">
    <type name="ParamMismatch.TestCase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Culprit(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void remove_Culprit(System.EventHandler)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Finalize()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-649.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>609</size>
      </method>
    </type>
    <type name="MainClass+Decimal2">
      <method name="Void .ctor(Double)">
        <size>13</size>
      </method>
      <method name="Void .ctor(Decimal)">
        <size>8</size>
      </method>
      <method name="Decimal2 op_Explicit(Decimal)">
        <size>7</size>
      </method>
      <method name="Decimal2 op_Explicit(Double)">
        <size>7</size>
      </method>
      <method name="Decimal op_Implicit(Decimal2)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-65.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void receiver(S)">
        <size>7</size>
      </method>
      <method name="System.Object BoxS()">
        <size>21</size>
      </method>
      <method name="S Plain()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>98</size>
      </method>
    </type>
  </test>
  <test name="test-650.cs">
    <type name="App">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-651.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Open(IList)">
        <size>1</size>
      </method>
      <method name="Void Open(System.Collections.ArrayList ByRef)">
        <size>20</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-652.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
      <method name="Int32 Test()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-653.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>40</size>
      </method>
      <method name="Void Test2()">
        <size>32</size>
      </method>
      <method name="Void Test2(SByte, Int16, Int32, Int64, UInt64)">
        <size>39</size>
      </method>
      <method name="Int32 Main()">
        <size>41</size>
      </method>
    </type>
  </test>
  <test name="test-654.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
      <method name="Int32 Test(SByte*)">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-655.cs">
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Byte get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Byte)">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>63</size>
      </method>
    </type>
  </test>
  <test name="test-656.cs">
    <type name="Goo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-657.cs">
    <type name="TestDebug.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
    </type>
    <type name="TestDebug.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Excluded()">
        <size>11</size>
      </method>
      <method name="Int32 Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-658.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Thread()">
        <size>2</size>
      </method>
    </type>
    <type name="Thread">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-659.cs">
    <type name="MySubClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>30</size>
      </method>
      <method name="Void set_BB(Int32, Boolean)">
        <size>1</size>
      </method>
      <method name="Void Iface.set_AA(Int32, Boolean)">
        <size>9</size>
      </method>
    </type>
  </test>
  <test name="test-66.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>53</size>
      </method>
      <method name="Void FillOne()">
        <size>18</size>
      </method>
      <method name="Void FillSingle()">
        <size>39</size>
      </method>
      <method name="Void FillDouble()">
        <size>59</size>
      </method>
      <method name="Void FillObject()">
        <size>52</size>
      </method>
      <method name="Void FillDoubleObject()">
        <size>81</size>
      </method>
      <method name="Int32 TestSingle()">
        <size>47</size>
      </method>
      <method name="Int32 TestDouble()">
        <size>67</size>
      </method>
      <method name="Int32 TestObjectSingle()">
        <size>48</size>
      </method>
      <method name="Int32 TestObjectDouble()">
        <size>72</size>
      </method>
      <method name="Int32 Main()">
        <size>80</size>
      </method>
    </type>
  </test>
  <test name="test-660.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>25</size>
      </method>
    </type>
    <type name="Status">
      <method name="Void .ctor(Code)">
        <size>8</size>
      </method>
      <method name="Status op_Implicit(Code)">
        <size>7</size>
      </method>
      <method name="Code op_Implicit(Status)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-661.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void TestMethod()">
        <size>15</size>
      </method>
      <method name="SummaryInfo GetSummary()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-662.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-663.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="Boolean op_Implicit(A)">
        <size>2</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-664.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test(System.String)">
        <size>148</size>
      </method>
      <method name="Int32 Main()">
        <size>49</size>
      </method>
    </type>
  </test>
  <test name="test-665.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
      <method name="Int32 Method(System.Object)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-666.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-667.cs">
    <type name="CA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IA.M()">
        <size>1</size>
      </method>
    </type>
    <type name="CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-668.cs">
    <type name="Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-669.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="test-670.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-671.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>19</size>
      </method>
      <method name="Boolean Bar(System.Object)">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-672.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="S* get_Foo2()">
        <size>3</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Int32* get_Foo()">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="test-673.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>85</size>
      </method>
    </type>
  </test>
  <test name="test-674.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
      <method name="Int32 &lt;Main&gt;m__0(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-675.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>2</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>2</size>
      </method>
      <method name="Boolean op_Equality(B, B)">
        <size>2</size>
      </method>
      <method name="Boolean op_Inequality(B, B)">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-676.cs">
    <type name="N.Item">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="N.Item get_Item(N.Test)">
        <size>2</size>
      </method>
      <method name="Void Foo(ItemSlot)">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-677.cs">
    <type name="InvokeWindow">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_E(D)">
        <size>47</size>
      </method>
      <method name="Void remove_E(D)">
        <size>47</size>
      </method>
      <method name="Void Run()">
        <size>12</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
      <method name="Void OnDeleteEvent()">
        <size>1</size>
      </method>
      <method name="Void OnDeleteEvent(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-678.cs">
    <type name="NaNTest">
      <method name="Void .ctor(Double, Double)">
        <size>171</size>
      </method>
      <method name="Int32 Main()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-68.cs">
    <type name="Y">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>171</size>
      </method>
    </type>
  </test>
  <test name="test-680.cs">
    <type name="AsStringProblem.MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>94</size>
      </method>
    </type>
  </test>
  <test name="test-681.cs">
    <type name="Bug">
      <method name="Void .ctor()">
        <size>20</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="BugClass">
      <method name="Void .cctor()">
        <size>18</size>
      </method>
      <method name="Void FooImplementation(System.Void*)">
        <size>1</size>
      </method>
    </type>
    <type name="BugClass+Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Void*)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Void*, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-682.cs">
    <type name="broken_cast">
      <method name="Void report(System.String)">
        <size>7</size>
      </method>
      <method name="Void conv_ovf_i(Int64, Boolean)">
        <size>73</size>
      </method>
      <method name="Void conv_ovf_i_un(Int64, Boolean)">
        <size>73</size>
      </method>
      <method name="Void conv_ovf_u(Int64, Boolean)">
        <size>73</size>
      </method>
      <method name="Void conv_ovf_u_un(Int64, Boolean)">
        <size>73</size>
      </method>
      <method name="Int32 Main()">
        <size>188</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-683.cs">
    <type name="broken_cast">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-684.cs">
    <type name="mono_bug.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>77</size>
      </method>
      <method name="System.Double[][,] ReturnArray()">
        <size>62</size>
      </method>
    </type>
  </test>
  <test name="test-685.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-686.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>51</size>
      </method>
      <method name="Void Foo()">
        <size>148</size>
      </method>
    </type>
  </test>
  <test name="test-687.cs">
    <type name="XUnit">
      <method name="Void .ctor(Double)">
        <size>8</size>
      </method>
      <method name="XUnit op_Implicit(Double)">
        <size>10</size>
      </method>
      <method name="Double op_Implicit(XUnit)">
        <size>8</size>
      </method>
    </type>
    <type name="Unit">
      <method name="Void .ctor(Double)">
        <size>8</size>
      </method>
      <method name="Unit op_Implicit(Double)">
        <size>10</size>
      </method>
      <method name="Double op_Implicit(Unit)">
        <size>8</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
    </type>
  </test>
  <test name="test-688.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>46</size>
      </method>
      <method name="Byte* GetFoo()">
        <size>7</size>
      </method>
      <method name="Byte* GetFoo2()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-689.cs">
    <type name="Sample">
      <method name="Void Main()">
        <size>3</size>
      </method>
      <method name="Void Foo(Byte*, Byte*)">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="test-69.cs">
    <type name="Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Start_internal(IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-690.cs">
    <type name="Test.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-691.cs">
    <type name="ConsoleApplication6.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>23</size>
      </method>
      <method name="Void Main()">
        <size>128</size>
      </method>
    </type>
  </test>
  <test name="test-692.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void test1(DateTime ByRef)">
        <size>10</size>
      </method>
      <method name="Void test2(DateTime ByRef)">
        <size>13</size>
      </method>
      <method name="Int32 Main()">
        <size>141</size>
      </method>
    </type>
  </test>
  <test name="test-693.cs">
    <type name="ConstTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-694.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-695.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>680</size>
      </method>
      <method name="System.String get_BaseDirectory()">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>53</size>
      </method>
    </type>
  </test>
  <test name="test-696.cs">
    <type name="S">
      <method name="Void f(S)">
        <size>1</size>
      </method>
      <method name="S op_Implicit(C)">
        <size>2</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-697.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-698.cs">
    <type name="test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-699.cs">
    <type name="D">
      <method name="Void .ctor(String)">
        <size>25</size>
      </method>
      <method name="System.String get_message()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-7.cs">
    <type name="Mine.MyBoolean">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean op_Implicit(Mine.MyBoolean)">
        <size>2</size>
      </method>
    </type>
    <type name="Mine.MyTrueFalse">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean op_True(Mine.MyTrueFalse)">
        <size>2</size>
      </method>
      <method name="Boolean op_False(Mine.MyTrueFalse)">
        <size>2</size>
      </method>
    </type>
    <type name="Mine.Blah">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>408</size>
      </method>
      <method name="Mine.Blah op_Addition(Mine.Blah, Mine.Blah)">
        <size>31</size>
      </method>
      <method name="Mine.Blah op_UnaryPlus(Mine.Blah)">
        <size>22</size>
      </method>
      <method name="Mine.Blah op_UnaryNegation(Mine.Blah)">
        <size>23</size>
      </method>
      <method name="Mine.Blah op_Subtraction(Mine.Blah, Mine.Blah)">
        <size>31</size>
      </method>
      <method name="Int32 op_Multiply(Mine.Blah, Mine.Blah)">
        <size>24</size>
      </method>
      <method name="Int32 op_Division(Mine.Blah, Mine.Blah)">
        <size>24</size>
      </method>
      <method name="Int32 op_Modulus(Mine.Blah, Mine.Blah)">
        <size>24</size>
      </method>
      <method name="Mine.Blah op_OnesComplement(Mine.Blah)">
        <size>23</size>
      </method>
      <method name="Boolean op_LogicalNot(Mine.Blah)">
        <size>20</size>
      </method>
      <method name="Mine.Blah op_Increment(Mine.Blah)">
        <size>26</size>
      </method>
      <method name="Mine.Blah op_Decrement(Mine.Blah)">
        <size>26</size>
      </method>
      <method name="Boolean op_True(Mine.Blah)">
        <size>20</size>
      </method>
      <method name="Boolean op_False(Mine.Blah)">
        <size>23</size>
      </method>
      <method name="Int32 op_Implicit(Mine.Blah)">
        <size>17</size>
      </method>
      <method name="Double op_Explicit(Mine.Blah)">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-70.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_A()">
        <size>2</size>
      </method>
      <method name="Int32 B()">
        <size>2</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_A()">
        <size>9</size>
      </method>
      <method name="Int32 B()">
        <size>9</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>70</size>
      </method>
    </type>
  </test>
  <test name="test-700.cs">
    <type name="FooAttribute">
      <method name="Void .ctor(String)">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-701.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt16 ToUint16()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-702.cs">
    <type name="S">
      <method name="Void Main()">
        <size>9</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor(String, Int32)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-703.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Finished(System.EventHandler)">
        <size>0</size>
      </method>
      <method name="Void remove_Finished(System.EventHandler)">
        <size>0</size>
      </method>
      <method name="Void test(A)">
        <size>19</size>
      </method>
      <method name="Void TestA(System.Object, System.EventArgs)">
        <size>25</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>49</size>
      </method>
      <method name="Void add_Finished(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Finished(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void TestB(System.Object, System.EventArgs)">
        <size>25</size>
      </method>
      <method name="Int32 Main()">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-704.cs">
    <type name="NObjective.Program">
      <method name="Void ArglistMethod(...)">
        <size>51</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-705.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Nested GetEnumerator()">
        <size>10</size>
      </method>
    </type>
    <type name="Test+Nested">
      <method name="Void System.IDisposable.Dispose()">
        <size>13</size>
      </method>
      <method name="Int32 get_Current()">
        <size>2</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>2</size>
      </method>
      <method name="Void Reset()">
        <size>1</size>
      </method>
      <method name="Void Dispose()">
        <size>11</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>72</size>
      </method>
    </type>
  </test>
  <test name="test-706.cs">
    <type name="Test.CustomParentAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DoSomething()">
        <size>0</size>
      </method>
    </type>
    <type name="Test.MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test.MyClass+CustomChildAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void DoSomething()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-707.cs">
    <type name="Tzap">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tzap+Baz">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Gazonk()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Tzap+Bar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-708.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="A+ADelegate Delegate2(Boolean)">
        <size>25</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="A+ADelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="A+ADelegate Invoke(Boolean)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Boolean, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="A+ADelegate EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-709.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void CopyTo(Int32, System.Char[], Int32, Int32)">
        <size>68</size>
      </method>
      <method name="Void CharCopy(Char*, Char*, Int32)">
        <size>33</size>
      </method>
      <method name="Int32 Main()">
        <size>58</size>
      </method>
    </type>
  </test>
  <test name="test-71.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
    </type>
    <type name="MethodSignature">
      <method name="Void .ctor(String, Type, Type[])">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-710.cs">
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-711.cs">
    <type name="N.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-712.cs">
    <type name="Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-713.cs">
    <type name="DispBar">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Dispose()">
        <size>11</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IDisposable GetBar()">
        <size>6</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Boolean TryThing()">
        <size>41</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-714.cs">
    <type name="Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void IBar.Test()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-715.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-716.cs">
    <type name="SS">
      <method name="Void .cctor()">
        <size>8</size>
      </method>
    </type>
    <type name="SSS">
      <method name="Void .cctor()">
        <size>15</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
    </type>
    <type name="CCC">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>192</size>
      </method>
    </type>
  </test>
  <test name="test-717.cs">
    <type name="AA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(Byte)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Void Foo(System.String)">
        <size>1</size>
      </method>
    </type>
    <type name="S">
      <method name="System.String ToString()">
        <size>6</size>
      </method>
    </type>
    <type name="MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>67</size>
      </method>
    </type>
  </test>
  <test name="test-718.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Int32, Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>8</size>
      </method>
      <method name="Void Foo(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-719.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-72.cs">
    <type name="outer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="outer+inner">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void meth(System.Object)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-720.cs">
    <type name="N.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
    <type name="N.Parent">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Example(N.Parent+ExampleHandler)">
        <size>0</size>
      </method>
      <method name="Void remove_Example(N.Parent+ExampleHandler)">
        <size>0</size>
      </method>
    </type>
    <type name="N.Child">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Example(N.Parent+ExampleHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Example(N.Parent+ExampleHandler)">
        <size>47</size>
      </method>
      <method name="Void OnExample()">
        <size>23</size>
      </method>
    </type>
    <type name="N.Parent+ExampleHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-721.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
    </type>
    <type name="Control">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Foo(Int32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-722.cs">
    <type name="S">
      <method name="Void set_Prop(Int32)">
        <size>8</size>
      </method>
      <method name="Void M[T](T)">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>60</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-723.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Count()">
        <size>2</size>
      </method>
    </type>
    <type name="Maine">
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-724.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 DoTest(System.String, System.String, System.String, Int32)">
        <size>29</size>
      </method>
      <method name="Int32 Main()">
        <size>110</size>
      </method>
    </type>
    <type name="Concrete">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String A.get_Spec()">
        <size>6</size>
      </method>
      <method name="System.String B.get_Spec()">
        <size>6</size>
      </method>
      <method name="System.String get_Spec()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-725.cs">
    <type name="D">
      <method name="Int32 Invoke(Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32 ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(Int32 ByRef, IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 Main()">
        <size>237</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-726.cs">
    <type name="CS0102">
      <method name="System.Object IFoo.Clone()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CS0102+Clone">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-727.cs">
    <type name="IDisposableTest.MainClass">
      <method name="Int32 Main()">
        <size>113</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="IDisposableTest.Foo">
      <method name="Void Dispose()">
        <size>32</size>
      </method>
      <method name="Void .ctor()">
        <size>57</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-728.cs">
    <type name="Tests">
      <method name="Int32 Main()">
        <size>25</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-729.cs">
    <type name="Primes.MainClass">
      <method name="Int32 Main()">
        <size>136</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-73.cs">
    <type name="Abstract">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 A()">
        <size>0</size>
      </method>
    </type>
    <type name="Concrete">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 A()">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-730.cs">
    <type name="Demo">
      <method name="Void Test(System.Object)">
        <size>1</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 GetPhones()">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Demo+D">
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-731.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>34</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-732.cs">
    <type name="C">
      <method name="Int32 op_Implicit(C, Boolean)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>22</size>
      </method>
      <method name="Int32 op_Explicit(C)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-733.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>94</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-734.cs">
    <type name="M">
      <method name="Void Run()">
        <size>23</size>
      </method>
      <method name="Int32 Main()">
        <size>72</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-735.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+C+X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-736.cs">
    <type name="TestGeneric`1[T]">
      <method name="Void add_Event(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Event(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void Raise()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGeneric2`1[T]">
      <method name="Void add_Event(TestGeneric2`1+GenericHandler[T])">
        <size>47</size>
      </method>
      <method name="Void remove_Event(TestGeneric2`1+GenericHandler[T])">
        <size>47</size>
      </method>
      <method name="Void Raise()">
        <size>21</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void add_Event(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Event(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void Raise()">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGeneric2`1+GenericHandler[T]">
      <method name="Void Invoke(T)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(T, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-737.cs">
    <type name="Breaks">
      <method name="Double get_Item(Int32, Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32, Double)">
        <size>8</size>
      </method>
      <method name="Void .ctor(Double)">
        <size>8</size>
      </method>
    </type>
    <type name="Tester">
      <method name="Int32 Main()">
        <size>72</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-738.cs">
    <type name="TestNamespace.ResumableInputStream">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-739.cs">
    <type name="X">
      <method name="Void Finalize()">
        <size>19</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>89</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-74.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>168</size>
      </method>
    </type>
  </test>
  <test name="test-740.cs">
    <type name="FixedTest">
      <method name="Int32 Main()">
        <size>336</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FixedTest+TValue">
      <method name="System.String ToString()">
        <size>23</size>
      </method>
      <method name="Void .ctor(Int64)">
        <size>28</size>
      </method>
    </type>
  </test>
  <test name="test-741.cs">
    <type name="Test">
      <method name="Void test()">
        <size>18</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-742.cs">
    <type name="Test">
      <method name="Test Set(C)">
        <size>20</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Driver">
      <method name="Int32 Main()">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-743.cs">
    <type name="C">
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void Test()">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-744.cs">
    <type name="M">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M+Nested">
      <method name="Void Extra()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void AMethod()">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void BMethod()">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void AMethod()">
        <size>1</size>
      </method>
      <method name="Void BMethod()">
        <size>1</size>
      </method>
      <method name="Void Extra()">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-745.cs">
    <type name="C">
      <method name="Void Main()">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-746.cs">
    <type name="Test">
      <method name="Void Foo(IListCounter)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-747.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B+BNested">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AA+ANested">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-748.cs">
    <type name="M">
      <method name="RealTest.Foo Test()">
        <size>6</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test.Local.M">
      <method name="RealTest.Foo Test()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="RealTest.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-749.cs">
    <type name="M">
      <method name="Void Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-75.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="X op_Addition(X, X)">
        <size>8</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="driver">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-750.cs">
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-751.cs">
    <type name="LocalNS.Compiler">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="System.Local.M">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-752.cs">
    <type name="M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-753.cs">
    <type name="AI2">
      <method name="System.String IA.get_val()">
        <size>6</size>
      </method>
      <method name="Void IA.set_val(System.String)">
        <size>1</size>
      </method>
      <method name="Int32 get_val()">
        <size>3</size>
      </method>
      <method name="Void set_val(Int32)">
        <size>1</size>
      </method>
      <method name="Void stuff(IAI2)">
        <size>13</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-754.cs">
    <type name="Bug.D">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Bug.A">
      <method name="Void add_E(Bug.D)">
        <size>0</size>
      </method>
      <method name="Void remove_E(Bug.D)">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bug.B">
      <method name="Void add_E(Bug.D)">
        <size>1</size>
      </method>
      <method name="Void remove_E(Bug.D)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bug.M">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-755.cs">
    <type name="Item">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
    </type>
    <type name="Item+Builder">
      <method name="Int32 get_Foo()">
        <size>6</size>
      </method>
      <method name="System.Object get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="System.Object get_Item(Int32, Int32)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-756.cs">
    <type name="UnsafeTest">
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-757.cs">
    <type name="TestClass1">
      <method name="Void Test()">
        <size>34</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-758.cs">
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void Finalize()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-759.cs">
    <type name="B">
      <method name="Void Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-76.cs">
    <type name="foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String strcat(System.String[])">
        <size>47</size>
      </method>
      <method name="Int32 Main()">
        <size>142</size>
      </method>
    </type>
  </test>
  <test name="test-760.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-761.cs">
    <type name="C">
      <method name="Int32 get_I()">
        <size>7</size>
      </method>
      <method name="Void set_I(Int32)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-762.cs">
    <type name="N1.Derived.Dummy">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N2.Derived.Dummy">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="DerivedAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-763.cs">
    <type name="StaticDelegateWithSameNameAsInstance">
      <method name="Void set_MyProvider(StaticDelegateWithSameNameAsInstance+Provider)">
        <size>35</size>
      </method>
      <method name="Void StaticCallback()">
        <size>31</size>
      </method>
      <method name="Void StaticCallback(System.String)">
        <size>35</size>
      </method>
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="StaticDelegateWithSameNameAsInstance+Provider">
      <method name="Void Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-764.cs">
    <type name="Item">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="Caller">
      <method name="System.String get_Item(System.String)">
        <size>2</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void Foo()">
        <size>12</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-765.cs">
    <type name="B">
      <method name="Void Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void Foo(System.String)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-766.cs">
    <type name="A.Color">
      <method name="Color get_Base()">
        <size>6</size>
      </method>
      <method name="Color get_NewBase()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B.Color">
      <method name="Color From(Int32)">
        <size>10</size>
      </method>
      <method name="Void .cctor()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-767.cs">
    <type name="Test">
      <method name="Int32 Foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Test get_Test()">
        <size>6</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-768.cs">
    <type name="A.N.Wrong">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="N.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X.TestClass">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-769.cs">
    <type name="C">
      <method name="Void I.Clear()">
        <size>1</size>
      </method>
      <method name="Void Clear()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>114</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-77.cs">
    <type name="XX">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>220</size>
      </method>
    </type>
  </test>
  <test name="test-770.cs">
    <type name="MyClass">
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyClass+A">
      <method name="Void add_MouseClick(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_MouseClick(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyClass+B">
      <method name="Void add_MouseClick(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_MouseClick(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyClass+C">
      <method name="Void MouseClick()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-771.cs">
    <type name="InternalAccess.Base">
      <method name="System.String get_Prop()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="InternalAccess.DerivedInternalExample">
      <method name="System.String get_Prop()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="InternalAccess.DerivedProtectedExample">
      <method name="System.String get_Prop()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="InternalAccess.MainClass">
      <method name="Int32 Main()">
        <size>60</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-772.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>14</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object)">
        <size>17</size>
      </method>
      <method name="Void .ctor(String, Object[])">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-773.cs">
    <type name="Foo">
      <method name="Int32 get_Item(Int32)">
        <size>3</size>
      </method>
      <method name="Int32 IFoo.get_Bar(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Int32 get_Baz(Int32)">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Babar">
      <method name="Int32 get_Baz(Int32)">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>68</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-774.cs">
    <type name="C">
      <method name="Int32 I.get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void I.set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-775.cs">
    <type name="C">
      <method name="Void A.add_Member(System.EventHandler)">
        <size>34</size>
      </method>
      <method name="Void A.remove_Member(System.EventHandler)">
        <size>24</size>
      </method>
      <method name="Void add_Member(System.EventHandler)">
        <size>34</size>
      </method>
      <method name="Void remove_Member(System.EventHandler)">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>11</size>
      </method>
      <method name="Int32 TestMe()">
        <size>155</size>
      </method>
      <method name="Void f(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-776.cs">
    <type name="First">
      <method name="System.Object get_Item(System.String)">
        <size>6</size>
      </method>
      <method name="Void set_Item(System.String, System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Second">
      <method name="System.Object get_Item(System.String)">
        <size>6</size>
      </method>
      <method name="Void set_Item(System.String, System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Third">
      <method name="System.Object get_Item(System.String)">
        <size>8</size>
      </method>
      <method name="Void set_Item(System.String, System.Object)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="a">
      <method name="Int32 Main(System.String[])">
        <size>31</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-777.cs">
    <type name="MediaStore">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MediaStore+Thing">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-778.cs">
    <type name="A">
      <method name="Int32 Test()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 Test()">
        <size>12</size>
      </method>
      <method name="Void Test(System.Object[])">
        <size>1</size>
      </method>
      <method name="Void Test(System.Object[], System.String)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void Test(System.Object[], System.String)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Int32 Test()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T">
      <method name="Int32 Main()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-779.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>20</size>
      </method>
      <method name="Boolean test1(Int64, Int64)">
        <size>14</size>
      </method>
    </type>
  </test>
  <test name="test-78.cs">
    <type name="N1.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean ShortCasting()">
        <size>19</size>
      </method>
      <method name="Boolean IntCasting()">
        <size>18</size>
      </method>
      <method name="Int32 Main()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-780.cs">
    <type name="MonoVirtuals.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoVirtuals.Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoVirtuals.A">
      <method name="Int32 f(MonoVirtuals.X)">
        <size>12</size>
      </method>
      <method name="Int32 f(MonoVirtuals.Y)">
        <size>13</size>
      </method>
      <method name="Int32 get_Item(MonoVirtuals.X)">
        <size>12</size>
      </method>
      <method name="Int32 get_Item(MonoVirtuals.Y)">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoVirtuals.B">
      <method name="Int32 f(MonoVirtuals.X)">
        <size>19</size>
      </method>
      <method name="Int32 get_Item(MonoVirtuals.X)">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoVirtuals.C">
      <method name="Int32 f(MonoVirtuals.X)">
        <size>18</size>
      </method>
      <method name="Int32 f(MonoVirtuals.Y)">
        <size>18</size>
      </method>
      <method name="Int32 get_Item(MonoVirtuals.X)">
        <size>18</size>
      </method>
      <method name="Int32 get_Item(MonoVirtuals.Y)">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MonoVirtuals.MainClass">
      <method name="Int32 Main()">
        <size>46</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-781.cs">
    <type name="D">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="E">
      <method name="Void add_temp(D)">
        <size>47</size>
      </method>
      <method name="Void remove_temp(D)">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="E get_Prop()">
        <size>6</size>
      </method>
      <method name="Void Test()">
        <size>41</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
      <method name="Void &lt;Test&gt;m__0()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-782.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-783.cs">
    <type name="C">
      <method name="Void M(E)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 Test(E)">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>88</size>
      </method>
    </type>
  </test>
  <test name="test-784.cs">
    <type name="A">
      <method name="Int32 get_Item(Int32)">
        <size>6</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>15</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 get_Item(Int32)">
        <size>8</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>9</size>
      </method>
      <method name="Int32 Main()">
        <size>48</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-785.cs">
    <type name="Base">
      <method name="Int32 get_Prop()">
        <size>0</size>
      </method>
      <method name="Void set_Prop(Int32)">
        <size>0</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>0</size>
      </method>
      <method name="Void TestVoid()">
        <size>0</size>
      </method>
      <method name="Void TestInt(Int32)">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="DeriveVTable">
      <method name="Int32 get_Prop()">
        <size>2</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void TestVoid()">
        <size>1</size>
      </method>
      <method name="Void TestInt(Int32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="NewVTable">
      <method name="Int32 get_Prop()">
        <size>0</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>2</size>
      </method>
      <method name="Void TestVoid()">
        <size>1</size>
      </method>
      <method name="Void TestInt(Int32)">
        <size>1</size>
      </method>
      <method name="Void Overload()">
        <size>1</size>
      </method>
      <method name="Void Overload(Int32)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-786.cs">
    <type name="A">
      <method name="System.String op_Implicit(A)">
        <size>18</size>
      </method>
      <method name="System.Delegate op_Implicit(A)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.String op_Implicit(B)">
        <size>18</size>
      </method>
    </type>
    <type name="D">
      <method name="System.Delegate op_Implicit(D)">
        <size>14</size>
      </method>
    </type>
    <type name="E">
      <method name="Boolean op_Implicit(E)">
        <size>14</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>372</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-787.cs">
    <type name="A">
      <method name="Void set_Prop(System.String)">
        <size>1</size>
      </method>
      <method name="System.String get_Prop()">
        <size>2</size>
      </method>
      <method name="Int32 Field()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void set_Prop(System.String)">
        <size>1</size>
      </method>
      <method name="System.String get_Prop()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-788.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>31</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.String get_Message()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-789.cs">
    <type name="Program">
      <method name="Void Main()">
        <size>76</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-79.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-790.cs">
    <type name="S">
      <method name="Void .ctor(Double)">
        <size>1</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void Verify_1(Test ByRef, Test ByRef)">
        <size>20</size>
      </method>
      <method name="Void Verify_2(S ByRef, S ByRef)">
        <size>28</size>
      </method>
      <method name="Void Verify_3(E ByRef, E ByRef)">
        <size>9</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="test-791.cs">
    <type name="testApp.TestApp">
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
      <method name="Boolean GetEnumerator()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-792.cs">
    <type name="Program">
      <method name="Void Test()">
        <size>24</size>
      </method>
      <method name="Void Test2(IMemberDelayed)">
        <size>19</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-793.cs">
    <type name="MonoPointerBugTest.Program">
      <method name="Int32 Main()">
        <size>43</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-794.cs">
    <type name="C">
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void TestCallOnly()">
        <size>65</size>
      </method>
      <method name="Void SomeMethod()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-795.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>112</size>
      </method>
      <method name="Void .ctor()">
        <size>25</size>
      </method>
    </type>
  </test>
  <test name="test-796.cs">
    <type name="Program">
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="FooAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Test()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="test-797.cs">
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-798.cs">
    <type name="A">
      <method name="Void Foo(Int32 ByRef)">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void Foo(Int32 ByRef)">
        <size>11</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main()">
        <size>24</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-799.cs">
    <type name="Test2">
      <method name="Int32 Main()">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test2+Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test2+Bar">
      <method name="Void .ctor(Foo)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-8.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>115</size>
      </method>
    </type>
  </test>
  <test name="test-80.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Add(Int32, Int32)">
        <size>4</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-800.cs">
    <type name="C">
      <method name="Void Main()">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-801.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>154</size>
      </method>
      <method name="E op_Implicit(C)">
        <size>3</size>
      </method>
      <method name="Int32 op_Implicit(C)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-802.cs">
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-803.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>26</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-804.cs">
    <type name="A">
      <method name="Int32 get_Foo()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="System.String get_Foo()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Char IB_2.get_Foo()">
        <size>3</size>
      </method>
      <method name="Byte get_Foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-805.cs">
    <type name="TestClass">
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 ReturnValue()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="G`1[T]">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-806.cs">
    <type name="A1">
      <method name="Void .ctor(Single)">
        <size>14</size>
      </method>
      <method name="Void .ctor(UInt64)">
        <size>16</size>
      </method>
    </type>
    <type name="T1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="T2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>86</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-807.cs">
    <type name="AException">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Main()">
        <size>55</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-808.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>52</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-809.cs">
    <type name="Z">
      <method name="Int32 Main()">
        <size>47</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-81.cs">
    <type name="N1.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Bar()">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>71</size>
      </method>
    </type>
  </test>
  <test name="test-810.cs">
    <type name="C">
      <method name="IA Test(IC)">
        <size>4</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-811.cs">
    <type name="C">
      <method name="Void TestRefValue(...)">
        <size>66</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-812.cs">
    <type name="N.C">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-813.cs">
    <type name="NS.System.A">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-814.cs">
    <type name="Test">
      <method name="System.String get_A()">
        <size>6</size>
      </method>
      <method name="System.String get_B()">
        <size>6</size>
      </method>
      <method name="Int32 Main()">
        <size>265</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-815.cs">
    <type name="D">
      <method name="Int32 get_DUUU(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 IS.get_Hello(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Int32 Main()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="test-816.cs">
    <type name="System.Int32">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="System.Program">
      <method name="Int32 Main()">
        <size>58</size>
      </method>
      <method name="System.Reflection.Assembly CurrentDomain_TypeResolve(System.Object, System.ResolveEventArgs)">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-817.cs">
    <type name="System.Program">
      <method name="Void Main()">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-818.cs">
    <type name="A.CAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B.CAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo.Foo">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-819.cs">
    <type name="AAttribute">
      <method name="Int32 Main()">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="AAttribute+BAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-82.cs">
    <type name="N1.N2.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method(A ByRef)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="N1.N3.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method(A ByRef)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-820.cs">
    <type name="NS.C">
      <method name="Void Main()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Main(System.String[])">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-821.cs">
    <type name="S">
      <method name="T Test[T]()">
        <size>10</size>
      </method>
      <method name="Void M()">
        <size>13</size>
      </method>
    </type>
    <type name="A">
      <method name="Int32 Main()">
        <size>17</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-822.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-823.cs">
    <type name="Test">
      <method name="Int32 Main()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-83.cs">
    <type name="PersonArrivedArgs">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="Greeter">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Void HandlePersonArrived(System.Object, PersonArrivedArgs)">
        <size>18</size>
      </method>
    </type>
    <type name="Room">
      <method name="Void .ctor()">
        <size>14</size>
      </method>
      <method name="Void add_PersonArrived(PersonArrivedHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_PersonArrived(PersonArrivedHandler)">
        <size>47</size>
      </method>
      <method name="Void AddPerson(System.String)">
        <size>14</size>
      </method>
    </type>
    <type name="DelegateTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="PersonArrivedHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object, PersonArrivedArgs)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, PersonArrivedArgs, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-84.cs">
    <type name="Ghost">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-85.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="test-86.cs">
    <type name="T.T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 method1(System.Type, Int32)">
        <size>23</size>
      </method>
      <method name="Int32 method1(System.Type, System.Type[])">
        <size>12</size>
      </method>
      <method name="Int32 method2(System.Type, Int32)">
        <size>23</size>
      </method>
      <method name="Int32 method2(System.Type, System.Type[])">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-87.cs">
    <type name="Top">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>58</size>
      </method>
    </type>
    <type name="Top+X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top+Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Top+XA">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_one()">
        <size>2</size>
      </method>
    </type>
    <type name="Top+XB">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_one()">
        <size>2</size>
      </method>
      <method name="Int32 get_two()">
        <size>2</size>
      </method>
    </type>
    <type name="Other">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void X()">
        <size>5</size>
      </method>
    </type>
  </test>
  <test name="test-88.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void f(System.String)">
        <size>19</size>
      </method>
      <method name="Int32 Main()">
        <size>63</size>
      </method>
    </type>
  </test>
  <test name="test-89.cs">
    <type name="X">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="X F(Int32)">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>99</size>
      </method>
    </type>
  </test>
  <test name="test-9.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>104</size>
      </method>
    </type>
  </test>
  <test name="test-90.cs">
    <type name="N1.Blah">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-91.cs">
    <type name="Abstract">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Plain">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void MyProtectedInternal()">
        <size>1</size>
      </method>
      <method name="Void MyInternal()">
        <size>1</size>
      </method>
      <method name="Void MyPublic()">
        <size>1</size>
      </method>
      <method name="Void MyPrivate()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>242</size>
      </method>
    </type>
  </test>
  <test name="test-92.cs">
    <type name="Outer">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Outer+Inner">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="InnerBase">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-93.cs">
    <type name="N1.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void method(B ByRef)">
        <size>15</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-94.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 IVehicle.Start()">
        <size>2</size>
      </method>
      <method name="Int32 Stop()">
        <size>2</size>
      </method>
      <method name="Int32 Turn()">
        <size>2</size>
      </method>
    </type>
    <type name="Derived1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Turn()">
        <size>2</size>
      </method>
    </type>
    <type name="Derived2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 IVehicle.Start()">
        <size>2</size>
      </method>
      <method name="Int32 IVehicle.Turn()">
        <size>2</size>
      </method>
      <method name="Int32 Stop()">
        <size>2</size>
      </method>
      <method name="Int32 Turn()">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>88</size>
      </method>
    </type>
  </test>
  <test name="test-95.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="test-96.cs">
    <type name="N1.A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
    <type name="N1.C">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object, N1.A)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, N1.A, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-97.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-98.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void b()">
        <size>19</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-99.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>104</size>
      </method>
    </type>
  </test>
  <test name="test-anon-01.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-02.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>151</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>113</size>
      </method>
    </type>
  </test>
  <test name="test-anon-03.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>59</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-04.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>59</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="test-anon-05.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>207</size>
      </method>
      <method name="Boolean t(Int32, Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>76</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-06.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>112</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-anon-07.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>120</size>
      </method>
      <method name="Boolean t(Int32, Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>18</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-anon-08.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>35</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-anon-09.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
    </type>
    <type name="X+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>49</size>
      </method>
    </type>
  </test>
  <test name="test-anon-10.cs">
    <type name="S">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>105</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
    <type name="S+T">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="S+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S+&lt;Test&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__0()">
        <size>76</size>
      </method>
    </type>
  </test>
  <test name="test-anon-11.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>122</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="E">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32 ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32 ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(Int32 ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="F">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Int32[])">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Int32[], System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;Main&gt;m__0(Int32)">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__1(Int32)">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__2(System.Int32[])">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__3(System.Int32[])">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-anon-12.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>256</size>
      </method>
      <method name="System.Collections.ArrayList Find(predicate, System.Collections.ArrayList)">
        <size>83</size>
      </method>
    </type>
    <type name="predicate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Boolean Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Boolean &lt;Main&gt;m__0(System.Object)">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-anon-13.cs">
    <type name="X">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>42</size>
      </method>
      <method name="D T()">
        <size>15</size>
      </method>
      <method name="System.String CALL()">
        <size>6</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;T&gt;m__0()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-anon-14.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Click(X+T)">
        <size>45</size>
      </method>
      <method name="Void remove_Click(X+T)">
        <size>45</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>31</size>
      </method>
    </type>
    <type name="X+T">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-anon-15.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>43</size>
      </method>
    </type>
    <type name="Foo+Inner">
      <method name="Void .ctor(String)">
        <size>7</size>
      </method>
    </type>
    <type name="Foo+foo_fn">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Foo+Inner Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Foo+Inner EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Foo+Inner &lt;Main&gt;m__0(System.String)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-anon-16.cs">
    <type name="X">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>42</size>
      </method>
      <method name="D T()">
        <size>15</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;T&gt;m__0()">
        <size>27</size>
      </method>
    </type>
  </test>
  <test name="test-anon-17.cs">
    <type name="Button">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Clicked(ClickEvent)">
        <size>47</size>
      </method>
      <method name="Void remove_Clicked(ClickEvent)">
        <size>47</size>
      </method>
      <method name="Void DoClick()">
        <size>12</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>61</size>
      </method>
    </type>
    <type name="ClickEvent">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;Main&gt;m__0()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-anon-18.cs">
    <type name="DelegateTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>83</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="DelegateTest+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>17</size>
      </method>
    </type>
  </test>
  <test name="test-anon-19.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>223</size>
      </method>
      <method name="Boolean t(Int32, Int32)">
        <size>5</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>93</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-20.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>33</size>
      </method>
      <method name="D MainHost()">
        <size>28</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;MainHost&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>52</size>
      </method>
    </type>
    <type name="X+&lt;MainHost&gt;c__AnonStorey0+&lt;MainHost&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-anon-21.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
      <method name="Void M()">
        <size>44</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;M&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>48</size>
      </method>
    </type>
    <type name="X+&lt;M&gt;c__AnonStorey0+&lt;M&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>81</size>
      </method>
    </type>
  </test>
  <test name="test-anon-22.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>33</size>
      </method>
      <method name="D T()">
        <size>28</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;T&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>52</size>
      </method>
    </type>
    <type name="X+&lt;T&gt;c__AnonStorey0+&lt;T&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-anon-23.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
      <method name="Void M()">
        <size>34</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;M&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>38</size>
      </method>
    </type>
    <type name="X+&lt;M&gt;c__AnonStorey0+&lt;M&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="test-anon-24.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>29</size>
      </method>
      <method name="D T(Int32)">
        <size>28</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;T&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-anon-25.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>48</size>
      </method>
      <method name="D T(Int32)">
        <size>28</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;T&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0(Int32)">
        <size>9</size>
      </method>
    </type>
  </test>
  <test name="test-anon-26.cs">
    <type name="TestGotoLabels.GotoLabelsTest">
      <method name="Int32 Main()">
        <size>36</size>
      </method>
      <method name="Void TestMethod2(TestGotoLabels.GotoLabelsTest+MyDelegate)">
        <size>7</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestGotoLabels.GotoLabelsTest+MyDelegate">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-anon-27.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>138</size>
      </method>
      <method name="Void M(Int32)">
        <size>59</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;M&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>38</size>
      </method>
    </type>
    <type name="X+&lt;M&gt;c__AnonStorey0+&lt;M&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>50</size>
      </method>
    </type>
  </test>
  <test name="test-anon-28.cs">
    <type name="Delegable">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_MyDelegate(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_MyDelegate(System.EventHandler)">
        <size>47</size>
      </method>
    </type>
    <type name="DelegateTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>58</size>
      </method>
    </type>
    <type name="DelegateTest+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(System.Object, System.EventArgs)">
        <size>33</size>
      </method>
    </type>
  </test>
  <test name="test-anon-29.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>108</size>
      </method>
      <method name="System.String Hello()">
        <size>20</size>
      </method>
      <method name="Void Main()">
        <size>18</size>
      </method>
    </type>
    <type name="X+Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+Bar">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;Hello&gt;m__1(System.String)">
        <size>7</size>
      </method>
      <method name="System.String &lt;Hello&gt;m__0()">
        <size>201</size>
      </method>
      <method name="Void &lt;Hello&gt;m__2(System.String)">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-30.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void add_E(Program+D)">
        <size>45</size>
      </method>
      <method name="Void remove_E(Program+D)">
        <size>45</size>
      </method>
      <method name="Void Main()">
        <size>38</size>
      </method>
    </type>
    <type name="Program+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(X)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(X, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(X)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-anon-31.cs">
    <type name="X">
      <method name="Void Main()">
        <size>35</size>
      </method>
      <method name="Void DoCall(X+test)">
        <size>1</size>
      </method>
      <method name="System.Object &lt;Main&gt;m__0(System.Reflection.MethodInfo)">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+test">
      <method name="System.Object Invoke(System.Reflection.MethodInfo)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Reflection.MethodInfo, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-anon-32.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>37</size>
      </method>
      <method name="Void SimpleCallback(MainClass, System.String)">
        <size>7</size>
      </method>
    </type>
    <type name="StringSender">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="VoidDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="MainClass+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>25</size>
      </method>
      <method name="Void &lt;&gt;m__1(System.String)">
        <size>13</size>
      </method>
    </type>
  </test>
  <test name="test-anon-33.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void doit(Int32)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>162</size>
      </method>
    </type>
    <type name="Do">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="T+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
    <type name="T+&lt;Main&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-anon-34.cs">
    <type name="Delegates.Space">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Leak(Boolean, Int32)">
        <size>92</size>
      </method>
    </type>
    <type name="Delegates.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void SpaceLeak()">
        <size>37</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>6</size>
      </method>
    </type>
    <type name="Delegates.Space+DoCopy">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Delegates.Space+&lt;Leak&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>23</size>
      </method>
    </type>
    <type name="Delegates.Space+&lt;Leak&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="test-anon-35.cs">
    <type name="ExceptionWithAnonMethod">
      <method name="Int32 Main()">
        <size>91</size>
      </method>
      <method name="Void AnonHandler(ExceptionWithAnonMethod+EmptyCallback)">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ExceptionWithAnonMethod+EmptyCallback">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="ExceptionWithAnonMethod+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>33</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-36.cs">
    <type name="Test">
      <method name="Void .ctor(TestMethod)">
        <size>7</size>
      </method>
      <method name="Void .ctor(TestMethod2)">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>36</size>
      </method>
    </type>
    <type name="TestMethod">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="TestMethod2">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void &lt;Main&gt;m__0()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-anon-37.cs">
    <type name="DelegateInit">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>35</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>11</size>
      </method>
    </type>
    <type name="DelegateInit+FooDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="DelegateInit">
      <method name="Void &lt;_print&gt;m__0()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-anon-38.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64, Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>67</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>64</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-anon-39.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>65</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>30</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-anon-40.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>65</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>30</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-anon-41.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>65</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>55</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>35</size>
      </method>
    </type>
  </test>
  <test name="test-anon-42.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>51</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Simple &lt;Test&gt;m__0()">
        <size>37</size>
      </method>
      <method name="Void &lt;Test&gt;m__1()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-43.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64, Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>54</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>64</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-anon-44.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>68</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Simple">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Simple Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Simple EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Simple &lt;&gt;m__1()">
        <size>33</size>
      </method>
      <method name="Simple &lt;&gt;m__0()">
        <size>51</size>
      </method>
      <method name="Void &lt;&gt;m__3()">
        <size>21</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__2()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-anon-45.cs">
    <type name="TestFunc">
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor(TestFunc)">
        <size>14</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Int32 Main()">
        <size>6</size>
      </method>
      <method name="Void &lt;a&gt;m__0(Int32)">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>46</size>
      </method>
    </type>
  </test>
  <test name="test-anon-46.cs">
    <type name="World">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>50</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="test-anon-47.cs">
    <type name="World">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>153</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>45</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-48.cs">
    <type name="World">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello(Int64)">
        <size>1</size>
      </method>
      <method name="Void Test(Int32)">
        <size>197</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>14</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="World+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>63</size>
      </method>
    </type>
  </test>
  <test name="test-anon-49.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>66</size>
      </method>
      <method name="IEnumerator GetEnumerator()">
        <size>8</size>
      </method>
    </type>
    <type name="Test+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>205</size>
      </method>
      <method name="Void Dispose()">
        <size>83</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-50.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable Foo(Int32)">
        <size>30</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>196</size>
      </method>
    </type>
    <type name="Test+&lt;Foo&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>134</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-anon-51.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>35</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
    </type>
    <type name="FooDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X">
      <method name="Void &lt;Print&gt;m__0()">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-anon-52.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator GetIt(System.Int32[])">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
    <type name="X+A">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>207</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>22</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-53.cs">
    <type name="Test">
      <method name="Void .ctor(Int32)">
        <size>39</size>
      </method>
      <method name="Void .cctor()">
        <size>33</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>15</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
    <type name="Test+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-anon-54.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>22</size>
      </method>
    </type>
    <type name="Hello">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>25</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void .ctor(Int32)">
        <size>8</size>
      </method>
      <method name="Void Test(Foo)">
        <size>45</size>
      </method>
      <method name="Void Hello(Int32)">
        <size>19</size>
      </method>
      <method name="System.String ToString()">
        <size>22</size>
      </method>
    </type>
  </test>
  <test name="test-anon-55.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(Foo+Hello)">
        <size>7</size>
      </method>
      <method name="Void Private()">
        <size>11</size>
      </method>
      <method name="Void Test()">
        <size>19</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>13</size>
      </method>
    </type>
    <type name="Foo+Hello">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="Void &lt;Test&gt;m__0()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-56.cs">
    <type name="Observable">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>50</size>
      </method>
    </type>
    <type name="QueueHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Observable)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Observable, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Observable">
      <method name="Void &lt;Main&gt;m__0(Observable)">
        <size>11</size>
      </method>
    </type>
  </test>
  <test name="test-anon-57.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>257</size>
      </method>
      <method name="Int32 Main()">
        <size>45</size>
      </method>
    </type>
    <type name="X+TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>89</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-58.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>342</size>
      </method>
      <method name="Int32 Main()">
        <size>46</size>
      </method>
    </type>
    <type name="X+TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>162</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-59.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>512</size>
      </method>
      <method name="Int32 Main()">
        <size>46</size>
      </method>
    </type>
    <type name="X+TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>224</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-60.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test(Int32)">
        <size>564</size>
      </method>
      <method name="Int32 Main()">
        <size>46</size>
      </method>
    </type>
    <type name="X+TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__0()">
        <size>347</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey2+&lt;Test&gt;c__AnonStorey4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>124</size>
      </method>
    </type>
  </test>
  <test name="test-anon-61.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test()">
        <size>333</size>
      </method>
      <method name="Int32 Main()">
        <size>59</size>
      </method>
    </type>
    <type name="X+TestDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>157</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-62.cs">
    <type name="X">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor(Z)">
        <size>56</size>
      </method>
    </type>
    <type name="Z">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Hello()">
        <size>1</size>
      </method>
    </type>
    <type name="FooHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Y+&lt;Y&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-anon-63.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator GetIt(System.Int32[])">
        <size>22</size>
      </method>
      <method name="Int32 Main()">
        <size>32</size>
      </method>
    </type>
    <type name="X+A">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>201</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>44</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-64.cs">
    <type name="Source">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_ChildSourceAdded(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_ChildSourceAdded(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void add_ChildSourceRemoved(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_ChildSourceRemoved(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Source FindSource(Source)">
        <size>2</size>
      </method>
      <method name="Void AddSource(Source, Int32, System.Object)">
        <size>100</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Source+&lt;AddSource&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0(System.Object, System.EventArgs)">
        <size>30</size>
      </method>
    </type>
    <type name="Source">
      <method name="Void &lt;AddSource&gt;m__1(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-anon-65.cs">
    <type name="BaseClass">
      <method name="Void .ctor(SomeDelegate)">
        <size>13</size>
      </method>
    </type>
    <type name="TestClass">
      <method name="Void .ctor(Int32)">
        <size>32</size>
      </method>
      <method name="Int32 Main(System.String[])">
        <size>9</size>
      </method>
    </type>
    <type name="BaseClass+SomeDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="TestClass+&lt;TestClass&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-anon-66.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_testEvent(Test+TestEventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_testEvent(Test+TestEventHandler)">
        <size>47</size>
      </method>
      <method name="Void add_TestEvent(Test+TestEventHandler)">
        <size>33</size>
      </method>
      <method name="Void remove_TestEvent(Test+TestEventHandler)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test+TestEventHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>12</size>
      </method>
    </type>
  </test>
  <test name="test-anon-67.cs">
    <type name="ClassOne">
      <method name="Void .ctor(ReturnStringDelegate)">
        <size>7</size>
      </method>
      <method name="Void .ctor(String)">
        <size>32</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="ClassOne+ReturnStringDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="ClassOne+&lt;ClassOne&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String &lt;&gt;m__0()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-68.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void T(D1)">
        <size>1</size>
      </method>
      <method name="Void T(D2)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>69</size>
      </method>
    </type>
    <type name="D1">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="D2">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(System.String ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Void &lt;Main&gt;m__0(Int32)">
        <size>1</size>
      </method>
      <method name="Void &lt;Main&gt;m__1(System.String ByRef)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-69.cs">
    <type name="SingleSteppingEngine">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object SendCommand(TargetAccessDelegate)">
        <size>8</size>
      </method>
      <method name="Void Detach()">
        <size>20</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="TargetAccessDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.Object Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="SingleSteppingEngine">
      <method name="System.Object &lt;Detach&gt;m__0(System.Object)">
        <size>19</size>
      </method>
    </type>
  </test>
  <test name="test-anon-70.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(C+D)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>98</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="UnsafeClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void UnsafeTests()">
        <size>35</size>
      </method>
    </type>
    <type name="C+&lt;UnsafeTests&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>14</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>38</size>
      </method>
      <method name="Void &lt;&gt;m__2()">
        <size>32</size>
      </method>
    </type>
    <type name="C">
      <method name="Void &lt;Main&gt;m__3()">
        <size>16</size>
      </method>
    </type>
    <type name="UnsafeClass">
      <method name="Int32* GetUnsafeValue()">
        <size>3</size>
      </method>
    </type>
  </test>
  <test name="test-anon-71.cs">
    <type name="Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Errno ProcessFile(System.String, Program+FdCb)">
        <size>2</size>
      </method>
      <method name="Errno OnReadHandle(System.String, System.Byte[], Int64)">
        <size>34</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Program+FdCb">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Program+&lt;OnReadHandle&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 &lt;&gt;m__0(Int32)">
        <size>46</size>
      </method>
    </type>
  </test>
  <test name="test-anon-72.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddOperator(Test+UnaryOperator)">
        <size>1</size>
      </method>
      <method name="Boolean TryGetValue(System.Object, System.Object ByRef)">
        <size>5</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Foo()">
        <size>19</size>
      </method>
    </type>
    <type name="Test+UnaryOperator">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Boolean Invoke(System.Object, System.Object ByRef)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.Object ByRef, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(System.Object ByRef, IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Boolean &lt;Foo&gt;m__0(System.Object, System.Object ByRef)">
        <size>31</size>
      </method>
    </type>
  </test>
  <test name="test-anon-73.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>31</size>
      </method>
      <method name="Void Test_1()">
        <size>36</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.Object)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.Object, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="T">
      <method name="Void &lt;Main&gt;m__0(System.Object)">
        <size>10</size>
      </method>
      <method name="Void &lt;Test_1&gt;m__1(System.Object)">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="test-anon-74.cs">
    <type name="Foo">
      <method name="Void Baz(Foo+SimpleDelegate)">
        <size>8</size>
      </method>
      <method name="Void Main(System.String[])">
        <size>35</size>
      </method>
    </type>
    <type name="Foo+SimpleDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.String[,] Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.String[,] EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Foo">
      <method name="System.String[,] &lt;Main&gt;m__0()">
        <size>34</size>
      </method>
    </type>
  </test>
  <test name="test-anon-75.cs">
    <type name="Data">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Int32, D)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void TestMe()">
        <size>154</size>
      </method>
      <method name="Boolean &lt;TestMe&gt;m__0()">
        <size>2</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Boolean Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Boolean EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test+&lt;TestMe&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean &lt;&gt;m__2()">
        <size>14</size>
      </method>
    </type>
    <type name="Test+&lt;TestMe&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;TestMe&gt;c__AnonStorey0">
      <method name="Boolean &lt;&gt;m__1()">
        <size>54</size>
      </method>
    </type>
  </test>
  <test name="test-anon-76.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Item(System.String, FactoryDelegate)">
        <size>8</size>
      </method>
      <method name="FactoryDelegate get_Item(System.String)">
        <size>7</size>
      </method>
      <method name="Void X()">
        <size>24</size>
      </method>
      <method name="Int32 Main()">
        <size>70</size>
      </method>
    </type>
    <type name="FactoryDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="System.Object Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="System.Object EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="System.Object &lt;X&gt;m__0()">
        <size>30</size>
      </method>
    </type>
  </test>
  <test name="test-anon-77.cs">
    <type name="y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean get_Item(Int32)">
        <size>28</size>
      </method>
      <method name="Void set_Item(Int32, Boolean)">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="y+&lt;&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-78.cs">
    <type name="DelegateTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
      <method name="Void Foo(D1)">
        <size>7</size>
      </method>
      <method name="Void Foo(D2)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>50</size>
      </method>
      <method name="Void &lt;Main&gt;m__0()">
        <size>18</size>
      </method>
    </type>
    <type name="D1">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="D2">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-anon-79.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_E(Test+D)">
        <size>47</size>
      </method>
      <method name="Void remove_E(Test+D)">
        <size>47</size>
      </method>
      <method name="Void add_Changed(Test+D)">
        <size>30</size>
      </method>
      <method name="Void remove_Changed(Test+D)">
        <size>1</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Test+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void &lt;add_Changed&gt;m__0()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-80.cs">
    <type name="MonoBug.MyTest">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>167</size>
      </method>
    </type>
    <type name="MonoBug.MyTest+EventHandlers">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="System.EventHandler get_DoNothingEventHandler()">
        <size>30</size>
      </method>
      <method name="System.EventHandler get_DoSomethingEventHandler()">
        <size>13</size>
      </method>
      <method name="System.EventHandler get_Handler()">
        <size>7</size>
      </method>
      <method name="Void set_Handler(System.EventHandler)">
        <size>8</size>
      </method>
      <method name="Void &lt;get_DoNothingEventHandler&gt;m__0(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
      <method name="Void &lt;get_DoSomethingEventHandler&gt;m__1(System.Object, System.EventArgs)">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-anon-81.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>20</size>
      </method>
      <method name="Int32 Test()">
        <size>27</size>
      </method>
      <method name="Int32 Foo2(C+Cmd2)">
        <size>7</size>
      </method>
      <method name="Void Foo(C+Cmd)">
        <size>7</size>
      </method>
    </type>
    <type name="C+Cmd">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+Cmd2">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 &lt;Test&gt;m__0()">
        <size>45</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>44</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey1+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__2()">
        <size>18</size>
      </method>
    </type>
  </test>
  <test name="test-anon-82.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>87</size>
      </method>
      <method name="Void Test2(Int32)">
        <size>31</size>
      </method>
      <method name="Void Test3(Int32)">
        <size>57</size>
      </method>
      <method name="Void Test4()">
        <size>31</size>
      </method>
      <method name="Void Test5(Int32)">
        <size>27</size>
      </method>
      <method name="Void SimpleCallback(MainClass, System.String)">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="StringSender">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke(System.String)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.String, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="VoidDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="MainClass+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test2&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test3&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test4&gt;c__AnonStorey3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test5&gt;c__AnonStorey4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void &lt;Test2&gt;m__1(System.String)">
        <size>27</size>
      </method>
      <method name="Void &lt;Test3&gt;m__3()">
        <size>1</size>
      </method>
      <method name="Void &lt;Test4&gt;m__4()">
        <size>31</size>
      </method>
      <method name="Void &lt;Test4&gt;m__7()">
        <size>28</size>
      </method>
    </type>
    <type name="MainClass+&lt;Main&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>25</size>
      </method>
      <method name="Void &lt;&gt;m__9(System.String)">
        <size>13</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test3&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__2()">
        <size>9</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test5&gt;c__AnonStorey4">
      <method name="Int32 &lt;&gt;m__5(Int32)">
        <size>46</size>
      </method>
      <method name="Int32 &lt;&gt;m__A(Int32)">
        <size>2</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test2&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__6()">
        <size>12</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test4&gt;c__AnonStorey3">
      <method name="Void &lt;&gt;m__8()">
        <size>14</size>
      </method>
      <method name="Void &lt;&gt;m__B()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-83.cs">
    <type name="C">
      <method name="Void add_MyDelegate(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_MyDelegate(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void DoSomething(Boolean)">
        <size>8</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void &lt;MyDelegate&gt;m__0(System.Object, System.EventArgs)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="test-anon-84.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>42</size>
      </method>
      <method name="Void .ctor(D)">
        <size>42</size>
      </method>
      <method name="Int32 Main()">
        <size>19</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="C Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="C EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C">
      <method name="C &lt;field&gt;m__0(Int32)">
        <size>4</size>
      </method>
    </type>
  </test>
  <test name="test-anon-85.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
    <type name="X+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-anon-86.cs">
    <type name="Bug.A">
      <method name="Void .ctor()">
        <size>50</size>
      </method>
      <method name="Void Test()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
    <type name="Bug.B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Prop()">
        <size>2</size>
      </method>
    </type>
    <type name="Bug.EventHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Bug.A+&lt;A&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>24</size>
      </method>
    </type>
  </test>
  <test name="test-anon-87.cs">
    <type name="Bug.AA">
      <method name="Void .ctor(BB)">
        <size>51</size>
      </method>
      <method name="Void TestMe()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>18</size>
      </method>
    </type>
    <type name="Bug.BB">
      <method name="Void .ctor(String)">
        <size>18</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
    <type name="Bug.D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Bug.AA+&lt;AA&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-anon-88.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void Test()">
        <size>97</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__2()">
        <size>8</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>69</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>8</size>
      </method>
      <method name="Void &lt;&gt;m__4()">
        <size>3</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey2+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__3()">
        <size>20</size>
      </method>
    </type>
  </test>
  <test name="test-anon-89.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="System.Object get_GdkWindow()">
        <size>2</size>
      </method>
      <method name="Void set_GdkWindow(System.Object)">
        <size>1</size>
      </method>
      <method name="Void Invoke(C+D)">
        <size>1</size>
      </method>
      <method name="Void Test()">
        <size>69</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>108</size>
      </method>
      <method name="Void &lt;&gt;m__3()">
        <size>29</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>18</size>
      </method>
      <method name="Void &lt;&gt;m__2()">
        <size>49</size>
      </method>
    </type>
  </test>
  <test name="test-anon-90.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void Foo()">
        <size>27</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Foo&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>66</size>
      </method>
    </type>
    <type name="C+&lt;Foo&gt;c__AnonStorey0+&lt;Foo&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Foo&gt;c__AnonStorey0+&lt;Foo&gt;c__AnonStorey2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>32</size>
      </method>
    </type>
  </test>
  <test name="test-anon-91.cs">
    <type name="A">
      <method name="Void .ctor(Int32)">
        <size>27</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void SelectCommand(Int32)">
        <size>1</size>
      </method>
      <method name="Void Test()">
        <size>66</size>
      </method>
    </type>
    <type name="C+D">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>108</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>23</size>
      </method>
    </type>
  </test>
  <test name="test-anon-92.cs">
    <type name="MainClass">
      <method name="Void Test(IEnumerable)">
        <size>33</size>
      </method>
      <method name="Int32 Main()">
        <size>21</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="MainClass+&lt;Test&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>72</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-93.cs">
    <type name="BaseTest.MainClass">
      <method name="Void add_MyEvent(System.EventHandler)">
        <size>55</size>
      </method>
      <method name="Void remove_MyEvent(System.EventHandler)">
        <size>55</size>
      </method>
      <method name="Void RaiseMyEvent(System.Object, System.EventArgs)">
        <size>14</size>
      </method>
      <method name="Void Main()">
        <size>50</size>
      </method>
      <method name="Void &lt;Main&gt;m__2(System.Object, System.EventArgs)">
        <size>13</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseTest.MainClass+&lt;&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0(System.Object, System.EventArgs)">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="BaseTest.MainClass+&lt;&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__1(System.Object, System.EventArgs)">
        <size>23</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-94.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>57</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+BaseClass">
      <method name="Void Print()">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+Derived">
      <method name="Void Print()">
        <size>20</size>
      </method>
      <method name="Void &lt;Print&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void &lt;Print&gt;__BaseCallProxy0()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+DerivedLibrary">
      <method name="Void Print(Int32)">
        <size>20</size>
      </method>
      <method name="Void &lt;Print&gt;__BaseCallProxy0(Int32)">
        <size>8</size>
      </method>
      <method name="Void &lt;Print&gt;m__1()">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-95.cs">
    <type name="D">
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="A">
      <method name="Void add_Event(D)">
        <size>0</size>
      </method>
      <method name="Void remove_Event(D)">
        <size>0</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void add_Event(D)">
        <size>47</size>
      </method>
      <method name="Void remove_Event(D)">
        <size>47</size>
      </method>
      <method name="Int32 Run()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 Test(Int32)">
        <size>46</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
      <method name="Void &lt;add_Event&gt;__BaseCallProxy0(D)">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>24</size>
      </method>
      <method name="Int32 &lt;&gt;m__1()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-96.cs">
    <type name="P">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program">
      <method name="Int32 Extra()">
        <size>3</size>
      </method>
      <method name="Program+D Get(Int32)">
        <size>128</size>
      </method>
      <method name="Int32 Run(Int32)">
        <size>12</size>
      </method>
      <method name="Int32 Main()">
        <size>77</size>
      </method>
    </type>
    <type name="Program+D">
      <method name="Int32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Program+&lt;Get&gt;c__AnonStorey0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Get&gt;c__AnonStorey1">
      <method name="Int32 &lt;&gt;m__0()">
        <size>24</size>
      </method>
      <method name="Int32 &lt;&gt;m__1()">
        <size>24</size>
      </method>
      <method name="Int32 &lt;&gt;m__2()">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-97.cs">
    <type name="Space">
      <method name="Void Leak(Boolean, Int32)">
        <size>85</size>
      </method>
      <method name="Void .ctor()">
        <size>14</size>
      </method>
    </type>
    <type name="Space+DoCopy">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="Program">
      <method name="Void Main(System.String[])">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Space+&lt;Leak&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Space+&lt;Leak&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>18</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>68</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-98.cs">
    <type name="Foo">
      <method name="Void Finalize()">
        <size>39</size>
      </method>
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo+&lt;Finalize&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__0()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-anon-99.cs">
    <type name="C">
      <method name="Void Test()">
        <size>37</size>
      </method>
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void &lt;Test&gt;m__0()">
        <size>58</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0">
      <method name="Void &lt;&gt;m__1()">
        <size>69</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;Test&gt;c__AnonStorey0+&lt;Test&gt;c__AnonStorey2">
      <method name="Void &lt;&gt;m__2()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-async-01.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>118</size>
      </method>
      <method name="Void TestAsync()">
        <size>13</size>
      </method>
      <method name="System.Threading.Tasks.Task RunAsync()">
        <size>40</size>
      </method>
      <method name="Void &lt;RunAsync&gt;m__0()">
        <size>61</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>23</size>
      </method>
    </type>
    <type name="Program+&lt;TestAsync&gt;c__async0">
      <method name="Void MoveNext()">
        <size>191</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-02.cs">
    <type name="C">
      <method name="System.Threading.Tasks.Task TestTask()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task Call()">
        <size>23</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestTaskGeneric()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] CallGeneric()">
        <size>23</size>
      </method>
      <method name="Int32 Main()">
        <size>258</size>
      </method>
      <method name="Void &lt;Call&gt;m__0()">
        <size>28</size>
      </method>
      <method name="Int32 &lt;CallGeneric&gt;m__1()">
        <size>19</size>
      </method>
      <method name="Void .ctor()">
        <size>19</size>
      </method>
      <method name="System.Threading.Tasks.Task TestTask2()">
        <size>34</size>
      </method>
    </type>
    <type name="C+&lt;TestTask&gt;c__async0">
      <method name="Void MoveNext()">
        <size>141</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestTask2&gt;c__async1">
      <method name="Void MoveNext()">
        <size>141</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestTaskGeneric&gt;c__async2">
      <method name="Void MoveNext()">
        <size>148</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-03.cs">
    <type name="S">
      <method name="A GetAwaiter(Int32)">
        <size>6</size>
      </method>
    </type>
    <type name="A">
      <method name="Boolean get_IsCompleted()">
        <size>2</size>
      </method>
      <method name="Void OnCompleted(System.Action)">
        <size>1</size>
      </method>
      <method name="Int32 GetResult()">
        <size>2</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] Test1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] Test2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task Test3()">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>70</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+&lt;Test1&gt;c__async0">
      <method name="Void MoveNext()">
        <size>219</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="A+&lt;Test2&gt;c__async1">
      <method name="Void MoveNext()">
        <size>140</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="A+&lt;Test3&gt;c__async2">
      <method name="Void MoveNext()">
        <size>132</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-04.cs">
    <type name="C">
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestTaskGeneric()">
        <size>34</size>
      </method>
      <method name="Int32 Main()">
        <size>113</size>
      </method>
      <method name="Void .ctor()">
        <size>31</size>
      </method>
    </type>
    <type name="C+&lt;TestTaskGeneric&gt;c__async0">
      <method name="Void MoveNext()">
        <size>161</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-05.cs">
    <type name="C">
      <method name="System.Threading.Tasks.Task Method()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>71</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-async-06.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>437</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Decimal] &lt;Main&gt;m__4(Decimal)">
        <size>34</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__0()">
        <size>20</size>
      </method>
      <method name="Void &lt;&gt;m__1()">
        <size>20</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.String] &lt;&gt;m__2(System.String)">
        <size>41</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Decimal] &lt;&gt;m__3(Decimal)">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__async5">
      <method name="Void MoveNext()">
        <size>46</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async0">
      <method name="Void MoveNext()">
        <size>190</size>
      </method>
      <method name="Void &lt;&gt;m__5()">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async2">
      <method name="Void MoveNext()">
        <size>190</size>
      </method>
      <method name="Void &lt;&gt;m__6()">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async3">
      <method name="Void MoveNext()">
        <size>171</size>
      </method>
      <method name="System.String &lt;&gt;m__7()">
        <size>44</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async4">
      <method name="Void MoveNext()">
        <size>171</size>
      </method>
      <method name="Decimal &lt;&gt;m__8()">
        <size>44</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-07.cs">
    <type name="Program">
      <method name="Int32 Main()">
        <size>323</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int16] &lt;Main&gt;m__2(Int16)">
        <size>34</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1">
      <method name="System.Threading.Tasks.Task`1[System.String] &lt;&gt;m__0(System.String)">
        <size>41</size>
      </method>
      <method name="System.Threading.Tasks.Task &lt;&gt;m__1()">
        <size>34</size>
      </method>
      <method name="Void &lt;&gt;m__3()">
        <size>20</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__async3">
      <method name="Void MoveNext()">
        <size>46</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async0">
      <method name="Void MoveNext()">
        <size>159</size>
      </method>
      <method name="System.String &lt;&gt;m__4()">
        <size>44</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async2">
      <method name="Void MoveNext()">
        <size>152</size>
      </method>
      <method name="Void &lt;&gt;m__5()">
        <size>38</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Program+&lt;Main&gt;c__AnonStorey1+&lt;Main&gt;c__async4">
      <method name="Void MoveNext()">
        <size>158</size>
      </method>
      <method name="Void &lt;&gt;m__6()">
        <size>55</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-08.cs">
    <type name="AsyncTypeInference">
      <method name="Int32 Main()">
        <size>104</size>
      </method>
      <method name="System.Threading.Tasks.Task TT()">
        <size>40</size>
      </method>
      <method name="Void Test[T](System.Func`2[System.Int32,System.Threading.Tasks.Task`1[T]])">
        <size>9</size>
      </method>
      <method name="Void Test2[T](System.Func`2[System.Int32,T])">
        <size>9</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] &lt;Main&gt;m__0(Int32)">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] &lt;Main&gt;m__1(Int32)">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task &lt;Main&gt;m__2(Int32)">
        <size>27</size>
      </method>
      <method name="Int32 &lt;TT&gt;m__3()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="AsyncTypeInference+&lt;Main&gt;c__async2">
      <method name="Void MoveNext()">
        <size>176</size>
      </method>
      <method name="Int32 &lt;&gt;m__4()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="AsyncTypeInference+&lt;Main&gt;c__async5">
      <method name="Void MoveNext()">
        <size>176</size>
      </method>
      <method name="Int32 &lt;&gt;m__5()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="AsyncTypeInference+&lt;Main&gt;c__async8">
      <method name="Void MoveNext()">
        <size>135</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-09.cs">
    <type name="Test">
      <method name="Int32 Foo[T](System.Func`2[T,System.Threading.Tasks.Task`1[System.Int32]])">
        <size>2</size>
      </method>
      <method name="Int32 Foo[T](System.Func`2[T,System.Threading.Tasks.Task`1[System.Int16]])">
        <size>2</size>
      </method>
      <method name="Int32 Main()">
        <size>44</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int16] &lt;Main&gt;m__0(System.String)">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;Main&gt;c__async2">
      <method name="Void MoveNext()">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-10.cs">
    <type name="C">
      <method name="System.Threading.Tasks.Task`1[System.String] TestCompositionCall_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.String] TestCompositionCall_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestCompositionCall_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestCompositionPair_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestCompositionPair_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestCompositionPair_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestCompositionPair_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Byte] M(Byte)">
        <size>36</size>
      </method>
      <method name="Int32 Main()">
        <size>377</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;M&gt;c__AnonStorey7">
      <method name="Byte &lt;&gt;m__0()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionCall_1&gt;c__async0">
      <method name="Void MoveNext()">
        <size>304</size>
      </method>
      <method name="System.String &lt;&gt;m__1()">
        <size>13</size>
      </method>
      <method name="System.String &lt;&gt;m__2()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionCall_2&gt;c__async1">
      <method name="Void MoveNext()">
        <size>218</size>
      </method>
      <method name="System.String &lt;&gt;m__3()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionCall_3&gt;c__async2">
      <method name="Void MoveNext()">
        <size>289</size>
      </method>
      <method name="Byte &lt;&gt;m__4()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionPair_1&gt;c__async3">
      <method name="Void MoveNext()">
        <size>178</size>
      </method>
      <method name="Int32 &lt;&gt;m__5()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionPair_2&gt;c__async4">
      <method name="Void MoveNext()">
        <size>295</size>
      </method>
      <method name="Int32 &lt;&gt;m__6()">
        <size>9</size>
      </method>
      <method name="Int32 &lt;&gt;m__7()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionPair_3&gt;c__async5">
      <method name="Void MoveNext()">
        <size>179</size>
      </method>
      <method name="Int32 &lt;&gt;m__8()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestCompositionPair_4&gt;c__async6">
      <method name="Void MoveNext()">
        <size>428</size>
      </method>
      <method name="Int32 &lt;&gt;m__9()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__A()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__B()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-11.cs">
    <type name="G`1[T]">
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestStack_1(T)">
        <size>41</size>
      </method>
      <method name="Int32 Call(T, T, T ByRef, Int32)">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Int32 TestCall(Int32 ByRef, System.Type, System.Object, UInt64, Int32)">
        <size>66</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestStack_1()">
        <size>27</size>
      </method>
      <method name="Int32 TestCall2[T1,T2,T3,T4,T5,T6,T7](T1, T2, T3, T4, T5, T6, T7)">
        <size>2</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestStack_2(UInt64)">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestStack_3()">
        <size>27</size>
      </method>
      <method name="Int32 TestCall3(S ByRef, S ByRef, Int32, Int32)">
        <size>18</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestStack_4()">
        <size>27</size>
      </method>
      <method name="Int32 TestCall4(E, S, C, Int32)">
        <size>38</size>
      </method>
      <method name="Int32 Main()">
        <size>302</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 get_Prop()">
        <size>21</size>
      </method>
      <method name="Void set_Prop(Int32)">
        <size>15</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestStack_5()">
        <size>27</size>
      </method>
    </type>
    <type name="G`1+&lt;TestStack_1&gt;c__async0[T]">
      <method name="Void MoveNext()">
        <size>236</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestStack_1&gt;c__async1">
      <method name="Void MoveNext()">
        <size>281</size>
      </method>
      <method name="Int32 &lt;&gt;m__1()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestStack_2&gt;c__async2">
      <method name="Void MoveNext()">
        <size>263</size>
      </method>
      <method name="Int32 &lt;&gt;m__2()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestStack_3&gt;c__async3">
      <method name="Void MoveNext()">
        <size>435</size>
      </method>
      <method name="Int32 &lt;&gt;m__3()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestStack_4&gt;c__async4">
      <method name="Void MoveNext()">
        <size>291</size>
      </method>
      <method name="Int32 &lt;&gt;m__4()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;TestStack_5&gt;c__async5">
      <method name="Void MoveNext()">
        <size>269</size>
      </method>
      <method name="Int32 &lt;&gt;m__5()">
        <size>35</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-12.cs">
    <type name="C">
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestNested_1()">
        <size>27</size>
      </method>
      <method name="Int32 Call(Int32, Int32, Int32)">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>58</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;TestNested_1&gt;c__async0">
      <method name="Void MoveNext()">
        <size>417</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>9</size>
      </method>
      <method name="Int32 &lt;&gt;m__1()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__2()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-13.cs">
    <type name="Base">
      <method name="Boolean get_PropertyBool()">
        <size>2</size>
      </method>
      <method name="Int32 Call(Int32, Int32, Int32)">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[System.Boolean] NewArrayInitTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] NewArrayInitTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] NewArrayInitTest_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] NewArrayInitTest_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] NewArrayInitTest_5()">
        <size>27</size>
      </method>
      <method name="Boolean RunTest(System.Reflection.MethodInfo)">
        <size>235</size>
      </method>
      <method name="Int32 Main()">
        <size>179</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__0(System.Reflection.MethodInfo)">
        <size>12</size>
      </method>
      <method name="System.String &lt;Main&gt;m__1(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__2(System.Reflection.MethodInfo)">
        <size>7</size>
      </method>
      <method name="Boolean &lt;Main&gt;m__3(Boolean)">
        <size>5</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="S">
      <method name="Void SetValue(Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="Base">
      <method name="Void add_Event(System.Action)">
        <size>47</size>
      </method>
      <method name="Void remove_Event(System.Action)">
        <size>47</size>
      </method>
      <method name="Int32 get_PropertyInt()">
        <size>9</size>
      </method>
      <method name="Void set_PropertyInt(Int32)">
        <size>19</size>
      </method>
      <method name="Base get_PropertyThis()">
        <size>16</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>17</size>
      </method>
      <method name="Int32 Call(Char ByRef, Int32)">
        <size>6</size>
      </method>
      <method name="Int32 CallNamed(Int32, Int32)">
        <size>4</size>
      </method>
      <method name="Void CallEvent()">
        <size>12</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[System.Boolean] PropertyTest_1()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] PropertyTest_2()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] StringConcatTest_1()">
        <size>27</size>
      </method>
    </type>
    <type name="Base">
      <method name="Void CallRefParams(Int32 ByRef, System.Int32[])">
        <size>4</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[System.Int32] PropertyTest_3()">
        <size>34</size>
      </method>
    </type>
    <type name="S">
      <method name="Void .ctor(Int32, String)">
        <size>8</size>
      </method>
    </type>
    <type name="Base">
      <method name="Void .ctor(Int32, Int32)">
        <size>16</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[System.Int32] NewInitTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] NewInitTest_2()">
        <size>27</size>
      </method>
    </type>
    <type name="S">
      <method name="S op_Implicit(Base)">
        <size>16</size>
      </method>
    </type>
    <type name="Base">
      <method name="Void CallBool(Boolean)">
        <size>1</size>
      </method>
      <method name="Int32 CallS(S)">
        <size>8</size>
      </method>
      <method name="Boolean op_True(Base)">
        <size>2</size>
      </method>
      <method name="Boolean op_False(Base)">
        <size>2</size>
      </method>
      <method name="Base op_BitwiseAnd(Base, Base)">
        <size>18</size>
      </method>
      <method name="Base op_BitwiseOr(Base, Base)">
        <size>21</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[System.Boolean] UnaryTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] UnaryTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] UnaryTest_3()">
        <size>27</size>
      </method>
    </type>
    <type name="S">
      <method name="S op_Addition(S, S)">
        <size>32</size>
      </method>
    </type>
    <type name="Base">
      <method name="T[] CreateArray[T](Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[System.Boolean] NewArrayInitTest_6()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] ArrayAccessTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ArrayAccessTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ArrayAccessTest_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] ArrayAccessTest_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] ArrayAccessTest_5()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ArrayAccessTest_6()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] ArrayAccessTest_7()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ArrayAccessTest_8()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ArrayAccessTest_9()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] AssignTest_1()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] AssignTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] AssignTest_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] BinaryTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] BinaryTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] BinaryTest_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] BinaryTest_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] CallTest_1()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] CallTest_2()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] CallTest_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] CallTest_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] CallTest_5()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] CastTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] CastTest_2()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] CoalescingTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] CoalescingTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ConditionalTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ConditionalTest_2()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ConditionalTest_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] ConditionalTest_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] DelegateInvoke_4()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] EventInvoke_1()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] FieldTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] IndexerTest_1()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] IndexerTest_2()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] IndexerTest_3()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] IndexerTest_4()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] IndexerTest_5()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] IndexerTest_6()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] IndexerTest_7()">
        <size>34</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] IsTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] IsTest_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] LogicalUserOperator_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] LogicalUserOperator_2()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] LogicalUserOperator_3()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] NewTest_1()">
        <size>27</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Boolean] NewTest_2()">
        <size>27</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_1&gt;c__async0">
      <method name="Void MoveNext()">
        <size>321</size>
      </method>
      <method name="Boolean &lt;&gt;m__4()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__5()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_2&gt;c__async1">
      <method name="Void MoveNext()">
        <size>740</size>
      </method>
      <method name="Int32 &lt;&gt;m__6()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__7()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__8()">
        <size>2</size>
      </method>
      <method name="Double &lt;&gt;m__9()">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_3&gt;c__async2">
      <method name="Void MoveNext()">
        <size>1082</size>
      </method>
      <method name="Int32 &lt;&gt;m__A()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__B()">
        <size>2</size>
      </method>
      <method name="Decimal &lt;&gt;m__C()">
        <size>12</size>
      </method>
      <method name="Int32 &lt;&gt;m__D()">
        <size>2</size>
      </method>
      <method name="Decimal &lt;&gt;m__E()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_4&gt;c__async3">
      <method name="Void MoveNext()">
        <size>393</size>
      </method>
      <method name="Int32 &lt;&gt;m__F()">
        <size>2</size>
      </method>
      <method name="System.String &lt;&gt;m__10()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_5&gt;c__async4">
      <method name="Void MoveNext()">
        <size>393</size>
      </method>
      <method name="Int32 &lt;&gt;m__11()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__12()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_6&gt;c__async5">
      <method name="Void MoveNext()">
        <size>236</size>
      </method>
      <method name="Int64 &lt;&gt;m__13()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_7&gt;c__async6">
      <method name="Void MoveNext()">
        <size>363</size>
      </method>
      <method name="Int32 &lt;&gt;m__14()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_8&gt;c__async7">
      <method name="Void MoveNext()">
        <size>655</size>
      </method>
      <method name="Int32 &lt;&gt;m__15()">
        <size>2</size>
      </method>
      <method name="Byte &lt;&gt;m__16()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ArrayAccessTest_9&gt;c__async8">
      <method name="Void MoveNext()">
        <size>1201</size>
      </method>
      <method name="Int32 &lt;&gt;m__17()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__18()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__19()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__1A()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__1B()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__1C()">
        <size>2</size>
      </method>
      <method name="S &lt;&gt;m__1D()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;AssignTest_1&gt;c__async9">
      <method name="Void MoveNext()">
        <size>202</size>
      </method>
      <method name="Int32 &lt;&gt;m__1E()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;AssignTest_2&gt;c__asyncA">
      <method name="Void MoveNext()">
        <size>251</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__1F()">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;AssignTest_3&gt;c__asyncB">
      <method name="Void MoveNext()">
        <size>350</size>
      </method>
      <method name="Int32 &lt;&gt;m__20()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__21()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;BinaryTest_1&gt;c__asyncC">
      <method name="Void MoveNext()">
        <size>428</size>
      </method>
      <method name="Int32 &lt;&gt;m__22()">
        <size>9</size>
      </method>
      <method name="Int32 &lt;&gt;m__23()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__24()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;BinaryTest_2&gt;c__asyncD">
      <method name="Void MoveNext()">
        <size>459</size>
      </method>
      <method name="Boolean &lt;&gt;m__25()">
        <size>16</size>
      </method>
      <method name="Boolean &lt;&gt;m__26()">
        <size>16</size>
      </method>
      <method name="Boolean &lt;&gt;m__27()">
        <size>16</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;BinaryTest_3&gt;c__asyncE">
      <method name="Void MoveNext()">
        <size>1095</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__28()">
        <size>7</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__29()">
        <size>10</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__2A()">
        <size>10</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__2B()">
        <size>7</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__2C()">
        <size>10</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__2D()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;BinaryTest_4&gt;c__asyncF">
      <method name="Void MoveNext()">
        <size>808</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__2E()">
        <size>7</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__2F()">
        <size>10</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__30()">
        <size>13</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__31()">
        <size>10</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CallTest_1&gt;c__async10">
      <method name="Void MoveNext()">
        <size>423</size>
      </method>
      <method name="Int32 &lt;&gt;m__32()">
        <size>9</size>
      </method>
      <method name="Int32 &lt;&gt;m__33()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__34()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CallTest_2&gt;c__async11">
      <method name="Void MoveNext()">
        <size>246</size>
      </method>
      <method name="Int32 &lt;&gt;m__35()">
        <size>9</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CallTest_3&gt;c__async12">
      <method name="Void MoveNext()">
        <size>216</size>
      </method>
      <method name="Int32 &lt;&gt;m__36()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CallTest_4&gt;c__async13">
      <method name="Void MoveNext()">
        <size>206</size>
      </method>
      <method name="E &lt;&gt;m__37()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CallTest_5&gt;c__async14">
      <method name="Void MoveNext()">
        <size>272</size>
      </method>
      <method name="Int32 &lt;&gt;m__38()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CastTest_1&gt;c__async15">
      <method name="Void MoveNext()">
        <size>225</size>
      </method>
      <method name="Decimal &lt;&gt;m__39()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CastTest_2&gt;c__async16">
      <method name="Void MoveNext()">
        <size>207</size>
      </method>
      <method name="Tester &lt;&gt;m__3A()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CoalescingTest_1&gt;c__async17">
      <method name="Void MoveNext()">
        <size>337</size>
      </method>
      <method name="System.String &lt;&gt;m__3B()">
        <size>2</size>
      </method>
      <method name="System.String &lt;&gt;m__3C()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;CoalescingTest_2&gt;c__async18">
      <method name="Void MoveNext()">
        <size>349</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__3D()">
        <size>10</size>
      </method>
      <method name="Byte &lt;&gt;m__3E()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ConditionalTest_1&gt;c__async19">
      <method name="Void MoveNext()">
        <size>41</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ConditionalTest_2&gt;c__async1A">
      <method name="Void MoveNext()">
        <size>315</size>
      </method>
      <method name="Int32 &lt;&gt;m__3F()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__40()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ConditionalTest_3&gt;c__async1B">
      <method name="Void MoveNext()">
        <size>333</size>
      </method>
      <method name="Boolean &lt;&gt;m__41()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__42()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;ConditionalTest_4&gt;c__async1C">
      <method name="Void MoveNext()">
        <size>222</size>
      </method>
      <method name="Int32 &lt;&gt;m__43()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;DelegateInvoke_4&gt;c__async1D">
      <method name="Void MoveNext()">
        <size>250</size>
      </method>
      <method name="Int32 &lt;&gt;m__44(Int32)">
        <size>4</size>
      </method>
      <method name="Int32 &lt;&gt;m__45()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;EventInvoke_1&gt;c__async1E">
      <method name="Void MoveNext()">
        <size>196</size>
      </method>
      <method name="System.Action &lt;&gt;m__46()">
        <size>15</size>
      </method>
      <method name="Void &lt;&gt;m__47()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;FieldTest_1&gt;c__async1F">
      <method name="Void MoveNext()">
        <size>521</size>
      </method>
      <method name="Int32 &lt;&gt;m__48()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__49()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_1&gt;c__async20">
      <method name="Void MoveNext()">
        <size>204</size>
      </method>
      <method name="Int32 &lt;&gt;m__4A()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_2&gt;c__async21">
      <method name="Void MoveNext()">
        <size>321</size>
      </method>
      <method name="Int32 &lt;&gt;m__4B()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__4C()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_3&gt;c__async22">
      <method name="Void MoveNext()">
        <size>350</size>
      </method>
      <method name="Int32 &lt;&gt;m__4D()">
        <size>18</size>
      </method>
      <method name="Int32 &lt;&gt;m__4E()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_4&gt;c__async23">
      <method name="Void MoveNext()">
        <size>378</size>
      </method>
      <method name="Int32 &lt;&gt;m__4F()">
        <size>18</size>
      </method>
      <method name="Int32 &lt;&gt;m__50()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_5&gt;c__async24">
      <method name="Void MoveNext()">
        <size>481</size>
      </method>
      <method name="Int32 &lt;&gt;m__51()">
        <size>18</size>
      </method>
      <method name="Int32 &lt;&gt;m__52()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_6&gt;c__async25">
      <method name="Void MoveNext()">
        <size>537</size>
      </method>
      <method name="Int32 &lt;&gt;m__53()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__54()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__55()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IndexerTest_7&gt;c__async26">
      <method name="Void MoveNext()">
        <size>235</size>
      </method>
      <method name="Int32 &lt;&gt;m__56()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IsTest_1&gt;c__async27">
      <method name="Void MoveNext()">
        <size>219</size>
      </method>
      <method name="Tester &lt;&gt;m__57()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;IsTest_2&gt;c__async28">
      <method name="Void MoveNext()">
        <size>211</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__58()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;LogicalUserOperator_1&gt;c__async29">
      <method name="Void MoveNext()">
        <size>370</size>
      </method>
      <method name="Base &lt;&gt;m__59()">
        <size>6</size>
      </method>
      <method name="Base &lt;&gt;m__5A()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;LogicalUserOperator_2&gt;c__async2A">
      <method name="Void MoveNext()">
        <size>271</size>
      </method>
      <method name="Base &lt;&gt;m__5B()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;LogicalUserOperator_3&gt;c__async2B">
      <method name="Void MoveNext()">
        <size>369</size>
      </method>
      <method name="Base &lt;&gt;m__5C()">
        <size>6</size>
      </method>
      <method name="Base &lt;&gt;m__5D()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewTest_1&gt;c__async2C">
      <method name="Void MoveNext()">
        <size>232</size>
      </method>
      <method name="Int32 &lt;&gt;m__5E()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewTest_2&gt;c__async2D">
      <method name="Void MoveNext()">
        <size>334</size>
      </method>
      <method name="Int32 &lt;&gt;m__5F()">
        <size>3</size>
      </method>
      <method name="System.String &lt;&gt;m__60()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewInitTest_1&gt;c__async2E">
      <method name="Void MoveNext()">
        <size>1019</size>
      </method>
      <method name="Int32 &lt;&gt;m__61()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__62()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__63()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__64()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__65()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__66()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewInitTest_2&gt;c__async2F">
      <method name="Void MoveNext()">
        <size>738</size>
      </method>
      <method name="System.String &lt;&gt;m__67()">
        <size>6</size>
      </method>
      <method name="System.String &lt;&gt;m__68()">
        <size>6</size>
      </method>
      <method name="Int32 &lt;&gt;m__69()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__6A()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewArrayInitTest_1&gt;c__async30">
      <method name="Void MoveNext()">
        <size>212</size>
      </method>
      <method name="Int32 &lt;&gt;m__6B()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewArrayInitTest_2&gt;c__async31">
      <method name="Void MoveNext()">
        <size>334</size>
      </method>
      <method name="Int32 &lt;&gt;m__6C()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__6D()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewArrayInitTest_3&gt;c__async32">
      <method name="Void MoveNext()">
        <size>232</size>
      </method>
      <method name="Byte &lt;&gt;m__6E()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewArrayInitTest_4&gt;c__async33">
      <method name="Void MoveNext()">
        <size>420</size>
      </method>
      <method name="UInt16 &lt;&gt;m__6F()">
        <size>2</size>
      </method>
      <method name="UInt16 &lt;&gt;m__70()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewArrayInitTest_5&gt;c__async34">
      <method name="Void MoveNext()">
        <size>250</size>
      </method>
      <method name="S &lt;&gt;m__71()">
        <size>18</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;NewArrayInitTest_6&gt;c__async35">
      <method name="Void MoveNext()">
        <size>252</size>
      </method>
      <method name="Int32 &lt;&gt;m__72()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;PropertyTest_1&gt;c__async36">
      <method name="Void MoveNext()">
        <size>201</size>
      </method>
      <method name="Int32 &lt;&gt;m__73()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;PropertyTest_2&gt;c__async37">
      <method name="Void MoveNext()">
        <size>267</size>
      </method>
      <method name="Int32 &lt;&gt;m__74()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;PropertyTest_3&gt;c__async38">
      <method name="Void MoveNext()">
        <size>630</size>
      </method>
      <method name="Int32 &lt;&gt;m__75()">
        <size>3</size>
      </method>
      <method name="Int32 &lt;&gt;m__76()">
        <size>2</size>
      </method>
      <method name="Int32 &lt;&gt;m__77()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;StringConcatTest_1&gt;c__async39">
      <method name="Void MoveNext()">
        <size>441</size>
      </method>
      <method name="System.String &lt;&gt;m__78()">
        <size>6</size>
      </method>
      <method name="System.String &lt;&gt;m__79()">
        <size>6</size>
      </method>
      <method name="System.String &lt;&gt;m__7A()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;UnaryTest_1&gt;c__async3A">
      <method name="Void MoveNext()">
        <size>212</size>
      </method>
      <method name="Int32 &lt;&gt;m__7B()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;UnaryTest_2&gt;c__async3B">
      <method name="Void MoveNext()">
        <size>311</size>
      </method>
      <method name="Nullable`1 &lt;&gt;m__7C()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="Tester+&lt;UnaryTest_3&gt;c__async3C">
      <method name="Void MoveNext()">
        <size>347</size>
      </method>
      <method name="Int32 &lt;&gt;m__7D()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-14.cs">
    <type name="C">
      <method name="System.Threading.Tasks.Task`1[System.Int32] TestResult()">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>172</size>
      </method>
      <method name="System.Threading.Tasks.Task`1[System.Int32] &lt;Main&gt;m__0()">
        <size>27</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C+&lt;TestResult&gt;c__async0">
      <method name="Void MoveNext()">
        <size>191</size>
      </method>
      <method name="Int32 &lt;&gt;m__1()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
    <type name="C+&lt;Main&gt;c__async1">
      <method name="Void MoveNext()">
        <size>202</size>
      </method>
      <method name="Int32 &lt;&gt;m__2()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-async-15.cs">
    <type name="S">
      <method name="Int32 get_Value()">
        <size>7</size>
      </method>
      <method name="Void set_Value(Int32)">
        <size>8</size>
      </method>
      <method name="Void SetValue(Int32)">
        <size>8</size>
      </method>
      <method name="Void .ctor(Int32, String)">
        <size>8</size>
      </method>
    </type>
    <type name="Tester">
      <method name="System.Threading.Tasks.Task`1[T] NewInitTestGen[T]()">
        <size>27</size>
      </method>
      <method name="Int32 Main()">
        <size>63</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Tester+&lt;NewInitTestGen&gt;c__async0`1[T]">
      <method name="Void MoveNext()">
        <size>272</size>
      </method>
      <method name="Int32 &lt;&gt;m__0()">
        <size>3</size>
      </method>
      <method name="Void .ctor()">
        <size>36</size>
      </method>
    </type>
  </test>
  <test name="test-cls-00.cs">
    <type name="CLSCLass_6">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Void add_Disposed(Delegate)">
        <size>19</size>
      </method>
      <method name="Void remove_Disposed(Delegate)">
        <size>19</size>
      </method>
    </type>
    <type name="CLSDelegate">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CLSClass_5">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 Test()">
        <size>2</size>
      </method>
    </type>
    <type name="CLSClass_4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 Test()">
        <size>2</size>
      </method>
    </type>
    <type name="CLSClass_3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 Test_3()">
        <size>2</size>
      </method>
    </type>
    <type name="CLSClass_2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SByte get_XX()">
        <size>2</size>
      </method>
    </type>
    <type name="CLSClass_1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt32 Valid()">
        <size>2</size>
      </method>
    </type>
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt64 Valid()">
        <size>3</size>
      </method>
      <method name="Byte get_XX()">
        <size>2</size>
      </method>
      <method name="UInt32 FooInternal()">
        <size>2</size>
      </method>
      <method name="UInt64 Foo()">
        <size>3</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="CLSClass+C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int64 Foo2()">
        <size>3</size>
      </method>
    </type>
    <type name="CLSClass+C1+C11">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="UInt64 Foo3()">
        <size>3</size>
      </method>
    </type>
    <type name="CLSClass+CLSClass_2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="SByte get_XX()">
        <size>2</size>
      </method>
    </type>
    <type name="Delegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="CLSDelegate Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="CLSDelegate EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-cls-01.cs">
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Byte get_XX()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Big">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Big op_Implicit(UInt32)">
        <size>2</size>
      </method>
    </type>
    <type name="C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void method(UInt32)">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-02.cs">
    <type name="CLSClass">
      <method name="Void .ctor(UInt64)">
        <size>7</size>
      </method>
      <method name="Void .ctor(UInt32)">
        <size>7</size>
      </method>
      <method name="Void set_X_0(UInt64)">
        <size>1</size>
      </method>
      <method name="Void set_Item(UInt64, UInt64)">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="InnerTypeClasss">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Struct Method()">
        <size>10</size>
      </method>
    </type>
  </test>
  <test name="test-cls-03.cs">
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="I1 Foo()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-05.cs">
    <type name="X1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void bb(Boolean)">
        <size>1</size>
      </method>
      <method name="Void BB()">
        <size>1</size>
      </method>
    </type>
    <type name="X4">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void method(Int32)">
        <size>1</size>
      </method>
      <method name="Void method(Boolean)">
        <size>1</size>
      </method>
      <method name="Boolean method()">
        <size>2</size>
      </method>
    </type>
    <type name="BaseClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Int32 Method(Boolean)">
        <size>2</size>
      </method>
      <method name="Void methoD()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="CLSClass op_Implicit(Boolean)">
        <size>7</size>
      </method>
      <method name="CLSClass op_Implicit(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="oBject">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A.C1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B.c1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="c1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CLSClass_2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Method()">
        <size>1</size>
      </method>
      <method name="Void method()">
        <size>1</size>
      </method>
    </type>
    <type name="System.sByte">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="System.Web.HttpBrowserCapabilities">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-cls-06.cs">
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="CLSClass_2">
      <method name="Void .ctor(Int32[,,])">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32[,])">
        <size>7</size>
      </method>
      <method name="Void Test(System.Int32[,], Int32)">
        <size>1</size>
      </method>
      <method name="Void Test(System.Int32[,,], Boolean)">
        <size>1</size>
      </method>
    </type>
    <type name="X1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M2(Int32)">
        <size>1</size>
      </method>
    </type>
    <type name="X2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void M2(Int32 ByRef)">
        <size>1</size>
      </method>
    </type>
    <type name="CLSClass+MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="UInt32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="UInt32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="MyDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="UInt32 Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="UInt32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-cls-07.cs">
    <type name="aa.I1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-10.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-11.cs">
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(IComparable)">
        <size>0</size>
      </method>
    </type>
    <type name="CLSCLass_2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>0</size>
      </method>
    </type>
    <type name="CLSClass_3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>0</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-12.cs">
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-14.cs">
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Error(Boolean)">
        <size>1</size>
      </method>
      <method name="CLSClass op_Implicit(Byte)">
        <size>6</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-15.cs">
    <type name="CLSAttribute_1">
      <method name="Void .ctor(Int32[])">
        <size>7</size>
      </method>
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="CLSAttribute_2">
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="CLSAttribute_3">
      <method name="Void .ctor(Int32[])">
        <size>7</size>
      </method>
    </type>
    <type name="CLSAttribute_4">
      <method name="Void .ctor(Int32[])">
        <size>7</size>
      </method>
    </type>
    <type name="ClassMain">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-16.cs">
    <type name="CLSAttribute">
      <method name="Void .ctor(Boolean[])">
        <size>7</size>
      </method>
    </type>
    <type name="ClassMain">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-17.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-18.cs">
    <type name="Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(System.Int32[])">
        <size>1</size>
      </method>
    </type>
    <type name="CLSClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test(System.Int32[])">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-cls-19.cs">
    <type name="A">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A+PartialClass">
      <method name="Void Method1(Int32)">
        <size>1</size>
      </method>
      <method name="Void Method2(UInt32)">
        <size>1</size>
      </method>
      <method name="Void Method3(UInt32)">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-02.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-03.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-04.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>64</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-05.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-06.cs">
    <type name="MyAssembly01.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyAssembly01.Namespace1.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyAssembly02.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="MyAssembly02.Namespace1.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-07.cs">
    <type name="NS.MyClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 GetInt()">
        <size>6</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-08.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>54</size>
      </method>
    </type>
  </test>
  <test name="test-externalias-09.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-iter-01.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator GetIt()">
        <size>8</size>
      </method>
      <method name="IEnumerable GetIt2()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>172</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>148</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;GetIt2&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>148</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;GetIt2&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-iter-02.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator GetRange()">
        <size>8</size>
      </method>
      <method name="Int32 Main()">
        <size>88</size>
      </method>
    </type>
    <type name="X+&lt;GetRange&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>195</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-03.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable GetIt(System.Int32[])">
        <size>30</size>
      </method>
      <method name="IEnumerable GetMulti(System.Int32[,])">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>247</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>157</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;GetMulti&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>244</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
    <type name="X+&lt;GetMulti&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-iter-04.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable GetRange(Int32, Int32)">
        <size>44</size>
      </method>
      <method name="Void Main()">
        <size>100</size>
      </method>
    </type>
    <type name="X+&lt;GetRange&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>129</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-iter-05.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable GetIt()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>106</size>
      </method>
    </type>
    <type name="List">
      <method name="Void .ctor(Int32)">
        <size>19</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>12</size>
      </method>
      <method name="Void Add(Int32)">
        <size>26</size>
      </method>
      <method name="MyEnumerator GetEnumerator()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>189</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="List+MyEnumerator">
      <method name="Void .ctor(List)">
        <size>15</size>
      </method>
      <method name="System.Object get_Current()">
        <size>24</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>31</size>
      </method>
      <method name="Void Reset()">
        <size>8</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-iter-06.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable Get(Int32)">
        <size>30</size>
      </method>
      <method name="IEnumerable GetS(Int32)">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>403</size>
      </method>
    </type>
    <type name="S+&lt;Get&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>197</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="S+&lt;GetS&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>158</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;Get&gt;c__Iterator2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>153</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;GetS&gt;c__Iterator3">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>158</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="S">
      <method name="IEnumerable Get(Int32)">
        <size>42</size>
      </method>
      <method name="IEnumerable GetS(Int32)">
        <size>30</size>
      </method>
    </type>
    <type name="S+&lt;Get&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
    <type name="S+&lt;GetS&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
    <type name="X+&lt;Get&gt;c__Iterator2">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
    <type name="X+&lt;GetS&gt;c__Iterator3">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-iter-07.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable Foo(Int32)">
        <size>30</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>373</size>
      </method>
    </type>
    <type name="Test+&lt;Foo&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>269</size>
      </method>
      <method name="Void Dispose()">
        <size>119</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-iter-08.cs">
    <type name="Foo">
      <method name="Void .ctor(Int32)">
        <size>14</size>
      </method>
      <method name="Void Dispose()">
        <size>8</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable Test(Int32, Int32)">
        <size>44</size>
      </method>
      <method name="Int32 Main()">
        <size>169</size>
      </method>
    </type>
    <type name="X+&lt;Test&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>390</size>
      </method>
      <method name="Void Dispose()">
        <size>109</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-iter-09.cs">
    <type name="Tester">
      <method name="Void .ctor()">
        <size>153</size>
      </method>
      <method name="IEnumerator GetEnumerator()">
        <size>15</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>268</size>
      </method>
    </type>
    <type name="Tester+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>683</size>
      </method>
      <method name="Void Dispose()">
        <size>103</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-10.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerator get_GetIt()">
        <size>8</size>
      </method>
      <method name="Void set_GetIt(IEnumerator)">
        <size>1</size>
      </method>
      <method name="IEnumerable get_Item(Int32)">
        <size>30</size>
      </method>
      <method name="Void set_Item(Int32, IEnumerable)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>184</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>148</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>167</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-iter-11.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_Hook(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_Hook(System.EventHandler)">
        <size>47</size>
      </method>
      <method name="IEnumerator Pipeline()">
        <size>15</size>
      </method>
      <method name="Void M(System.Object, System.EventArgs)">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>39</size>
      </method>
    </type>
    <type name="X+&lt;Pipeline&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>130</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-12.cs">
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable a()">
        <size>23</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="X+&lt;a&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>200</size>
      </method>
      <method name="Void Dispose()">
        <size>70</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
    </type>
  </test>
  <test name="test-iter-13.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="IEnumerable syntax_error(System.Object, System.Object)">
        <size>16</size>
      </method>
    </type>
    <type name="Test+Yp">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable fail()">
        <size>2</size>
      </method>
    </type>
    <type name="Test+&lt;syntax_error&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>25</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-iter-14.cs">
    <type name="XX">
      <method name="Void Metodo(System.Exception)">
        <size>37</size>
      </method>
      <method name="IEnumerable X()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>65</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="XX+&lt;X&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>106</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-15.cs">
    <type name="Test">
      <method name="IEnumerator GetEnumerator()">
        <size>15</size>
      </method>
      <method name="Void Main()">
        <size>11</size>
      </method>
      <method name="Void Run()">
        <size>177</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>138</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-16.cs">
    <type name="Foo">
      <method name="IEnumerable foo()">
        <size>16</size>
      </method>
      <method name="Int32 Main()">
        <size>67</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Foo+&lt;foo&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>32</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-17.cs">
    <type name="Program">
      <method name="IEnumerable get_Empty()">
        <size>16</size>
      </method>
      <method name="Void Main()">
        <size>61</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Program+&lt;&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>164</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-18.cs">
    <type name="test">
      <method name="IEnumerable testen(Int32)">
        <size>30</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="reflect">
      <method name="Void Main(System.String[])">
        <size>119</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="test+&lt;testen&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>209</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-19.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>66</size>
      </method>
      <method name="IEnumerator GetEnumerator()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>83</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-20.cs">
    <type name="CustomDict">
      <method name="IEnumerator GetEnumerator()">
        <size>15</size>
      </method>
      <method name="Void .ctor()">
        <size>68</size>
      </method>
    </type>
    <type name="Tests">
      <method name="Void Main()">
        <size>7</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="CustomDict+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>92</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-21.cs">
    <type name="X">
      <method name="IEnumerable GetIt(System.Int32[])">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>119</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+A">
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
    </type>
    <type name="X+&lt;GetIt&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>40</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>207</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void &lt;&gt;m__0()">
        <size>22</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-22.cs">
    <type name="Test">
      <method name="Void Main()">
        <size>66</size>
      </method>
      <method name="IEnumerator GetEnumerator()">
        <size>8</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test+&lt;GetEnumerator&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>205</size>
      </method>
      <method name="Void Dispose()">
        <size>83</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-iter-23.cs">
    <type name="X">
      <method name="IEnumerable GetIt2()">
        <size>16</size>
      </method>
      <method name="Int32 Delay()">
        <size>20</size>
      </method>
      <method name="Int32 Main()">
        <size>118</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>12</size>
      </method>
    </type>
    <type name="X+&lt;GetIt2&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>116</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X+&lt;Main&gt;c__AnonStorey1">
      <method name="Void &lt;&gt;m__0(System.Object)">
        <size>28</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-named-01.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>13</size>
      </method>
      <method name="Void .ctor(Object)">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>8</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>12</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>11</size>
      </method>
    </type>
    <type name="XAttribute">
      <method name="Void .ctor(Int32)">
        <size>7</size>
      </method>
    </type>
    <type name="M">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo(Int32)">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>48</size>
      </method>
    </type>
  </test>
  <test name="test-named-02.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void set_Item(Int32, Int32)">
        <size>29</size>
      </method>
      <method name="Int32 get_Item(Int32)">
        <size>28</size>
      </method>
    </type>
    <type name="MyPoint">
      <method name="Void .ctor(Int32, Int32)">
        <size>15</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Decimal Foo(Decimal, Decimal)">
        <size>2</size>
      </method>
      <method name="System.String Bar(Int32, System.String, Char)">
        <size>26</size>
      </method>
      <method name="Int32 Test(Int32, Int32)">
        <size>30</size>
      </method>
      <method name="Int32 Main()">
        <size>272</size>
      </method>
    </type>
  </test>
  <test name="test-named-03.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 TestInt(Int32)">
        <size>3</size>
      </method>
      <method name="Int32 Main()">
        <size>23</size>
      </method>
    </type>
    <type name="C+IntDelegate">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Int32 Invoke(Int32)">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(Int32, System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Int32 EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
  </test>
  <test name="test-named-04.cs">
    <type name="Program">
      <method name="Void Foo2(Int32, Int32 ByRef)">
        <size>40</size>
      </method>
      <method name="Int32 Main()">
        <size>277</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test[T](T[])">
        <size>22</size>
      </method>
      <method name="Void Foo[T](T, T ByRef)">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-named-05.cs">
    <type name="A">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 get_Item(Int32, System.String)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Int32 Foo(Int32)">
        <size>2</size>
      </method>
      <method name="Int32 get_Item(Int32, System.String)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test">
      <method name="Int32 Main()">
        <size>98</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-named-06.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>25</size>
      </method>
      <method name="Int32 Foo(Int32, Int64, System.String)">
        <size>2</size>
      </method>
      <method name="Int32 Foo(Int32, Int64, System.String[])">
        <size>2</size>
      </method>
      <method name="Int32 Foo(Int64, Int32)">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-partial-01.cs">
    <type name="Foo.Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar.Hello">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>8</size>
      </method>
    </type>
    <type name="X.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 FooWorld()">
        <size>6</size>
      </method>
      <method name="Int32 BarWorld()">
        <size>6</size>
      </method>
    </type>
    <type name="Y">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>29</size>
      </method>
    </type>
  </test>
  <test name="test-partial-02.cs">
    <type name="Test1.Base">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test1.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test2.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="ReflectedType">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-03.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>18</size>
      </method>
      <method name="Int32 TestFoo()">
        <size>13</size>
      </method>
      <method name="Int32 TestIFoo(IFoo)">
        <size>8</size>
      </method>
    </type>
    <type name="Test+Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Test.IFoo.Hello(Test)">
        <size>2</size>
      </method>
      <method name="Int32 Hello(Test)">
        <size>2</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>42</size>
      </method>
    </type>
  </test>
  <test name="test-partial-04.cs">
    <type name="B.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void A.IFoo.Hello(IFoo)">
        <size>1</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-05.cs">
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="D">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-06.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Finalize()">
        <size>13</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-07.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestAttribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="Test2Attribute">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>62</size>
      </method>
    </type>
  </test>
  <test name="test-partial-08.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Id()">
        <size>7</size>
      </method>
    </type>
    <type name="PartialAbstractCompilationError">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>54</size>
      </method>
    </type>
  </test>
  <test name="test-partial-09.cs">
    <type name="Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.String get_Id()">
        <size>7</size>
      </method>
    </type>
    <type name="Bar">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
    </type>
    <type name="PartialAbstractCompilationError">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>21</size>
      </method>
    </type>
  </test>
  <test name="test-partial-10.cs">
    <type name="Test2.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>15</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>68</size>
      </method>
    </type>
    <type name="Test3.Foo">
      <method name="Void .cctor()">
        <size>15</size>
      </method>
    </type>
  </test>
  <test name="test-partial-11.cs">
    <type name="StaticClass">
      <method name="System.String Name()">
        <size>6</size>
      </method>
    </type>
    <type name="MainClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean IsStatic(System.Type)">
        <size>73</size>
      </method>
      <method name="Int32 Main()">
        <size>56</size>
      </method>
    </type>
  </test>
  <test name="test-partial-12.cs">
    <type name="Test1.Foo">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="IEnumerable E()">
        <size>16</size>
      </method>
    </type>
    <type name="X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>104</size>
      </method>
    </type>
    <type name="Test1.Foo+&lt;E&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>75</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-partial-13.cs">
    <type name="Test.Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Equals(System.Object)">
        <size>2</size>
      </method>
      <method name="Int32 GetHashCode()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-14.cs">
    <type name="T">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="partial">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void partial(partial)">
        <size>3</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-15.cs">
    <type name="Foo.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="IEnumerable Attempts2()">
        <size>16</size>
      </method>
      <method name="IEnumerable get_Attempts()">
        <size>16</size>
      </method>
      <method name="IEnumerable get_Item(Int32)">
        <size>16</size>
      </method>
    </type>
    <type name="Foo.X+&lt;Attempts2&gt;c__Iterator0">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>36</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Foo.X+&lt;&gt;c__Iterator1">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>36</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Foo.X+&lt;&gt;c__Iterator2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="System.Object System.Collections.IEnumerator.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator System.Collections.IEnumerable.GetEnumerator()">
        <size>7</size>
      </method>
      <method name="Boolean MoveNext()">
        <size>36</size>
      </method>
      <method name="Void Dispose()">
        <size>15</size>
      </method>
      <method name="Void Reset()">
        <size>6</size>
      </method>
    </type>
    <type name="Foo.X+&lt;Attempts2&gt;c__Iterator0">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Foo.X+&lt;&gt;c__Iterator1">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
    <type name="Foo.X+&lt;&gt;c__Iterator2">
      <method name="System.Object System.Collections.Generic.IEnumerator&lt;object&gt;.get_Current()">
        <size>7</size>
      </method>
      <method name="IEnumerator`1 System.Collections.Generic.IEnumerable&lt;object&gt;.GetEnumerator()">
        <size>26</size>
      </method>
    </type>
  </test>
  <test name="test-partial-16.cs">
    <type name="A.C">
      <method name="Void .ctor()">
        <size>23</size>
      </method>
      <method name="Void .cctor()">
        <size>11</size>
      </method>
    </type>
    <type name="B.C2">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Test()">
        <size>2</size>
      </method>
      <method name="System.Object Test_I()">
        <size>2</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-17.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Boolean Check(System.String, System.String[])">
        <size>42</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-18.cs">
    <type name="N.Foo">
      <method name="Void .ctor()">
        <size>17</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-19.cs">
    <type name="Bug.GL">
      <method name="Void Main()">
        <size>7</size>
      </method>
    </type>
    <type name="Bug.GL+Core">
      <method name="Boolean A()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-partial-20.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="B">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void .cctor()">
        <size>7</size>
      </method>
    </type>
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
    </type>
  </test>
  <test name="test-partial-21.cs">
    <type name="Mono.Sms.Main">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Test()">
        <size>42</size>
      </method>
    </type>
    <type name="Mono.Sms.Contacts">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void add_ContactsEventHandler(Mono.Sms.Contacts+ContactsHandler)">
        <size>47</size>
      </method>
      <method name="Void remove_ContactsEventHandler(Mono.Sms.Contacts+ContactsHandler)">
        <size>47</size>
      </method>
      <method name="Void Test()">
        <size>12</size>
      </method>
    </type>
    <type name="Mono.Sms.Core.Agenda">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void AddContact()">
        <size>1</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
    <type name="Mono.Sms.Contacts+ContactsHandler">
      <method name="Void .ctor(Object, IntPtr)">
        <size>0</size>
      </method>
      <method name="Void Invoke()">
        <size>0</size>
      </method>
      <method name="IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)">
        <size>0</size>
      </method>
      <method name="Void EndInvoke(IAsyncResult)">
        <size>0</size>
      </method>
    </type>
    <type name="Mono.Sms.Main">
      <method name="Void &lt;Test&gt;m__0()">
        <size>6</size>
      </method>
    </type>
  </test>
  <test name="test-partial-22.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-partial-23.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Partial_A()">
        <size>15</size>
      </method>
      <method name="Void Partial_B()">
        <size>15</size>
      </method>
      <method name="Void Partial_S()">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>52</size>
      </method>
    </type>
  </test>
  <test name="test-partial-24.cs">
    <type name="N.C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-partial-25.cs">
    <type name="C">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Partial(Int32)">
        <size>14</size>
      </method>
      <method name="Int32 Main()">
        <size>8</size>
      </method>
    </type>
  </test>
  <test name="test-partial-26.cs">
    <type name="ConsoleApplication1.X">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Foo()">
        <size>1</size>
      </method>
    </type>
    <type name="ConsoleApplication1.Program">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>98</size>
      </method>
    </type>
    <type name="ConsoleApplication1.Y">
      <method name="Void Foo()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-partial-27.cs">
    <type name="C">
      <method name="Int32 Main()">
        <size>2</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-partial-28.cs">
    <type name="A">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
    <type name="TestCase">
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-partial-29.cs">
    <type name="C">
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-var-01.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>47</size>
      </method>
    </type>
  </test>
  <test name="test-var-02.cs">
    <type name="Class1">
      <method name="Void .ctor()">
        <size>15</size>
      </method>
      <method name="Boolean Method()">
        <size>2</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>126</size>
      </method>
    </type>
    <type name="Test+Class2">
      <method name="Void .ctor()">
        <size>15</size>
      </method>
      <method name="Boolean Method()">
        <size>2</size>
      </method>
    </type>
  </test>
  <test name="test-var-03.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>177</size>
      </method>
    </type>
  </test>
  <test name="test-var-05.cs">
    <type name="MyClass">
      <method name="Void .ctor(String)">
        <size>14</size>
      </method>
      <method name="Void Dispose()">
        <size>12</size>
      </method>
    </type>
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>66</size>
      </method>
    </type>
  </test>
  <test name="test-var-06.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Int32 Main()">
        <size>55</size>
      </method>
    </type>
  </test>
  <test name="test-var-07.cs">
    <type name="Test">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void var()">
        <size>1</size>
      </method>
      <method name="Int32 Main()">
        <size>38</size>
      </method>
    </type>
    <type name="var">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-var-08.cs">
    <type name="X">
      <method name="Void .ctor(Int32, Int32)">
        <size>10</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
    </type>
  </test>
  <test name="test-var-09.cs">
    <type name="A">
      <method name="Int32 Main()">
        <size>12</size>
      </method>
      <method name="Void .ctor()">
        <size>7</size>
      </method>
    </type>
  </test>
  <test name="test-xml-042.cs">
    <type name="TestNamespace.TestClass">
      <method name="Void .ctor()">
        <size>7</size>
      </method>
      <method name="Void Main()">
        <size>1</size>
      </method>
      <method name="Void FunctionWithParameter(Int32 ByRef, Int32 ByRef)">
        <size>7</size>
      </method>
    </type>
  </test>
</tests>